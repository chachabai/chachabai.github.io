<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dna049</title>
  <icon>https://dna049.com/icon.png</icon>
  <subtitle>love math love zly</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dna049.com/"/>
  <updated>2021-05-07T08:16:09.030Z</updated>
  <id>https://dna049.com/</id>
  
  <author>
    <name>dna049</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>整体二分</title>
    <link href="https://dna049.com/overallDichotomy/"/>
    <id>https://dna049.com/overallDichotomy/</id>
    <published>2021-05-06T15:22:15.000Z</published>
    <updated>2021-05-07T08:16:09.030Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;整体二分是 由 许昊然 于 2013 年集训队论文《浅谈数据结构题的几个非经典解法》提出的一类&lt;strong&gt;离线算法&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习资料：&lt;a href=&quot;https://oi-wiki.org/misc/parallel-binsearch/&quot;
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>可持久化算法</title>
    <link href="https://dna049.com/persistableAlgorithm/"/>
    <id>https://dna049.com/persistableAlgorithm/</id>
    <published>2021-05-06T10:41:57.000Z</published>
    <updated>2021-05-06T16:37:06.057Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;可持久化数据结构 (Persistent data structure) 总是可以保留每一个历史版本，并且支持操作的不可变特性 (immutable)。(OI-wiki 原话)，然而实际上我们常见的可持久化数据结构都是依赖于可持续化线段树。&lt;/p&gt;
&lt;p&gt;学习资料：&lt;a
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>CF gym 103048 H. Histogram in 3D</title>
    <link href="https://dna049.com/cfgym103048H/"/>
    <id>https://dna049.com/cfgym103048H/</id>
    <published>2021-04-28T11:39:12.000Z</published>
    <updated>2021-05-07T12:19:31.369Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;二维直方图最大矩形是一个特别经典的问题，利用单调栈即可在 $O(n)$ 复杂度解决，那么三维的呢？你会发现无从下手（暴力方法就不说了，没啥意思，最多就是多线程处理）。此题跨度之长，因此需要补的东西之多，值得单独写一篇博文。&lt;/p&gt;
&lt;h2 id=&quot;时间线&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>莫队</title>
    <link href="https://dna049.com/MoAlgorithm/"/>
    <id>https://dna049.com/MoAlgorithm/</id>
    <published>2021-04-22T04:59:42.000Z</published>
    <updated>2021-04-25T13:37:35.303Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;首先莫队算法是一个离散算法，复杂度 $O(n \sqrt{m})$ 一般用于 $m$ 次长为 $n$ 的区间问题。&lt;/p&gt;
&lt;h2 id=&quot;普通莫队&quot;&gt;&lt;a href=&quot;#普通莫队&quot; class=&quot;headerlink&quot; title=&quot;普通莫队&quot;&gt;&lt;/a&gt;&lt;a
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 字符串模板</title>
    <link href="https://dna049.com/string/"/>
    <id>https://dna049.com/string/</id>
    <published>2021-02-10T01:47:12.000Z</published>
    <updated>2021-02-19T10:44:36.576Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;本篇内容为 &lt;a href=&quot;https://oi-wiki.org/string&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;oi-wiki 字符串篇&lt;/a&gt; 的学习笔记，&lt;a
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++ 图论模板</title>
    <link href="https://dna049.com/graph/"/>
    <id>https://dna049.com/graph/</id>
    <published>2021-01-26T08:13:41.000Z</published>
    <updated>2021-05-09T16:49:58.726Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;图论还是一个特别强的工具。 为什么没有图论的 STL？&lt;a href=&quot;https://github.com/izlyforever/cf/blob/master/include/graph.hpp&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
      <category term="图论" scheme="https://dna049.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>线性规划的单纯形法</title>
    <link href="https://dna049.com/simplex/"/>
    <id>https://dna049.com/simplex/</id>
    <published>2020-11-06T12:40:58.000Z</published>
    <updated>2020-11-10T15:46:08.074Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;在 Codeforces
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>$R, R[x; \delta]$ 的素理想关系及 Baire 空间</title>
    <link href="https://dna049.com/primeInOperatorRing/"/>
    <id>https://dna049.com/primeInOperatorRing/</id>
    <published>2020-10-10T11:01:24.000Z</published>
    <updated>2021-01-16T15:38:54.128Z</updated>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="Encrypt" scheme="https://dna049.com/tags/Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>$R, R[x; \sigma], R[x^{\pm}; \sigma]$ 的素理想关系</title>
    <link href="https://dna049.com/primeInPolyRing/"/>
    <id>https://dna049.com/primeInPolyRing/</id>
    <published>2020-09-30T04:38:02.000Z</published>
    <updated>2020-12-28T10:09:16.355Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;该内容来自 《Noncommutative Noetherian Ring》 P392 - P400&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;约定记号，$\sigma$ 是环 $R$ 的一个自同构，$S = R[x; \sigma], T =
        
      
    
    </summary>
    
    
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>The Dixmier-Moeglin Equivalence</title>
    <link href="https://dna049.com/DixmierMoeglinEquivalence/"/>
    <id>https://dna049.com/DixmierMoeglinEquivalence/</id>
    <published>2020-08-24T09:56:15.000Z</published>
    <updated>2021-04-15T02:49:54.552Z</updated>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="Encrypt" scheme="https://dna049.com/tags/Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>butterfly 主题</title>
    <link href="https://dna049.com/butterfly/"/>
    <id>https://dna049.com/butterfly/</id>
    <published>2020-08-20T09:19:44.000Z</published>
    <updated>2020-11-10T12:58:31.141Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;再次换主题，一个月前（2020/7/20）看到了 Butterfly 主题，十分心动，知道前两天才开始换从 next 换到 Butterfly。Butterfly 主题真的太美了，现在看唯一的缺点就是不支持 &lt;code&gt;&amp;lt;!-- more --&amp;gt;&lt;/code&gt;
        
      
    
    </summary>
    
    
    
      <category term="Theme" scheme="https://dna049.com/tags/Theme/"/>
    
  </entry>
  
  <entry>
    <title>从数列极限到点集拓扑学(from array limit to point set topology)</title>
    <link href="https://dna049.com/pointSetTopology/"/>
    <id>https://dna049.com/pointSetTopology/</id>
    <published>2020-07-29T02:07:20.000Z</published>
    <updated>2021-04-12T02:24:03.973Z</updated>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="Encrypt" scheme="https://dna049.com/tags/Encrypt/"/>
    
  </entry>
  
  <entry>
    <title>C++ 代码规范</title>
    <link href="https://dna049.com/codeStyle/"/>
    <id>https://dna049.com/codeStyle/</id>
    <published>2020-07-17T17:25:02.000Z</published>
    <updated>2021-03-19T08:08:25.919Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;此规范参考：Codeforces 上 &lt;a href=&quot;http://codeforces.com/profile/jiangly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jiangly&lt;/a&gt; 的码风，&lt;a
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>dna049 的 C++ 模板</title>
    <link href="https://dna049.com/templateOfCpp/"/>
    <id>https://dna049.com/templateOfCpp/</id>
    <published>2020-07-17T17:20:02.000Z</published>
    <updated>2021-05-07T07:51:54.389Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;此处只包含通用代码块，以下为其它内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/codeStyle/&quot; title=&quot;C++ 代码规范&quot;&gt;C++ 代码规范&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/allTemplate/&quot; title=&quot;C++ 万能模板&quot;&gt;C++ 万能模板&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/graph/&quot; title=&quot;C++ 图论模板&quot;&gt;C++ 图论模板&lt;/a&gt;（因为图论内容实在太多）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/string/&quot; title=&quot;C++ 字符串模板&quot;&gt;C++ 字符串模板&lt;/a&gt;（内容相对独立）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/stl/&quot; title=&quot;STL 和 C++17 学习记录&quot;&gt;STL 和 C++17 学习记录&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;欢迎使用或转载代码块，唯一要求添加一行注释&lt;/strong&gt;: &lt;code&gt;https://dna049.com&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编译器比你想象中的聪明，所以尽量写 &lt;strong&gt;编译器好优化&lt;/strong&gt; 并且 &lt;strong&gt;易读&lt;/strong&gt; 的代码，很多位运算，除法都是可以被优化的！&lt;br&gt;优质的代码本身就是一种解释，添加完全不必要的注释只会让人恶心&lt;br&gt;以后尽量使用 &lt;code&gt;vector&lt;/code&gt; 而非数组，结合 &lt;code&gt;C++17&lt;/code&gt; 特征，可以简化代码且便于编译器优化！&lt;br&gt;以前觉得 &lt;code&gt;main&lt;/code&gt; 函数 &lt;code&gt;return 0&lt;/code&gt; 只是标准写法，现在(2020/5/22)才知道能返回就能提前优雅的结束，并且可以判断是否正常结束！&lt;br&gt;全局变量数组元素自动默认初始化为 0，局部变量要加 &lt;code&gt;= {}&lt;/code&gt; 才会初始化为 0&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>万能通用模板</title>
    <link href="https://dna049.com/allTemplate/"/>
    <id>https://dna049.com/allTemplate/</id>
    <published>2020-07-17T17:10:02.000Z</published>
    <updated>2020-12-08T11:08:18.942Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;比赛版&quot;&gt;&lt;a href=&quot;#比赛版&quot; class=&quot;headerlink&quot; title=&quot;比赛版&quot;&gt;&lt;/a&gt;比赛版&lt;/h2&gt;&lt;h3 id=&quot;Case&quot;&gt;&lt;a href=&quot;#Case&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>STL 和 C++17 学习记录</title>
    <link href="https://dna049.com/stl/"/>
    <id>https://dna049.com/stl/</id>
    <published>2020-07-17T17:00:02.000Z</published>
    <updated>2021-05-10T10:58:07.948Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;为了更加 &lt;strong&gt;优雅&lt;/strong&gt; 的写 C++，在学了一点 C++17 皮毛之后，重新探索了一下 C++
        
      
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>快速数论变换</title>
    <link href="https://dna049.com/nft/"/>
    <id>https://dna049.com/nft/</id>
    <published>2020-06-01T21:45:09.000Z</published>
    <updated>2021-03-17T17:01:04.974Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;快速 Fourier 变换，被称为 20 世纪最伟大的十大算法之一。所以很多软件都有对应的 FFT，例如 Python 的 &lt;code&gt;scipy.fftpack&lt;/code&gt; 中就有关于 FFT 的包。所以个人写 FFT 就没有那么必要了。但是 NFT 的包一般都没多少，而且会写 NFT 必然就会写 FFT 了。大约在 5 年前就写过 NFT 的 C++ 代码，现在一看依然不记得蝶式映射到底是咋想的，&lt;del&gt;所以想独立思考出整个过程&lt;/del&gt;(失败）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此博文特别划水，建议直接阅读 &lt;a href=&quot;http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;miskcoo 博文：从多项式乘法到快速傅里叶变换&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现 NFT 一个很大的限制就是你只能在 &lt;code&gt;NFT-friendly&lt;/code&gt; 的域（例如 $\mod 998244353 = 119 \cdot2^{23}$，原根为 $3$ ）或者模很小的数的环中处理。即环中所有运算放在整数环中都不会超过选择的大基底。&lt;/p&gt;
&lt;p&gt;选择 $n$ 个 &lt;code&gt;NFT-friendly&lt;/code&gt; 的大基底 $p_1,\cdots, p_n$ 使得 $p_1\cdots p_n$ 大于 ans 的上界，然后再用 &lt;a href=&quot;/chineseRemainTheorem/&quot; title=&quot;中国剩余定理&quot;&gt;中国剩余定理&lt;/a&gt; 就可以把 ans 搞出来了。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="SageMath" scheme="https://dna049.com/tags/SageMath/"/>
    
  </entry>
  
  <entry>
    <title>$x^2 \equiv a \mod n$ 何时有解</title>
    <link href="https://dna049.com/quadraticModEquation/"/>
    <id>https://dna049.com/quadraticModEquation/</id>
    <published>2020-05-28T13:21:52.000Z</published>
    <updated>2020-08-22T11:21:10.828Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;显然，我们只需考虑 $0 \leq a &amp;lt; n$ 的情形。这个问题应该很早就被人考虑好了，不过无所谓吧（反正只是个博文而已）。以下内容都是独立完成的。并可看作 &lt;a href=&quot;/quadraticResidueAndGaussReciprocity/&quot; title=&quot;二次剩余和 Gauss 互反律&quot;&gt;二次剩余和 Gauss 互反律&lt;/a&gt; 这篇博文的延续。最后再给出方程的一个解（如果存在的话）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="SageMath" scheme="https://dna049.com/tags/SageMath/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 汇总</title>
    <link href="https://dna049.com/codeforces/"/>
    <id>https://dna049.com/codeforces/</id>
    <published>2020-05-22T09:32:11.000Z</published>
    <updated>2021-05-13T13:34:09.409Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主线任务：上 2100，支线任务：成为一名优秀的代码攻击者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近感觉自己又行了。就很想重新开始打 &lt;a href=&quot;https://codeforces.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces&lt;/a&gt;，这里罗列一下从 2020/05/16 开始提交的(不是特别水的）AC 代码。想有生之年上一次黄，先定个小目标上个 1900（最高 1854，当前 1829，换号了！新账号于 2020/11/18 达成 1900+ 成就，紫名:)也太好看了吧）菜鸡 dna049 &lt;del&gt;加油&lt;/del&gt; 下班了！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不再打除了 codeforces, atcoder, 洛谷之外的日常比赛。有空整理一下比赛，好的题目或比赛记得 star。&lt;br&gt;&lt;strong&gt;优雅的代码极大的避免了低级错误&lt;/strong&gt;，边界处理至少占三分之一的工作量！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不要急着写代码，不要急着写代码，不要急着写代码，重要的事情说三遍！！！&lt;/strong&gt;&lt;br&gt;优先做 Codeforces, Atcoder, 其它平台的题目可以在 vjudge 中提交（洛谷和 UOJ 除外)，POJ 和 HDU 不在搞了。&lt;br&gt;不要为了补题，Rating，浪费太多的时间&lt;br&gt;把一个问题写成简洁清晰的代码，才算是真的理解了问题！代码能力是快速综合规划的能力。&lt;br&gt;至少先上 2100，再去写介绍性博客，分低会影响博客的质量！至少上 2100 才配出题&lt;br&gt;不再补比赛中没有考虑过的题&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="图论" scheme="https://dna049.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="Codeforces" scheme="https://dna049.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://dna049.com/dynamicProgramming/"/>
    <id>https://dna049.com/dynamicProgramming/</id>
    <published>2020-05-21T15:36:13.000Z</published>
    <updated>2021-05-07T11:26:27.598Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;动态规划是研究一大类问题（特别是最值问题）的一种思路。从大二刚开始 ICPC 竞赛的时候第一次遇到，到大三学运筹学系统的了解，再到后来一直成为解决问题的一种思考方式。可以说动态规划真的是万金油的方法。&lt;/p&gt;
&lt;p&gt;计算机领域（或者说博弈论）中的动态规划，就如同数学中的数学归纳法，一样重要。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;运用动态规划的能力，就好比武侠小说中的内功，是随着时间慢慢累积的。&lt;br&gt;进阶可看 &lt;a href=&quot;https://codeforces.com/blog/entry/47764&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zscoder 的博文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="C++" scheme="https://dna049.com/tags/C/"/>
    
      <category term="Math" scheme="https://dna049.com/tags/Math/"/>
    
      <category term="运筹学" scheme="https://dna049.com/tags/%E8%BF%90%E7%AD%B9%E5%AD%A6/"/>
    
      <category term="动态规划" scheme="https://dna049.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>

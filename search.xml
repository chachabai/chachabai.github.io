<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Codeforces 汇总</title>
    <url>/codeforces/</url>
    <content><![CDATA[<p>最近感觉自己又行了。就很想重新开始打 <a href="https://codeforces.com" target="_blank" rel="noopener">Codeforces</a>，这里罗列一下从 2020/05/16 开始提交的(不是特别水的）AC 代码。想有生之年上一次黄，先定个小目标上个 1900（最高 1854，当前 1829，换号了！新账号于 2020/11/18 达成 1900+ 成就，紫名:)也太好看了吧）菜鸡 dna049 <del>加油</del> 下班了！</p>
<blockquote>
<p>不再打除了 codeforces, atcoder, 洛谷之外的日常比赛。有空整理一下比赛，好的题目或比赛记得 star。<br><strong>优雅的代码极大的避免了低级错误</strong>，边界处理至少占三分之一的工作量！</p>
<p><strong>不要急着写代码，不要急着写代码，不要急着写代码，重要的事情说三遍！！！</strong><br>优先做 Codeforces, Atcoder, 其它平台的题目可以在 vjudge 中提交（洛谷和 UOJ 除外)，POJ 和 HDU 不在搞了。<br>不要为了补题，Rating，浪费太多的时间<br>把一个问题写成简洁清晰的代码，才算是真的理解了问题！代码能力是快速综合规划的能力。<br>至少先上 2100，再去写博客，分低会影响博客的质量！</p>
</blockquote>
<a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>珍惜每一场比赛，不要怕掉分，<strong>提前 6 分钟</strong>，准备以下事情（加号表示有用次数，2021 年开始计算）：</p>
<ol>
<li>如果没注册，赶紧注册。身体状态不好时，用小号打，上分不易。+2</li>
<li>闹钟（每个题不要长期思考，读完题没明显思路直接跳！只要不被卡题，我上 2100 应该不难，所以闹钟很重要） +2</li>
<li>纸和笔（ipad + pencil + 闹钟 亦可）+0（表示：永远有用）</li>
<li>SageMath，用于一些数据测试</li>
<li>打开自己的网站用于模板 +0</li>
<li>打开 VScode，查看 CF 比赛号，开始 <code>cf race CF 比赛号</code> +0</li>
<li>认真读题，特别是样例特别少的时候！</li>
<li>计算式要列的清晰，并且最好是好输入的（think twice, code once)。+2</li>
<li>不要膨胀，老老实实先做简单题，没思路就直接跳过（拒绝拖延，但是一定记得要回来把简单题补了！）</li>
<li>有思路赶紧写（但是思路清晰再写！无论问题难与否，大家都是一样的，打好自己！），不要觉得时间很多</li>
<li>开 room hack！锁题前检查边界，不要最后 RE 了（根据做题时，可能的 hack 点来找 hack，可以现在 EDU 场练习如何 hack。比赛结束看看自己 room 有那些没有过最终测试的。通用 hack 点：答案超了 long long，用 ceil 向上取整。注意有些狗喜欢 <code>#define int long long</code>）</li>
<li>前面题目被卡会特别影响做后面题的心态！</li>
<li>注意到题目中简单的性质结论都应该写下来，拼一下可能就知道怎么做了。注意特殊问题的特殊解法。</li>
<li>WA 之后，很可能方法错了，或者代码有问题，没有本质修改的话，不要乱提交！</li>
<li>有子问题的题目，两个都会做，先交分数小的。</li>
<li><strong>不要写这样的代码</strong>：<code>if(a[j++]), while(a[j++])</code> 这种数列下标自加，特别容易出问题还不好查，特别在判断语句中。</li>
<li>$N=10^{18}$ 一般会有公式， $N = 2 \cdot 10^5$ 一般会用到排序、树状数组，线段树，等一系列 $O(n \log n)$ 算法，$N=1000$ 一般会用到 $dp$。模 <code>998244353</code> 可能会用到 NFT。</li>
</ol>
<p>Codeforces 比赛规则：每题有基础分数，每题的分数根据时间线性递减到一半（所以有些大佬先做 CD，再做 AB），在最后一次提交前每次提交减 50 分，然后按照分数排名，有 hack，但是只有你过了初例并且 <strong>锁定题目</strong> 才能 hack。<br>Eductional 比赛规则：与 ICPC 一致，不过一次非 AC 提交罚时为 10 分钟（ICPC 20 分钟），难度比 Div2 稍难，需要更细心。</p>
<p>Codeforces Gobal Round：<del>目前实力不支持做这个，容易掉分！</del> 正常发挥都是能加分的！</p>
<p><a href="https://codeforces.com/problemset/standings?friendsEnabled=on" target="_blank" rel="noopener">查看 Codeforces 上的过题数</a>，<a href="https://codeforces.com/contests/with/dna049" target="_blank" rel="noopener">查看比赛 rating 折线</a>，开始使用 <a href="https://github.com/xalanq/cf-tool/blob/master/README_zh_CN.md" target="_blank" rel="noopener">cf-tool</a> + WSL 打比赛（真香）。</p>
<h2 id="题集"><a href="#题集" class="headerlink" title="题集"></a>题集</h2><h3 id="1480C：交互题，找一个排列中的极小值点"><a href="#1480C：交互题，找一个排列中的极小值点" class="headerlink" title="1480C：交互题，找一个排列中的极小值点"></a><a href="https://codeforces.com/contest/1480/problem/C" target="_blank" rel="noopener">1480C</a>：交互题，找一个排列中的极小值点</h3><p>首先让左边相邻两个降序，右边相邻两个升序（否则直接结束了），然后二分比较 m 与 m + 1 即可</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> query = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[x]) <span class="keyword">return</span> a[x];</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; x &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> r;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	a[<span class="number">1</span>] = query(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	a[<span class="number">2</span>] = query(<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (a[<span class="number">2</span>] &gt; a[<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	a[n] = query(n);</span><br><span class="line">	<span class="keyword">if</span> (a[n] == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">	a[n - <span class="number">1</span>] = query(n - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (a[n - <span class="number">1</span>] &gt; a[n]) <span class="keyword">return</span> n;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">2</span>, r = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		a[m] = query(m);</span><br><span class="line">		a[m + <span class="number">1</span>] = query(m + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (a[m] &gt; a[m + <span class="number">1</span>]) &#123;</span><br><span class="line">			l = m + <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			r = m;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> r = solve();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1481E：经典-DP"><a href="#1481E：经典-DP" class="headerlink" title="1481E：经典 DP"></a><a href="https://codeforces.com/contest/1481/problem/E" target="_blank" rel="noopener">1481E</a>：经典 DP</h3><p>题意：每次从数列 a 中取出一个数放在尾部，使得相同的数字挨在一起，问最少需要的次数。</p>
<p>做法：首先反过来考虑，看最多能有多少数维持不动（一下子简单了不少，如果直接处理原问题，会要考虑移动顺序就很难考虑了）我们显然是从后往前好考虑一些，我们设 <code>dp[i]</code> 为 $[i, n]$ 中最多维持不动的数。我们考虑状态转移，我们可以删除第 i 个数，此时 <code>dp[i] = dp[i + 1]</code>，否则我们保留 $[i, n]$ 中所有值为 <code>a[i]</code> 的数，如果更进一步 $[1, i - 1]$ 中不再出现 <code>a[i]</code>，那么我们可以把最后一个出现 <code>a[i]</code> 后面的也拿到，反之不能拿到的原因是，前面的 <code>a[i]</code> 要删掉要放在后面，因此，最后一个 <code>a[i]</code> 后面什么都不能放。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;int&gt; a(n + 1), l(n + 1), r(n + 1), cnt(n + 1), dp(n + 2);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		r[a[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) l[a[i]] = i;</span><br><span class="line">	<span class="comment">// dp[i] 表示 [i, n] 中能保存下来最多的数</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		++cnt[a[i]];</span><br><span class="line">		<span class="keyword">if</span> (l[a[i]] == i) &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">max</span>(dp[i + <span class="number">1</span>], cnt[a[i]] + dp[r[a[i]] + <span class="number">1</span>]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">max</span>(dp[i + <span class="number">1</span>], cnt[a[i]]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n - dp[<span class="number">1</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="708C：经典换根-DP"><a href="#708C：经典换根-DP" class="headerlink" title="708C：经典换根 DP"></a><a href="https://codeforces.com/problemset/problem/708/C" target="_blank" rel="noopener">708C</a>：经典换根 DP</h3><p>题意：是否能过通过一次调整（删一条边，加一条边）使得删除该点后的最大连通分支节点个数不超过 $\frac{n}{2}$</p>
<p>做法：首先考虑节点 1 为根，如果所有与 1 相连的子树的节点数均不超过 $\frac{n}{2}$，那么不用操作，已经可以作为重心了，否则最多只有一个子树的节点数大于 $\frac{n}{2}$，那么我们需要在这个子树中找一个节点个数不超过 $\frac{n}{2}$ 的子树，把它删了然后剩下的节点个数还要不超过 $\frac{n}{2}$（自然删节点最多的那个）。所以需要预处理出这个值。然后需要考虑换根（状态转移）。现在假设 fa 的结果已经搞定了，我们要看它的儿子节点 u，如果 u 的所有儿子的节点数都小于 $\frac{n}{2}$，那么我们要看 <code>sz[1] - sz[u]</code> 是否也小于 $\frac{n}{2}$，如果是不用操作了，否则，我们就要看抛弃以 v 为节点的子树后，整棵树节点不超过 $\frac{n}{2}$ 的最大子树（为此，我们需要预处理最大子儿子和次大子儿子）。如果 u 有个儿子节点数大于 $\frac{n}{2}$，那么和 1 一样判断即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// subtree[u] 表示以 u 为根的子树中 sz 不超过 n / 2 中最大的子子树的大小。</span></span><br><span class="line">	<span class="comment">// mx[u], mmx[u] 分别表示以表示以 u 为根的子树中 sz 不超过 n / 2 的中最大和次大的真子子树的大小。</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n + 1), mx(n + 1), mmx(n + 1), subtree(n + 1);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			pdfs(v, u);</span><br><span class="line">			sz[u] += sz[v];</span><br><span class="line">			subtree[u] = <span class="built_in">std</span>::<span class="built_in">max</span>(subtree[u], subtree[v]);</span><br><span class="line">			<span class="keyword">if</span> (subtree[v] &gt; mx[u]) &#123;</span><br><span class="line">				mmx[u] = mx[u];</span><br><span class="line">				mx[u] = subtree[v];</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (subtree[v] &gt; mmx[u]) &#123;</span><br><span class="line">				mmx[u] = subtree[v];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (sz[u] &lt;= n / <span class="number">2</span>) subtree[u] = sz[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	std::vector&lt;int&gt; mxsub(n + 1), ans(n + 1);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		ans[u] = <span class="number">1</span>;</span><br><span class="line">		mxsub[u] = mxsub[fa];</span><br><span class="line">		<span class="keyword">if</span> (subtree[u] == mx[fa]) &#123;</span><br><span class="line">			mxsub[u] = <span class="built_in">std</span>::<span class="built_in">max</span>(mxsub[fa], mmx[fa]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mxsub[u] = <span class="built_in">std</span>::<span class="built_in">max</span>(mxsub[fa], mx[fa]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (sz[<span class="number">1</span>] - sz[u] &lt;= n / <span class="number">2</span>) mxsub[u] = <span class="built_in">std</span>::<span class="built_in">max</span>(mxsub[u], sz[<span class="number">1</span>] - sz[u]);</span><br><span class="line">		<span class="keyword">if</span> (sz[u] &lt;= n / <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (sz[<span class="number">1</span>] - sz[u] - mxsub[u] &gt; n / <span class="number">2</span>) ans[u] = <span class="number">0</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; sz[v] &gt; n / <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (sz[v] - subtree[v] &gt; n / <span class="number">2</span>) ans[u] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) dfs(v, u);</span><br><span class="line">	&#125;;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1324F：经典换根-DP"><a href="#1324F：经典换根-DP" class="headerlink" title="1324F：经典换根 DP"></a><a href="https://codeforces.com/problemset/problem/1324/F" target="_blank" rel="noopener">1324F</a>：经典换根 DP</h3><p>题意：以树的某个节点为根的子树的白色节点减去黑色节点的个数的最大值</p>
<p>做法：首先以 1 为根预处理所有子树的答案，然后分情况状态转移。具体看子节点是否对父节点做了贡献。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="number">0</span>) a[i] = <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		ans[u] = a[u];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (ans[v] &gt; <span class="number">0</span>) ans[u] += ans[v];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">// 预处理出 1 为根的结果，然后进行换根 DP</span></span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ans[v] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (ans[u] &gt; <span class="number">0</span>) ans[v] += ans[u];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				ans[v] = <span class="built_in">std</span>::<span class="built_in">max</span>(ans[v], ans[u]);</span><br><span class="line">			&#125;</span><br><span class="line">			dfs(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1476D：模拟题"><a href="#1476D：模拟题" class="headerlink" title="1476D：模拟题"></a><a href="https://codeforces.com/contest/1476/problem/D" target="_blank" rel="noopener">1476D</a>：模拟题</h3><p>题意：$n + 1$ 个点排成一排，中间有 n 跳有向边，问从 i 点出发最多可以经过多少个点（没走一次，所有边都会反向一次）</p>
<p>做法：首先，如果不反向，显然可以从左到右，从右到左跑两次得到结果。现在反向了，我们可以把奇数边反向，或者把偶数边反向，两个都需要，用数组好标号。注意逻辑要清晰了，怎么存都想清楚了，列好式子再写代码就会很优雅。</p>
<blockquote>
<p><del>下面代码写的相当优雅！</del> 看了 <a href="https://codeforces.com/contest/1476/submission/105866936" target="_blank" rel="noopener">WZYYN 的代码</a> 发现他比我这代码优雅多了。。直接 <code>f[0], g[0]</code> 表示往前往后没改变时的答案，<code>f[1], g[1]</code> 表示改变了的答案。然后递推就好了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line">std::pair&lt;std::vector&lt;int&gt;, std::vector&lt;int&gt;&gt; f(std::string s) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	std::vector&lt;int&gt; a(n + 1, 0), b(n + 1, 0);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'L'</span>) a[i + <span class="number">1</span>] = a[i] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'R'</span>) b[i] = b[i + <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;a, b&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> ss[<span class="number">2</span>];</span><br><span class="line">		ss[<span class="number">0</span>] = ss[<span class="number">1</span>] = s;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i += <span class="number">2</span>) ss[<span class="number">0</span>][i] = (ss[<span class="number">0</span>][i] == <span class="string">'L'</span> ? <span class="string">'R'</span> : <span class="string">'L'</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) ss[<span class="number">1</span>][i] = (ss[<span class="number">1</span>][i] == <span class="string">'L'</span> ? <span class="string">'R'</span> : <span class="string">'L'</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">2</span>], b[<span class="number">2</span>];</span><br><span class="line">		<span class="built_in">std</span>::tie(a[<span class="number">0</span>], b[<span class="number">0</span>]) = f(ss[<span class="number">0</span>]);</span><br><span class="line">		<span class="built_in">std</span>::tie(a[<span class="number">1</span>], b[<span class="number">1</span>]) = f(ss[<span class="number">1</span>]);</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">'L'</span>) &#123;</span><br><span class="line">				c[i + <span class="number">1</span>] += a[i &amp; <span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				c[i] += b[i &amp; <span class="number">1</span>][i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gym-102823：NFT-生成函数"><a href="#gym-102823：NFT-生成函数" class="headerlink" title="gym 102823：NFT + 生成函数"></a><a href="https://codeforces.com/gym/102823/problem/B" target="_blank" rel="noopener">gym 102823</a>：NFT + 生成函数</h3><p>首先注意到最终结果必然是形式为 $r[i] = c_0 A[i] + \cdots c_{n - 1 - i} A[n - 1]$ 的样子，并且这些 $c_i$ 都只和 <code>m, L</code> 有关，实际上它们的系数不难看出是 $(1 + x + \cdot x^{L- 1})^m$ 的系数，并且我们计算的时候只要模 $x^n$ 即可。注意到上式可以直接生成函数开方直接求解，复杂度为 $O(n \log n \log m)$，当然了注意到 $(1 + x + \cdot x^{L- 1})^m = (1 - x^L)^m (1 - x)^{-m}$，直接二项式展开求一次乘法，所以可以做到整体复杂度为 $O(n \log n)$。我也是这个题的<a href="https://codeforces.com/gym/102823/status?order=BY_CONSUMED_TIME_ASC" target="_blank" rel="noopener">最佳解答</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>, ROOT = <span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; j) <span class="built_in">std</span>::swap(a[i], a[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = a.<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			(j ^= l) &lt; l; l &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">bool</span> isInverse = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">	LL g = powMod(ROOT, (M - <span class="number">1</span>) / a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span> (isInverse) &#123;</span><br><span class="line">		g = powMod(g, M - <span class="number">2</span>);</span><br><span class="line">		LL invLen = powMod(LL(a.<span class="built_in">size</span>()), M - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) x = x * invLen % M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != w.<span class="built_in">size</span>(); ++i) w[i] = w[i - <span class="number">1</span>] * g % M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x, LL y) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x += y) &gt;= M ? x -= M : x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>, half = <span class="number">1</span>; half != a.<span class="built_in">size</span>(); <span class="built_in">step</span> &lt;&lt;= <span class="number">1</span>, half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, wstep = a.<span class="built_in">size</span>() / <span class="built_in">step</span>; i != a.<span class="built_in">size</span>(); i += <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j != i + half; ++j) &#123;</span><br><span class="line">				LL t = (a[j + half] * w[wstep * (j - i)]) % M;</span><br><span class="line">				a[j + half] = addMod(a[j], M - t);</span><br><span class="line">				a[j] = addMod(a[j], t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (sz &lt; tot) sz *= <span class="number">2</span>;</span><br><span class="line">	a.resize(sz);</span><br><span class="line">	b.resize(sz);</span><br><span class="line">	nft(a);</span><br><span class="line">	nft(b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != sz; ++i) a[i] = a[i] * b[i] % M;</span><br><span class="line">	nft(a, <span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">inv</span><span class="params">(N)</span></span>;</span><br><span class="line">	inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) inv[i] = (M - M / i) * inv[M % i] % M;</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= cas; ++T) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; T &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">		<span class="keyword">int</span> n, L, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; L &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="built_in">std</span>::reverse(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">		LL now = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			b[i] = now;</span><br><span class="line">			now = now * (m + i) % M * inv[i + <span class="number">1</span>] % M;</span><br><span class="line">		&#125;</span><br><span class="line">		mul(a, b);</span><br><span class="line">		a.resize(n);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">fill</span>(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">		now = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * L &lt; n; ++i) &#123;</span><br><span class="line">			b[i * L] = (now + M) % M;</span><br><span class="line">			now = -now * (m - i) % M * inv[i + <span class="number">1</span>] % M;</span><br><span class="line">		&#125;</span><br><span class="line">		mul(a, b);</span><br><span class="line">		a.resize(n);</span><br><span class="line">		<span class="comment">// c[i] = a[i] * b[0] + \cdots a[n - 1] * b[n - 1 - i]</span></span><br><span class="line">		<span class="comment">// 令 d[i] = a[n - 1 - i], e[i] = c[n - 1 - i] 则</span></span><br><span class="line">		<span class="comment">// e[i] = d[i] * b[0] + ... + d[0] * b[i]</span></span><br><span class="line">		<span class="built_in">std</span>::reverse(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gym-102823：分块贪心"><a href="#gym-102823：分块贪心" class="headerlink" title="gym 102823：分块贪心"></a><a href="https://codeforces.com/gym/102823/problem/A" target="_blank" rel="noopener">gym 102823</a>：分块贪心</h3><p>题意：把两个数组<code>a, b</code>合并成一个数组<code>c</code> 保持元素原有的顺序，使得 $\sum_{i = 1}^{n + m} c_i$ 最小。</p>
<p>首先观察到两个事实：1. 最终 c 数组中如果有相邻元素分别在不同的原数组，那么在前面的必然更大。2. 由于我们想尽量让大的元素放在前面，但是又要保持元素原有的性质，这样就会导致大的元素推自己前面的元素跑，例如 n 个 a 中元素，和 m 个 b 中元素，一个放前面一个放后面，那么哪一个放前面呢，计算之后会发现，平均值大的放前面即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line">std::vector&lt;std::pair&lt;int, int&gt;&gt; f(std::vector&lt;LL&gt; &amp;a, std::vector&lt;LL&gt; &amp;s) &#123;</span><br><span class="line">	<span class="comment">// 从小到大一层一层的 push 数字只会越来越大! 大致懂了</span></span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	Q.push(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] - s[Q.top()] &lt;= a[i] * (i - Q.top())) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = Q.top();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">while</span> (!Q.empty() &amp;&amp; (s[t] - s[Q.top()]) * (i + <span class="number">1</span> - t) &lt;= (s[i + <span class="number">1</span>] - s[t]) * (t - Q.top())) &#123;</span><br><span class="line">				t = Q.top();</span><br><span class="line">				Q.pop();</span><br><span class="line">			&#125;</span><br><span class="line">			Q.push(t); </span><br><span class="line">		&#125; <span class="keyword">else</span> Q.push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; r;</span><br><span class="line">	<span class="keyword">int</span> now = n;</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		r.emplace_back(Q.top(), now);</span><br><span class="line">		now = Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;LL&gt; a(n), b(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	std::vector&lt;LL&gt; sa(n + 1), sb(m + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) sa[i + <span class="number">1</span>] = sa[i] + a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) sb[i + <span class="number">1</span>] = sb[i] + b[i];</span><br><span class="line">	<span class="keyword">auto</span> fa = f(a, sa), fb = f(b, sb);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; c;</span><br><span class="line">	<span class="keyword">while</span> (!fa.empty() &amp;&amp; !fb.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [la, ra] = fa.back();</span><br><span class="line">		<span class="keyword">auto</span> [lb, rb] = fb.back();</span><br><span class="line">		<span class="keyword">if</span> ((sa[ra] - sa[la]) * (rb - lb) &gt;= (sb[rb] - sb[lb]) * (ra - la)) &#123;</span><br><span class="line">			fa.pop_back();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = la; i &lt; ra; ++i) c.emplace_back(a[i]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			fb.pop_back();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = lb; i &lt; rb; ++i) c.emplace_back(b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (fa.empty()) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = fb.back().first; i &lt; m; ++i) c.emplace_back(b[i]);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = fa.back().first; i &lt; n; ++i) c.emplace_back(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m; ++i) ans += c[i] * (i + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> T = <span class="number">1</span>; T &lt;= cas; ++T) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; T &lt;&lt; <span class="string">": "</span> &lt;&lt; solve() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1478D：GCD-once-more"><a href="#1478D：GCD-once-more" class="headerlink" title="1478D：GCD once more"></a><a href="https://codeforces.com/contest/1478/problem/D" target="_blank" rel="noopener">1478D</a>：GCD once more</h3><p>此题，一眼看出系数之和恒定为 1，但是我一直想根据 k 的奇偶性递推，但是复杂度完全无法预测，一直卡着自己被卡炸了！<br>通过 <code>2x - y</code> 这样一直搞，那么最终只要满足 系数之和为 1，都会出现。所以这就是个 gcd 问题啊</p>
<script type="math/tex; mode=display">
a_1 x_1 + \cdots a_n x_n = k, x_1 + \cdots x_n = 1</script><p>有整数解，当且仅当</p>
<script type="math/tex; mode=display">
(a_1 - a_i) x_1 + \cdots (a_n - a_i) x_n = k - a_i</script><p>有解。当且仅当 $\gcd(a_1 - a_i, \cdots, a_n - a_i) | k - a_i$</p>
<p>我们可以取 $a_i$ 为最小值，这样求 gcd 就不会出现负数了。代码太简单就不写了。</p>
<h3 id="gym-102832H：二分图博弈"><a href="#gym-102832H：二分图博弈" class="headerlink" title="gym 102832H：二分图博弈"></a><a href="https://codeforces.com/gym/102832/problem/H" target="_blank" rel="noopener">gym 102832H</a>：二分图博弈</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur, h;</span><br><span class="line">	<span class="comment">// h[i] 表示 bfs 从 s 到 i 的距离，如果找到了 t，那么就说明找到了增广路。</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		h.assign(n, <span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		h[s] = <span class="number">0</span>;</span><br><span class="line">		Q.push(s);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> h[t] != <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// f 表示从 u 点出发拥有的最大流量，输出的是 u 到 t 的最大流量</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == t || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">		<span class="keyword">int</span> r = f;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u]; i &lt; g[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = g[u][i];</span><br><span class="line">			<span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">			<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> a = dfs(v, t, <span class="built_in">std</span>::<span class="built_in">min</span>(r, <span class="keyword">int</span>(c)));</span><br><span class="line">				e[j].second -= a;</span><br><span class="line">				e[j ^ <span class="number">1</span>].second += a;</span><br><span class="line">				r -= a;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f - r;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Dinic(<span class="keyword">int</span> _n) : n(_n), g(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">			cur.assign(n, <span class="number">0</span>);</span><br><span class="line">			r += dfs(s, t, INT_MAX);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> nn, m, ss;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nn &gt;&gt; m &gt;&gt; ss;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; ++i) n *= <span class="number">10</span>;</span><br><span class="line">	<span class="function">Dinic <span class="title">g</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> s = n, t = n + <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ban</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		ban[x] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> cal = [](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (x) &#123;</span><br><span class="line">			r += x % <span class="number">10</span>;</span><br><span class="line">			x /= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cs = cal(ss);</span><br><span class="line">	<span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> t) &#123;</span><br><span class="line">		<span class="keyword">if</span> (t % <span class="number">2</span> != cs % <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j *= <span class="number">10</span>) &#123;</span><br><span class="line">			<span class="comment">// 往上移动一位</span></span><br><span class="line">			<span class="keyword">if</span> (i + j &lt; n &amp;&amp; cal(i + j) == t + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span>(!ban[i + j]) g.addEdge(i, i + j, <span class="number">1</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span>(!ban[i - <span class="number">9</span> * j]) g.addEdge(i, i - <span class="number">9</span> * j, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 往下移动一位</span></span><br><span class="line">			<span class="keyword">if</span> (i &gt;= j &amp;&amp; cal(i - j) == t - <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!ban[i - j]) g.addEdge(i, i - j, <span class="number">1</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (!ban[i + <span class="number">9</span> * j]) g.addEdge(i, i + <span class="number">9</span> * j, <span class="number">1</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!ban[i]) &#123;</span><br><span class="line">		<span class="keyword">if</span> (cal(i) % <span class="number">2</span> == cs % <span class="number">2</span>) g.addEdge(s, i, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span> g.addEdge(i, t, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	ban[ss] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!ban[i]) &#123;</span><br><span class="line">		add(i, cal(i));</span><br><span class="line">	&#125;</span><br><span class="line">	g.maxFlow(s, t);</span><br><span class="line">	ban[ss] = <span class="number">0</span>;</span><br><span class="line">	g.addEdge(s, ss, <span class="number">1</span>);</span><br><span class="line">	add(ss, cs);</span><br><span class="line">	<span class="keyword">return</span> g.maxFlow(s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (solve() ? <span class="string">"Alice\n"</span> : <span class="string">"Bob\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gym-102832K：gcd-once-more"><a href="#gym-102832K：gcd-once-more" class="headerlink" title="gym 102832K：gcd once more"></a><a href="https://codeforces.com/gym/102832/problem/K" target="_blank" rel="noopener">gym 102832K</a>：gcd once more</h3><p>考虑 $\gcd(x, y) = x ^ y$。我总想把最终形式给搞出来（想太多，吃力不讨好），首先显然 $x \neq y$（不考虑 0），不妨设 $x &gt; y$，那么 $x - y \geq \gcd(x - y, y) = \gcd(x, y) = x^y \geq x - y$。从而知道 $\gcd(x, y) = x^y = x - y$，然后我还一直想继续推，甚至猜想 $x = 2^k(2n + 1), y = 2^{k + 1} \cdot n$，浪费了特别多的时间，其实此时显然可以枚举 gcd 的值在 $O(n \log n)$ 把所有情况找出来嘛。后面就是并查集常规操作了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bad[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; N; j += i) <span class="keyword">if</span> ((j ^ i) == j - i)&#123;</span><br><span class="line">			bad[j - i].emplace_back(j);</span><br><span class="line">			bad[j].emplace_back(j - i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) <span class="built_in">std</span>::sort(bad[i].<span class="built_in">begin</span>(), bad[i].<span class="built_in">end</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;int&gt; p(n + m + 1), a(n + m + 1);</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	std::vector&lt;std::map&lt;int, int&gt;&gt; mp(n + m + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		mp[i].insert(&#123;a[i], <span class="number">1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; <span class="built_in">find</span> = [&amp;](<span class="keyword">int</span> x) -&gt;<span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">		<span class="keyword">return</span> p[x];</span><br><span class="line">	&#125;;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">auto</span> merge = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">		<span class="keyword">int</span> fx = <span class="built_in">find</span>(x), fy = <span class="built_in">find</span>(y);</span><br><span class="line">		<span class="keyword">if</span> (fx == fy) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (mp[fx].<span class="built_in">size</span>() &lt; mp[fy].<span class="built_in">size</span>()) <span class="built_in">std</span>::swap(fx, fy);</span><br><span class="line">		p[fy] = fx;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, c] : mp[fy]) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> t : bad[v]) <span class="keyword">if</span> (mp[fx].count(t)) &#123;</span><br><span class="line">				ans += LL(mp[fx][t]) * c;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, c] : mp[fy]) &#123;</span><br><span class="line">			mp[fx][v] += c;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> change = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">		<span class="keyword">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">		<span class="keyword">auto</span> &amp;it = mp[fx];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> t : bad[a[x]]) <span class="keyword">if</span> (it.count(t)) &#123;</span><br><span class="line">			ans -= it[t];</span><br><span class="line">		&#125;</span><br><span class="line">		--it[a[x]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> t : bad[y]) <span class="keyword">if</span> (it.count(t)) &#123;</span><br><span class="line">			ans += it[t];</span><br><span class="line">		&#125;</span><br><span class="line">		++it[y];</span><br><span class="line">		a[x] = y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> op, x, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">			a[x] = y;</span><br><span class="line">			mp[x].insert(&#123;y, <span class="number">1</span>&#125;);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">			merge(x, y);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[x] != y) &#123;</span><br><span class="line">			change(x, y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1313C2：经典问题：单调栈优化"><a href="#1313C2：经典问题：单调栈优化" class="headerlink" title="1313C2：经典问题：单调栈优化"></a><a href="https://codeforces.com/contest/1313/problem/C2" target="_blank" rel="noopener">1313C2</a>：经典问题：单调栈优化</h3><p>首先最优答案肯定时先递增后递减的。相当于有一个制高点，枚举制高点，自然有 $O(n^2)$ 的算法。但是利用单调栈可以优化到 $O(n)$。设 <code>l[i], r[i]</code> 分别表示以 i 为最高点的（前，后）缀和最大值。只讨论前缀，那么求 l[i] 自然时往前找比它小的，然后继承比的小的答案了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;]() -&gt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(n, <span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">while</span> (!Q.empty() &amp;&amp; a[Q.top()] &gt;= a[i]) Q.pop();</span><br><span class="line">			<span class="keyword">if</span> (!Q.empty()) pre[i] = Q.top();</span><br><span class="line">			Q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> pre;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> g = [&amp;]() -&gt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt(n, n);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">while</span> (!Q.empty() &amp;&amp; a[Q.top()] &gt;= a[i]) Q.pop();</span><br><span class="line">			<span class="keyword">if</span> (!Q.empty()) nxt[i] = Q.top();</span><br><span class="line">			Q.push(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> nxt;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> pre = f(), suf = g();</span><br><span class="line">	std::vector&lt;LL&gt; b(n), c(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		b[i] = LL(i - pre[i]) * a[i] + (pre[i] == <span class="number">-1</span> ? <span class="number">0</span> : b[pre[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		c[i] = LL(suf[i] - i) * a[i] + (suf[i] == n ? <span class="number">0</span> : c[suf[i]]);</span><br><span class="line">	&#125;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b[i] + c[i] - a[i] &gt; r) &#123;</span><br><span class="line">			r = b[i] + c[i] - a[i];</span><br><span class="line">			id = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = id; i != <span class="number">-1</span>; i = pre[i]) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j != pre[i]; --j) a[j] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = id; i != n; i = suf[i]) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != suf[i]; ++j) a[j] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" \n"</span>[i == n - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="LOJ-P1823：经典问题：问有多少对元素，它们之间没有比它们都大的元素"><a href="#LOJ-P1823：经典问题：问有多少对元素，它们之间没有比它们都大的元素" class="headerlink" title="LOJ P1823：经典问题：问有多少对元素，它们之间没有比它们都大的元素"></a><a href="https://www.luogu.com.cn/problem/P1823" target="_blank" rel="noopener">LOJ P1823</a>：经典问题：问有多少对元素，它们之间没有比它们都大的元素</h3><p>用单调栈存可以被当前位置的人看到的人的编号，显然是单调不增的（你回头一看，看到的人升高时单调不减的）。由于有身高相同的情况，所以需要合并相同身高。    </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">izlyforever <span class="number">2021</span>/<span class="number">1</span>/<span class="number">26</span> <span class="number">23</span>:<span class="number">24</span>:<span class="number">58</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; S;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (!S.empty() &amp;&amp; S.top().first &lt;= x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (S.top().first == x) &#123;</span><br><span class="line">				cnt = S.top().second;</span><br><span class="line">			&#125;</span><br><span class="line">			r += S.top().second;</span><br><span class="line">			S.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!S.empty()) ++r;</span><br><span class="line">		S.push(&#123;x, ++cnt&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1009F：长链剖分-dsu-on-tree"><a href="#1009F：长链剖分-dsu-on-tree" class="headerlink" title="1009F：长链剖分 dsu on tree"></a><a href="https://codeforces.com/contest/1009/problem/F" target="_blank" rel="noopener">1009F</a>：长链剖分 dsu on tree</h3><p>在 <a href="/graph/" title="C++ 图论模板">C++ 图论模板</a> 长链剖分中有讲解。这个题重链剖分也可以写，但是要写成这样的（不需要编译器优化的版本）：<a href="https://codeforces.com/contest/1009/submission/105484073" target="_blank" rel="noopener">submission 105484073</a>，更优雅更快（由于编译器优化）的写法：<a href="https://codeforces.com/contest/1009/submission/105483361" target="_blank" rel="noopener">submission 105483361</a> 会 RE。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始。</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n), dep(n);</span><br><span class="line">	dep[rt] = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">			sz[u] += pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sz[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	std::vector&lt;std::map&lt;int, int&gt;&gt; mp(n);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (son[u] == <span class="number">0</span>) &#123;</span><br><span class="line">			ans[u] = dep[u];</span><br><span class="line">			mp[u].insert(&#123;dep[u], <span class="number">1</span>&#125;);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dfs(son[u], u);</span><br><span class="line">		<span class="built_in">std</span>::swap(mp[son[u]], mp[u]);</span><br><span class="line">		ans[u] = ans[son[u]];</span><br><span class="line">		<span class="keyword">auto</span> &amp;mpu = mp[u];</span><br><span class="line">		<span class="keyword">int</span> mx = mpu[ans[u]];</span><br><span class="line">		<span class="keyword">auto</span> deal = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> c) &#123;</span><br><span class="line">			<span class="keyword">auto</span> &amp;it = mpu[x];</span><br><span class="line">			it += c;</span><br><span class="line">			<span class="keyword">if</span> (it &gt; mx || (it == mx &amp;&amp; ans[u] &gt;= x)) &#123;</span><br><span class="line">				ans[u] = x;</span><br><span class="line">				mx = it;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">		deal(dep[u], <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			dfs(v, u);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [t, x] : mp[v]) &#123;</span><br><span class="line">				deal(t, x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt,<span class="number">0</span>);</span><br><span class="line">	dfs(rt, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ans[i] -= dep[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> r = dsuOnTree(e);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` C++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始。</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		sz[u] = sz[son[u]] + <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span> (son[u] == <span class="number">0</span>) &#123;</span><br><span class="line">			ans[u] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="number">1</span>&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">auto</span> a = dfs(son[u], u);</span><br><span class="line">		ans[u] = ans[son[u]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			<span class="keyword">auto</span> tmp = dfs(v, u);</span><br><span class="line">			<span class="comment">// 这里需要对齐</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> ai = a.<span class="built_in">size</span>() - <span class="number">1</span>, ti = tmp.<span class="built_in">size</span>() - <span class="number">1</span>; ti &gt;= <span class="number">0</span>; --ti, --ai) &#123;</span><br><span class="line">				a[ai] += tmp[ti];</span><br><span class="line">				<span class="keyword">if</span> (a[ai] &gt; a[ans[u]] || (a[ai] == a[ans[u]] &amp;&amp; ai &gt; ans[u])) &#123;</span><br><span class="line">					ans[u] = ai;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		a.emplace_back(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (a[ans[u]] == <span class="number">1</span>) ans[u] = sz[u] - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt, <span class="number">0</span>);</span><br><span class="line">	dfs(rt, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ans[i] = sz[i] - <span class="number">1</span> - ans[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> r = dsuOnTree(e);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="gym-102832F：dsu-on-tree"><a href="#gym-102832F：dsu-on-tree" class="headerlink" title="gym 102832F：dsu on tree"></a><a href="https://codeforces.com/gym/102832/problem/F" target="_blank" rel="noopener">gym 102832F</a>：dsu on tree</h3><p>首先，我们可以枚举 lca(i, j)，也就是说每一个节点都可以当其子树的 lca，它的两个子树中元素的 lca 必然是它。因此把这个答案算成是这个节点的答案。然后就是轻重链的问题了。注意到这里答案是异或值求和，那么我们可以诸位考虑即可。这里的写法跟 600E 的写法不一致。其实也可以写成一致的样子，600E 也可以写成我这个样子。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">18</span>;</span><br><span class="line">	<span class="keyword">int</span> a[N]&#123;&#125;;</span><br><span class="line">	Node() &#123;&#125;</span><br><span class="line">	Node(<span class="keyword">int</span> x) &#123;</span><br><span class="line">		++a[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (x) &#123;</span><br><span class="line">			a[++now] = x &amp; <span class="number">1</span>;</span><br><span class="line">			x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Node <span class="keyword">operator</span>+=(<span class="keyword">const</span> Node &amp;A) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) a[i] += A.a[i];</span><br><span class="line">		<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">LL <span class="title">deal</span><span class="params">(<span class="keyword">const</span> Node &amp; A, <span class="keyword">const</span> Node &amp; B)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; Node::N; ++i) &#123;</span><br><span class="line">		r += (LL(A.a[<span class="number">0</span>] - A.a[i]) * B.a[i] + LL(B.a[<span class="number">0</span>] - B.a[i]) * A.a[i]) &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始</span></span><br><span class="line"><span class="function">LL <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			sz[u] += pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sz[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, Node&gt;(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, Node&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span> (son[u] == <span class="number">0</span>) <span class="keyword">return</span> &#123;&#123;a[u], Node(u)&#125;&#125;;</span><br><span class="line">		<span class="keyword">auto</span> mp = dfs(son[u], u); <span class="comment">// 这里开 O2 被编译器优化了，不然直接爆炸</span></span><br><span class="line">		mp[a[u]] += Node(u);</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			<span class="keyword">auto</span> tmp = dfs(v, u);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [i, x] : tmp) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(i ^ a[u]); it != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">					r += deal(it-&gt;second, x);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [i, x] : tmp) mp[i] += x;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[u] = r;</span><br><span class="line">		<span class="keyword">return</span> mp;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt, rt);</span><br><span class="line">	dfs(rt, rt);</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) r += ans[i];</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dsuOnTree(e, a) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="600E：dsu-on-tree"><a href="#600E：dsu-on-tree" class="headerlink" title="600E：dsu on tree"></a><a href="https://codeforces.com/contest/600/problem/E" target="_blank" rel="noopener">600E</a>：dsu on tree</h3><p>不借鉴别人，自己独创的<a href="https://codeforces.com/contest/600/submission/105278738" target="_blank" rel="noopener">优秀写法</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始，参考：https://www.cnblogs.com/zwfymqz/p/9683124.html</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n), cnt(n);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			sz[u] += pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sz[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 这个函数具体问题具体分析</span></span><br><span class="line">	<span class="keyword">int</span> mx = <span class="number">0</span>, Son = <span class="number">0</span>;</span><br><span class="line">	LL sm = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; deal = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		++cnt[a[u]];</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[u]] &gt; mx) &#123;</span><br><span class="line">			mx = cnt[a[u]];</span><br><span class="line">			sm = a[u];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt[a[u]] == mx) &#123;</span><br><span class="line">			sm += a[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != Son) &#123;</span><br><span class="line">			deal(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; del = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		--cnt[a[u]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) del(v, u);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">bool</span> save) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			dfs(v, u, <span class="number">0</span>); <span class="comment">// 先计算轻边贡献，但最终要消除影响，防止影响轻边</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (son[u]) dfs(son[u], u, <span class="number">1</span>);  <span class="comment">// 统计重儿子的贡献，但不消除影响</span></span><br><span class="line">		Son = son[u];</span><br><span class="line">		deal(u, fa); <span class="comment">// 暴力处理除重儿子外的贡献</span></span><br><span class="line">		Son = <span class="number">0</span>;</span><br><span class="line">		ans[u] = sm;</span><br><span class="line">		<span class="keyword">if</span> (!save) &#123;</span><br><span class="line">			del(u, fa);</span><br><span class="line">			sm = <span class="number">0</span>;</span><br><span class="line">			mx = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt, rt);</span><br><span class="line">	dfs(rt, rt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> r = dsuOnTree(e, a);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="string">" \n"</span>[i == n];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gym-102832D：无意义的序列"><a href="#gym-102832D：无意义的序列" class="headerlink" title="gym 102832D：无意义的序列"></a><a href="https://codeforces.com/gym/102832/problem/D" target="_blank" rel="noopener">gym 102832D</a>：无意义的序列</h3><p>首先 c = 0 时特判，$c \geq 1$ 时，观察到 $a_n = c^{bit}$, bit 为 n 的二进制中 1 的个数。然后我们只需看小于 10…0（k 个 0） 时的答案即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;   x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">2</span>;</span><br><span class="line">LL fac[N], ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[N - <span class="number">1</span>] = powMod(fac[N - <span class="number">1</span>], M - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binom</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//if (n &lt; k || n &lt; 0) return 0;</span></span><br><span class="line">	<span class="keyword">return</span> fac[n] * ifac[k] % M * ifac[n - k] % M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> a, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		r += binom(n, i) * powMod(c, i + a) % M; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">int</span> c;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; c;</span><br><span class="line">	<span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"1\n"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	init();</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (s[i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">		r += solve(s.<span class="built_in">size</span>() - i - <span class="number">1</span>, a++, c);</span><br><span class="line">	&#125;</span><br><span class="line">	r += powMod(c, a);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r % M &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-ABC189F"><a href="#AtCoder-ABC189F" class="headerlink" title="AtCoder ABC189F"></a><a href="https://atcoder.jp/contests/abc189/tasks/abc189_f" target="_blank" rel="noopener">AtCoder ABC189F</a></h3><p>从 0 位置出发，走到大于等于 n 的位置结束，每次平均概率在 [1, m] 步中选择步长来走，有 k 个坑，走到坑就回到起点 0。问结束前步数的期望是多少，如果无法结束就输出 -1。</p>
<p>做法：首先如果有连续 m 个坑（很好判断），必然无法结束，否则可以结束，我们设 <code>dp[i]</code> 表示从 i 出发的答案。显然 $dp[i] = 0, i \geq n$，我们从后往前跑，显然有状态转移，如果 i 位置有坑，那么 $dp[i] = dp[0]$, 否则 $dp[i] = (dp[i + 1] + \cdots dp[i + m]) / m  + 1$。这个后缀和，我们可以用个变量记录下来。因此 所有的 dp[i] 都是一个 $a + b dp[0]$ 的形式，然后到最后有 $dp[0] = a + b dp[0]$ 从而就求得了结果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(k)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x: a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &lt; k; ++i) <span class="keyword">if</span> (a[i] - a[i - m + <span class="number">1</span>] == m - <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	std::vector&lt;double&gt; b(n + m), c(n + m);</span><br><span class="line">	<span class="keyword">double</span> sb = <span class="number">0</span>, sc = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a.<span class="built_in">size</span>() &amp;&amp; i == a.back()) &#123;</span><br><span class="line">			b[i] = <span class="number">0</span>;</span><br><span class="line">			c[i] = <span class="number">1</span>;</span><br><span class="line">			a.pop_back();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			b[i] = sb / m + <span class="number">1</span>;</span><br><span class="line">			c[i] = sc / m;</span><br><span class="line">		&#125;</span><br><span class="line">		sb += b[i] - b[i + m];</span><br><span class="line">		sc += c[i] - c[i + m];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span>.precision(<span class="number">8</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::fixed &lt;&lt; b[<span class="number">0</span>] / (<span class="number">1</span> - c[<span class="number">0</span>]) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="gym-102940H"><a href="#gym-102940H" class="headerlink" title="gym 102940H"></a><a href="https://codeforces.com/gym/102940/problem/H" target="_blank" rel="noopener">gym 102940H</a></h3><p>长为 k 取值在 [1, n] 且满足 $a_i \mid a_{i + 1}$ 的序列有多少个。</p>
<p>我一开始以为跟 n 的素因子有关，后来发现没法直接推公式，然后发现是一个 dp 问题，令 <code>dp[k][x]</code> 表示长为 k 满足  $a_i \mid a_{i + 1}$ 且每项都是 x 的因子的序列个数。答案必然就是 $\sum_{x = 1}^n dp[k - 1][x]$。复杂度 $O(k n \log n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(k, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> t = j; t &lt;= n; t += j) &#123;</span><br><span class="line">				(dp[i][t] += dp[i - <span class="number">1</span>][j]) %= M;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) (r += dp[k - <span class="number">1</span>][i]) %= M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1474D：相连同时减一"><a href="#1474D：相连同时减一" class="headerlink" title="1474D：相连同时减一"></a><a href="https://codeforces.com/contest/1474/problem/D" target="_blank" rel="noopener">1474D</a>：相连同时减一</h3><p>题意：每次可以同时使得相连两个数减 1，问是否能使得数组变成全 0。这个问题相当简单，因此换成，能否最多互换相连两个的值，使得原问题成立。</p>
<p>做法：原问题做法就是从左到右依次跑，如果跑出负数就不行，跑到最后不是 0 也不行。然后一开始我想错了，吃了两次 WA 之后，发现互换相邻两个之后原问题成立的前提是，从左到右跑和从右到左跑都不会出现负数。因此就保存左右两边跑的结果，然后只需考虑 4 个数的时候是否对就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> check = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a) &#123;</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">			now = x - now;</span><br><span class="line">			<span class="keyword">if</span> (now &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> now == <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">		b[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; b[i] &gt;= <span class="number">0</span>; ++i) &#123;</span><br><span class="line">			b[i + <span class="number">1</span>] = a[i] - b[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (b[n] == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; now &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (b[i - <span class="number">1</span>] &gt;= <span class="number">0</span> &amp;&amp; check(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(&#123;b[i - <span class="number">1</span>], a[i], a[i - <span class="number">1</span>], now&#125;))) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			now = a[i] - now;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1474C：乱搞题"><a href="#1474C：乱搞题" class="headerlink" title="1474C：乱搞题"></a><a href="https://codeforces.com/contest/1474/problem/C" target="_blank" rel="noopener">1474C</a>：乱搞题</h3><blockquote>
<p>一开始思路不清晰就写代码，写着发现有问题，被卡了挺长时间，导致 D 题差最后 10 分钟没有 debug 出一个小错误。</p>
</blockquote>
<p>做法：从最大的开始找，然后删除对应的节点即可。初始值 x 必然是 a 中最大值和另一个值的和。分析好问题后再选取合适的 STL，我用的是 map，很多人用的是 multiset </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> f = [](<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp, <span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; r;</span><br><span class="line">		<span class="keyword">while</span> (!mp.empty()) &#123;</span><br><span class="line">			<span class="keyword">auto</span> it = mp.rbegin();</span><br><span class="line">			<span class="keyword">int</span> u = it-&gt;first;</span><br><span class="line">			<span class="keyword">if</span> (--mp[u] == <span class="number">0</span>) mp.erase(u);</span><br><span class="line">			<span class="keyword">if</span> (mp.<span class="built_in">find</span>(x - u) == mp.<span class="built_in">end</span>()) <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;();</span><br><span class="line">			r.emplace_back(x - u, u);</span><br><span class="line">			<span class="keyword">if</span> (--mp[x - u] == <span class="number">0</span>) mp.erase(x - u);</span><br><span class="line">			x = u;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			++mp[x];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; r;</span><br><span class="line">		<span class="keyword">int</span> t = mp.rbegin()-&gt;first;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">			x = t + it-&gt;first;</span><br><span class="line">			r = f(mp, x);</span><br><span class="line">			<span class="keyword">if</span> (r.<span class="built_in">size</span>()) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (r.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> &lt;&lt; y &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1473F：经典最大流（最小割）问题"><a href="#1473F：经典最大流（最小割）问题" class="headerlink" title="1473F：经典最大流（最小割）问题"></a><a href="https://codeforces.com/contest/1473/problem/F" target="_blank" rel="noopener">1473F</a>：经典最大流（最小割）问题</h3><p>题意：给定长为 n($1 \leq n \leq 3000$) 的数组 a($1 \leq a_i \leq 100$), b($-10^5 \leq b_i \leq 10^5$)，求 $\displaystyle \max_{i \in S} b_i$，其中集合 $S$ 满足若 $i \in S$，则任意 $0 \leq j &lt; i$, 若 $a_i \equiv 0 \mod a_j$，那么 $j$ 也在 $S$ 中。</p>
<p>做法：设 $s = n$ 为源点，$t = n + 1$ 为汇点，如果 $b_i &gt; 0$（则称 i 为正点，否则为负点），那么我们从源点 $s$ 到 $i$ 建一个容量为 $b_i$ 的边，反之我们就从 $i$ 到 $s$ 建一个容量为 $-b_i$ 的边。如果 $j &lt; i$ 满足 $a_i \equiv 0 \mod a_j$，那么从 $j$ 到 $i$ 建一个容量为无穷大的边（一个必要的优化，直接这样建图，边太多了，根据这个性质的传递性，我们不妨找最后一个值为 $a_j$ 的点和 $i$ 相连）。<br>我们不妨先把所有正点全部放在 $S$ 中，然后求最小割即可，注意到满足性质的边容量是无限大的，因此我们必然会将这样的两个节点放在一起！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="comment">// cur[u] 表示以 u 为起点当前没被增广过的边</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur, h;</span><br><span class="line">	<span class="comment">// h[u] 表示 bfs 从 s 到 u 的距离，如果找到了 t，那么就说明找到了增广路。</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		h.assign(n, <span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		h[s] = <span class="number">0</span>;</span><br><span class="line">		Q.push(s);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span> (v == t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// f 表示从 u 点出发拥有的最大流量，输出的是 u 到 t 的最大流量</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == t) <span class="keyword">return</span> f;</span><br><span class="line">		<span class="keyword">int</span> r = f;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u]; i &lt; g[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = g[u][i];</span><br><span class="line">			<span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">			<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> a = dfs(v, t, <span class="built_in">std</span>::<span class="built_in">min</span>(r, c));</span><br><span class="line">				e[j].second -= a;</span><br><span class="line">				e[j ^ <span class="number">1</span>].second += a;</span><br><span class="line">				r -= a;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f - r;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Dinic(<span class="keyword">int</span> _n) : n(_n), g(_n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">			cur.assign(n, <span class="number">0</span>);</span><br><span class="line">			r += dfs(s, t, INT_MAX);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;int&gt; a(n), b(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">last</span><span class="params">(<span class="number">101</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="function">Dinic <span class="title">g</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			r += b[i];</span><br><span class="line">			g.addEdge(n, i, b[i]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			g.addEdge(i, n + <span class="number">1</span>, -b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= a[i]; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] % j == <span class="number">0</span> &amp;&amp; last[j] != <span class="number">-1</span>) &#123;</span><br><span class="line">				g.addEdge(i, last[j], INT_MAX);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		last[a[i]] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	r -= g.maxFlow(n, n + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1473D：经典前缀后缀"><a href="#1473D：经典前缀后缀" class="headerlink" title="1473D：经典前缀后缀"></a><a href="https://codeforces.com/contest/1473/problem/D" target="_blank" rel="noopener">1473D</a>：经典前缀后缀</h3><p>前缀和的历史最大值和历史最小值是特别好求的。后缀和的呢，却不那么显然。考虑后缀的时候，我们实际上要考虑后缀对最后结果的贡献。比如最大值，我们需要看当前后缀是否大于 0，如果小于等于 0 就直接抛弃重新开始，否则就继续保存。最小值同理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">		std::vector&lt;std::pair&lt;int, int&gt;&gt; a(n + 2), b(n + 2);</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>, mx = <span class="number">0</span>, mn = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">'+'</span>) &#123;</span><br><span class="line">				mx = <span class="built_in">std</span>::<span class="built_in">max</span>(mx, ++now);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				mn = <span class="built_in">std</span>::<span class="built_in">min</span>(mn, --now);</span><br><span class="line">			&#125;</span><br><span class="line">			a[i] = &#123;mn, mx&#125;;</span><br><span class="line">			c[i] = now;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> np = <span class="number">0</span>, nq = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i - <span class="number">1</span>] == <span class="string">'+'</span>) &#123;</span><br><span class="line">				++np;</span><br><span class="line">				nq = <span class="built_in">std</span>::<span class="built_in">min</span>(++nq, <span class="number">0</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				--nq;</span><br><span class="line">				np = <span class="built_in">std</span>::<span class="built_in">max</span>(--np, <span class="number">0</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			b[i] = &#123;nq, np&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="keyword">int</span> l, r;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">max</span>(a[l - <span class="number">1</span>].second, c[l - <span class="number">1</span>] + b[r + <span class="number">1</span>].second) </span><br><span class="line">			- <span class="built_in">std</span>::<span class="built_in">min</span>(a[l - <span class="number">1</span>].first, c[l - <span class="number">1</span>] + b[r + <span class="number">1</span>].first) + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1473E：经典最短路，去掉一个最长路，加上一个最短路"><a href="#1473E：经典最短路，去掉一个最长路，加上一个最短路" class="headerlink" title="1473E：经典最短路，去掉一个最长路，加上一个最短路"></a><a href="https://codeforces.com/contest/1473/problem/E" target="_blank" rel="noopener">1473E</a>：经典最短路，去掉一个最长路，加上一个最短路</h3><p>一条路径的权值定义为 $\sum w_{e_i} - \max e_i + \min e_i$，显然这等价于 $\min \sum (w_{e_i}) - w_{e_j} + w_{e_k}$。因此我们可以建图：比如原始边为 (u, v, w), 一个节点到了 4u 表示是原始的长度， 4u + 1 表示减去了某个边，4u + 2 表示加上了某条边，4u + 3 表示既加了也减了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">const</span> edge &amp;e)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;LL, <span class="keyword">int</span>&gt;&gt; h;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">dist</span><span class="params">(e.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(e.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">	dist[s] = <span class="number">0</span>;</span><br><span class="line">	h.push(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">	<span class="keyword">while</span> (!h.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [d, u] = h.top();</span><br><span class="line">		h.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[u] = <span class="number">1</span>;</span><br><span class="line">		dist[u] = -d;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) h.emplace(d - w, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function">edge <span class="title">e</span><span class="params">(<span class="number">4</span> * n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v, w;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">		--u; --v;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; <span class="number">2</span>; ++t) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) e[<span class="number">4</span> * u + j].emplace_back(<span class="number">4</span> * v + j, w);</span><br><span class="line">			e[<span class="number">4</span> * u].emplace_back(<span class="number">4</span> * v + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">			e[<span class="number">4</span> * u].emplace_back(<span class="number">4</span> * v + <span class="number">2</span>, <span class="number">2</span> * w);</span><br><span class="line">			e[<span class="number">4</span> * u].emplace_back(<span class="number">4</span> * v + <span class="number">3</span>, w);</span><br><span class="line">			e[<span class="number">4</span> * u + <span class="number">1</span>].emplace_back(<span class="number">4</span> * v + <span class="number">3</span>, <span class="number">2</span> * w);</span><br><span class="line">			e[<span class="number">4</span> * u + <span class="number">2</span>].emplace_back(<span class="number">4</span> * v + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">			<span class="built_in">std</span>::swap(u, v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> dist = Dijkstra(<span class="number">0</span>, e);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &lt; <span class="number">4</span> * n; i += <span class="number">4</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dist[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>也可以不建成上述图，按照原始图建图，操作的时候再也可以，本质上一致更节省空间，代码稍微复杂一点。</p>
</blockquote>
<h3 id="AtCoder-arc111B：经典-2-选-1"><a href="#AtCoder-arc111B：经典-2-选-1" class="headerlink" title="AtCoder arc111B：经典 2 选 1"></a><a href="https://atcoder.jp/contests/arc111/tasks/arc111_b" target="_blank" rel="noopener">AtCoder arc111B</a>：经典 2 选 1</h3><p>大致 有 $n$ 个盒子，每个盒子有两个数，从中取去一个数，问最多可以取多少个不同的数。</p>
<p>数字为节点，盒子中的两个数连边（注意可能有重边），那个连通分支是树，那么答案就是连通分支节点数减 1，否则就是连通分支节点数。（树的情况容易证明，非树的情况总可以删边，删成只有树再多一条边的情况，然后也容易证明）</p>
<h3 id="AtCoder-arc111E"><a href="#AtCoder-arc111E" class="headerlink" title="AtCoder arc111E"></a><a href="https://atcoder.jp/contests/arc111/tasks/arc111_e" target="_blank" rel="noopener">AtCoder arc111E</a></h3><p><a href="https://atcoder.jp/contests/arc111/editorial/546" target="_blank" rel="noopener">教程</a></p>
<h3 id="1467C：类似于把-a-b-变成-a-b-问题（代码自解释）"><a href="#1467C：类似于把-a-b-变成-a-b-问题（代码自解释）" class="headerlink" title="1467C：类似于把 a, b 变成 a - b 问题（代码自解释）"></a><a href="https://codeforces.com/contest/1467/problem/C" target="_blank" rel="noopener">1467C</a>：类似于把 a, b 变成 a - b 问题（代码自解释）</h3><p>题目中 3 个袋子可以换成 $m(m \geq 3)$ 个袋子。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n[<span class="number">3</span>]&#123;&#125;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n[<span class="number">0</span>] &gt;&gt; n[<span class="number">1</span>] &gt;&gt; n[<span class="number">2</span>];</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">a</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, x; j &lt; n[i]; ++j) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			a[i].emplace_back(x);</span><br><span class="line">			r += x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">		b.emplace_back(*<span class="built_in">std</span>::min_element(a[i].<span class="built_in">begin</span>(), a[i].<span class="built_in">end</span>()));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">	LL ans = r - b[<span class="number">0</span>] * <span class="number">2</span> - b[<span class="number">1</span>] * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">		LL tmp = r;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n[i]; ++j) tmp -= a[i][j] * <span class="number">2</span>;</span><br><span class="line">		ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, tmp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1471D：GCD-问题"><a href="#1471D：GCD-问题" class="headerlink" title="1471D：GCD 问题"></a><a href="https://codeforces.com/contest/1471/problem/D" target="_blank" rel="noopener">1471D</a>：GCD 问题</h3><p>题意：我们称 $a, b$ 相邻，如果 $\lcm(a, b)/gcd(a, b)$ 是平方数，这当且仅当 $ab$ 是平方数。我们定义 $f(n)$ 为 $n$ 的素因子的积，那么 $a, b$ 相邻，当且仅当 $f(a) = f(b)$。这样就好了呀。由于数据范围在 $1e6$ 之间，所以可以预处理以下就可以了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">10086</span>; </span><br><span class="line"><span class="keyword">int</span> sp[N], p[N], f[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spf</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] &lt;= sp[i] &amp;&amp; i * p[j] &lt; N; ++j) &#123; <span class="comment">//防止乘法溢出</span></span><br><span class="line">			sp[i * p[j]] = p[j]; <span class="comment">// 注意到sp只被赋值一次</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> pi = i / sp[i];</span><br><span class="line">		<span class="keyword">if</span> (pi % sp[i] == <span class="number">0</span>) f[i] = f[pi / sp[i]];</span><br><span class="line">		<span class="keyword">else</span> f[i] = f[pi] * sp[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	spf();</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			++mp[f[x]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r0 = INT_MIN, now = mp[<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [u, v] : mp) &#123;</span><br><span class="line">			r0 = <span class="built_in">std</span>::<span class="built_in">max</span>(r0, v);</span><br><span class="line">			<span class="keyword">if</span> (u != <span class="number">1</span> &amp;&amp; v % <span class="number">2</span> == <span class="number">0</span>) now += v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r1 = <span class="built_in">std</span>::<span class="built_in">max</span>(r0, now);</span><br><span class="line">		<span class="keyword">int</span> q;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">		<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">			LL w;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (w == <span class="number">0</span> ? r0 : r1) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面做法还是太慢了！注意到 $f(n)$ 表示 $n$ 的最小 “无平方因子” 的因子。因此可以用平方数预处理，可用下面代码加速</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> ii = i * i, cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = ii; j &lt; N; j += ii) f[j] = ++cur;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1471F-图论染色问题"><a href="#1471F-图论染色问题" class="headerlink" title="1471F: 图论染色问题"></a><a href="https://codeforces.com/contest/1471/problem/F" target="_blank" rel="noopener">1471F</a>: 图论染色问题</h3><blockquote>
<p>比赛时，读题没读懂要干嘛。</p>
</blockquote>
<p>用 01 对连通图染色，使得每个 0 周围全是 1，每个 1 周围都存在一个 0. 按照题解的说法：随便选择一点置 0，然后把它周围全部染色为 1，然后找和 1 相邻的没被染色的其中任意一个染色为 0，然后把 0 周围全部染色为 1，一直继续下去。</p>
<p>但是上述做法代码可能写的比较别扭，因此我们可以用队列，先随便选择一点置 0，放进队列中。在队列中的被染色为 1 的是真 1，染色为 0 的表示它和某个染色为 1 的节点相连。出队列后染色为 1 的是真的 1。队首的被染色为 0，那就把和它相邻的没被染色的变成 1 放在队列中，队首的被染色为 1，那就把它相邻的全变成 0（不管有没有被染色过），若没被染色就丢进队列中。</p>
<p>注意到：被染色为 0 后，染色不会变化。出队列的 1 周围的染色全为 0，被染色为 0，必然是某个出了队列的 1 帮它染的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, u, v; i &lt; m; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			--u;</span><br><span class="line">			--v;</span><br><span class="line">			e[u].emplace_back(v);</span><br><span class="line">			e[v].emplace_back(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">val</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">		val[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		Q.push(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">if</span> (val[u] == <span class="number">0</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">					<span class="keyword">if</span> (val[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">						val[v] = <span class="number">1</span>;</span><br><span class="line">						Q.push(v);</span><br><span class="line">					&#125; <span class="keyword">else</span> val[v] = <span class="number">1</span>;</span><br><span class="line">				&#125; </span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (val[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					val[v] = <span class="number">0</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (*<span class="built_in">std</span>::min_element(val.<span class="built_in">begin</span>(), val.<span class="built_in">end</span>()) == <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (val[i] == <span class="number">0</span>) r.emplace_back(i);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r.<span class="built_in">size</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1466A：线段上-n-个点，两两距离差值的所有可能个数"><a href="#1466A：线段上-n-个点，两两距离差值的所有可能个数" class="headerlink" title="1466A：线段上 $n$ 个点，两两距离差值的所有可能个数"></a><a href="https://codeforces.com/contest/1466/problem/A" target="_blank" rel="noopener">1466A</a>：线段上 $n$ 个点，两两距离差值的所有可能个数</h3><p>$n^2$ 的算法是显然的。</p>
<ol>
<li>利用 Bitset，也是 $n^2$ 的 dp，然后用 bitset 存储数据，就可以达到 $n^2/64$ 的复杂度啦。</li>
<li>如果距离的最大值区间为 $N$，那么 $\sum x^{a_i} \sum x^(N - a_i)$ 中非负系数个数就是答案（所以有 $O(N\log N)$ 的做法。</li>
</ol>
<h3 id="1466E：求和"><a href="#1466E：求和" class="headerlink" title="1466E：求和"></a><a href="https://codeforces.com/contest/1466/problem/E" target="_blank" rel="noopener">1466E</a>：求和</h3><script type="math/tex; mode=display">
\sum_{i=1}^n \sum_{j=1}^n \sum_{k=1}^n (x_i \, \& \, x_j) \cdot (x_j \, | \, x_k)</script><p>显然就是固定 $j$，每位每位的求和即可。</p>
<h3 id="1466F：-mathbb-Z-2-上-m-维向量线性无关组"><a href="#1466F：-mathbb-Z-2-上-m-维向量线性无关组" class="headerlink" title="1466F：$\mathbb{Z}_2$ 上 $m$ 维向量线性无关组"></a><a href="https://codeforces.com/contest/1466/problem/F" target="_blank" rel="noopener">1466F</a>：$\mathbb{Z}_2$ 上 $m$ 维向量线性无关组</h3><p>注意到题目中至多两个位置非零，因此就可以用 并查集（一般情况倒是不知道有啥好办法）。注意到官方题解，可以多加一个维度，使得有每次正好有两个位置非零。</p>
<h3 id="1465D：观察结果题"><a href="#1465D：观察结果题" class="headerlink" title="1465D：观察结果题"></a><a href="https://codeforces.com/contest/1465/problem/D" target="_blank" rel="noopener">1465D</a>：观察结果题</h3><p>题意：给定由 <code>0, 1, ?</code> 构成的字符串，将 <code>?</code> 变成 0 或 1，使得 01 字符和 10 字符权值和最小。（其中，01 权值为 x, 10 权值为 y）</p>
<blockquote>
<p>不妨假设 $x \leq y$, 否则将字符串反序（x, y 互换）</p>
</blockquote>
<p>做法：首先不考虑 <code>?</code>，此时我们可以通过当前位置为 0（看前方 1 的个数），当前位置为 1（看前置 0 的个数）得到基础权值 <code>W</code>，然后注意到 01 的权值低于 10 的权值，因此当 m 个 <code>?</code> 替换成 p 个 1 和 m - p 个 0 时候，把 0，放在最前面会让权值最小，因此我们可以考虑前缀问号给 0，后缀问号为 1 给答案的贡献。然后再加上基础权值 W 再加上 <code>m(m-p)x</code>。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> a;</span><br><span class="line">	LL x, y;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">		<span class="built_in">std</span>::swap(x, y);</span><br><span class="line">		<span class="built_in">std</span>::reverse(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[<span class="number">2</span>], s[<span class="number">2</span>];</span><br><span class="line">	p[<span class="number">0</span>].resize(n + <span class="number">1</span>);</span><br><span class="line">	p[<span class="number">1</span>].resize(n + <span class="number">1</span>);</span><br><span class="line">	s[<span class="number">0</span>].resize(n + <span class="number">1</span>);</span><br><span class="line">	s[<span class="number">1</span>].resize(n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		p[<span class="number">0</span>][i + <span class="number">1</span>] = p[<span class="number">0</span>][i];</span><br><span class="line">		p[<span class="number">1</span>][i + <span class="number">1</span>] = p[<span class="number">1</span>][i];</span><br><span class="line">		<span class="keyword">if</span> (a[i] != <span class="string">'?'</span>) ++p[a[i] - <span class="string">'0'</span>][i + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		s[<span class="number">0</span>][i] = s[<span class="number">0</span>][i + <span class="number">1</span>];</span><br><span class="line">		s[<span class="number">1</span>][i] = s[<span class="number">1</span>][i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (a[i] != <span class="string">'?'</span>) ++s[a[i] - <span class="string">'0'</span>][i];</span><br><span class="line">	&#125;</span><br><span class="line">	LL ord = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">'0'</span>) ord += p[<span class="number">1</span>][i] * y;</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">'1'</span>) ord += p[<span class="number">0</span>][i] * x;</span><br><span class="line">	&#125;</span><br><span class="line">	std::vector&lt;LL&gt; pre(n + 1), suf(n + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		pre[i + <span class="number">1</span>] = pre[i];</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">'?'</span>) pre[i + <span class="number">1</span>] += s[<span class="number">1</span>][i] * x + p[<span class="number">1</span>][i] * y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		suf[i] = suf[i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (a[i] == <span class="string">'?'</span>) suf[i] += s[<span class="number">0</span>][i] * y + p[<span class="number">0</span>][i] * x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="built_in">std</span>::count(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="string">'?'</span>), tnc = <span class="number">0</span>;</span><br><span class="line">	LL r = ord + suf[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (a[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">		++tnc;</span><br><span class="line">		r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, ord + pre[i + <span class="number">1</span>] + suf[i + <span class="number">1</span>] + x * (cnt - tnc) * tnc);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1465E：观察题"><a href="#1465E：观察题" class="headerlink" title="1465E：观察题"></a><a href="https://codeforces.com/contest/1465/problem/E" target="_blank" rel="noopener">1465E</a>：观察题</h3><blockquote>
<p><a href="https://codeforces.com/blog/entry/85792" target="_blank" rel="noopener">官方题解</a> 清晰明了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	LL s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> a;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; a;</span><br><span class="line">	s -= <span class="number">1</span> &lt;&lt; (a.back() - <span class="string">'a'</span>);</span><br><span class="line">	a.pop_back();</span><br><span class="line">	s += <span class="number">1</span> &lt;&lt; (a.back() - <span class="string">'a'</span>);</span><br><span class="line">	a.pop_back();</span><br><span class="line">	s = <span class="built_in">abs</span>(s);</span><br><span class="line">	LL cnt[<span class="number">26</span>]&#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) ++cnt[x - <span class="string">'a'</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((s &gt;&gt; i) &gt;= cnt[i]) s -= cnt[i] &lt;&lt; i;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> t = cnt[i] - (s &gt;&gt; i);</span><br><span class="line">			s -= (s &gt;&gt; i) &lt;&lt; i;</span><br><span class="line">			<span class="keyword">if</span> (t % <span class="number">2</span>) s = (<span class="number">1</span> &lt;&lt; i) - s;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (s == <span class="number">0</span> ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用桶排序和取正处理，直接起飞，复杂度骤降为 $O(n)$。</p>
</blockquote>
<h3 id="1450H：圆上配对问题"><a href="#1450H：圆上配对问题" class="headerlink" title="1450H：圆上配对问题"></a><a href="https://codeforces.com/contest/1450/problem/H1" target="_blank" rel="noopener">1450H</a>：圆上配对问题</h3><blockquote>
<p><a href="https://codeforces.com/blog/entry/85348" target="_blank" rel="noopener">官方题解</a> 属实精彩。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;   x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">	std::vector&lt;LL&gt; fac(n + 1), ifac(n + 1);</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[n] = powMod(fac[n], M - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">	<span class="keyword">auto</span> binom = [&amp;](<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">		<span class="keyword">return</span> fac[n] * ifac[n - k] % M * ifac[k] % M;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> B[<span class="number">2</span>] = &#123;&#125;, res[<span class="number">2</span>] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'?'</span>) ++res[i % <span class="number">2</span>];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">'b'</span>) ++B[i % <span class="number">2</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> F = res[<span class="number">0</span>] + res[<span class="number">1</span>], x = B[<span class="number">1</span>] + res[<span class="number">1</span>] - B[<span class="number">0</span>];</span><br><span class="line">	</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = (x + n) % <span class="number">2</span>; i &lt;= F; i += <span class="number">2</span>) &#123;</span><br><span class="line">		(r += <span class="built_in">abs</span>(x - i) * binom(F, i)) %= M;</span><br><span class="line">	&#125;</span><br><span class="line">	r = r * powMod(<span class="number">2L</span>L, F * (M - <span class="number">2</span>) % (M - <span class="number">1</span>)) % M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1453D：简单概率题"><a href="#1453D：简单概率题" class="headerlink" title="1453D：简单概率题"></a><a href="https://codeforces.com/contest/1453/problem/D" target="_blank" rel="noopener">1453D</a>：简单概率题</h3><blockquote>
<p>这么简答的概率题，我竟然做了一个小时，被弱智的错误理解题意搞的头皮发麻！</p>
</blockquote>
<p>题意：对一个长度为 $n$ 的 0-1 序列（首位为 1），<code>0</code> 表示不存档 <code>1</code> 表示存档，如果我们在第 <code>i</code> 关打赢了，那么我们进入第 <code>i + 1</code> 关，否则我们回到最近的一次存档处。那么战斗次数的期望就确定的。现在问题是期望值 $k$，能否给一个 $0-1$ 序列。</p>
<p>首先如果 $n = 1$，那么此时期望为 $\displaystyle \sum_{i = 1}^n \frac{i}{2^i} = 2$. 注意到如果 <code>a[i] = 1</code>，一旦到达 <code>i</code> 位置，那么期望与前面的部分就无关了。所以其实我们只需考虑序列 <code>10...0</code>。记期望为 $p_n$。那么</p>
<script type="math/tex; mode=display">
p_n = \sum_{i = 1}^n \frac{i + p_n}{2^i} + \frac{n}{2^n}</script><p>化简可得 $p_n = 2 (2^n - 1)$. 因此只要 k 是 2 的倍数，必然序列存在。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		LL n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		n /= <span class="number">2</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">		<span class="keyword">while</span> (n) &#123;</span><br><span class="line">			<span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; x) &lt;= n + <span class="number">1</span>) ++x;</span><br><span class="line">			--x;</span><br><span class="line">			n -= (<span class="number">1L</span>L &lt;&lt; x) - <span class="number">1</span>;</span><br><span class="line">			a.emplace_back(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; ++i) a.emplace_back(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1455B：简单被卡题"><a href="#1455B：简单被卡题" class="headerlink" title="1455B：简单被卡题"></a><a href="https://codeforces.com/contest/1455/problem/B" target="_blank" rel="noopener">1455B</a>：简单被卡题</h3><p>题意：第 $k$ 次移动时，可以往前移动 $k$ 个位置，或往后移动一个位置，从 0 到 $n$ 最少多少步完成。</p>
<blockquote>
<p>一开始在想用 bfs 或者 dfs 或者 dp 来做，没有第一时间搞贪心。写完 bfs 之后，跑不动吐了。此题最多向后走一个位置即可。找到最小的 x 满足 $1 + \cdots x \geq n$，如果 $1 + \cdots x = n + 1$，那么答案就是 $x + 1$，否则为 $x$。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> x;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (r * (r + <span class="number">1</span>) / <span class="number">2</span> &lt; x) ++ r;</span><br><span class="line">		<span class="keyword">if</span> (r * (r + <span class="number">1</span>) / <span class="number">2</span> == x + <span class="number">1</span>) ++r;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1455E：好玩的问题"><a href="#1455E：好玩的问题" class="headerlink" title="1455E：好玩的问题"></a><a href="https://codeforces.com/contest/1455/problem/E" target="_blank" rel="noopener">1455E</a>：好玩的问题</h3><p>给定四个不同的点，将它们分别移动，使得称为一个正方形，且边分别和轴平行。左上角，右上角，左下角，右下角四个点明确之后，那么坐标分开讨论。利用一个事实，就是线段上，距离端点长度之和为常量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n = <span class="number">4</span>;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pll&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		LL ans = INT64_MAX;</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			LL sum = <span class="number">0</span>;</span><br><span class="line">			<span class="comment">// 0 3</span></span><br><span class="line">			<span class="comment">// 1 2</span></span><br><span class="line">			sum += <span class="built_in">abs</span>(a[<span class="number">0</span>].first - a[<span class="number">1</span>].first);</span><br><span class="line">			sum += <span class="built_in">abs</span>(a[<span class="number">2</span>].first - a[<span class="number">3</span>].first);</span><br><span class="line">			sum += <span class="built_in">abs</span>(a[<span class="number">0</span>].second - a[<span class="number">3</span>].second);</span><br><span class="line">			sum += <span class="built_in">abs</span>(a[<span class="number">1</span>].second - a[<span class="number">2</span>].second);</span><br><span class="line">			LL xr = <span class="built_in">std</span>::<span class="built_in">max</span>(a[<span class="number">3</span>].first, a[<span class="number">2</span>].first) - <span class="built_in">std</span>::<span class="built_in">min</span>(a[<span class="number">1</span>].first, a[<span class="number">0</span>].first);</span><br><span class="line">			LL xl = <span class="built_in">std</span>::<span class="built_in">min</span>(a[<span class="number">3</span>].first, a[<span class="number">2</span>].first) - <span class="built_in">std</span>::<span class="built_in">max</span>(a[<span class="number">1</span>].first, a[<span class="number">0</span>].first);</span><br><span class="line">			LL yr = <span class="built_in">std</span>::<span class="built_in">max</span>(a[<span class="number">0</span>].second, a[<span class="number">3</span>].second) - <span class="built_in">std</span>::<span class="built_in">min</span>(a[<span class="number">1</span>].second, a[<span class="number">2</span>].second);</span><br><span class="line">			LL yl = <span class="built_in">std</span>::<span class="built_in">min</span>(a[<span class="number">0</span>].second, a[<span class="number">3</span>].second) - <span class="built_in">std</span>::<span class="built_in">max</span>(a[<span class="number">1</span>].second, a[<span class="number">2</span>].second);</span><br><span class="line">			ans = <span class="built_in">std</span>::<span class="built_in">min</span>(ans, sum + <span class="number">2</span> * <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, <span class="built_in">std</span>::<span class="built_in">max</span>(xl, yl) - <span class="built_in">std</span>::<span class="built_in">min</span>(xr, yr)));</span><br><span class="line">		&#125; <span class="keyword">while</span> (<span class="built_in">std</span>::next_permutation(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()));</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本场 1456 Div1, 我只能做 AB 两题，但是我可以做的快，做的优雅的，可是我没有！</p>
<h3 id="1456A：经典-DP"><a href="#1456A：经典-DP" class="headerlink" title="1456A：经典 DP"></a><a href="https://codeforces.com/contest/1456/problem/A" target="_blank" rel="noopener">1456A</a>：经典 DP</h3><p>题意：给定 0-1 字符串，需要让 $p, p + k, \cdots$ 位置都变成 1，每变一个位代价是 x，或者删除最开始的字符，这样做代价是 y。</p>
<p>做法：我们可以把字符串反过来，然后答案就是 <code>a[n - p]</code>，状态转移：不删字符的情况下，<code>a[i]</code> 为 $s[i], s[i - k], \cdots$ 中 0 的个数。$a[i] = \min_{1 \leq t \leq i}(a[i], a[i - t] + t * y)$，所以我们可以将 <code>a[i] - iy</code> 添加到 set 中，然后最小值加上 当前的 <code>iy</code> 就是真实的最小值。</p>
<blockquote>
<p>很早就想到了做法，实现的时候写的太急了，分析不过细致，把自己整吐了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, p, k, x, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; k &gt;&gt; s &gt;&gt; x &gt;&gt; y; </span><br><span class="line">		<span class="built_in">std</span>::reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">		std::vector&lt;int&gt; a(n), cnt(k);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">'0'</span>) ++cnt[i % k];</span><br><span class="line">			a[i] = cnt[i % k] * x;</span><br><span class="line">			<span class="keyword">if</span> (!S.empty()) a[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(a[i], *S.<span class="built_in">begin</span>() + i * y);</span><br><span class="line">			S.insert(a[i] - i * y);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[n - p] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1456B：XOR-问题"><a href="#1456B：XOR-问题" class="headerlink" title="1456B：XOR 问题"></a><a href="https://codeforces.com/contest/1456/problem/B" target="_blank" rel="noopener">1456B</a>：XOR 问题</h3><p>题意：给定一个非降的序列，可以将相邻的两个变成它们的异或值，能否在最小的步数上，将这个序列不满足非降条件。</p>
<p>做法：注意到，如果有三个相邻的数最高位一致，那么答案必然是 1，因此本质上我们只需考虑 n = 60 的情况，所以，随便写就能过（所以我写的特别随便，然后被人 hack 了，我真的服了自己！）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">2</span> &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((a[i] ^ a[i + <span class="number">1</span>]) &gt; a[i + <span class="number">2</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (a[i] &gt; (a[i + <span class="number">1</span>] ^ a[i + <span class="number">2</span>])) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b, c;</span><br><span class="line">		<span class="keyword">int</span> nb = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">			nb ^= a[j];</span><br><span class="line">			b.emplace_back(nb);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> nc = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; ++j) &#123;</span><br><span class="line">			nc ^= a[j];</span><br><span class="line">			c.emplace_back(nc);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; c.<span class="built_in">size</span>(); ++k) <span class="keyword">if</span> (b[j] &gt; c[k]) &#123;</span><br><span class="line">				ans = <span class="built_in">std</span>::<span class="built_in">min</span>(ans, j + k);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans == INT_MAX ? <span class="number">-1</span> : ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-abc184F：假-0-1-背包，Meet-in-Middle"><a href="#AtCoder-abc184F：假-0-1-背包，Meet-in-Middle" class="headerlink" title="AtCoder abc184F：假 0-1 背包，Meet in Middle"></a><a href="https://atcoder.jp/contests/abc184/tasks/abc184_f" target="_blank" rel="noopener">AtCoder abc184F</a>：假 0-1 背包，Meet in Middle</h3><p>题意：给定序列，求选择其中部分，使得它们和最大且不超过 t，这不就是 0-1 背包吗？但是数据范围 $0 \leq n \leq 40, 0 \leq a_i, t \leq 10^9$，此题即使是多重背包，也可以用下面各种方法来做</p>
<ol>
<li>Meet in Middle，但是实现的时候可以有以下几种实现细节：<ul>
<li>用是 set 或 unordered set 存和更新，然后用双指针，整体复杂度 $O(n 2 ^{\frac{n}{2}})$</li>
<li>用 Vector 存，之后排序（只需排序一个），然后用 <code>lower_bounded</code> 查找，复杂度同理</li>
<li>用 Vector 存，保持有序，最后用双指针，复杂度 $O(2 ^{\frac{n}{2}})$</li>
</ul>
</li>
<li>先 dfs 找到一个较好的解，然后每次更新解，用来剪枝。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有序 vector + 双指针，复杂度 $O(2 ^&#123;\frac&#123;n&#125;&#123;2&#125;&#125;)$</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, t;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.rbegin(), a.rend());</span><br><span class="line">	<span class="keyword">auto</span> merge = [&amp;](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; a.<span class="built_in">size</span>() &amp;&amp; a[i] &lt; a[j] + x) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a[j] + x &lt;= t) b.emplace_back(a[j] + x);</span><br><span class="line">				++j;</span><br><span class="line">			&#125;</span><br><span class="line">			b.emplace_back(a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		swap(a, b);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> <span class="built_in">get</span> = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) &#123;</span><br><span class="line">			merge(x, a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> la = <span class="built_in">get</span>(<span class="number">0</span>, n / <span class="number">2</span>), lb = <span class="built_in">get</span>(n / <span class="number">2</span>, n);</span><br><span class="line">	<span class="keyword">int</span> ib = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = la.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (ib &lt; lb.<span class="built_in">size</span>() &amp;&amp; la[i] + lb[ib] &gt; t) ++ib;</span><br><span class="line">		<span class="keyword">if</span> (ib != lb.<span class="built_in">size</span>()) ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, la[i] + lb[ib]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dfs 剪枝，下述算法会被制造的数据吃掉，例如 t 为奇数，所有其它数为偶数，并且 t 很大，有特别多的解。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, t;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.rbegin(), a.rend());</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">b</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) b[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + b[i];</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> now, <span class="keyword">int</span> i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; n || ans == t || ans - now &gt;= b[i]) <span class="keyword">return</span>;</span><br><span class="line">		ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, now);</span><br><span class="line">		<span class="keyword">if</span> (now + a[i] &lt;= t) dfs(now + a[i], i + <span class="number">1</span>);</span><br><span class="line">		dfs(now, i + <span class="number">1</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; solve() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1451E：交互题"><a href="#1451E：交互题" class="headerlink" title="1451E：交互题"></a><a href="https://codeforces.com/contest/1451/problem/E" target="_blank" rel="noopener">1451E</a>：交互题</h3><p>题意：给定 n（为 2 的幂次，且大于 2），猜测一个长为 n ，取值在 <code>[0, n - 1]</code> 的数列。每次可以询问，<code>XOR i j</code>，<code>OR i j</code>，<code>AND i j</code> 中的一种（$i \neq j$）。询问次数不超过 n + 1。</p>
<blockquote>
<p>上面 <code>OR</code> 和 <code>And</code> 用一个即可，我们这里用 <code>And</code>，<code>OR</code> 也类似。 </p>
</blockquote>
<p>做法：所有的数和第一个数异或（自己跟自己异或为 0，省一次查询），如果有相同的结果，那么做一个 AND 就知道第一个数为多少了，否则所有值都出现了，那么我们可以找到一个 i 使得 $r[1] \wedge r[i] = 2^n - 1$，此时 $r[1] \And r[i] = 0$，我们再找一个数 j，求 <code>r[i] &amp; r[j]</code> 以及 <code>r[1] &amp; r[j]</code> 再利用 <code>a + b = a ^ b + 2 (a &amp; b)</code> 就可以求出 <code>r[1]</code> 了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"XOR 1 "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">-1</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b[a[i]] == <span class="number">-1</span>) b[a[i]] = i;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; b[a[i]] + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">int</span> tmp;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">			x = tmp ^ a[i];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> t1, t2;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; b[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; b[n - <span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t1;</span><br><span class="line">		t1 = t1 * <span class="number">2</span> + n - <span class="number">2</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t2;</span><br><span class="line">		t2 = t2 * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">		x = (n - <span class="number">1</span> + t1 + t2) / <span class="number">2</span> - t1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (x ^ a[i]);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实本题另一种处理技巧，不需要 $n$ 为 2 的幂次，只需考虑异或为 1 和 2 的 <code>i,j</code>。下面做法基于此想法</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"XOR 1 "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">-1</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b[a[i]] == <span class="number">-1</span>) b[a[i]] = i;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; b[a[i]] + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">int</span> tmp;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; tmp;</span><br><span class="line">			x = tmp ^ a[i];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> t1, t2;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t1;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"AND "</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; b[<span class="number">2</span>] + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t2;</span><br><span class="line">		x = t1 | (t2 &amp; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; (x ^ a[i]);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1451D：很好博弈问题"><a href="#1451D：很好博弈问题" class="headerlink" title="1451D：很好博弈问题"></a><a href="https://codeforces.com/contest/1451/problem/D" target="_blank" rel="noopener">1451D</a>：很好博弈问题</h3><p>题意：从 (0, 0) 开始，每次可以向上或向右走 k 个单位（但是和起点距离不能超过 d），两人轮流走，谁不能走了谁输。</p>
<p>显然可以简化成走一个单位，距离不超过 $\frac{d}{k}$. 没过一小会，我就想到了，若 $2 x^2 \leq \frac{d^2}{k^2} &lt; 2 (x + 1)^2$，那么，如果 $x^2 + (x + 1)^2 \leq \frac{d^2}{k^2}$，那么先手赢，否则先手输。</p>
<blockquote>
<p>注意到 $x^2 + (x + 2)^2 = 2 (x + 1)^2 + 2 &gt; d$</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		LL d, k;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; d &gt;&gt; k;</span><br><span class="line">		d = d * d / k / k;</span><br><span class="line">		LL x = <span class="built_in">std</span>::<span class="built_in">sqrt</span>(d / <span class="number">2</span> + <span class="number">0.1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (x * x + (x + <span class="number">1</span>) * (x + <span class="number">1</span>) &lt;= d ? <span class="string">"Ashish\n"</span> : <span class="string">"Utkarsh\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1451C"><a href="#1451C" class="headerlink" title="1451C"></a><a href="https://codeforces.com/contest/1451/problem/C" target="_blank" rel="noopener">1451C</a></h3><p>题意：给定长为 n 的由小写字母组成的字符串 <code>a, b</code>，可以将 <code>a</code> 相邻的位置互换（因此所有位置都可以互换），也可以将长为 $k$ 且每一位都相同的字母全部变成下一个字母。</p>
<p>做法：一开始想排序之和贪心（<a href="https://codeforces.com/contest/1451/submission/99143008" target="_blank" rel="noopener">这份代码</a>），后来发现 <code>n = 3, k = 2</code> 时 <code>aab</code> 变成 <code>zzy</code> 就会出问题。我还以为思路没问题，又交了一遍，属实天真。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">std</span>::sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">// for (int i = 0; i &lt; n; ++i) if (a[i] &gt; b[i]) return 0;</span></span><br><span class="line">	<span class="keyword">int</span> sa = <span class="number">0</span>, sb = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">auto</span> deal = [&amp;](<span class="keyword">char</span> c) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) a[sa - i] = c;</span><br><span class="line">		sa -= k;</span><br><span class="line">		--t;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (sb &lt; n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sa == n) deal(b[sb]);</span><br><span class="line">		<span class="keyword">if</span> (a[sa] == b[sb]) &#123;</span><br><span class="line">			++sa;</span><br><span class="line">			++sb;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[sa] &gt; b[sb]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (t == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			deal(b[sb]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (sa + k - <span class="number">1</span> &lt; n &amp;&amp; a[sa] == a[sa + k - <span class="number">1</span>]) &#123;</span><br><span class="line">				++t;</span><br><span class="line">				sa += k;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (solve() ? <span class="string">"Yes\n"</span> : <span class="string">"No\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此题考虑每个数的个数会更简单！怪不得他们做的这么快…</p>
</blockquote>
<h3 id="1452E：特别难的复杂度降低问题，经典问题，注意转化"><a href="#1452E：特别难的复杂度降低问题，经典问题，注意转化" class="headerlink" title="1452E：特别难的复杂度降低问题，经典问题，注意转化"></a><a href="https://codeforces.com/contest/1452/problem/E" target="_blank" rel="noopener">1452E</a>：特别难的复杂度降低问题，经典问题，注意转化</h3><p>题意，有两个出题人各自连续讲 k 题，每个参赛者选择去听其中一个出题人讲题，参赛者感兴趣的题在一个区间 <code>[l, r]</code> 问每个参赛者能听的自己感兴趣的题目的总和最大值为多少，$n$：总题目数，$m$ 参赛人数。</p>
<p>首先这里有一个自然的 $O(n^2 m)$ 的做法，有些人利用 Codeforces 上支持的 GCC 指令过了题…。<br>官方题解说：对于每个参赛者的感兴趣区间 <code>[l, r]</code>，某一个出题人讲题区间 <code>[i, i + k - 1]</code>，当 <code>i</code> 在递增时，这两个区间的交会怎样变化呢？在脑子里把区间进行平移会发现，它先增，在它们的中间相交之后递减，并且还是对称的。也就是说，<strong>两个出题人它们区间的中点和参赛者近的会被参赛者选择</strong>。因此排序之后，第一个出题人拿前缀，后一个拿后缀。所以就是求前缀和和后缀和之和的最大值。总复杂度 $O(mn + m \log m)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pii&gt; <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [](<span class="keyword">const</span> pii &amp;A, <span class="keyword">const</span> pii &amp;B) &#123;</span><br><span class="line">		<span class="keyword">return</span> A.first + A.second &lt; B.first + B.second;</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sm</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + k &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">			cur += <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">std</span>::<span class="built_in">min</span>(i + k, a[j].second) - <span class="built_in">std</span>::<span class="built_in">max</span>(i, a[j].first - <span class="number">1</span>));</span><br><span class="line">			sm[j] = <span class="built_in">std</span>::<span class="built_in">max</span>(sm[j], cur);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = sm[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + k &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">			cur += <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, <span class="built_in">std</span>::<span class="built_in">min</span>(i + k, a[j].second) - <span class="built_in">std</span>::<span class="built_in">max</span>(i, a[j].first - <span class="number">1</span>));</span><br><span class="line">			ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, cur + sm[j + <span class="number">1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有人写了不排序的 $O(n m)$ 做法，反正我时没懂。</p>
</blockquote>
<h3 id="1452F：经典观察贪心问题"><a href="#1452F：经典观察贪心问题" class="headerlink" title="1452F：经典观察贪心问题"></a><a href="https://codeforces.com/contest/1452/problem/F" target="_blank" rel="noopener">1452F</a>：经典观察贪心问题</h3><p>题意：有 $a_i$ 个 $2^i$ 的数，每次可以把某个 $2^{i + 1}$ 分成两个 $2^i$，给定 $x,y$，问至少需要多少次操作可以有至少 $y$ 个数小于 $2^x$。</p>
<p>首先，如果一个数 $2 \leq 2^l \leq 2^x$，那么分一次多一个答案，这种称作小的，可以将 $2^l$ 分成 $2^{l - x}$ 个 $2^x$，需要的次数为 $2^{l - x} + 1$。首先注意到 $l &gt; k$ 时，分小的性价比较高，因此我们递增的考虑 $2^l &gt; 2^x$</p>
<ul>
<li>若 $2^{l - x} \leq k$，全部搞一下就可以了</li>
<li>否则，若 $2^{l - x} &gt; k$，这个时候我们可以看那些小的个数是否大于等于 $k$，如果是，那结束了，否则将 $2^l$ 分割成 两个 $2^{l - 1}$，再判断，若 $2^{l - 1 - x} &gt; k$，那么最多只会用到一个 $2^{l - 1}$，否则有一个 $2^{l - 1}$ 必然全部都拿来用了。那好了再次回到了这个判断上来了。经典！</li>
</ul>
<blockquote>
<p>一开始以为时线段树问题，后来一看 $n &lt; 30$，有一堆的观察之后才好下手的！每一步的观察都要准确！才能一步一步的走向正确的答案</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">auto</span> getans = [&amp;](<span class="keyword">int</span> x, LL y) -&gt; LL &#123;</span><br><span class="line">		LL small = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= x; ++i) &#123;</span><br><span class="line">			y -= a[i];</span><br><span class="line">			small += (a[i] &lt;&lt; i) - a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (y &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span> i, LL t) &#123;</span><br><span class="line">			ans += (t &lt;&lt; i - x) - t;</span><br><span class="line">			y -= t &lt;&lt; i - x;</span><br><span class="line">			small += (t &lt;&lt; i) - (t &lt;&lt; i - x);</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> id = x + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; n) &#123;</span><br><span class="line">			LL t = <span class="built_in">std</span>::<span class="built_in">min</span>(y &gt;&gt; id - x, a[id]);</span><br><span class="line">			<span class="keyword">if</span> (t &gt; <span class="number">0</span>) add(id, t);</span><br><span class="line">			<span class="keyword">if</span> (t &lt; a[id]) <span class="keyword">break</span>;</span><br><span class="line">			++id;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (id == n) <span class="keyword">return</span> y &gt; small ? <span class="number">-1</span> : y + ans;</span><br><span class="line">		<span class="keyword">while</span> (y &gt; small &amp;&amp; id &gt; x) &#123;</span><br><span class="line">			--id;</span><br><span class="line">			++ans;</span><br><span class="line">			<span class="keyword">if</span> (y &gt;&gt; id - x) add(id, <span class="number">1L</span>L);</span><br><span class="line">			<span class="keyword">if</span> (id == x &amp;&amp; y &gt; <span class="number">0</span>) add(id, <span class="number">1L</span>L);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> y + ans;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> op, x;</span><br><span class="line">		LL y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) a[x] = y;</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; getans(x, y) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1440C：模拟题"><a href="#1440C：模拟题" class="headerlink" title="1440C：模拟题"></a><a href="https://codeforces.com/contest/1440/problem/C2" target="_blank" rel="noopener">1440C</a>：模拟题</h3><p>题意：给定 $n \times m$ 的 <code>0-1</code> 矩阵，每次操作改变 $2 \times 2$ 小方块中三个位置，要求在 $nm$ 步内使得所有方块为 0。首先显然每一行可以通过 $m$ 次操作置 0，每一列同理，所以最后转化成对 $2 \times 2$ 四次内变成全 0</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; r;</span><br><span class="line">		<span class="keyword">auto</span> f = [](<span class="keyword">char</span> &amp;x) &#123;x = (x == <span class="string">'0'</span> ? <span class="string">'1'</span> : <span class="string">'0'</span>);&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">1</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) <span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">				r.emplace_back(i, j);</span><br><span class="line">				r.emplace_back(i - <span class="number">1</span>, j);</span><br><span class="line">				f(s[i - <span class="number">1</span>][j]);</span><br><span class="line">				<span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">					r.emplace_back(i - <span class="number">1</span>, j - <span class="number">1</span>);</span><br><span class="line">					f(s[i - <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					r.emplace_back(i - <span class="number">1</span>, j + <span class="number">1</span>);</span><br><span class="line">					f(s[i - <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt; <span class="number">1</span>; --j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> (s[i][j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">					r.emplace_back(i, j);</span><br><span class="line">					r.emplace_back(i, j - <span class="number">1</span>);</span><br><span class="line">					r.emplace_back(<span class="number">1</span> - i, j - <span class="number">1</span>);</span><br><span class="line">					f(s[i][j - <span class="number">1</span>]);</span><br><span class="line">					f(s[<span class="number">1</span> - i][j - <span class="number">1</span>]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; t[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line">				t[s[i][j] - <span class="string">'0'</span>].emplace_back(i, j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">auto</span> g = [&amp;](<span class="keyword">int</span> i) &#123;</span><br><span class="line">			r.emplace_back(t[i].back());</span><br><span class="line">			t[<span class="number">1</span> - i].emplace_front(t[i].back());</span><br><span class="line">			t[i].pop_back();</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">if</span> (t[<span class="number">1</span>].<span class="built_in">size</span>() == <span class="number">4</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) g(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t[<span class="number">1</span>].<span class="built_in">size</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">			g(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) g(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t[<span class="number">1</span>].<span class="built_in">size</span>() == <span class="number">2</span>) &#123;</span><br><span class="line">			g(<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) g(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t[<span class="number">1</span>].<span class="built_in">size</span>() == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) g(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r.<span class="built_in">size</span>() / <span class="number">3</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * <span class="number">3</span> &lt; r.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i * <span class="number">3</span> + j].first + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; r[i * <span class="number">3</span> + j].second + <span class="number">1</span> &lt;&lt; <span class="string">" \n"</span>[j == <span class="number">2</span>];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1440D：图论乱搞"><a href="#1440D：图论乱搞" class="headerlink" title="1440D：图论乱搞"></a><a href="https://codeforces.com/contest/1440/problem/D" target="_blank" rel="noopener">1440D</a>：图论乱搞</h3><p>题意：问一个图中是否存在 k-阶完全子图，或一个度数全大于 k 的子图。</p>
<blockquote>
<p>显然，我们可以把度数小于 $k - 1$ 的节点全部踢了。即从度数从小到大的遍历，小于 $k - 1$ 踢了，等于 $k - 1$, 看这 $k$ 个点能否成为完全图，能？结束，否则，继续，直到当前度数为 $k$，或者所有点都被剔除。</p>
</blockquote>
<p>没能在比赛的时候做出原因：</p>
<ul>
<li>没有注意到删点后更新度数的次数只和边数有关，所以当时觉得复杂度过不了！</li>
<li>在完全图判断时不够自信（单次复杂度 $k^2$，但是注意到边数小于 $\frac{(k - 1)k}{2}$ 时不可能为完全图）。</li>
<li>总复杂度 $O(m \sqrt{m} \log n)$，下面代码 998ms 飘过（在死亡的边缘疯狂试探）</li>
<li><code>unordered_set</code> 是基于 hash 表的，如果不需要集合按顺序输出，可以作为优先选择。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x, y; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		--x; --y;</span><br><span class="line">		e[x].insert(y);</span><br><span class="line">		e[y].insert(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; d;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) d.insert(&#123;e[i].<span class="built_in">size</span>(), i&#125;);</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp(e[u].<span class="built_in">begin</span>(), e[u].<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tmp.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">				<span class="keyword">if</span> (e[tmp[i]].count(tmp[j]) == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> del = [&amp;](<span class="keyword">int</span> u) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">			d.erase(&#123;e[v].<span class="built_in">size</span>(), v&#125;);</span><br><span class="line">			e[v].erase(u);</span><br><span class="line">			d.insert(&#123;e[v].<span class="built_in">size</span>(), v&#125;);</span><br><span class="line">			--m;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (!d.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> du = d.<span class="built_in">begin</span>()-&gt;first;</span><br><span class="line">		<span class="keyword">int</span> u = d.<span class="built_in">begin</span>()-&gt;second;</span><br><span class="line">		<span class="keyword">if</span> (du &gt;= k) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; d.<span class="built_in">size</span>() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> it = d.<span class="built_in">begin</span>(); it != d.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (it-&gt;second + <span class="number">1</span>) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (du == k - <span class="number">1</span> &amp;&amp; k - <span class="number">1</span> &lt;= m * <span class="number">2</span> / k &amp;&amp; check(u)) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; u + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : e[u]) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		d.erase(d.<span class="built_in">begin</span>());</span><br><span class="line">		del(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		solve();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1440E-线段树"><a href="#1440E-线段树" class="headerlink" title="1440E: 线段树"></a><a href="https://codeforces.com/contest/1440/problem/E" target="_blank" rel="noopener">1440E</a>: 线段树</h3><p>没能在比赛的时候做出原因：</p>
<ul>
<li>线段树模板不太好用</li>
<li>没有注意到数列必然单调递减，所以处理的时候处理复杂了</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mn, tag;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; sm;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> lson l, m, 2 * p</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, 2 * p + 1</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mn.resize(<span class="number">4</span> * n);</span><br><span class="line">		tag.resize(<span class="number">4</span> * n);</span><br><span class="line">		sm.resize(<span class="number">4</span> * n);</span><br><span class="line">	&#125;</span><br><span class="line">	SegmentTree(<span class="keyword">int</span> _n) : n(_n) &#123;</span><br><span class="line">		resize();</span><br><span class="line">	&#125;</span><br><span class="line">	SegmentTree(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a) &#123;</span><br><span class="line">		n = a.<span class="built_in">size</span>();</span><br><span class="line">		resize();</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; build = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p) &#123;</span><br><span class="line">			<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">				mn[p] = sm[p] = a[l - <span class="number">1</span>];</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">			build(lson);</span><br><span class="line">			build(rson);</span><br><span class="line">			pull(p);</span><br><span class="line">		&#125;;</span><br><span class="line">		build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		mn[p] = <span class="built_in">std</span>::<span class="built_in">min</span>(mn[<span class="number">2</span> * p], mn[<span class="number">2</span> * p + <span class="number">1</span>]);</span><br><span class="line">		sm[p] = sm[<span class="number">2</span> * p] + sm[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		tag[p] = mn[p] = v;</span><br><span class="line">		sm[p] = LL(r - l + <span class="number">1</span>) * v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tag[p]) &#123;</span><br><span class="line">			<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">			<span class="built_in">set</span>(lson, tag[p]);</span><br><span class="line">			<span class="built_in">set</span>(rson, tag[p]);</span><br><span class="line">			tag[p] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rangeSet</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) &#123;</span><br><span class="line">			<span class="built_in">set</span>(l, r, p, v);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		push(l, r, p);</span><br><span class="line">		<span class="keyword">if</span> (L &lt;= m) rangeSet(L, R, v, lson);</span><br><span class="line">		<span class="keyword">if</span> (R &gt; m) rangeSet(L, R, v, rson);</span><br><span class="line">		pull(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>&amp; y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mn[p] &gt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= l &amp;&amp; sm[p] &lt;= y) &#123;</span><br><span class="line">			y -= sm[p];</span><br><span class="line">			<span class="keyword">return</span> r - l + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		push(l, r, p);</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= m) ans += query(x, y, lson); </span><br><span class="line">		ans += query(x, y, rson);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> query(x, y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">bounded</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mn[p] &gt;= v) <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (mn[<span class="number">2</span> * p] &gt;= v) <span class="keyword">return</span> bounded(v, rson);</span><br><span class="line">		<span class="keyword">return</span> bounded(v, lson);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> l = bounded(y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= x) rangeSet(l, x, y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x: a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="function">SegmentTree <span class="title">A</span><span class="params">(a)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> op, x, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) A.modify(x, y);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; A.query(x, y) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1447B：简单细节题"><a href="#1447B：简单细节题" class="headerlink" title="1447B：简单细节题"></a><a href="https://codeforces.com/contest/1447/problem/B" target="_blank" rel="noopener">1447B</a>：简单细节题</h3><ul>
<li>很早就知道，任意两个可以换，要考虑非正数的个数是否为奇数。</li>
<li>然后为奇数时，绝对值总和减去 2 倍的最大的非正数（！！！这是错了）。</li>
<li>后来想了半天终于知道时减去绝对值最小的数。</li>
<li>然后再之前的内容上改，写出了下面屎一样的 RE 代码！还 PE 了，最后 RE，吐了！</li>
</ul>
<p><strong>此代码为 RE 代码！</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		n *= m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			r += <span class="built_in">abs</span>(x);</span><br><span class="line">			<span class="keyword">if</span> (x &lt;= <span class="number">0</span>) a.emplace_back(-x);</span><br><span class="line">			<span class="keyword">else</span> b.emplace_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a.<span class="built_in">size</span>() &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			r -= <span class="built_in">std</span>::<span class="built_in">min</span>(*<span class="built_in">std</span>::min_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()), *<span class="built_in">std</span>::min_element(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>())) * <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1447C：经典问题：假-0-1-背包，真贪心"><a href="#1447C：经典问题：假-0-1-背包，真贪心" class="headerlink" title="1447C：经典问题：假 0-1 背包，真贪心"></a><a href="https://codeforces.com/contest/1447/problem/C" target="_blank" rel="noopener">1447C</a>：经典问题：假 0-1 背包，真贪心</h3><p>题意：给定 $n$ 件物品 $w_i$，给出一个 $k$ 件物品和在 $[\lfloor \frac{W}{2} \rfloor, W]$ 之间的一种方案</p>
<p>做法：对物品从大到小排序，然后贪心即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL w;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; w;</span><br><span class="line">		std::vector&lt;std::pair&lt;int, int&gt;&gt; a(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i].first;</span><br><span class="line">			a[i].second = i + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">std</span>::greater&lt;&gt;());</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		LL s = <span class="number">0</span>, h = (w + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s + a[i].first &lt;= w) &#123;</span><br><span class="line">				x.emplace_back(a[i].second);</span><br><span class="line">				s += a[i].first;</span><br><span class="line">				<span class="keyword">if</span> (s &gt;= h) &#123;</span><br><span class="line">					flag = <span class="literal">true</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="built_in">std</span>::sort(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>());</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : x) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1447D：DP"><a href="#1447D：DP" class="headerlink" title="1447D：DP"></a><a href="https://codeforces.com/contest/1447/problem/D" target="_blank" rel="noopener">1447D</a>：DP</h3><blockquote>
<p>就是一个简单的 DP，写完我都有点虚…</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> a, b;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m + <span class="number">1</span>))</span></span>;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">			dp[i][j] = <span class="built_in">std</span>::<span class="built_in">max</span>(&#123;<span class="number">0</span>, dp[i - <span class="number">1</span>][j] - <span class="number">1</span>, dp[i][j - <span class="number">1</span>] - <span class="number">1</span>&#125;);</span><br><span class="line">			<span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) dp[i][j] = <span class="built_in">std</span>::<span class="built_in">max</span>(dp[i][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">			r = <span class="built_in">std</span>::<span class="built_in">max</span>(r, dp[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="144E：思维题"><a href="#144E：思维题" class="headerlink" title="144E：思维题"></a><a href="https://codeforces.com/contest/1447/problem/E" target="_blank" rel="noopener">144E</a>：思维题</h3><ul>
<li>考虑最高位，如果最高位为 1，最高位为 0 的个数都大于 1，那么它们必然不连通，所以我们要将其中的一个变得不超过 1，注意不能贪心。并且注意到如果元素个数不超过 2，必然连通。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="keyword">int</span> now) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (now &lt; <span class="number">0</span> || a.<span class="built_in">size</span>() &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b, c;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((x &gt;&gt; now) &amp; <span class="number">1</span>) b.emplace_back(x);</span><br><span class="line">			<span class="keyword">else</span> c.emplace_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">min</span>(dfs(b, now - <span class="number">1</span>) + <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, <span class="keyword">int</span>(c.<span class="built_in">size</span>() - <span class="number">1</span>)), dfs(c, now - <span class="number">1</span>) + <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, <span class="keyword">int</span>(b.<span class="built_in">size</span>() - <span class="number">1</span>)));</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dfs(a, <span class="number">29</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-ABC-183f：并查集-map"><a href="#AtCoder-ABC-183f：并查集-map" class="headerlink" title="AtCoder ABC 183f：并查集 + map"></a><a href="https://atcoder.jp/contests/abc183/tasks/abc183_f" target="_blank" rel="noopener">AtCoder ABC 183f</a>：并查集 + map</h3><p>题意：N 个节点，每个节点有一个值，然后 Q 次操作：<code>1 a b</code> 是将 a, b 所在的群合并，<code>2 x y</code> 求 $x$ 所在的群中，值为 $y$ 的个数。细节优化</p>
<ul>
<li>尽量小的向大的合并，合并完小的记得清空</li>
<li><code>std::map</code> 优于 <code>std::multiset</code></li>
<li><code>std::vector&lt;std::map&lt;int, int&gt;&gt;</code> 优于 <code>std::map&lt;std::map&lt;int, int&gt;&gt;</code></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	std::vector&lt;int&gt; c(n), p(n);</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	std::vector&lt;std::map&lt;int, int&gt;&gt; mp(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : c) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x, --x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) ++mp[i][c[i]];</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; <span class="built_in">find</span> = [&amp;](<span class="keyword">int</span> x) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> ans = x;</span><br><span class="line">		<span class="keyword">while</span> (ans != p[ans]) ans = p[ans];</span><br><span class="line">		<span class="keyword">while</span> (x != ans) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = p[x];</span><br><span class="line">			p[x] = ans;</span><br><span class="line">			x = t;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> father = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> pi) &#123;</span><br><span class="line">		p[i] = pi;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = mp[i].<span class="built_in">begin</span>(); it != mp[i].<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">			mp[pi][it-&gt;first] += it-&gt;second;</span><br><span class="line">		&#125;</span><br><span class="line">		mp[i].<span class="built_in">clear</span>();</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> merge = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">		<span class="keyword">int</span> fi = <span class="built_in">find</span>(i), fj = <span class="built_in">find</span>(j);</span><br><span class="line">		<span class="keyword">if</span> (fi != fj) &#123;</span><br><span class="line">			<span class="keyword">if</span> (mp[fi].<span class="built_in">size</span>() &lt; mp[fj].<span class="built_in">size</span>()) father(fi, fj);</span><br><span class="line">			<span class="keyword">else</span> father(fj, fi);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> op, a, b;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		--a; --b;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">			merge(a, b);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> fa = <span class="built_in">find</span>(a);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mp[fa][b] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-ABC-183e：经典-DP"><a href="#AtCoder-ABC-183e：经典-DP" class="headerlink" title="AtCoder ABC 183e：经典 DP"></a><a href="https://atcoder.jp/contests/abc183/tasks/abc183_e" target="_blank" rel="noopener">AtCoder ABC 183e</a>：经典 DP</h3><p>题意：在 $n \times m$ 的格点中，有些点可以走有些不行，每次能往右，下或右下中的一个方向走任意步（但是中间不能有非法点），问有多少种从左上角到右下角的走法。</p>
<blockquote>
<p>显然 DP，然后用类和优化</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;std::vector&lt;int&gt;&gt; a(n, std::vector&lt;int&gt;(m)), al(n, std::vector&lt;int&gt;(m)), au(n, std::vector&lt;int&gt;(m)), ad(n, std::vector&lt;int&gt;(m));</span><br><span class="line">	a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (j &gt; <span class="number">0</span>) (a[i][j] += al[i][j - <span class="number">1</span>]) %= M;</span><br><span class="line">				<span class="keyword">if</span> (i &gt; <span class="number">0</span>) (a[i][j] += au[i - <span class="number">1</span>][j]) %= M;</span><br><span class="line">				<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) (a[i][j] += ad[i - <span class="number">1</span>][j - <span class="number">1</span>]) %= M;</span><br><span class="line">				al[i][j] = au[i][j] = ad[i][j] = a[i][j];</span><br><span class="line">				<span class="keyword">if</span> (j &gt; <span class="number">0</span>) (al[i][j] += al[i][j - <span class="number">1</span>]) %= M;</span><br><span class="line">				<span class="keyword">if</span> (i &gt; <span class="number">0</span>) (au[i][j] += au[i - <span class="number">1</span>][j]) %= M;</span><br><span class="line">				<span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) (ad[i][j] += ad[i - <span class="number">1</span>][j - <span class="number">1</span>]) %= M;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">				a[i][j] = al[i][j] = au[i][j] = ad[i][j] = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[n - <span class="number">1</span>][m - <span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1438-数学场"><a href="#1438-数学场" class="headerlink" title="1438 数学场"></a><a href="https://codeforces.com/contest/1438" target="_blank" rel="noopener">1438 数学场</a></h3><p>A 题：$a_i = 1$ 即可<br>B 题：若存在 $i \neq j$ 使得 $a_i = a_j$，则 YES，否则 NO（考虑二进制）<br>C 题：可以根据假设强制让 $a_{i + j}$ 与 $i + j$ 有相同的奇偶性，那么必然满足条件，此问题一般化 <a href="https://codeforces.com/contest/1438/submission/98431377" target="_blank" rel="noopener">解法</a><br>D 题：注意到首先我们可以让数列成对相等并且 $x \otimes x \otimes y = y$，所以如果 $n$ 为奇数，必然就 YES，若 $n$ 为偶数，我们成对这样搞之后，会有两个元素可能不等，又注意到它们相等当且仅当所有值异或为 0，所以搞定</p>
<blockquote>
<p>代码索然无味就不写了</p>
</blockquote>
<h3 id="Atcoder-ABC182F：找钱问题"><a href="#Atcoder-ABC182F：找钱问题" class="headerlink" title="Atcoder ABC182F：找钱问题"></a><a href="https://atcoder.jp/contests/abc182/tasks/abc182_f" target="_blank" rel="noopener">Atcoder ABC182F</a>：找钱问题</h3><p>给定 $n$ 种纸币，$1 = a_1 &lt; a_2 &lt; \cdots a_n$，且 $a_i | a_{i + 1}$，要买商品 $x$，那么可以给 $y \geq x$，找零 $y - x$，要求 $y$ 和 $y - x$ 的最少纸币表达中没有公共纸币。问所有的 $y$ 有没有种。</p>
<blockquote>
<p>注意到 $y$ 和 $(y_1, \cdots, y_n)$，(其中 $y_i * a_i &lt; a_{i + 1}$，且 $y = \sum a_i y_i$ 有一个一一对应。然后我们可以考虑 $x$ 的向量表达，然后再看 $y + x$ 和 $y$ 没公共非零项的做法。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	LL x;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	x %= a.back();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">map</span>&lt;LL, LL&gt; mp;</span><br><span class="line">	mp.insert(&#123;x, <span class="number">1</span>&#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">map</span>&lt;LL, LL&gt; mp2;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">			mp2[it-&gt;first / a[i]] += it -&gt; second;</span><br><span class="line">			<span class="keyword">if</span> (it-&gt;first % a[i]) mp2[it-&gt;first / a[i] + <span class="number">1</span>] += it-&gt;second;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) a[j] /= a[i];</span><br><span class="line">		<span class="built_in">std</span>::swap(mp, mp2); <span class="comment">// 用 swap 更快！</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mp[<span class="number">0</span>] + mp[<span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="凸优化借助凸包解决"><a href="#凸优化借助凸包解决" class="headerlink" title="凸优化借助凸包解决"></a><a href="https://vjudge.net/problem/Kattis-mobilization" target="_blank" rel="noopener">凸优化借助凸包解决</a></h3><blockquote>
<p>详细解释放在 <a href="https://izlyforever.com/spookywooky/" target="_blank" rel="noopener">izlyforever</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">using</span> pdd = <span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">fabs</span>(x) &lt; eps ? <span class="number">0</span> : (x &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">crossLeft</span><span class="params">(<span class="keyword">const</span> pii &amp;op, <span class="keyword">const</span> pii &amp;sp, <span class="keyword">const</span> pii &amp;ep)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (sp.first - op.first) * (ep.second - op.second) </span><br><span class="line">	&lt; (sp.second - op.second) * (ep.first - op.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pdd&gt; <span class="title">convexHull</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pdd&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">	p.erase(<span class="built_in">std</span>::unique(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>()), p.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pdd&gt; <span class="title">q</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; crossLeft(q[top - <span class="number">1</span>], p[i], q[top - <span class="number">2</span>])) --top;</span><br><span class="line">		q[top++] = p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> len = top;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (top &gt; len &amp;&amp; crossLeft(q[top - <span class="number">1</span>], p[i], q[top - <span class="number">2</span>])) --top;</span><br><span class="line">		q[top++] = p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	top -= n &gt; <span class="number">1</span>;</span><br><span class="line">	q.resize(top);</span><br><span class="line">	<span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, d, c;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pdd&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : p) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; c &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		x = x * d / c;</span><br><span class="line">		y = y * d / c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> q = convexHull(p);</span><br><span class="line">	<span class="keyword">auto</span> cal = [](pdd p) &#123;</span><br><span class="line">		<span class="keyword">return</span> p.first * p.second;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> deal = [](pdd a, pdd b) -&gt; <span class="keyword">double</span> &#123;</span><br><span class="line">		a.first -= b.first; a.second -= b.second;</span><br><span class="line">		<span class="keyword">if</span> (a.first * a.second &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">double</span> t = -(b.first / a.first + b.second / a.second) / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span> (t &gt; <span class="number">0</span> &amp;&amp; t &lt; <span class="number">1</span>) <span class="keyword">return</span> (a.first * t + b.first) * (a.second * t + b.second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">double</span> r = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : q) r = <span class="built_in">std</span>::<span class="built_in">max</span>(r, cal(x));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		r = <span class="built_in">std</span>::<span class="built_in">max</span>(r, deal(q[i], q[(i + <span class="number">1</span>) % q.<span class="built_in">size</span>()]));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span>.precision(<span class="number">12</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::fixed &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Atcoder-arc107C：并查集"><a href="#Atcoder-arc107C：并查集" class="headerlink" title="Atcoder arc107C：并查集"></a><a href="https://atcoder.jp/contests/arc107/tasks/arc107_c" target="_blank" rel="noopener">Atcoder arc107C</a>：并查集</h3><p>首先，如果某两列和交换，那么给它们连边，那么只要任意两列可达，那么它们的位置最后就可以交换，也就是求每个连通分支的大小，直接广搜标记也可以做，当然了用并查集会更简单。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">fac</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">a</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : x) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;]() &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n);</span><br><span class="line">		<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">auto</span> <span class="built_in">find</span> = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">			<span class="keyword">int</span> ans = x;</span><br><span class="line">			<span class="keyword">while</span> (ans != p[ans]) ans = p[ans];</span><br><span class="line">			<span class="keyword">while</span> (x != ans) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = p[x];</span><br><span class="line">				p[x] = ans;</span><br><span class="line">				x = t;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ans;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">				<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; n; ++t) &#123;</span><br><span class="line">					<span class="keyword">if</span> (a[i][t] + a[j][t] &gt; k) &#123;</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag) p[<span class="built_in">find</span>(j)] = p[<span class="built_in">find</span>(i)];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">find</span>(i);</span><br><span class="line">		LL r = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="built_in">std</span>::count(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), i);</span><br><span class="line">			r = r * fac[cnt] % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL r = f();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">			<span class="built_in">std</span>::swap(a[i][j], a[j][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	r = r * f() % M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Atcoder-arc107D：经典计算，DP-优化"><a href="#Atcoder-arc107D：经典计算，DP-优化" class="headerlink" title="Atcoder arc107D：经典计算，DP 优化"></a><a href="https://atcoder.jp/contests/arc107/tasks/arc107_d" target="_blank" rel="noopener">Atcoder arc107D</a>：经典计算，DP 优化</h3><p>将 $K$ 写成 $N$ 个形如 $2^{-i}, i \geq 0$ 之和（不计顺序），问有多少中写法。我们不妨将答案记作 <code>dp[n][k]</code><br>那么显然 <code>dp[n][k] = dp[n][2k] + dp[n - 1][2k - 2] + \cdots dp[n - k][0]</code>（考虑取多少个 <code>1</code>，那么剩下的最少要以 $\frac{1}{2}$ 为最大值，那么就等价于剩下的数乘以 <code>2</code>)，所以令 <code>s[a] = dp[a][0] + dp[a + 1][2] + \cdots dp[n][2(n - a)]</code>，这样我们就能迅速求出 <code>dp[n][k]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) dp[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	s[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">auto</span> add = [](<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">		(x += y) &gt;= M &amp;&amp; (x -= M);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">			dp[i][j] = s[i - j];</span><br><span class="line">			<span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) add(s[i - (j / <span class="number">2</span>)], dp[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dp[n][k] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1442D：经典分治问题"><a href="#1442D：经典分治问题" class="headerlink" title="1442D：经典分治问题"></a><a href="https://codeforces.com/contest/1442/problem/D" target="_blank" rel="noopener">1442D</a>：经典分治问题</h3><blockquote>
<p>首先这是一个很实在的问题。给定 $n$ 个单调递增的序列，从中取 $k$ 个数，但是取数的时候每次只能在序列的最前面取，也就是取最小的。求最大的和。首先注意最多只有一个序列取了一部分，其它的要么没取，要么取完（反证），那么我们可以二分枚举其在左边还是在右边</p>
</blockquote>
<p>如果直接暴力写，也就是枚举那个只取了一部分的，其它的就是一个 <code>0-1</code> 背包，所以总复杂度为 $O(n^2 k)$，这肯定是过不了的。但是可以分治，也就是说分成两半，一半是 <code>0-1</code> 背包（即要么取完要么没取），另一半是原问题的子问题！这不就有了吗，经典！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 	freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;p : a) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line">		p.emplace_back(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; cnt; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			<span class="keyword">if</span> (i &lt; k) p.push_back(p.back() + x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">dp</span><span class="params">(k + <span class="number">1</span>, <span class="number">-1e18</span>)</span></span>;</span><br><span class="line">	dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">auto</span> merge = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = k; j &gt;= a[i].<span class="built_in">size</span>() - <span class="number">1</span>; --j) &#123;</span><br><span class="line">				dp[j] = <span class="built_in">std</span>::<span class="built_in">max</span>(dp[j], dp[j - a[i].<span class="built_in">size</span>() + <span class="number">1</span>] + a[i].back());</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; divide = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (l + <span class="number">1</span> &gt;= r) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a[l].<span class="built_in">size</span>(); ++i) ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, dp[k - i] + a[l][i]);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">auto</span> tmp = dp;</span><br><span class="line">		merge(l, m);</span><br><span class="line">		divide(m, r);</span><br><span class="line">		</span><br><span class="line">		dp = tmp;</span><br><span class="line">		merge(m, r);</span><br><span class="line">		divide(l, m);</span><br><span class="line">	&#125;;</span><br><span class="line">	divide(<span class="number">0</span>, n);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本来是每一层都是一个 <code>dp</code>，但是 <a href="https://codeforces.com/profile/Itst" target="_blank" rel="noopener">Itst</a> 做了空间优化<br>知道在某一个性质的点上取得最值，那么不一定要把这个点求出来，可以在一定范围内把值都比较一遍即可，因为极值点的判断有可能相对更为复杂，这可能就是计算机的魅力吧。<br>另外 <a href="https://codeforces.com/contest/1442/submission/97479495" target="_blank" rel="noopener">Jiangly</a> 写了一个非递归的 $\sqrt{n}$ 的做法，也很犀利。</p>
</blockquote>
<h3 id="1443D：经典问题"><a href="#1443D：经典问题" class="headerlink" title="1443D：经典问题"></a><a href="https://codeforces.com/contest/1443/problem/D" target="_blank" rel="noopener">1443D</a>：经典问题</h3><p>给定一个非负数列，问是否可以通过前缀减一，后缀减一的方式使得所有的数都变成 0</p>
<blockquote>
<p>一开始以为只需中间的数大于两边的最小值之和就可以，后来发现不对，然后通过自己想了一个例子，然后想到了正确做法，开心<br>这个问题等价与给定 $a$，求非负序列 $p, q$ 满足 $p + q = a$, $p$ 单调减，$q$ 单调递增（在保证条件下，使得$p$ 尽量大）</p>
</blockquote>
<p>做法：看相邻两个数，比如左边比右边大，那么必然右边至少要做后缀减一的操作它们的差值次，也就是说，后面所有的数都要减去这个差值。反之同理，所以搞两个变量，一个是左边累减去（可以用剩余多少来标记），一个是右边累减。没跑一步判断一次。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">int</span> now = a[<span class="number">0</span>], cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &lt; cur) &#123;</span><br><span class="line">				flag = <span class="literal">false</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">				cur += a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				now -= a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">				<span class="keyword">if</span> (now &lt; <span class="number">0</span>) &#123;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1445D：一个-trival-的脑力问题"><a href="#1445D：一个-trival-的脑力问题" class="headerlink" title="1445D：一个 trival 的脑力问题"></a><a href="https://codeforces.com/contest/1445/problem/D" target="_blank" rel="noopener">1445D</a>：一个 trival 的脑力问题</h3><p>给定长为 $2n$ 的序列 $a$，分成两个长度为 $n$ 的序列 $p, q$ 然后 $p$ 非降，$q$ 非升，定义 $f(p, q) = \sum_{i = 1}^n |p_i - q_i|$，问所有的 $f(p, q)$ 的和为多少。</p>
<blockquote>
<p>不妨设 $a$ 是有序的，平均分两半，如果 $p$ 在左边取了 $k$ 个元素，那么 $q$ 必然在右边取了 $k$ 个元素，所以无论哪种情况，$f(p, q)$ 是常数。所以结论就显然了！所以可以搞个升级版！。</p>
</blockquote>
<p>答案就是 $\binom{2n}{n} \sum_{i = 1}^{n} (a_{i + n} - a_i)$，代码就不贴了。推公式把我推吐了。</p>
<blockquote>
<p>此题已经被我魔改了，哈哈哈</p>
</blockquote>
<h3 id="1437C：经典问题之动态规划"><a href="#1437C：经典问题之动态规划" class="headerlink" title="1437C：经典问题之动态规划"></a><a href="https://codeforces.com/contest/1437/problem/C" target="_blank" rel="noopener">1437C</a>：经典问题之动态规划</h3><p>给定 $1 \leq a_i \leq n$，求两两不同的正整数 $b_i$，使得 $\sum_{i = 1}^n |a_i - b_i|$ 最小。<br>显然只要 $b$ 的值域确定了，答案就确定了，且 $1 \leq b_i &lt; 2n$。所以就可以对 $a_i$ 排序，然后再 <code>1 ~ 2n - 1</code> 中选 $n$ 个数，使得结果最小。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>, <span class="number">1e9</span>)</span></span>;</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">		dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; <span class="number">0</span>; --j) dp[j] = <span class="built_in">std</span>::<span class="built_in">min</span>(dp[j], dp[j - <span class="number">1</span>] + <span class="built_in">abs</span>(a[j - <span class="number">1</span>] - i));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span>(dp[n]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1437E：最长递增子序列"><a href="#1437E：最长递增子序列" class="headerlink" title="1437E：最长递增子序列"></a><a href="https://codeforces.com/contest/1437/problem/E" target="_blank" rel="noopener">1437E</a>：最长递增子序列</h3><p>在固定数组的一些元素的条件下，最小改变多少数，使得数列严格单调递增（减去标号就变成 <strong>不严格</strong> 递增了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">2</span>)</span></span>;</span><br><span class="line">	a[<span class="number">0</span>] = <span class="number">-1e9</span> - <span class="number">2</span>, a[n + <span class="number">1</span>] = <span class="number">1e9</span> + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		a[i] -= i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(k + <span class="number">2</span>)</span></span>;</span><br><span class="line">	b[<span class="number">0</span>] = <span class="number">0</span>, b[k + <span class="number">1</span>] = n + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= k; ++i) <span class="keyword">if</span> (a[b[i]] &lt; a[b[i - <span class="number">1</span>]])&#123;</span><br><span class="line">		<span class="built_in">print</span>(<span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r = n - k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = b[i] + <span class="number">1</span>; j &lt; b[i + <span class="number">1</span>]; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j] &gt;= a[b[i]] &amp;&amp; a[j] &lt;= a[b[i + <span class="number">1</span>]]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> it = <span class="built_in">std</span>::upper_bound(c.<span class="built_in">begin</span>(), c.<span class="built_in">end</span>(), a[j]);</span><br><span class="line">				<span class="keyword">if</span> (it == c.<span class="built_in">end</span>()) c.push_back(a[j]);</span><br><span class="line">				<span class="keyword">else</span> *it = a[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		r -= c.<span class="built_in">size</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1435C：经典选择问题"><a href="#1435C：经典选择问题" class="headerlink" title="1435C：经典选择问题"></a><a href="https://codeforces.com/contest/1435/problem/C" target="_blank" rel="noopener">1435C</a>：经典选择问题</h3><p>题意大致可以转化成：有 $n$ 个人，每个人有 $m$ 个值可以选择，问如何选择才能使得他们的最大值减最小值最小。</p>
<p>做法就是把所有可能的选择进行排序（二维，一维存值，一维存人），然后看所有人至少一次选择的时候最大值和最小值的差是多少。相当于左右两个指针在跑，复杂度为 $O(nm)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">6</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pii&gt; p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			p.push_back(&#123;b[j] - a[i], j&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">1e9</span> + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, x = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (x &lt; n &amp;&amp; j &lt; p.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (cnt[p[j].second] == <span class="number">0</span>) ++x;</span><br><span class="line">			++cnt[p[j].second];</span><br><span class="line">			++j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; n) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (--cnt[p[i].second] == <span class="number">0</span>) --x;</span><br><span class="line">		r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, p[j - <span class="number">1</span>].first - p[i].first);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一开始想枚举最小值，三分法来做（但是我知道凸性一般是不成立的）</p>
</blockquote>
<h3 id="1435D：经典进出问题"><a href="#1435D：经典进出问题" class="headerlink" title="1435D：经典进出问题"></a><a href="https://codeforces.com/contest/1435/problem/D" target="_blank" rel="noopener">1435D</a>：经典进出问题</h3><p>将 $1 ~ n$ 个元素进行加入和提出操作（每个元素一次，共 $2n$）次，并且每次出的是当前集合中最小的值。<br>给定一个进出序列，和出的时候的元素值，求进的元素值（不合理的输出：NO)。</p>
<blockquote>
<p>注意到每出一个元素，那么集合中剩下的元素都要大于出的元素，但是这个信息可以由顶元素上加限制来承载。当在加入一个新元素后，这个限制又被暂时的隐藏了。所以存在当前顶元素上是特别优质的做法。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;pii&gt; A;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">		<span class="keyword">char</span> op;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="string">'+'</span>) A.push(&#123;now++, <span class="number">0</span>&#125;);</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			<span class="keyword">if</span> (A.empty() || A.top().second &gt; x) &#123;</span><br><span class="line">				<span class="built_in">print</span>(<span class="string">"NO"</span>);</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r[A.top().first] = x;</span><br><span class="line">				A.pop();</span><br><span class="line">				<span class="keyword">if</span> (!A.empty()) A.top().second = <span class="built_in">std</span>::<span class="built_in">max</span>(A.top().second, x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">"YES"</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">println</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此题一开始题意理解有点问题，最后竟然还 PA，结果最终评测 WA 了。</p>
</blockquote>
<h3 id="AtCoder-arc106d：经典求和计算"><a href="#AtCoder-arc106d：经典求和计算" class="headerlink" title="AtCoder arc106d：经典求和计算"></a><a href="https://atcoder.jp/contests/arc106/tasks/arc106_d" target="_blank" rel="noopener">AtCoder arc106d</a>：经典求和计算</h3><p>对任意 $1 \leq x \leq K$ 求 $\sum_{1 \leq i &lt; j \leq n} (a_i + a_j)^x$</p>
<p>注意到 </p>
<script type="math/tex; mode=display">
2 \sum_{1 \leq i < j \leq n} (a_i + a_j)^x = \sum_{i = 1}^n \sum_{j = 1}^n (a_i + a_j)^x - \sum_{i = 1}^n (2a_i)^x</script><p>然后二项式展开即可。</p>
<blockquote>
<p>若此题 $n$ 比较小，$k$ 比较大（$n$ 特别小时直接 $n^2 \log k$ 就没啥意思了），注意到二项式展开之后是个卷积形式，所以用 NFT 有 $O(nk + k \log k)$ 的做法。例如 $n &lt; 3 \cdot 10^4, k &lt; 10^5$ （时限 5s)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> LL inv2 = (M + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	std::vector&lt;LL&gt; fac(k + 1), ifac(k + 1);</span><br><span class="line">	fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[k] = powMod(fac[k], M - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt; <span class="number">0</span>; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">s</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		LL p = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">			s[j] += p;</span><br><span class="line">			<span class="keyword">if</span> (s[j] &gt;= M) s[j] -= M;</span><br><span class="line">			p = p * a[i] % M;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> C = [&amp;](<span class="keyword">int</span> n, <span class="keyword">int</span> m) &#123;</span><br><span class="line">		<span class="keyword">return</span> fac[n] * ifac[m] % M * ifac[n - m] % M;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// here nft can be used</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">			r = (r + C(i, j) * s[j] % M * s[i - j] % M) % M;</span><br><span class="line">		&#125;</span><br><span class="line">		r = (r - powMod(<span class="number">2</span>, i) * s[i]) % M;</span><br><span class="line">		<span class="keyword">if</span> (r &lt; <span class="number">0</span>) r += M;</span><br><span class="line">		r = r * inv2 % M;</span><br><span class="line">		<span class="built_in">print</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1436E-MEX"><a href="#1436E-MEX" class="headerlink" title="1436E: MEX"></a><a href="https://codeforces.com/contest/1436/problem/E" target="_blank" rel="noopener">1436E</a>: MEX</h3><p>求 $MEX(MEX(L, R)_{1 \leq L \leq R \leq n}$)，其中 $MEX(L, R)$ 为使得 $a_L, a_{L + 1} \cdots, a_{R}$ 中没出现的最小正整数。</p>
<p>做法：先求出所有 MEX(i, n)，这是能在 $O(n)$ 时间复杂度解决的（因为 MEX 会随着 i 递减而增大，并且值域不超过 $n$）。然后我们删除尾部的点，那么在从右往左首次出现 $Mex(i, n) &gt; a[n]$ 的 <code>pre[n] + 1 ~ i</code> 这一段的值都要改成 <code>a[n]</code>,这里 <code>pre[x]</code> 表示 <code>x</code> 位置前一个值为 <code>a[x]</code> 的位置。那么区间线段树就搞定了。</p>
<blockquote>
<p>没在比赛时候写出，不想写了！</p>
</blockquote>
<h3 id="hdu-4747-MEX"><a href="#hdu-4747-MEX" class="headerlink" title="hdu 4747: MEX"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4747" target="_blank" rel="noopener">hdu 4747</a>: MEX</h3><p>求 $\sum_{1 \leq L \leq R \leq n} MEX(L, R)$)，其中 $MEX(L, R)$ 为使得 $a_L, a_{L + 1} \cdots, a_{R}$ 中没出现的最小自然数</p>
<blockquote>
<p>同理与上面做法，代码不写了，懒得写线段树。</p>
<p>有的 MEX 定义包含 0, 有的不包含，无所谓啦。</p>
</blockquote>
<h3 id="1433G-将某条边的权值置零下最短路径"><a href="#1433G-将某条边的权值置零下最短路径" class="headerlink" title="1433G: 将某条边的权值置零下最短路径"></a><a href="https://codeforces.com/contest/1433/problem/G" target="_blank" rel="noopener">1433G</a>: 将某条边的权值置零下最短路径</h3><blockquote>
<p>我一开始以为是缩点… 想太多了，做法就是先求出任意两点的距离，然后边 <code>x -&gt; y</code> 置零可以看成 <code>a -&gt; b</code> 多了两种选择 <code>a -&gt; x - &gt; y - &gt; b</code> 和 <code>a -&gt; y -&gt; x -&gt; b</code> 就好了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> cmax = [](<span class="keyword">auto</span> &amp;x, <span class="keyword">auto</span> y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; y) x = y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> cmin = [](<span class="keyword">auto</span> &amp;x, <span class="keyword">auto</span> y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; y) x = y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> n, m, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">d</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">1e9</span>))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) d[i][i] = <span class="number">0</span>;</span><br><span class="line">	std::vector&lt;std::tuple&lt;int, int, int&gt;&gt; road(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y, w] : road) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; w;</span><br><span class="line">		--x; --y;</span><br><span class="line">		cmin(d[x][y], w);</span><br><span class="line">		d[y][x] = d[x][y];</span><br><span class="line">	&#125;</span><br><span class="line">	std::vector&lt;std::pair&lt;int, int&gt;&gt; travel(k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[a, b] : travel) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		--a; --b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> floyd = [&amp;]()&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k != n; ++k)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j)</span><br><span class="line">					cmin(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">	&#125;;</span><br><span class="line">	floyd();</span><br><span class="line">	LL r = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> [x, y, w] : road) &#123;</span><br><span class="line">		LL now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [a, b] : travel) &#123;</span><br><span class="line">			now += <span class="built_in">std</span>::<span class="built_in">min</span>(&#123;d[a][b], d[a][x] + d[y][b], d[a][y] + d[x][b]&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">		cmin(r, now);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用堆优化 Dijkstra 会更快一些，用 priority_quque 比 set 快一些。不过 set 比 priority_quque 方便很多（好遍历删除等操作）。</p>
</blockquote>
<h3 id="439D：三分法模板题"><a href="#439D：三分法模板题" class="headerlink" title="439D：三分法模板题"></a><a href="https://codeforces.com/contest/439/problem/D" target="_blank" rel="noopener">439D</a>：三分法模板题</h3><p>每次操作可以增加某个数或者减少某个数，问最小多少次操作可以让 <code>a</code> 的最小值不小于 <code>b</code> 的最大值</p>
<p>我们可以枚举 <code>a</code> 最终的最小值 <code>t</code>，那么答案就是 $\sum_{a_i &lt; t} (t - a_i) + \sum_{b_i &gt; t} (b_i - t)$<br>求导然后就知道了它是凸函数了。然后就可以三分法求了。</p>
<h3 id="三分法求凸函数最值"><a href="#三分法求凸函数最值" class="headerlink" title="三分法求凸函数最值"></a><a href="https://codeforces.com/contest/439/problem/D" target="_blank" rel="noopener">三分法求凸函数最值</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;int&gt; a(n), b(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> ma) &#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="keyword">if</span> (x &lt; ma) r += ma - x;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : b) <span class="keyword">if</span> (x &gt; ma) r += x - ma;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">while</span> (l + <span class="number">2</span> &lt; r) &#123;</span><br><span class="line">		<span class="keyword">int</span> lm = (<span class="number">2l</span>l * l + r) / <span class="number">3</span>, rm = (l + <span class="number">2l</span>l * r + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">		<span class="keyword">if</span> (f(lm) &lt; f(rm)) r = rm;</span><br><span class="line">		<span class="keyword">else</span> l = lm;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (f(l) &lt; f(r)) --r;</span><br><span class="line">		<span class="keyword">else</span> ++l;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(f(l));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然了此题有更简单的做法：将 <code>a</code> 升序，<code>b</code> 降序，然后答案就是 <code>a[i] - b[i]</code> 为正的和。</p>
</blockquote>
<h3 id="1421A：异或，和，交的关系"><a href="#1421A：异或，和，交的关系" class="headerlink" title="1421A：异或，和，交的关系"></a><a href="https://codeforces.com/contest/1421/problem/A" target="_blank" rel="noopener">1421A</a>：异或，和，交的关系</h3><blockquote>
<p>$(a \oplus x) + (x \oplus b)$ 的最小值，$a \oplus b$，此时 <code>x = a &amp; b</code></p>
</blockquote>
<h3 id="1421E：观察总结题（加减号问题）"><a href="#1421E：观察总结题（加减号问题）" class="headerlink" title="1421E：观察总结题（加减号问题）"></a><a href="https://codeforces.com/contest/1421/problem/E" target="_blank" rel="noopener">1421E</a>：观察总结题（加减号问题）</h3><ul>
<li>任何情况下的答案都是 每一项前添加正负号得到的。</li>
<li>相邻两个之间添加的正负号必然有一个是相同的，即不会出现 <code>+-+-+</code> 或 <code>-+-+-</code> 的情况</li>
<li>负号个数 $m$，总个数 $n$，满足 $(n + m) \equiv 1 \mod 3$（可以通过归纳得到，并且 $n$ 个正负号的情况可以看作 $n - 1$ 个正负号中某一个改变符号并且出现两个，再塞进去）</li>
<li>所有的情况如上所言（可以数学归纳证明）</li>
</ul>
<p>我们用 <code>DP[n][3][2][2]</code> 保存全部状态。<code>DP[i][j][k][p]</code> 分别表示当前 <code>i</code> 个位置，(i + 负数个数 <code>mod 3</code>) 等于 <code>j</code> 且<code>k</code> 表示是否非法（是否存在连续的正或负），<code>p</code> 表示最后以为是否为正的最大结果。</p>
<blockquote>
<p>例如 <code>DP[i][j][1][1]</code> 表示前 <code>i</code> 位（<code>i</code> 与 前 <code>i</code> 位负号个数的和模 3 位 <code>j</code>) 且有连续的负号或者正号，且第 <code>i</code> 位为负号的最大和。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line">LL dp[N][<span class="number">3</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">memset</span>(dp, <span class="number">-0x3f</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">	<span class="keyword">auto</span> upmax = [](LL &amp;a, LL b) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a &lt; b) a = b;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">print</span>(a[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">0</span>];</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">2</span>][<span class="number">0</span>][<span class="number">1</span>] = -a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; ++k) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">2</span>; ++p) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; <span class="number">2</span>; ++b) &#123;</span><br><span class="line">						<span class="keyword">int</span> digit = (j + <span class="number">1</span> + b) % <span class="number">3</span>;</span><br><span class="line">						upmax(dp[i][digit][k | (p == b)][b], dp[i - <span class="number">1</span>][j][k][p] + (b == <span class="number">0</span> ? a[i]: -a[i]));</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">std</span>::<span class="built_in">max</span>(dp[n - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>], dp[n - <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此题多维数组写 Vector 不方便，但是又不能开局部数组（因为太大了），所以只能全局变量啦。</p>
</blockquote>
<h3 id="1428D：模拟题"><a href="#1428D：模拟题" class="headerlink" title="1428D：模拟题"></a><a href="https://codeforces.com/contest/1428/problem/D" target="_blank" rel="noopener">1428D</a>：模拟题</h3><blockquote>
<p>由简单到复杂一步步的来，很不错的题。</p>
</blockquote>
<h3 id="1428E：经典问题，正整数划分最值问题（可看作优先队列模板题）"><a href="#1428E：经典问题，正整数划分最值问题（可看作优先队列模板题）" class="headerlink" title="1428E：经典问题，正整数划分最值问题（可看作优先队列模板题）"></a><a href="https://codeforces.com/contest/1428/problem/E" target="_blank" rel="noopener">1428E</a>：经典问题，正整数划分最值问题（可看作优先队列模板题）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">val</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x, <span class="keyword">const</span> <span class="keyword">int</span> &amp;n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> xn = x / n, rn = x - xn * n;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1l</span>l * xn * xn * (n - rn) + <span class="number">1l</span>l * (xn + <span class="number">1</span>) * (xn + <span class="number">1</span>) * rn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">cmpVal</span><span class="params">(<span class="keyword">const</span> pii &amp;A)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> val(A.first, A.second) - val(A.first, A.second + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pii &amp;lhs, <span class="keyword">const</span> pii &amp;rhs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> cmpVal(lhs) &lt; cmpVal(rhs); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="built_in">std</span>::priority_queue&lt;pii, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pii&gt;, cmp&gt; Q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		Q.push(&#123;x, <span class="number">1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (n &lt; k) &#123;</span><br><span class="line">		++n;</span><br><span class="line">		<span class="keyword">auto</span> [x, cnt] = Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		Q.push(&#123;x, cnt + <span class="number">1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, cnt] = Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		r += val(x, cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若此题 $k$ 特别大，可二分 cmpVal 的题来解决。</p>
</blockquote>
<h3 id="1428F-经典-DP"><a href="#1428F-经典-DP" class="headerlink" title="1428F: 经典 DP"></a><a href="https://codeforces.com/contest/1428/problem/F" target="_blank" rel="noopener">1428F</a>: 经典 DP</h3><p>题意：给定 0-1 序列 S，设 $f(l, r)$ 表示 $S_l S_{l + 1} \cdots, S_{r}$ 中最长连续 1 的个数，求 $\sum_{l = 1}^n \sum_{r = l}^n f(l, r)$</p>
<blockquote>
<p><a href="https://codeforces.com/blog/entry/83771" target="_blank" rel="noopener">官方题解</a> 实在是太精彩了！这种直方图的做法真的很 Nice！</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">	LL ans = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">left</span><span class="params">(n + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'0'</span>) ans += cur;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> l = i, r = i;</span><br><span class="line">			<span class="keyword">while</span> (r &lt; n &amp;&amp; s[r] == <span class="string">'1'</span>) ++r;</span><br><span class="line">			<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = l; i &lt; r; ++i) &#123;</span><br><span class="line">				++len;</span><br><span class="line">				cur += i - left[len];</span><br><span class="line">				ans += cur;</span><br><span class="line">				left[len] = r - len;</span><br><span class="line">			&#125;</span><br><span class="line">			--i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1430F：反向-DP"><a href="#1430F：反向-DP" class="headerlink" title="1430F：反向 DP"></a><a href="https://codeforces.com/contest/1430/problem/F" target="_blank" rel="noopener">1430F</a>：反向 DP</h3><p>我想到反向 DP (<code>DP[i]</code> 表示这次本次要预留的子弹数为多少），但是还是不明确怎么写。我们可以看每一波的时候至少需要多少子弹预留。然后合理性检测，最后再从头到尾走一波就知道用多少子弹。把检测和计算分两次搞。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	std::vector&lt;int&gt; a(n), l(n), r(n), dp(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l[i] &gt;&gt; r[i] &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">int</span> need = a[i];</span><br><span class="line">		<span class="keyword">if</span> (i &lt; n - <span class="number">1</span> &amp;&amp; r[i] == l[i + <span class="number">1</span>]) need += dp[i + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (LL(r[i] - l[i] + <span class="number">1</span>) * k &lt; need) &#123;</span><br><span class="line">			<span class="built_in">print</span>(<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dp[i] = <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, need - LL(r[i] - l[i]) * k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> cur = k;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		ans += a[i];</span><br><span class="line">		<span class="keyword">if</span> (cur &lt; dp[i]) &#123;</span><br><span class="line">			ans += cur;</span><br><span class="line">			cur = k;</span><br><span class="line">		&#125;</span><br><span class="line">		cur = ((cur - a[i]) % k + k) % k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1430E：可以转化成求逆序数"><a href="#1430E：可以转化成求逆序数" class="headerlink" title="1430E：可以转化成求逆序数"></a><a href="https://codeforces.com/contest/1430/problem/E" target="_blank" rel="noopener">1430E</a>：可以转化成求逆序数</h3><p>这种只能交换相邻位置的问题，一般都能转换成逆序数。我们先根据最后的状态来定义序关系，然后对应赋值，再求逆序数就好了！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; s;</span><br><span class="line">	TreeArray() &#123;&#125;</span><br><span class="line">	TreeArray(<span class="keyword">int</span> n) &#123; init(n); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		s.resize(n + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">fill</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			s[id] += p;</span><br><span class="line">			id += lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (id) &#123;</span><br><span class="line">			r += s[id];</span><br><span class="line">			id -= lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find minimal index s.t. sum(id) &gt;= x, sum must be increased</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(LL val)</span> </span>&#123;</span><br><span class="line">		LL sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">std</span>::__lg(s.<span class="built_in">size</span>()); ~i; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id + (<span class="number">1</span> &lt;&lt; i) &lt; s.<span class="built_in">size</span>() &amp;&amp; sum + s[id + (<span class="number">1</span> &lt;&lt; i)] &lt; val) &#123;</span><br><span class="line">				id += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">				sum += s[id];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ++id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp[<span class="number">26</span>];</span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = s.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) tmp[s[i] - <span class="string">'a'</span>].emplace_back(++now);</span><br><span class="line">	std::vector&lt;int&gt; a(n + 1), p(n + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		a[i] = tmp[s[i - <span class="number">1</span>] - <span class="string">'a'</span>].back();</span><br><span class="line">		tmp[s[i - <span class="number">1</span>] - <span class="string">'a'</span>].pop_back();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[a[i]] = i;</span><br><span class="line">	<span class="function">TreeArray <span class="title">A</span><span class="params">(n)</span></span>;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">		r += A.sum(p[i]);</span><br><span class="line">		A.add(p[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清华集训-2016-组合数问题"><a href="#清华集训-2016-组合数问题" class="headerlink" title="清华集训 2016 组合数问题"></a><a href="https://uoj.ac/problem/275" target="_blank" rel="noopener">清华集训 2016 组合数问题</a></h3><p>给定 $1 \leq n, m \leq 10^{18}$ 和素数 $p$，求所有 $0 \leq i \leq n, 0 \leq j \leq \min(i,m)$ 中有多少对 $(i, j)$ 满足 ${i \choose j}$ 是 $p$ 的倍数。</p>
<blockquote>
<p>${i \choose j}$ 是 $p$ 的倍数当且仅当 $i, j$ 的 $p$ 进制中至少有一位 $x$ 满足 $i_x &lt; j_x$（利用 Lucas 定理显然）。</p>
</blockquote>
<p>所以最终答案就是 </p>
<script type="math/tex; mode=display">
\frac{(n + 1)(n + 2)}{2} - \frac{k(k+1)}{2} - f(n, m)</script><p>其中 $k = \max(0, n - m)$，$f(n, m)$ 表示 $i$ 的 每一位都满足 $i_x \geq j_x$ 的方案数，注意到此时必有 $i &gt; j$，所以这里的 $i, j$ 限制分别是 $0 \leq i \leq n, 0 \leq j \leq m$. 并且可以让 $m = \min(m, n)$，我们可以从最低位开始 DP 就好了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">LL inv2 = (M + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas, p;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas &gt;&gt; p;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		LL n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		m = <span class="built_in">std</span>::<span class="built_in">min</span>(m, n);</span><br><span class="line">		LL r = (<span class="number">2</span> * n + <span class="number">2</span> - m) % M * ((m + <span class="number">1</span>) % M) % M * inv2 % M;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; an, bm;</span><br><span class="line">		<span class="keyword">auto</span> digit = [&amp;]() &#123;</span><br><span class="line">			<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (n) &#123;</span><br><span class="line">				an.emplace_back(n % p);</span><br><span class="line">				bm.emplace_back(m % p);</span><br><span class="line">				n /= p;</span><br><span class="line">				m /= p;</span><br><span class="line">				++r;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> r;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> d = digit();</span><br><span class="line">		<span class="comment">// dp[i][sa][sb]; sa, sb 分别表示 $a, b$ 第 $i$ 为是否有限制</span></span><br><span class="line">		LL dp[d + <span class="number">1</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) dp[<span class="number">0</span>][i / <span class="number">2</span>][i % <span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; ++i) &#123;</span><br><span class="line">			dp[i + <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = (p + <span class="number">1</span>) * p / <span class="number">2</span> * dp[i][<span class="number">0</span>][<span class="number">0</span>] % M;</span><br><span class="line">			dp[i + <span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = ((<span class="number">2</span> * p - bm[i] + <span class="number">1</span>) * bm[i] / <span class="number">2</span> * dp[i][<span class="number">0</span>][<span class="number">0</span>] + (p - bm[i]) * dp[i][<span class="number">0</span>][<span class="number">1</span>]) % M;</span><br><span class="line">			dp[i + <span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = ((an[i] + <span class="number">1</span>) * an[i] / <span class="number">2</span> * dp[i][<span class="number">0</span>][<span class="number">0</span>] + (an[i] + <span class="number">1</span>) * dp[i][<span class="number">1</span>][<span class="number">0</span>]) % M;</span><br><span class="line">			dp[i + <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (an[i] &gt;= bm[i]) dp[i + <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] += (an[i] - bm[i]) * dp[i][<span class="number">0</span>][<span class="number">1</span>] + dp[i][<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">			<span class="keyword">else</span> dp[i + <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] += dp[i][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">			bm[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(bm[i], an[i]);</span><br><span class="line">			(dp[i + <span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] += (<span class="number">2</span> * an[i] + <span class="number">1</span> - bm[i]) * bm[i] / <span class="number">2</span> * dp[i][<span class="number">0</span>][<span class="number">0</span>] + bm[i] * dp[i][<span class="number">1</span>][<span class="number">0</span>]) %= M;</span><br><span class="line">		&#125;</span><br><span class="line">		r = (r + M - dp[d][<span class="number">1</span>][<span class="number">1</span>]) % M;</span><br><span class="line">		<span class="built_in">print</span>(r); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清华集训-2016-求和"><a href="#清华集训-2016-求和" class="headerlink" title="清华集训 2016 求和"></a><a href="https://uoj.ac/problem/269" target="_blank" rel="noopener">清华集训 2016 求和</a></h3><p>$f$ 是一个次数不超过 $m$ 的多项式，满足 $f(i) = a_i, i = 0, \cdots, m$，求</p>
<script type="math/tex; mode=display">
\sum_{k = 0}^n f(k) {n \choose k} x^k (1 - x)^{n-k} \mod 998244353</script><p>给定 $n, m, x$ 和 $a_0, \cdots, a_m$，其中 $1 \leq n \leq 10^9, 1 \leq m  \leq 2 \cdot 10^4, 0 \leq a_i, x \leq 998244353$</p>
<blockquote>
<p>做法：利用二项式反演，记 $f(k) = \sum_{i = 0}^k {k \choose i} f_i$，则 $f_k = \sum_{i = 0}^k {k \choose i} (-1)^{k-i} f(i)$ 注意到 $f(x)$ 是次数不超过 $m$ 的多项式，所以 $f_{m + 1} = f_{m + 2} = \cdots = 0$</p>
</blockquote>
<script type="math/tex; mode=display">
\begin{aligned}
\sum_{k = 0}^n f(k) {n \choose k} x^k (1 - x)^{n-k} 
&= \sum_{k = 0}^n \sum_{i = 0}^k {n \choose k} {k \choose i} f_i x^k (1 - x)^{n-k} \\
&= \sum_{i = 0}^n \sum_{k = i}^n {n \choose i}  {n - i \choose k - i} f_i x^k (1 - x)^{n-k} \\
&= \sum_{i = 0}^n f_i {n \choose i}  x^i (1 - x)^ {n - i} \sum_{k - i = 0}^{n - i} {n - i \choose k - i} x^{k - i} (1 - x)^{i - k} \\
&= \sum_{i = 0}^n f_i {n \choose i}  x^i (1 - x)^ {n - i} (1 + \frac{x}{1-x})^{n - i} \\
&= \sum_{i = 0}^n f_i {n \choose i}  x^i
\end{aligned}\</script><p>上述式子最后一项，只有 $m + 1$ 项，$f_0, \cdots, f_m$ 可以由 NFT 计算。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> LL ROOT = <span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">LL fac[N], ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[N - <span class="number">1</span>] = powMod(fac[N - <span class="number">1</span>], M - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; j) <span class="built_in">std</span>::swap(a[i], a[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = a.<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			(j ^= l) &lt; l; l &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">bool</span> isInverse = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">	LL g = powMod(ROOT, (M - <span class="number">1</span>) / a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span> (isInverse) &#123;</span><br><span class="line">		g = powMod(g, M - <span class="number">2</span>);</span><br><span class="line">		LL invLen = powMod(LL(a.<span class="built_in">size</span>()), M - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) x = x * invLen % M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != w.<span class="built_in">size</span>(); ++i) w[i] = w[i - <span class="number">1</span>] * g % M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x, LL y) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x += y) &gt;= M ? x -= M : x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>, half = <span class="number">1</span>; half != a.<span class="built_in">size</span>(); <span class="built_in">step</span> &lt;&lt;= <span class="number">1</span>, half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, wstep = a.<span class="built_in">size</span>() / <span class="built_in">step</span>; i != a.<span class="built_in">size</span>(); i += <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j != i + half; ++j) &#123;</span><br><span class="line">				LL t = (a[j + half] * w[wstep * (j - i)]) % M;</span><br><span class="line">				a[j + half] = addMod(a[j], M - t);</span><br><span class="line">				a[j] = addMod(a[j], t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (sz &lt; tot) sz *= <span class="number">2</span>;</span><br><span class="line">	a.resize(sz);</span><br><span class="line">	b.resize(sz);</span><br><span class="line">	nft(a);</span><br><span class="line">	nft(b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != sz; ++i) a[i] = a[i] * b[i] % M;</span><br><span class="line">	nft(a, <span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> m, n, x;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">	std::vector&lt;LL&gt; a(m + 1), b(m + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		a[i] = ifac[i] * a[i] % M;</span><br><span class="line">		b[i] = (i % <span class="number">2</span> == <span class="number">0</span>) ? ifac[i] : M - ifac[i];</span><br><span class="line">	&#125;</span><br><span class="line">	mul(a, b);</span><br><span class="line">	a.resize(m + <span class="number">1</span>);</span><br><span class="line">	LL r = <span class="number">0</span>, Anx = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">		r += Anx * a[i] % M;</span><br><span class="line">		Anx = Anx * (n - i) % M * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r % M);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="ZOJ-3820：树的重心-直径"><a href="#ZOJ-3820：树的重心-直径" class="headerlink" title="ZOJ 3820：树的重心 + 直径"></a><a href="https://vjudge.net/problem/ZOJ-3820" target="_blank" rel="noopener">ZOJ 3820</a>：树的重心 + 直径</h3><p>题意：在一棵树上选择两个点，使得任意点到这两点的最小值的最大值最小。</p>
<blockquote>
<p>如果仅仅选择一个点，那么这个问题就是树的重心。</p>
<p>对此情况，将直径按照中点切开，然后分别求两颗子树的中心, <a href="https://blog.csdn.net/ok_again/article/details/40043197" target="_blank" rel="noopener">参考资料</a></p>
</blockquote>
<p>证明：如果 u,v 是满足条件的两个点，那么把他们沿着中间切开必然最优，然后反证它们在树的直径上。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			--u; --v;</span><br><span class="line">			e[u].emplace_back(v);</span><br><span class="line">			e[v].emplace_back(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">auto</span> bfs = [&amp;](<span class="keyword">int</span> x) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">			d[x] = <span class="number">0</span>;</span><br><span class="line">			Q.push(x);</span><br><span class="line">			<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">				<span class="keyword">int</span> u = Q.front();</span><br><span class="line">				Q.pop();</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">std</span>::max_element(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()) - d.<span class="built_in">begin</span>();</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> v) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">			a.emplace_back(v);</span><br><span class="line">			<span class="keyword">while</span> (d[a.back()]) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> v: e[a.back()]) <span class="keyword">if</span> (d[v] + <span class="number">1</span> == d[a.back()]) &#123;</span><br><span class="line">					a.emplace_back(v);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> mid = a.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">std</span>::make_pair(a[mid - <span class="number">1</span>], a[mid]);</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">auto</span> [u, v] = f(bfs(bfs(<span class="number">0</span>)));</span><br><span class="line">		e[u].erase(<span class="built_in">std</span>::<span class="built_in">find</span>(e[u].<span class="built_in">begin</span>(), e[u].<span class="built_in">end</span>(), v));</span><br><span class="line">		e[v].erase(<span class="built_in">std</span>::<span class="built_in">find</span>(e[v].<span class="built_in">begin</span>(), e[v].<span class="built_in">end</span>(), u));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> ru = bfs(bfs(u)), ansu = (d[ru] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">auto</span> ra = f(ru).second;</span><br><span class="line">		<span class="keyword">int</span> rv = bfs(bfs(v)), ansv = (d[rv] + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">auto</span> rb = f(rv).second;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">max</span>(ansu, ansv) &lt;&lt; <span class="string">" "</span> &lt;&lt; ru + <span class="number">1</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; rv + <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1422D：堆优化-Dijkstra-复杂度-O-n-log-E"><a href="#1422D：堆优化-Dijkstra-复杂度-O-n-log-E" class="headerlink" title="1422D：堆优化 Dijkstra 复杂度 $O(n \log E)$"></a><a href="https://codeforces.com/contest/1422/problem/D" target="_blank" rel="noopener">1422D</a>：堆优化 Dijkstra 复杂度 $O(n \log E)$</h3><blockquote>
<p>这里的边数 E 针对本问题可以大大优化，代码可参考 <a href="https://codeforces.com/contest/1422/submission/94679999" target="_blank" rel="noopener">Jiangly 的代码</a></p>
</blockquote>
<h3 id="1422C"><a href="#1422C" class="headerlink" title="1422C"></a><a href="https://codeforces.com/contest/1422/problem/C" target="_blank" rel="noopener">1422C</a></h3><blockquote>
<p>一开始读题读错了，少看了一个连续导致浪费了很多时间（30 分钟）。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> a;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">	LL r = <span class="number">0</span>, n = <span class="number">0</span>, id = <span class="number">1</span>, r2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">		r = (r * <span class="number">10</span> + id * (id - <span class="number">1</span>) / <span class="number">2</span> * (x - <span class="string">'0'</span>) + r2) % M;</span><br><span class="line">		n = (n * <span class="number">10</span> + (x - <span class="string">'0'</span>)) % M;</span><br><span class="line">		r2 += n;</span><br><span class="line">		++id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Atcoder-ARC-104D"><a href="#Atcoder-ARC-104D" class="headerlink" title="Atcoder ARC 104D"></a><a href="https://atcoder.jp/contests/arc104/tasks/arc104_d" target="_blank" rel="noopener">Atcoder ARC 104D</a></h3><blockquote>
<p>E, F 题也是好题，不过不懂。</p>
</blockquote>
<p>问题描述：对每一个 $m \in [1, n]$ 求满足 $\sum_{x \in S} (x - m) = 0$ 的集合 $S$ 的个数，其中 “集合” $S$ 是由 <code>1~n</code> 中元素构成，元素可重，重数不超过 k。这等价于说 $\sum_{x \in S} x = \sum_{x \in T} x$ 的个数乘以 $k + 1$，其中 $S$ 是由 <code>1 ~ m - 1</code> 构成，$T$ 由 <code>1 ~ n - m</code> 构成。</p>
<p>做法：我们设 <code>dp[i][j] 表示仅用 1 ~ i 中的数构成和为 j 的个数</code>，那么显然</p>
<script type="math/tex; mode=display">
dp[i][j] = \sum_{t = 0}^k dp[i - 1][j - t * i]</script><p>于是我们保存一下前缀和，那么就可以优化计算了。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	LL M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; M;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">	dp[<span class="number">0</span>].emplace_back(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> mx = (i + <span class="number">1</span>) * i / <span class="number">2</span> * k;</span><br><span class="line">		dp[i] = dp[i - <span class="number">1</span>];</span><br><span class="line">		dp[i].resize(mx + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= mx; ++j) dp[i][j] += dp[i][j - i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = mx; j &gt;= (k + <span class="number">1</span>) * i; --j) dp[i][j] -= dp[i][j - (k + <span class="number">1</span>) * i] %= M;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : dp[i]) x %= M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) &#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> tx = <span class="built_in">std</span>::<span class="built_in">min</span>(x - <span class="number">1</span>, n - x);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = (tx + <span class="number">1</span>) * tx / <span class="number">2</span> * k; j &gt;= <span class="number">0</span>; --j) r += dp[x - <span class="number">1</span>][j] * dp[n - x][j] % M;</span><br><span class="line">		r = (r * (k + <span class="number">1</span>) % M + M - <span class="number">1</span>) % M;</span><br><span class="line">		<span class="built_in">print</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="1408D：二维处理问题，经典重要问题"><a href="#1408D：二维处理问题，经典重要问题" class="headerlink" title="1408D：二维处理问题，经典重要问题"></a><a href="https://codeforces.com/contest/1408/problem/D" target="_blank" rel="noopener">1408D</a>：二维处理问题，经典重要问题</h3><blockquote>
<p>一开始没有看数据范围觉得没法过，就没想这个问题，然后狮子大张口想做最后一题…</p>
</blockquote>
<p>此问题可以转换成经典问题：二维平面，第一象限的 $n$ 个点，每次只能同时向左或者向下移动一个单位，问最少需要多少步，让所有的点都不在第一象限。<br>首先先对一个坐标（例如横坐标）进行从小到大排序，然后最终结果就是 第 i 个点的横坐标加上后面所有点的纵坐标的最大值，这 n + 1 个结果中最小的一个！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;std::pair&lt;int, int&gt;&gt; a(n), b(m), t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i].first &lt;= b[j].first &amp;&amp; a[i].second &lt;= b[j].second) &#123;</span><br><span class="line">				t.push_back(&#123;b[j].first - a[i].first + <span class="number">1</span>, b[j].second - a[i].second + <span class="number">1</span>&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::sort(t.<span class="built_in">begin</span>(), t.<span class="built_in">end</span>());</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mx</span><span class="params">(t.<span class="built_in">size</span>() + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = t.<span class="built_in">size</span>() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">		mx[i] = <span class="built_in">std</span>::<span class="built_in">max</span>(mx[i + <span class="number">1</span>], t[i].second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans = mx[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		ans = <span class="built_in">std</span>::<span class="built_in">min</span>(ans, mx[i + <span class="number">1</span>] + t[i].first);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1408F：脑筋急转弯问题"><a href="#1408F：脑筋急转弯问题" class="headerlink" title="1408F：脑筋急转弯问题"></a><a href="https://codeforces.com/contest/1408/problem/F" target="_blank" rel="noopener">1408F</a>：脑筋急转弯问题</h3><p>读完题目我就知道对于 $n$ 为 2 的幂次时，可以让所有元素一致，但是后面怎么就没有想到前后各搞一次呢？我在干什么！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; r;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> len) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">1</span>; <span class="built_in">step</span> &lt; len; <span class="built_in">step</span> *= <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i += <span class="built_in">step</span> * <span class="number">2</span>) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">step</span>; ++j) &#123;</span><br><span class="line">					r.push_back(&#123;i + j + x, i + j + x + <span class="built_in">step</span>&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="built_in">std</span>::__lg(n);</span><br><span class="line">	f(<span class="number">1</span>, <span class="number">1</span> &lt;&lt; k);</span><br><span class="line">	f(n + <span class="number">1</span> - (<span class="number">1</span> &lt;&lt; k), <span class="number">1</span> &lt;&lt; k);</span><br><span class="line">	<span class="built_in">print</span>(r.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> [x, y] : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> &lt;&lt; y &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1408I"><a href="#1408I" class="headerlink" title="1408I"></a><a href="https://codeforces.com/contest/1408/problem/I" target="_blank" rel="noopener">1408I</a></h3><blockquote>
<p>本题解基于 Soulist 的题解和 Jiangly 的代码，写这个的原因是这个题我是非常想搞清楚，然后只有转化成自己的语言才能弄清楚，所以想写下来，从而说明是真的理解了。</p>
</blockquote>
<p>题意：给定 $n$ 个数 ($a_1, a_2, \cdots, a_n$)，（序列元素互异，但是这个条件没啥用吧）每次操作为等概率的选择其中一个数，然后将其减一，问经过 $k$ 次操作之后这 $n$ 个数的异或和 为 $x = 0, 1, \cdots, 2^c - 1$ 的概率。</p>
<p>其中， $k, c \leq 16, a_i \in [k, 2^c)$，最后答案是分数，在模 998244353 的意义下就是个整数啦。</p>
<ul>
<li>令 $sa = a_1 \oplus a_2 \cdots \oplus a_n$，然后考虑答案在 $t$ 上的改变量。</li>
<li>令 $d_{i,j} = a_i \oplus (a_i - j)$，$\displaystyle F(x, y) = \prod_{i = 1}^n \left( \sum_{j = 0}^k \frac{x^{d_{i,j}}}{j!} y^j \right)$ 那么我们的答案就是 $F(x,y)[y^k] \cdot k!$，其中 $x$ 上是异或卷积，$y$ 上的是普通卷积。</li>
</ul>
<p>那么我们现在主要问题就变成如何就 $F(x,y)[y^k] \cdot k!$ 了。由于 $x$ 上的系数加法是异或加法，所以我们需要用 <a href="https://oi-wiki.org/math/poly/fwt/" target="_blank" rel="noopener">异或的 fwt</a> 将它转化成普通乘法。</p>
<ul>
<li>$x$ 上的系数可以本质是下标！下标对应的值是关于$y$的多项式，首先注意到做 fwt 仅仅是将 $x$ 上的系数做了改变，并没有改变其它内容。这样做是为了把卷积异或乘法改成普通卷积乘法。这里做 fwt 的时候可以暴力搞。</li>
<li>优化 1：仅有 $O(ck)$ 中 $k$ 元组</li>
<li>每个 $k$ 元组对应的下标对应 fwt 之后的编号只有 $2^k$ 种！</li>
<li>多项式乘法可以用 <code>ln/exp</code> 来运算</li>
</ul>
<p>soulist 写了<a href="https://www.cnblogs.com/Soulist/p/13758388.html" target="_blank" rel="noopener">题解</a><br>以下是 <a href="https://codeforces.com/contest/1408/submission/94346776" target="_blank" rel="noopener">jiangly 大佬的代码</a> 的注释版。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// code by jiangly</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b &gt; <span class="number">0</span>; b /= <span class="number">2</span>, a = <span class="number">1l</span>l * a * a % P)</span><br><span class="line">        <span class="keyword">if</span> (b % <span class="number">2</span> == <span class="number">1</span>) res = <span class="number">1l</span>l * res * a % P;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n, k, c;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; c;</span><br><span class="line">    std::vector&lt;int&gt; fac(k + 1), invFac(k + 1), inv(k + 1);</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) fac[i] = <span class="number">1l</span>l * fac[i - <span class="number">1</span>] * i % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) invFac[i] = power(fac[i], P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) inv[i] = power(i, P - <span class="number">2</span>);</span><br><span class="line">	<span class="comment">// 预处理出所有元素异或和，以及每一种序列的个数</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line">    <span class="keyword">int</span> xsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        xsum ^= a;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= k; ++j) d[j] = a ^ (a - j);</span><br><span class="line">        ++cnt[d];</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// cntm 就是暴力做 fwt 后的每种序列的个数</span></span><br><span class="line">	<span class="comment">// f 就是做完 fwt 后得到式子乘积。</span></span><br><span class="line">    std::vector&lt;int&gt; f(1 &lt;&lt; c), cntm(1 &lt;&lt; k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; (<span class="number">1</span> &lt;&lt; c); ++x) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> [d, t] : cnt) &#123;</span><br><span class="line">            <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) <span class="keyword">if</span> (__builtin_parity(x &amp; d[i])) mask |= <span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (cntm[mask] == <span class="number">0</span>) e.push_back(mask);</span><br><span class="line">            cntm[mask] += t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">g</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">        g[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> mask : e) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">            a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mask &gt;&gt; (i - <span class="number">1</span>) &amp; <span class="number">1</span>) a[i] = P - invFac[i];</span><br><span class="line">                <span class="keyword">else</span> a[i] = invFac[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pw</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> t = cntm[mask];</span><br><span class="line">            pw[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="comment">// 取对数, 再做加法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">                <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) res = (res + <span class="number">1l</span>l * pw[j] * a[i - j] % P * (i - j)) % P;</span><br><span class="line">                res = <span class="number">1l</span>l * res * t % P;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) res = (res + <span class="number">1l</span>l * (P - a[j]) * pw[i - j] % P * (i - j)) % P;</span><br><span class="line">                pw[i] = <span class="number">1l</span>l * res * inv[i] % P;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 加起来取指数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &gt;= <span class="number">1</span>; --i) &#123;</span><br><span class="line">                <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) res = (res + <span class="number">1l</span>l * pw[j] * g[i - j]) % P;</span><br><span class="line">                g[i] = res;</span><br><span class="line">            &#125;</span><br><span class="line">            cntm[mask] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[x] = <span class="number">1l</span>l * g[k] * fac[k] % P;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// ifwt 得到最后的答案，注意到这里没有除以 2，是因为它最后整体除了 2^c。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; c); i *= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; c); j += <span class="number">2</span> * i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; ++k) &#123;</span><br><span class="line">                <span class="keyword">int</span> u = f[j + k], v = f[i + j + k];</span><br><span class="line">                f[j + k] = (u + v) % P;</span><br><span class="line">                f[i + j + k] = (u - v + P) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> invn = <span class="number">1l</span>l * power(<span class="number">1</span> &lt;&lt; c, P - <span class="number">2</span>) * power(n, P - <span class="number">1</span> - k) % P;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; c); ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1l</span>l * f[i ^ xsum] * invn % P &lt;&lt; <span class="string">" \n"</span>[i == (<span class="number">1</span> &lt;&lt; c) - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="453B：状态压缩-DP"><a href="#453B：状态压缩-DP" class="headerlink" title="453B：状态压缩 DP"></a><a href="https://codeforces.com/contest/453/problem/B" target="_blank" rel="noopener">453B</a>：状态压缩 DP</h3><p>给定数列 $a$，求满足元素两两互素的数列 $b$ 使得 $\sum |a_i - b_i|$ 最小</p>
<blockquote>
<p>注意到 $b_i &lt; 2 a_i$，因为否则取 $b_i = 1$ 即可。</p>
</blockquote>
<p>由于 $60$ 内的素数个数为 17, 因此可以状态压缩 DP。设 <code>dp[i][j]</code> 表示使得 $\sum_{k = 1} ^ i |a_k - b_k|$ 最小，且$b_1 \cdots b_i$ 中所有出现的素因子的状态为 $j$。因此状态转移就是 <code>dp[i][j | factor[k]] = min(dp[i - 1][j] + |a_i - k|)</code>，其中 <code>factor[k]</code> 与 $j$ 没有交集。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">int</span> ma = *<span class="built_in">std</span>::max_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) * <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; ma; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= i; ++j) <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) p.emplace_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">factor</span><span class="params">(ma)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; ma; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>(); ++j) <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">			factor[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; p.<span class="built_in">size</span>(), <span class="number">1e9</span>))</span></span>;</span><br><span class="line">	ans[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * a[i - <span class="number">1</span>]; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; p.<span class="built_in">size</span>()); ++k) <span class="keyword">if</span> ((k &amp; factor[j]) == <span class="number">0</span>) &#123;</span><br><span class="line">				ans[i][k | factor[j]] = <span class="built_in">std</span>::<span class="built_in">min</span>(ans[i][k | factor[j]], ans[i - <span class="number">1</span>][k] + <span class="built_in">abs</span>(a[i - <span class="number">1</span>] - j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> now = <span class="built_in">std</span>::min_element(ans[n].<span class="built_in">begin</span>(), ans[n].<span class="built_in">end</span>()) - ans[n].<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * a[i]; ++j) <span class="keyword">if</span> ((now | factor[j]) == now) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ans[i][now ^ factor[j]] + <span class="built_in">abs</span>(a[i] - j) == ans[i + <span class="number">1</span>][now]) &#123;</span><br><span class="line">				r[i] = j;</span><br><span class="line">				now ^= factor[j];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">println</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="662C：状态压缩-DP-FWT-模板"><a href="#662C：状态压缩-DP-FWT-模板" class="headerlink" title="662C：状态压缩 DP + FWT 模板"></a><a href="https://codeforces.com/contest/662/problem/C" target="_blank" rel="noopener">662C</a>：状态压缩 DP + FWT 模板</h3><p>给定 $n \times m$ 的 0-1 方阵，可以取反一些行和列使得最后 0 的数列最小。</p>
<blockquote>
<p>首先注意到 $n &lt; 20$，我们可以把每一列看作一个状态 <code>i</code> ，并且结果跟列的顺序无关。我们可以记录下初始情况每种状态数 C[i] 量。<br>并且每一种状态 <code>i</code> 对答案的贡献显然就是它的 0, 1 个数的最小值记作 <code>g[i]</code>。<br>对于每一个行取反 S, 其实就是将一个状态 i 变成 状态 <code>i ^ S</code><br>所以每一种行取反 S，最终的答案 $\displaystyle F(S) = \sum_{i} C[i] \cdot g[i \wedge S] = \sum_{i \wedge j = S} C[i] \cdot g[j]$ </p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x += y) &gt;= P &amp;&amp; (x -= P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FWT</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; N &lt; n; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j + m], a[i + j]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j + m], a[i + j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTand</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j], a[i + j + m]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j], a[i + j + m]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTxor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>(), inv2 = (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = a[i + j + m];</span><br><span class="line">                <span class="keyword">if</span> (!rev) &#123;</span><br><span class="line">                    a[i + j] = (x + y) % P;</span><br><span class="line">                    a[i + j + m] = (x - y + P) % P;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a[i + j] = <span class="number">1L</span>L * (x + y) * inv2 % P;</span><br><span class="line">                    a[i + j + m] = <span class="number">1L</span>L * (x - y + P) * inv2 % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Or</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">And</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTand(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTand(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTand(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Xor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTxor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTxor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTxor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; fwt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	std::vector&lt;int&gt; c(1 &lt;&lt; n), g(1 &lt;&lt; n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			r |= (a[j][i] - <span class="string">'0'</span>) &lt;&lt; j;</span><br><span class="line">		&#125;</span><br><span class="line">		++c[r];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j &amp; (<span class="number">1</span> &lt;&lt; i)) ++g[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class="line">		g[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(g[i], n - g[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> f = fwt.Xor(c, g);</span><br><span class="line">	<span class="built_in">print</span>(*<span class="built_in">std</span>::min_element(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>()));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1417E：异或问题和逆序数"><a href="#1417E：异或问题和逆序数" class="headerlink" title="1417E：异或问题和逆序数"></a><a href="https://codeforces.com/contest/1417/problem/E" target="_blank" rel="noopener">1417E</a>：异或问题和逆序数</h3><blockquote>
<p>注意到两个数比较大小只和它最高位数字有关，如果改变第 $i$ 位，那么第 $i$ 位后面的数就可以不考虑。<br>可以参考 <a href="https://codeforces.com/contest/1416/submission/93985644" target="_blank" rel="noopener">jiangly 的代码</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">	LL cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt; <span class="number">31</span>; ++d) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(),[&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">			<span class="keyword">return</span> (a[i] &gt;&gt; d) &lt; (a[j] &gt;&gt; d) || ((a[i] &gt;&gt; d) == (a[j] &gt;&gt; d) &amp;&amp; i &lt; j);</span><br><span class="line">		&#125;);</span><br><span class="line">		LL c0 = <span class="number">0</span>, c1 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i = j) &#123;</span><br><span class="line">			<span class="keyword">int</span> x0 = <span class="number">0</span>, x1 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; n &amp;&amp; (a[p[i]] &gt;&gt; d) == (a[p[j]] &gt;&gt; d)) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((a[p[j]] &gt;&gt; (d - <span class="number">1</span>)) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">					++x1;</span><br><span class="line">					c0 += x0;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					++x0;</span><br><span class="line">					c1 += x1;</span><br><span class="line">				&#125;</span><br><span class="line">				++j;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (c0 &lt; c1) &#123;</span><br><span class="line">			cnt += c0;</span><br><span class="line">			r |= (<span class="number">1</span> &lt;&lt; d - <span class="number">1</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> cnt += c1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">" "</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述过程也提供了一种求逆序数的方法，就是注意到任意两个数，他们总会在某一个最高位是一致的。</p>
</blockquote>
<h3 id="AtCoder-ACL2f-包容排斥原理-NFT"><a href="#AtCoder-ACL2f-包容排斥原理-NFT" class="headerlink" title="AtCoder ACL2f: 包容排斥原理 + NFT"></a><a href="https://atcoder.jp/contests/abl/tasks/abl_f" target="_blank" rel="noopener">AtCoder ACL2f</a>: 包容排斥原理 + NFT</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl;</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>, ROOT = <span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; j) <span class="built_in">std</span>::swap(a[i], a[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = a.<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			(j ^= l) &lt; l; l &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">bool</span> isInverse = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">	LL g = powMod(ROOT, (M - <span class="number">1</span>) / a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span> (isInverse) &#123;</span><br><span class="line">		g = powMod(g, M - <span class="number">2</span>);</span><br><span class="line">		LL invLen = powMod(LL(a.<span class="built_in">size</span>()), M - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) x = x * invLen % M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != w.<span class="built_in">size</span>(); ++i) w[i] = w[i - <span class="number">1</span>] * g % M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x, LL y) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x += y) &gt;= M ? x -= M : x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>, half = <span class="number">1</span>; half != a.<span class="built_in">size</span>(); <span class="built_in">step</span> &lt;&lt;= <span class="number">1</span>, half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, wstep = a.<span class="built_in">size</span>() / <span class="built_in">step</span>; i != a.<span class="built_in">size</span>(); i += <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j != i + half; ++j) &#123;</span><br><span class="line">				LL t = (a[j + half] * w[wstep * (j - i)]) % M;</span><br><span class="line">				a[j + half] = addMod(a[j], M - t);</span><br><span class="line">				a[j] = addMod(a[j], t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (sz &lt; tot) sz *= <span class="number">2</span>;</span><br><span class="line">	a.resize(sz);</span><br><span class="line">	b.resize(sz);</span><br><span class="line">	nft(a);</span><br><span class="line">	nft(b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != sz; ++i) a[i] = a[i] * b[i] % M;</span><br><span class="line">	nft(a, <span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line">LL fac[N], ifac[N];</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a)</span></span>&#123; <span class="comment">// 0 &lt; a &lt; p and gcd(a,p) = 1</span></span><br><span class="line">	<span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">1</span> : (M - M / a) * inv(M % a) % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[N - <span class="number">1</span>] = inv(fac[N - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binom</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> fac[n] * ifac[k] % M * ifac[n - k] % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(<span class="number">1e5</span> + <span class="number">2</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		++cnt[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">r</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	LL inv2 = (M + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">std</span>::sort(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">auto</span> start = <span class="built_in">std</span>::lower_bound(cnt.<span class="built_in">begin</span>(), cnt.<span class="built_in">end</span>(), <span class="number">1</span>) - cnt.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	q.push_back(&#123;cnt[start], <span class="number">1</span>&#125;);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt; cnt.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span>(cnt[i] != q.back().first) q.push_back(&#123;cnt[i], <span class="number">1</span>&#125;);</span><br><span class="line">		<span class="keyword">else</span> ++q.back().second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> [x, xn] : q) <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(x / <span class="number">2</span> + <span class="number">1</span>)</span></span>;</span><br><span class="line">		LL p2j = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= x / <span class="number">2</span>; ++j) &#123;</span><br><span class="line">			a[j] = fac[x] * ifac[x - <span class="number">2</span> * j] % M * ifac[j] % M * p2j % M;</span><br><span class="line">			p2j = p2j * inv2 % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (xn) &#123;</span><br><span class="line">			<span class="keyword">if</span> (xn &amp; <span class="number">1</span>) mul(r, a);</span><br><span class="line">			xn &gt;&gt;= <span class="number">1</span>; mul(a, a);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">G</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	G[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) G[i] = G[i - <span class="number">1</span>] * (<span class="number">2</span> * i - <span class="number">1</span>) % M;</span><br><span class="line">	LL ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.<span class="built_in">size</span>() &amp;&amp; i &lt;= n; ++i) &#123;</span><br><span class="line">		ret += (i % <span class="number">2</span> == <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>) * G[n - i] * r[i] % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>((ret % M + M) % M);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-ACL2e：线段树模板题"><a href="#AtCoder-ACL2e：线段树模板题" class="headerlink" title="AtCoder ACL2e：线段树模板题"></a><a href="https://atcoder.jp/contests/abl/tasks/abl_e" target="_blank" rel="noopener">AtCoder ACL2e</a>：线段树模板题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl;</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lrt rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrt rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, lrt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, rrt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NN = N * <span class="number">3.2</span>;</span><br><span class="line">LL sum[NN], s10[N];</span><br><span class="line"><span class="keyword">int</span> col[NN];</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	sum[rt] = sum[lrt] + sum[rrt];</span><br><span class="line">	<span class="keyword">if</span> (sum[rt] &gt;= M) sum[rt] -= M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (col[rt] != <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		col[lrt] = col[rrt] = col[rt];</span><br><span class="line">		col[rt] = <span class="number">-1</span>;</span><br><span class="line">		sum[lrt] = (s10[m] - s10[l - <span class="number">1</span>] + M) * col[lrt] % M;</span><br><span class="line">		sum[rrt] = (s10[r] - s10[m] + M) * col[rrt] % M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		sum[rt] = s10[r] - s10[l - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (sum[rt] &lt; <span class="number">0</span>) sum[rt] += M;</span><br><span class="line">		col[rt] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	col[rt] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	build(lson);</span><br><span class="line">	build(rson);</span><br><span class="line">	pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) &#123;</span><br><span class="line">		sum[rt] = (s10[r] - s10[l - <span class="number">1</span>] + M) * p % M;</span><br><span class="line">		col[rt] = p;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pushDown(l, r, rt);</span><br><span class="line">	<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= m) update(L, R, p, lson);</span><br><span class="line">	<span class="keyword">if</span> (R &gt; m) update(L, R, p, rson);</span><br><span class="line">	pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	s10[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	LL now = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		s10[i] = now;</span><br><span class="line">		now = now * <span class="number">10</span> % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		s10[i] += s10[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s10[i] &gt;= M) s10[i] -= M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> n, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> l, r, d;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class="line">		update(n - r + <span class="number">1</span>, n - l + <span class="number">1</span>, d, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">print</span>(sum[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AtCoder-ABC178e：Manhattan-距离"><a href="#AtCoder-ABC178e：Manhattan-距离" class="headerlink" title="AtCoder ABC178e：Manhattan 距离"></a><a href="https://atcoder.jp/contests/abc178/tasks/abc178_e" target="_blank" rel="noopener">AtCoder ABC178e</a>：Manhattan 距离</h3><p>给定一堆点，求它们的 Manhattan 距离中最大值</p>
<blockquote>
<p>注意到其实任意两点的距离等于，它们到最左上角和到最下角的距离的距离差的最大值。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span>  LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span> x[n], y[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> xx[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;, yy[<span class="number">2</span>] = &#123;<span class="number">0</span>, <span class="keyword">int</span>(<span class="number">1e9</span>)&#125;;</span><br><span class="line">	<span class="keyword">int</span> t[<span class="number">2</span>][n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> id = <span class="number">0</span> ; id &lt; <span class="number">2</span>; ++id) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			t[id][i] = <span class="built_in">abs</span>(x[i] - xx[id]) + <span class="built_in">abs</span>(y[i] - yy[id]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r0 = *<span class="built_in">std</span>::max_element(t[<span class="number">0</span>], t[<span class="number">0</span>] + n) - *<span class="built_in">std</span>::min_element(t[<span class="number">0</span>], t[<span class="number">0</span>] + n);</span><br><span class="line">	<span class="keyword">int</span> r1 = *<span class="built_in">std</span>::max_element(t[<span class="number">1</span>], t[<span class="number">1</span>] + n) - *<span class="built_in">std</span>::min_element(t[<span class="number">1</span>], t[<span class="number">1</span>] + n);</span><br><span class="line">	<span class="built_in">print</span>(<span class="built_in">std</span>::<span class="built_in">max</span>(r0, r1));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1406D：经典数学题"><a href="#1406D：经典数学题" class="headerlink" title="1406D：经典数学题"></a><a href="https://codeforces.com/contest/1406/problem/D" target="_blank" rel="noopener">1406D</a>：经典数学题</h3><p>给定数列 $a$, 求单调递增数列 $b$ 和单调递减数列 $c$，使得 $a_i = b_i + c_i$，并且使得 $b, c$ 中的最大值最小（即 $\max(b_n, c_1)$ 最小。</p>
<p>如果 $a_i &lt; a_{i+1}$ 令 $b_{i +1} = b_i + a_{i + 1} - a_i$，否则 $c_{i + 1} = c_i + a_{i + 1} - a_i$。<br>设 $c_1 = x$，$b_ 1 = a - x$，容易看出 $b_n = \sum_{i = 2}^n \max{0, a_{i} - a_{i-1}}$。并且每次更新只和 $l, r$ 节点有关。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">floor</span><span class="params">(LL a, LL n)</span> </span>&#123; <span class="comment">// n &gt; 0</span></span><br><span class="line">	<span class="keyword">return</span> a &lt; <span class="number">0</span> ? (a - n + <span class="number">1</span>) / n : a / n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	LL a[n], ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) a[i] -= a[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ret += <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, a[i]);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">floor</span>(a[<span class="number">0</span>] + ret + <span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">		<span class="keyword">int</span> l, r, x;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (r != n) &#123;</span><br><span class="line">			ret -= <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, a[r]);</span><br><span class="line">			a[r] -= x;</span><br><span class="line">			ret += <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, a[r]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (l != <span class="number">1</span>) ret -= <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, a[l - <span class="number">1</span>]);</span><br><span class="line">		a[l - <span class="number">1</span>] += x;</span><br><span class="line">		<span class="keyword">if</span> (l != <span class="number">1</span>) ret += <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0L</span>L, a[l - <span class="number">1</span>]);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">floor</span>(a[<span class="number">0</span>] + ret + <span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1407B：GCD-问题"><a href="#1407B：GCD-问题" class="headerlink" title="1407B：GCD 问题"></a><a href="https://codeforces.com/contest/1407/problem/B" target="_blank" rel="noopener">1407B</a>：GCD 问题</h3><blockquote>
<p>如果数据范围特别大，则需要下面的处理方式，否则其实可以预处理 gcd<br>如果这题 $c_i = \gcd(b_i, b_{i + 1}$ 将会超级难！</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">int</span> a[n];</span><br><span class="line">		<span class="keyword">bool</span> v[n] = &#123;&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		<span class="keyword">int</span> id = <span class="built_in">std</span>::max_element(a, a + n) - a;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">		ans.push_back(a[id]);</span><br><span class="line">		v[id] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> now = a[id];</span><br><span class="line">		<span class="keyword">while</span> (ans.<span class="built_in">size</span>() != n) &#123;</span><br><span class="line">			<span class="keyword">int</span> mx = <span class="number">0</span>, mi = <span class="number">1e9</span> + <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">				mx = <span class="built_in">std</span>::<span class="built_in">max</span>(mx, <span class="built_in">std</span>::__gcd(now, a[i]));</span><br><span class="line">				mi = <span class="built_in">std</span>::<span class="built_in">max</span>(mi, <span class="built_in">std</span>::__gcd(now, a[i]));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (mx == mi) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!v[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span>(mx == <span class="built_in">std</span>::__gcd(now, a[i])) &#123;</span><br><span class="line">					ans.push_back(a[i]);</span><br><span class="line">					v[i] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			now = mx;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : ans) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!v[i]) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1407C：第一次过真实的交互问题"><a href="#1407C：第一次过真实的交互问题" class="headerlink" title="1407C：第一次过真实的交互问题"></a><a href="https://codeforces.com/contest/1407/problem/C" target="_blank" rel="noopener">1407C</a>：第一次过真实的交互问题</h3><p>注意到 $(a \mod b )&gt; (b \mod a)$ 当且仅当 $a &lt; b$ （这里 $a, b$ 都是正整数），并且此时 $(a \mod b) = a$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span> a[n + <span class="number">1</span>], mi = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, mx1, mx2; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; mi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; mx1;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; mi &lt;&lt; <span class="string">" "</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; mx2;</span><br><span class="line">		<span class="keyword">if</span> (mx1 &gt; mx2) &#123;</span><br><span class="line">			a[i] = mx1;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			a[mi] = mx2;</span><br><span class="line">			mi = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	a[mi] = n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"!"</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; a[i];</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1407D：经典问题：单调栈优化-DP"><a href="#1407D：经典问题：单调栈优化-DP" class="headerlink" title="1407D：经典问题：单调栈优化 DP"></a><a href="https://codeforces.com/contest/1407/problem/D" target="_blank" rel="noopener">1407D</a>：经典问题：单调栈优化 DP</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;int&gt; h(n), dp(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : h) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; low, high;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		dp[i] = (i == <span class="number">0</span> ? <span class="number">0</span> : dp[i - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">while</span> (!low.empty() &amp;&amp; h[i] &gt; h[low.top()]) &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(dp[i], dp[low.top()] + <span class="number">1</span>);</span><br><span class="line">			low.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!low.empty()) &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(dp[i], dp[low.top()] + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (h[i] == h[low.top()]) low.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		low.push(i);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (!high.empty() &amp;&amp; h[i] &lt; h[high.top()]) &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(dp[i], dp[high.top()] + <span class="number">1</span>);</span><br><span class="line">			high.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!high.empty()) &#123;</span><br><span class="line">			dp[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(dp[i], dp[high.top()] + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (h[i] == h[high.top()]) high.pop();</span><br><span class="line">		&#125;</span><br><span class="line">		high.push(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dp[n - <span class="number">1</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1405D：树的直径"><a href="#1405D：树的直径" class="headerlink" title="1405D：树的直径"></a><a href="https://codeforces.com/contest/1405/problem/D" target="_blank" rel="noopener">1405D</a>：树的直径</h3><p>$A, B$ 分别在树上某两点，每次移动的距离最大值为 $da, db$，$A$ 先移动。<br>如果 $A$ 有策略在有限步后与 $B$ 在同一点，那么就 $A$ 获胜，否则 $B$ 获胜。</p>
<p>$A$ 胜可以分这三种情况：</p>
<ul>
<li>$A$ 直接能到 $B$</li>
<li>两倍 $da$ 大于或等于 <strong>树的直径</strong></li>
<li>两倍 $da$ 大于或等于 $db$</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStar</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, to;</span><br><span class="line">	LinkStar(<span class="keyword">int</span> n) &#123;</span><br><span class="line">		nxt.<span class="built_in">clear</span>();</span><br><span class="line">		to.<span class="built_in">clear</span>();</span><br><span class="line">		head = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		nxt.emplace_back(head[u]);</span><br><span class="line">		head[u] = to.<span class="built_in">size</span>();</span><br><span class="line">		to.emplace_back(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, a, b, da, db;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b &gt;&gt; da &gt;&gt; db;</span><br><span class="line">		<span class="function">LinkStar <span class="title">A</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			A.addedge(u, v);</span><br><span class="line">			A.addedge(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">auto</span> bfs = [&amp;](<span class="keyword">int</span> s) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">			q.push(s);</span><br><span class="line">			d[s] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">				<span class="keyword">int</span> u = q.front();</span><br><span class="line">				q.pop();</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = A.head[u]; ~i; i = A.nxt[i]) &#123;</span><br><span class="line">					<span class="keyword">int</span> v = A.to[i];</span><br><span class="line">					<span class="keyword">if</span> (d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">						d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">						q.push(v);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">std</span>::max_element(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()) - d.<span class="built_in">begin</span>();</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> c = bfs(a);</span><br><span class="line">		<span class="keyword">if</span> (db &lt;= <span class="number">2</span> * da || d[b] &lt;= da) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Alice\n"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			c = bfs(c);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (d[c] &lt;= <span class="number">2</span> * da ? <span class="string">"Alice"</span> : <span class="string">"Bob"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1405E：高端树状数组"><a href="#1405E：高端树状数组" class="headerlink" title="1405E：高端树状数组"></a><a href="https://codeforces.com/contest/1405/problem/E" target="_blank" rel="noopener">1405E</a>：高端树状数组</h3><blockquote>
<p><a href="https://codeforces.com/blog/entry/82366" target="_blank" rel="noopener">官方题解</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; s;</span><br><span class="line">	TreeArray() &#123;&#125;</span><br><span class="line">	TreeArray(<span class="keyword">int</span> n) &#123; init(n); &#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">		s.resize(n + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">fill</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			s[id] += p;</span><br><span class="line">			id += lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (id) &#123;</span><br><span class="line">			r += s[id];</span><br><span class="line">			id -= lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find maximal index s.t. sum(id) &gt;= x, sum must be decreased</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(LL val, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		LL sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">1</span>] &lt; val) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">std</span>::__lg(r); ~i; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id + (<span class="number">1</span> &lt;&lt; i) &lt; r &amp;&amp; sum + s[id + (<span class="number">1</span> &lt;&lt; i)] &gt;= val) &#123;</span><br><span class="line">				id += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">				sum += s[id];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray2</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	TreeArray B, C;</span><br><span class="line">	TreeArray2() &#123;&#125;</span><br><span class="line">	TreeArray2(<span class="keyword">int</span> _n) : n(_n)&#123; </span><br><span class="line">		B.init(n);</span><br><span class="line">		C.init(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		C.add(id, p);</span><br><span class="line">		B.add(id, (id - <span class="number">1</span>) * p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		add(l, p);</span><br><span class="line">		<span class="keyword">if</span> (r + <span class="number">1</span> &lt; n) add(r + <span class="number">1</span>, -p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span> <span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id * C.sum(id) - B.sum(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">	std::vector&lt;int&gt; a(n + 1), ans(q), left(q);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">right</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		a[i] = i - a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x, y; i &lt; q; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		left[i] = <span class="number">1</span> + x;</span><br><span class="line">		right[n - y].emplace_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">TreeArray2 <span class="title">A</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= n; ++r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[r] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> id = A.C.search(a[r], r + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">if</span> (id &gt; <span class="number">0</span>) A.add(<span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">min</span>(id, r), <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : right[r]) &#123;</span><br><span class="line">			ans[x] = A.sum(left[x]);</span><br><span class="line">			<span class="keyword">if</span> (left[x] &gt; <span class="number">1</span>) ans[x] -= A.sum(left[x] - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1401D：用-dfs-变成有根树，求出每条边的权重，存在第二次到达的节点上，然后给权重高的边赋大值即可"><a href="#1401D：用-dfs-变成有根树，求出每条边的权重，存在第二次到达的节点上，然后给权重高的边赋大值即可" class="headerlink" title="1401D：用 dfs 变成有根树，求出每条边的权重，存在第二次到达的节点上，然后给权重高的边赋大值即可"></a><a href="https://codeforces.com/contest/1401/problem/D" target="_blank" rel="noopener">1401D</a>：用 dfs 变成有根树，求出每条边的权重，存在第二次到达的节点上，然后给权重高的边赋大值即可</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStar</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, to;</span><br><span class="line">    LinkStar(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        nxt.<span class="built_in">clear</span>();</span><br><span class="line">        to.<span class="built_in">clear</span>();</span><br><span class="line">        head = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        nxt.emplace_back(head[u]);</span><br><span class="line">        head[u] = to.<span class="built_in">size</span>();</span><br><span class="line">        to.emplace_back(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function">LinkStar <span class="title">A</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x, y; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			A.addedge(x, y);</span><br><span class="line">			A.addedge(y, x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> d[n + <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">bool</span> vis[n + <span class="number">1</span>] = &#123;&#125;;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			vis[u] = <span class="literal">true</span>;</span><br><span class="line">			d[u] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = A.head[u]; ~i; i = A.nxt[i]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">int</span> v = A.to[i]; !vis[v]) &#123;</span><br><span class="line">					d[u] += dfs(v);</span><br><span class="line">				&#125; </span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> d[u];</span><br><span class="line">		&#125;;</span><br><span class="line">		dfs(<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; r;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			r.emplace_back(LL(d[i]) * (n - d[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : p) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">if</span> (r.<span class="built_in">size</span>() &gt; p.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">tmp</span><span class="params">(r.<span class="built_in">size</span>() - p.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">			p.insert(p.<span class="built_in">end</span>(), tmp.<span class="built_in">begin</span>(), tmp.<span class="built_in">end</span>());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">		LL s = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (r.<span class="built_in">size</span>() &lt; p.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			s = s * p.back() % M;</span><br><span class="line">			p.pop_back();	</span><br><span class="line">		&#125;</span><br><span class="line">		p.back() = p.back() * s % M;</span><br><span class="line">		LL ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != r.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			ans += r[i] * p[i] % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans % M &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1401E"><a href="#1401E" class="headerlink" title="1401E"></a><a href="https://codeforces.com/contest/1401/problem/E" target="_blank" rel="noopener">1401E</a></h3><p>先算左横线段，再算右横线段，左横线段被退出的时候对应位置加 <code>-1</code> 即可，然后根据竖线从左到右依次加入右横线段，剔除左横线段。用树状数组计算一下就可以了。</p>
<blockquote>
<p>注意如果横竖直线有触碰到两端，那么答案对应要 <code>+1</code>。<br>注意到如果数据范围很大（例如 <code>N = 1e9</code>）那么可以压缩一下达到目的。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; s;</span><br><span class="line">    TreeArray() &#123;&#125;</span><br><span class="line">    TreeArray(<span class="keyword">int</span> n) &#123;</span><br><span class="line">		s.resize(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            s[id] += p;</span><br><span class="line">            id += lowbit(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        LL r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (id) &#123;</span><br><span class="line">            r += s[id];</span><br><span class="line">            id -= lowbit(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; la, ra;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> lx, rx, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; y &gt;&gt; lx &gt;&gt; rx;</span><br><span class="line">		<span class="keyword">if</span> (lx == <span class="number">0</span>) la.push_back(&#123;rx, y&#125;);</span><br><span class="line">		<span class="keyword">else</span> ra.push_back(&#123;lx, y&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(la.<span class="built_in">begin</span>(), la.<span class="built_in">end</span>());</span><br><span class="line">	sort(ra.<span class="built_in">begin</span>(), ra.<span class="built_in">end</span>());</span><br><span class="line">	std::vector&lt;std::tuple&lt;int, int, int&gt;&gt; b(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, ly, ry] : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; ly &gt;&gt; ry;</span><br><span class="line">	sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="function">TreeArray <span class="title">A</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : la) &#123;</span><br><span class="line">		A.add(y + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (x == N) ++r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//std::cout &lt;&lt; A.sum(100) &lt;&lt; std::endl;</span></span><br><span class="line">	<span class="keyword">int</span> lid = <span class="number">0</span>, rid = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, ly, ry] : b) &#123;</span><br><span class="line">		<span class="keyword">while</span> (lid &lt; la.<span class="built_in">size</span>() &amp;&amp; la[lid].first &lt; x) &#123;</span><br><span class="line">			A.add(la[lid].second + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">			++lid;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (rid &lt; ra.<span class="built_in">size</span>() &amp;&amp; ra[rid].first &lt;= x) &#123;</span><br><span class="line">			A.add(ra[rid].second + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">			++rid;</span><br><span class="line">		&#125;</span><br><span class="line">		r += A.sum(ry + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (ly != <span class="number">0</span>) r -= A.sum(ly);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (ry == N) ++r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HDU-6838-Battle-for-Wosneth"><a href="#HDU-6838-Battle-for-Wosneth" class="headerlink" title="HDU 6838 Battle for Wosneth"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6838" target="_blank" rel="noopener">HDU 6838 Battle for Wosneth</a></h3><blockquote>
<p>有两个人记作 Alice 和 Bob，Alice 的生命值很高，所以可以认为是无限的，Bob 的生命值为 m。两个人的攻击命中率分别为 <code>p,q</code>。两个人轮流攻击对方。从 Alice 开始攻击，每次攻击的时候，如果 Alice 命中，那么能让对方的生命值减低 1，同时自己的生命值能恢复 1，如果 Bob 命中，那么能让对方的生命值减低 1，注意 Bob 不会自己回血。直到 Bob 的血量变为 0，游戏结束。Alice 想知道，游戏结束的时候，自己期望生命值。</p>
</blockquote>
<p>不妨设，期望为 <code>a[m]</code>, 则显然<br><code>a[m] = p(1-q)(a[m-1]+1) + pq a[m-1] + (1-p)q(a[m]-1) + (1-p)(1-q)a[m]</code><br>化简一下得到 $a_m =  a_{m - 1} + \frac{p - q}{p}$. 另外 $a_1 = p + (1 - p) q (a_1 - 1)  + (1 - p) (1 - q) a_1$，所以 $a_1 = \frac{p - q + pq}{p}$ 即 $a_m = \frac{p - q}{p} m + q$</p>
<h3 id="HDU-6842-Battle-for-Wosneth2"><a href="#HDU-6842-Battle-for-Wosneth2" class="headerlink" title="HDU 6842 Battle for Wosneth2"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6842" target="_blank" rel="noopener">HDU 6842 Battle for Wosneth2</a></h3><blockquote>
<p>有两个人记作 Alice 和 Bob，生命值分别是 n,m，命中率分别为 p%,q%。两个人轮流攻击对方，从 Alice 开始攻击，每次攻击的时候，如果命中，那么能让对方的生命值减低 1，直到一方的生命值不超过 0 为止。问 Alice 胜的概率</p>
</blockquote>
<p>设 <code>a[n][m], b[m][n]</code> 分别表示表示 Alice, Bob 胜的概率。则<br><code>a[n][m] = p(1-b[n][m]) + (1-p)(1-b[n][m])</code>，<br><code>b[n][m] = q(1-a[m-1][n] + (1-q)(1-a[m][n]</code>，<br>所以我们有<code>(p+q-pq) a[n][m] = p(1-q) a[m][n] + (1-p)q a[m-1][n] + pq a[m-1][n-1]</code></p>
<h3 id="1399D-01序列分组，使得各组相邻元素不同（主要考察复杂度，超级容易-TLE）"><a href="#1399D-01序列分组，使得各组相邻元素不同（主要考察复杂度，超级容易-TLE）" class="headerlink" title="1399D: 01序列分组，使得各组相邻元素不同（主要考察复杂度，超级容易 TLE）"></a><a href="https://codeforces.com/contest/1399/problem/D" target="_blank" rel="noopener">1399D</a>: <code>01</code>序列分组，使得各组相邻元素不同（主要考察复杂度，超级容易 TLE）</h3><blockquote>
<p>可以存储当前 <code>1</code> 和 <code>0</code> 的个数，然后一直跑，就是 $O(n)$ 复杂度了</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">0</span>, r[n];</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; id[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = (<span class="string">'0'</span> == s[i]);</span><br><span class="line">			<span class="keyword">if</span> (id[t].<span class="built_in">size</span>()) &#123;</span><br><span class="line">				r[i] = id[t].top();</span><br><span class="line">				id[t].pop();</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r[i] = ++k;</span><br><span class="line">			&#125;</span><br><span class="line">			id[<span class="number">1</span> - t].push(r[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span>(k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1399E1：dfs-建树，然后就知道每条边的权重，然后有限队列贪心即可，注意是所有叶子节点到根的距离和"><a href="#1399E1：dfs-建树，然后就知道每条边的权重，然后有限队列贪心即可，注意是所有叶子节点到根的距离和" class="headerlink" title="1399E1：dfs 建树，然后就知道每条边的权重，然后有限队列贪心即可，注意是所有叶子节点到根的距离和"></a><a href="https://codeforces.com/contest/1399/problem/E1" target="_blank" rel="noopener">1399E1</a>：dfs 建树，然后就知道每条边的权重，然后有限队列贪心即可，注意是所有叶子节点到根的距离和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStar</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, to;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; w;</span><br><span class="line">	LinkStar(<span class="keyword">int</span> n) &#123;</span><br><span class="line">		nxt.<span class="built_in">clear</span>();</span><br><span class="line">		to.<span class="built_in">clear</span>();</span><br><span class="line">		head = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL val)</span> </span>&#123;</span><br><span class="line">		nxt.emplace_back(head[u]);</span><br><span class="line">		head[u] = to.<span class="built_in">size</span>();</span><br><span class="line">		to.emplace_back(v);</span><br><span class="line">		w.emplace_back(val);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> d;</span><br><span class="line">	LL v;</span><br><span class="line">	Node(<span class="keyword">int</span> _d, LL _v) : d(_d), v(_v) &#123;&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (v + <span class="number">1</span>) / <span class="number">2</span> * d &lt; (A.v + <span class="number">1</span>) / <span class="number">2</span> * A.d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">		<span class="function">LinkStar <span class="title">diag</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v; i &lt; n; ++i) &#123;</span><br><span class="line">			LL w;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">			diag.addedge(u, v, w);</span><br><span class="line">			diag.addedge(v, u, w);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::priority_queue&lt;Node&gt; a;</span><br><span class="line">		<span class="keyword">bool</span> vis[n + <span class="number">1</span>] = &#123;&#125;;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, LL)&gt; dfs = [&amp;](<span class="keyword">int</span> u, LL val) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			vis[u] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = diag.head[u]; ~i; i = diag.nxt[i]) &#123;</span><br><span class="line">				<span class="keyword">int</span> v = diag.to[i];</span><br><span class="line">				<span class="keyword">if</span> (!vis[v]) cnt += dfs(v, diag.w[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			cnt = <span class="built_in">std</span>::<span class="built_in">max</span>(cnt, <span class="number">1</span>);</span><br><span class="line">			s -= val * cnt;</span><br><span class="line">			a.push(&#123;cnt, val&#125;);</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;;</span><br><span class="line">		dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (s &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">auto</span> [cnt, val] = a.top();</span><br><span class="line">			s += (val + <span class="number">1</span>) / <span class="number">2</span> * cnt;</span><br><span class="line">			<span class="keyword">if</span>(val &gt; <span class="number">1</span>) a.push(&#123;cnt, val / <span class="number">2</span>&#125;);</span><br><span class="line">			a.pop();</span><br><span class="line">			++r;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1399E2-同-E1，只是贪心的时候，枚举费用为-2-的边的个数"><a href="#1399E2-同-E1，只是贪心的时候，枚举费用为-2-的边的个数" class="headerlink" title="1399E2:  同 E1，只是贪心的时候，枚举费用为 2 的边的个数"></a><a href="https://codeforces.com/contest/1399/problem/E2" target="_blank" rel="noopener">1399E2</a>:  同 E1，只是贪心的时候，枚举费用为 2 的边的个数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStar</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, to, c;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; w;</span><br><span class="line">	LinkStar(<span class="keyword">int</span> n) &#123;</span><br><span class="line">		nxt.<span class="built_in">clear</span>();</span><br><span class="line">		to.<span class="built_in">clear</span>();</span><br><span class="line">		head = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL val, <span class="keyword">int</span> cost)</span> </span>&#123;</span><br><span class="line">		nxt.emplace_back(head[u]);</span><br><span class="line">		head[u] = to.<span class="built_in">size</span>();</span><br><span class="line">		to.emplace_back(v);</span><br><span class="line">		w.emplace_back(val);</span><br><span class="line">		c.emplace_back(cost);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		LL s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">		<span class="function">LinkStar <span class="title">diag</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, u, v, c; i &lt; n; ++i) &#123;</span><br><span class="line">			LL w;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w &gt;&gt; c;</span><br><span class="line">			diag.addedge(u, v, w, c - <span class="number">1</span>);</span><br><span class="line">			diag.addedge(v, u, w, c - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, LL&gt;&gt; a;</span><br><span class="line">		<span class="keyword">bool</span> vis[n + <span class="number">1</span>] = &#123;&#125;;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, LL, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, LL val, <span class="keyword">int</span> cost) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			vis[u] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = diag.head[u]; ~i; i = diag.nxt[i]) &#123;</span><br><span class="line">				<span class="keyword">int</span> v = diag.to[i];</span><br><span class="line">				<span class="keyword">if</span> (!vis[v]) cnt += dfs(v, diag.w[i], diag.c[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			cnt = <span class="built_in">std</span>::<span class="built_in">max</span>(cnt, <span class="number">1</span>);</span><br><span class="line">			s -= val * cnt;</span><br><span class="line">			a.push_back(&#123;cost, cnt, val&#125;);</span><br><span class="line">			<span class="keyword">return</span> cnt;</span><br><span class="line">		&#125;;</span><br><span class="line">		dfs(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; q[<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [cost, cnt, val] : a) &#123;</span><br><span class="line">			<span class="keyword">while</span> (val) &#123;</span><br><span class="line">				q[cost].emplace_back((val + <span class="number">1</span>) / <span class="number">2</span> * cnt);</span><br><span class="line">				val &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(q[<span class="number">0</span>].<span class="built_in">begin</span>(), q[<span class="number">0</span>].<span class="built_in">end</span>(), <span class="built_in">std</span>::greater&lt;&gt;());</span><br><span class="line">		<span class="built_in">std</span>::sort(q[<span class="number">1</span>].<span class="built_in">begin</span>(), q[<span class="number">1</span>].<span class="built_in">end</span>(), <span class="built_in">std</span>::greater&lt;&gt;());</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">1e9</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : q[<span class="number">0</span>]) s += x;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = q[<span class="number">0</span>].<span class="built_in">size</span>(); i &lt;= q[<span class="number">1</span>].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s - q[<span class="number">0</span>][j - <span class="number">1</span>] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">				s -= q[<span class="number">0</span>][--j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (s &gt;= <span class="number">0</span>) r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, <span class="number">2</span> * i  + j);</span><br><span class="line">			<span class="keyword">if</span> (i != q[<span class="number">1</span>].<span class="built_in">size</span>()) s += q[<span class="number">1</span>][i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span>(r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1399F-区间-dp-问题"><a href="#1399F-区间-dp-问题" class="headerlink" title="1399F :  区间 dp 问题"></a><a href="https://codeforces.com/contest/1399/problem/F" target="_blank" rel="noopener">1399F</a> :  区间 dp 问题</h3><blockquote>
<p>用 <code>f[m]</code> 表示从 <code>a[i]</code> 的左边界到，<code>m</code> 的区间个数(是被一个大的覆盖了的区间，size 一般不为 1）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// follow the idea of Jiangly</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		std::vector&lt;std::pair&lt;int, int&gt;&gt; a(n);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		a.push_back(&#123;<span class="number">1</span>, <span class="number">2e5</span>&#125;);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a) &#123;</span><br><span class="line">			v.emplace_back(l);</span><br><span class="line">			v.emplace_back(r);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">		v.erase(<span class="built_in">std</span>::unique(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()), v.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[l, r] : a) &#123;</span><br><span class="line">			l = <span class="built_in">std</span>::lower_bound(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), l) - v.<span class="built_in">begin</span>();</span><br><span class="line">			r = <span class="built_in">std</span>::lower_bound(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), r) - v.<span class="built_in">begin</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [](<span class="keyword">const</span> <span class="keyword">auto</span> &amp;lhs, <span class="keyword">const</span> <span class="keyword">auto</span> &amp;rhs) &#123;</span><br><span class="line">			<span class="keyword">if</span> (lhs.first == rhs.first) <span class="keyword">return</span> lhs.second &lt; rhs.second;</span><br><span class="line">			<span class="keyword">return</span> lhs.first &gt; rhs.first;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">int</span> dp[n + <span class="number">1</span>] = &#123;&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(a[i].second + <span class="number">1</span>)</span></span>;</span><br><span class="line">			<span class="keyword">int</span> mx = <span class="number">0</span>, x = a[i].first - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">				<span class="keyword">if</span> (a[j].second &gt; a[i].second) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">while</span> (x + <span class="number">1</span> &lt; a[j].first) mx = <span class="built_in">std</span>::<span class="built_in">max</span>(mx, f[++x]);</span><br><span class="line">				f[a[j].second] = <span class="built_in">std</span>::<span class="built_in">max</span>(f[a[j].second], dp[j] + mx);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t : f) mx = <span class="built_in">std</span>::<span class="built_in">max</span>(mx, t);</span><br><span class="line">			dp[i] = <span class="number">1</span> + mx;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">print</span>(dp[n] - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1389F：二分图"><a href="#1389F：二分图" class="headerlink" title="1389F：二分图"></a><a href="https://codeforces.com/contest/1389/problem/F" target="_blank" rel="noopener">1389F</a>：二分图</h3><p><a href="https://codeforces.com/profile/emorgan5289" target="_blank" rel="noopener">emorgan5289 大佬的代码</a>以及<a href="https://codeforces.com/blog/entry/80723#comment-671203" target="_blank" rel="noopener">解释</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="built_in">array</span>&lt;<span class="keyword">int</span>, 3&gt;&gt; a;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	ios_base::sync_with_stdio(<span class="number">0</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>); <span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> l, r, t; <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; t;</span><br><span class="line">		a.insert(t<span class="number">-1</span> ? <span class="built_in">array</span>&#123;r, <span class="number">1</span>, -l&#125; : <span class="built_in">array</span>&#123;l, <span class="number">0</span>, -r&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; [_, t, x] : a) &#123;</span><br><span class="line">		<span class="keyword">if</span> (t &amp;&amp; s.upper_bound(x) != s.<span class="built_in">begin</span>())</span><br><span class="line">			s.erase(--s.upper_bound(x)), n--;</span><br><span class="line">		<span class="keyword">if</span> (!t) s.insert(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1384D：两个人轮流取-n-个数，比较它们取的数的异或值，较大的赢"><a href="#1384D：两个人轮流取-n-个数，比较它们取的数的异或值，较大的赢" class="headerlink" title="1384D：两个人轮流取 $n$ 个数，比较它们取的数的异或值，较大的赢"></a><a href="https://codeforces.com/contest/1384/problem/D" target="_blank" rel="noopener">1384D</a>：两个人轮流取 $n$ 个数，比较它们取的数的异或值，较大的赢</h3><p>记 $s$ 为 $n$ 个数的异或值，如果 $s = 0$，那么显然平局，否则看与 $s$ 的最高位 异或不为 0 的数的人数 cnt，显然这个个数是奇数，所以为 $1 \mod 4$ ，那么先手赢，否则，我们看 $n - cnt$ 是否为奇数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) sum ^= x;</span><br><span class="line">		<span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"DRAW\n"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> k = <span class="built_in">std</span>::__lg(sum);</span><br><span class="line">			<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="keyword">if</span>((x &gt;&gt; k) &amp; <span class="number">1</span>) ++cnt;</span><br><span class="line">			<span class="keyword">if</span> (cnt % <span class="number">4</span> == <span class="number">1</span> || (n - cnt) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"WIN\n"</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"LOSE\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1384B：很有意思的一道模拟题，我也不知道为什么我要想这么久，太菜了"><a href="#1384B：很有意思的一道模拟题，我也不知道为什么我要想这么久，太菜了" class="headerlink" title="1384B：很有意思的一道模拟题，我也不知道为什么我要想这么久，太菜了"></a><a href="https://codeforces.com/contest/1384/problem/B2" target="_blank" rel="noopener">1384B</a>：很有意思的一道模拟题，我也不知道为什么我要想这么久，太菜了</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, k, len;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; len;</span><br><span class="line">		<span class="keyword">int</span> d[n];</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line">			<span class="keyword">if</span> (d[i] &gt; len) flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">else</span> d[i] = len - d[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"No\n"</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> l = <span class="number">0</span>, r = k;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)&#123;</span><br><span class="line">			<span class="keyword">int</span> li = <span class="built_in">std</span>::<span class="built_in">min</span>(k, d[i]);</span><br><span class="line">			<span class="keyword">int</span> ri = <span class="built_in">std</span>::<span class="built_in">max</span>(k, <span class="number">2</span> * k - d[i]);</span><br><span class="line">			<span class="keyword">if</span> (r &lt; <span class="number">2</span> * k) &#123;</span><br><span class="line">				l = <span class="number">0</span>;</span><br><span class="line">				r = <span class="built_in">std</span>::<span class="built_in">max</span>(r + <span class="number">1</span>, ri);</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (++l &gt; li) flag = <span class="literal">true</span>;</span><br><span class="line">			l = <span class="built_in">std</span>::<span class="built_in">min</span>(l, k);</span><br><span class="line">			<span class="keyword">if</span> (d[i] &gt;= k) r = k;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"No"</span> : <span class="string">"Yes"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="洛谷-U122053-选择题：经典问题：每个人说另一个人是不是好人，-好人只说真话，坏人只说慌话，输出有多少种可能的情况，并输出可能的情况下，最多的好人和最少的好人数"><a href="#洛谷-U122053-选择题：经典问题：每个人说另一个人是不是好人，-好人只说真话，坏人只说慌话，输出有多少种可能的情况，并输出可能的情况下，最多的好人和最少的好人数" class="headerlink" title="洛谷 U122053 选择题：经典问题：每个人说另一个人是不是好人， 好人只说真话，坏人只说慌话，输出有多少种可能的情况，并输出可能的情况下，最多的好人和最少的好人数"></a><a href="https://www.luogu.com.cn/problem/U122053?contestId=31675" target="_blank" rel="noopener">洛谷 U122053 选择题</a>：<strong>经典问题</strong>：每个人说另一个人是不是好人， 好人只说真话，坏人只说慌话，输出有多少种可能的情况，并输出可能的情况下，最多的好人和最少的好人数</h3><p><code>val[i]</code> 表示第 $i$ 个人是否为好人， <code>w[i,j]</code> 表示$i$ 说 $j$ 是好人还是坏人，或 $j$ 说 $i$ 是好人还是坏人，那么必然 <code>val[i] ^ val[j] = !w[i,j]</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/U122053?contestId=31675</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> head[N], val[N], cnt, nxt[<span class="number">2</span> * N], to[<span class="number">2</span> * N];</span><br><span class="line"><span class="keyword">bool</span> w[<span class="number">2</span> * N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cnt = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> (head));</span><br><span class="line">	<span class="built_in">memset</span>(val, <span class="number">-1</span>, <span class="keyword">sizeof</span> (val));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">bool</span> flag)</span> </span>&#123;</span><br><span class="line">	nxt[++cnt] = head[u];</span><br><span class="line">	head[u] = cnt;</span><br><span class="line">	to[cnt] = v;</span><br><span class="line">	w[cnt] = flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此题BFS更好，不过DFS也能过</span></span><br><span class="line">std::pair&lt;int, int&gt; dfs(int u, int flag) &#123;</span><br><span class="line">	val[u] = flag;</span><br><span class="line">	<span class="keyword">int</span> r1 = <span class="number">1</span>, r2 = flag;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">		<span class="keyword">int</span> v = to[i];</span><br><span class="line">		<span class="keyword">if</span> (val[v] != <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (val[v] != (val[u] ^ w[i])) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">auto</span> [vr1, vr2] = dfs(v, val[u] ^ w[i]);</span><br><span class="line">			<span class="keyword">if</span> (vr1 == <span class="number">-1</span>) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">			r1 += vr1;</span><br><span class="line">			r2 += vr2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;r1, r2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::pair&lt;int, int&gt; bfs(int iu, int iflag) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	q.push(&#123;iu, iflag&#125;);</span><br><span class="line">	<span class="keyword">int</span> r1 = <span class="number">0</span>, r2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [u, flag] = q.front();</span><br><span class="line">		q.pop();</span><br><span class="line">		<span class="keyword">if</span> (val[u] != <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		val[u] = flag;</span><br><span class="line">		++r1;</span><br><span class="line">		r2 += flag;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = to[i];</span><br><span class="line">			<span class="keyword">if</span> (val[v] != <span class="number">-1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (val[v] != (val[u] ^ w[i])) <span class="keyword">return</span> &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">			&#125; <span class="keyword">else</span> q.push(&#123;v, val[u] ^ w[i]&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;r1, r2&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>, x = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>; x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n;	</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> flag;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; flag;</span><br><span class="line">		addedge(i, x, !flag);</span><br><span class="line">		addedge(x, i, !flag);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> now = <span class="number">0</span>, mx = <span class="number">0</span>, mi = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (val[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="comment">// auto [r1, r2] = dfs(i, 1);</span></span><br><span class="line">		<span class="keyword">auto</span> [r1, r2] = bfs(i, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (r1 == <span class="number">-1</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"No answer\n"</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		++now;</span><br><span class="line">		mx += <span class="built_in">std</span>::<span class="built_in">max</span>(r2, r1 - r2);</span><br><span class="line">		mi += <span class="built_in">std</span>::<span class="built_in">min</span>(r2, r1 - r2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; powMod(now) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mx &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mi &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="洛谷-U122055-出生点-：简单包容排斥"><a href="#洛谷-U122055-出生点-：简单包容排斥" class="headerlink" title="洛谷 U122055 出生点 ：简单包容排斥"></a><a href="https://www.luogu.com.cn/problem/U122055?contestId=31675" target="_blank" rel="noopener">洛谷 U122055 出生点</a> ：简单包容排斥</h3><p><strong>仅考虑 $x$-轴</strong></p>
<p>当$k=0$ 时，那么距离之和就是</p>
<script type="math/tex; mode=display">
m^2 \sum_{i=1}^n i(n-i) = m^2 \sum_{1} ^n i(n-1) - i(i-1) = \frac{m^2(n-1)n(n+1)}{6}</script><p>然后我们减去 $k$ 个障碍点和其它所有点之间的距离</p>
<script type="math/tex; mode=display">
m  \sum _{i=1} ^k \sum_{t=1} ^n |a[i] - t| = m  \sum _{i=1} ^k \frac{(a[i])(a[i]-1) + (n-a[i])(n-a[i] + 1)}{2}</script><p>再加上 $k$ 个障碍点之间的距离</p>
<p>不妨按照 $x$-轴排序，然后把前缀和 <code>sa[i]</code> 求一下，再依次计算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> LL inv2 = (M + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL inv6 = (M + <span class="number">1</span>)/<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL n, m;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	LL a[k], b[k];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::sort(a, a + k);</span><br><span class="line">	<span class="built_in">std</span>::sort(b, b + k);</span><br><span class="line">	LL sa[k] = &#123;a[<span class="number">0</span>]&#125;, sb[k] = &#123;b[<span class="number">0</span>]&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; k; ++ i) &#123;</span><br><span class="line">		sa[i] = sa[i - <span class="number">1</span>] + a[i];</span><br><span class="line">		sb[i] = sb[i - <span class="number">1</span>] + b[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">auto</span> f = [](LL m, LL n) -&gt; LL &#123;</span><br><span class="line">		<span class="keyword">return</span> m * m % M * (n - <span class="number">1</span>) % M * n % M * (n + <span class="number">1</span>) % M;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL r0 = (f(m, n) + f(n, m)) * inv6 % M;</span><br><span class="line">	</span><br><span class="line">	LL r1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) &#123;</span><br><span class="line">		r1 += ((a[i] - <span class="number">1</span>) * a[i] + (n - a[i] + <span class="number">1</span>) * (n - a[i])) % M;</span><br><span class="line">	&#125;</span><br><span class="line">	r1 = r1 % M * m % M * inv2 % M;</span><br><span class="line">	</span><br><span class="line">	LL r2 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++ i) &#123;</span><br><span class="line">		r2 += ((b[i] - <span class="number">1</span>) * b[i] + (m - b[i] + <span class="number">1</span>) * (m - b[i])) % M;</span><br><span class="line">	&#125;</span><br><span class="line">	r2 = r2 % M * n % M * inv2 % M;</span><br><span class="line">	</span><br><span class="line">	LL r3 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">		r3 += (sa[k - <span class="number">1</span>] - sa[i] - a[i] * (k - <span class="number">1</span> - i)) % M;</span><br><span class="line">		r3 += (sb[k - <span class="number">1</span>] - sb[i] - b[i] * (k - <span class="number">1</span> - i)) % M;</span><br><span class="line">	&#125;</span><br><span class="line">	r3 %= M;</span><br><span class="line"></span><br><span class="line">	LL r = (r0 - r1 - r2 + r3) % M;</span><br><span class="line">	<span class="keyword">if</span>(r &lt; <span class="number">0</span>) r += M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="洛谷-U122054-强迫症-圆上-n-个点构成的无交错边的图的个数-f-n"><a href="#洛谷-U122054-强迫症-圆上-n-个点构成的无交错边的图的个数-f-n" class="headerlink" title="洛谷 U122054 强迫症 : 圆上 $n$ 个点构成的无交错边的图的个数 $f_n$"></a><a href="https://www.luogu.com.cn/problem/U122054?contestId=31675" target="_blank" rel="noopener">洛谷 U122054 强迫症</a> : <a href="http://oeis.org/A054726" target="_blank" rel="noopener">圆上 $n$ 个点构成的无交错边的图的个数 $f_n$</a></h3><p>$f_0 = 1, f_1 = 1, f_2 = 2, f_3 = 8$，考虑 $n+1$ 个点，如果第 $n+1$ 点与其他点没有边相连有 $f_n$ 种，如果相连，设最小的数为 $i$, 那么一边有 $f_i$ 种（注意到 $n+1$ 这个节点可以不管，因为它不跟小于 $i$ 的节点相连），另一边有 $\frac{f_{n+2-i}}{2}$，即</p>
<script type="math/tex; mode=display">
f_{n + 1} = f_n + \frac{1}{2}\sum_{i = 1} ^ n f_i f_{n+2-i}</script><p>化简一下，可知 </p>
<script type="math/tex; mode=display">
f_{n+1} = 2f_n + \sum_{i=2} ^n f_i f_{n+2-i}</script><p>我们令 $g_n = f_{n+1}$，则 $g_n = 2g_{n-1} + \sum_{i=2} ^ n g_{i-1} g_{n+1-i} = 2 g_{n-1} + \sum_{i=1} ^{n-1} g_i g_{n-i}$，所以 $g_n = \frac{2}{3} g_{n-1} + \frac{1}{3} \sum_{i=0} ^n g_i g_{n-i}$。考虑 $g_n$ 的生成函数 $g(z)$：</p>
<script type="math/tex; mode=display">
g(z) = \sum_{i = 0} ^ {\infty} g_n z^n = g_0 + \frac{2}{3}  \sum_{i = 1} ^ {\infty} g_{n-1} z^n + \frac{1}{3} \sum_{i = 1} ^ {\infty} \sum_{i=0} ^ n g_i g_{n-i} z^n = g_0 + \frac{2}{3} z g(z) + \frac{1}{3} (g^2(z)  - g_0 ^ 2)</script><p>因此 $\frac{1}{3} g^2(z) + (\frac{2}{3} z - 1) g(z) + \frac{2}{3} = 0$，从而 $g(z) = \frac{3-2z \pm \sqrt{1 - 12 z + 4z^2}}{2}$, 由 $g_1 = 2$ 知 $g(z) = \frac{3-2z - \sqrt{1 - 12 z + 4z^2}}{2}$，从而 $f(z) = f_0 + z g(z) = 1 + \frac{3}{2} z - z^2 - \frac{z}{2} \sqrt{1 - 12 z + 4 z^2}$。</p>
<script type="math/tex; mode=display">
g'(z) = -1 - \frac{2z - 3}{\sqrt{1 - 12 z + 4 z^2}} = \frac{3-2z - \sqrt{1 - 12 z + 4 z^2}}{\sqrt{1 - 12 z + 4 z^2}}</script><script type="math/tex; mode=display">
(1 - 12z + 4 z^2) g'(z) = (3-2z - \sqrt{1 - 12 z + 4 z^2}) (\sqrt{1 - 12 z + 4 z^2}) = (3 - 2z) (3-2z - 2g(z)) - (1 - 12z + 4 z^2 = (4z - 6) g(z) + 8</script><p>因此 $(n + 1)g_{n+1} - 12 n g_n + 4(n-1)g_{n-1} = 4 g_{n-1} - 6 g_n$，整理得到 $(n+1)g_{n+1}  = (12 n - 6) g_n - (4n-8)g_{n-1}$</p>
<p>从而 $(n+1)f_{n+2} = (12 n - 6) f_{n+1} - (4n - 8) f_n$，即递推公式 $f_{n} = \frac{ (12 n - 30) f_{n-1} - (4 n - 16) f_{n-2} }{n-1}$。</p>
<p>所以原问题的答案就是 </p>
<script type="math/tex; mode=display">
\frac{ \sum_{i = 0} ^{n - 2} \sum_{j = i + 1} ^ {n-1} a_i a_j \frac{f_{j-i+1}}{2} \frac{f_{n+i-j+1}}{2} }{f_n} = \frac{ \sum_{i = 0} ^{n - 2} \sum_{j = i + 1} ^ {n-1} a_i a_j f_{j-i+1} f_{n+i-j+1}}{ 4 f_n}</script><p>仅看分子：</p>
<script type="math/tex; mode=display">
\sum_{i = 0} ^{n - 2} \sum_{j = i + 1} ^ {n-1} a_i a_j f_{j-i+1} f_{n+i-j+1} = \sum_{t = 2} ^ n f_t f_{n-t+2} \sum_{i=0}^{n-t} a_i a_{i+t-1}</script><p>如果我们定义 $b_i = a_{n-1-i}$，$c_t = \sum_{i = 0} ^{t} a_{t-i} b_{i} = \sum_{i = 0} ^{t} a_{i} b_{t-i} = \sum_{i = 0} ^{t} a_{i} a_{n-1-(t-i)}$，则 $c_{n-t} = \sum_{i = 0} ^{n-t} a_{i} a_{n-1-(n-t-i)} = \sum_{i = 0} ^{n-t} a_{i} a_{i+t-1}$ 。即答案为</p>
<script type="math/tex; mode=display">
\frac{ \sum_{t = 2} ^ n f_t f_{n-t+2} \cdot c_{n-t} }{4 f_n}</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://www.luogu.com.cn/problem/U122054?contestId=31675</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>, ROOT = <span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; j) <span class="built_in">std</span>::swap(a[i], a[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = a.<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			(j ^= l) &lt; l; l &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">bool</span> isInverse = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">	LL g = powMod(ROOT, (M - <span class="number">1</span>) / a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span> (isInverse) &#123;</span><br><span class="line">		g = powMod(g, M - <span class="number">2</span>);</span><br><span class="line">		LL invLen = powMod(LL(a.<span class="built_in">size</span>()), M - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) x = x * invLen % M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != w.<span class="built_in">size</span>(); ++i) w[i] = w[i - <span class="number">1</span>] * g % M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x, LL y) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x += y) &gt;= M ? x -= M : x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>, half = <span class="number">1</span>; half != a.<span class="built_in">size</span>(); <span class="built_in">step</span> &lt;&lt;= <span class="number">1</span>, half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, wstep = a.<span class="built_in">size</span>() / <span class="built_in">step</span>; i != a.<span class="built_in">size</span>(); i += <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j != i + half; ++j) &#123;</span><br><span class="line">				LL t = (a[j + half] * w[wstep * (j - i)]) % M;</span><br><span class="line">				a[j + half] = addMod(a[j], M - t);</span><br><span class="line">				a[j] = addMod(a[j], t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">mul</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (sz &lt; tot) sz *= <span class="number">2</span>;</span><br><span class="line">	a.resize(sz);</span><br><span class="line">	b.resize(sz);</span><br><span class="line">	nft(a);</span><br><span class="line">	nft(b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != sz; ++i) a[i] = a[i] * b[i] % M;</span><br><span class="line">	nft(a, <span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">b</span><span class="params">(a.rbegin(),a.rend())</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> c = mul(a, b);</span><br><span class="line"></span><br><span class="line">	LL inv[n] = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, f[n + <span class="number">1</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) inv[i] = (M - M / i) * inv[M % i] % M;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		f[i] = ((<span class="number">12</span> * i - <span class="number">30</span>)* f[i - <span class="number">1</span>] - (<span class="number">4</span> * i - <span class="number">16</span>) * f[i - <span class="number">2</span>]) % M * inv[i - <span class="number">1</span>] % M;</span><br><span class="line">		<span class="keyword">if</span> (f[i] &lt; <span class="number">0</span>) f[i] += M;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		r += f[i] * f[n - i + <span class="number">2</span>] % M * c[n - i] % M;</span><br><span class="line">	&#125;</span><br><span class="line">	r = r * inv[<span class="number">4</span>] % M * powMod(f[n], M - <span class="number">2</span>) % M;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1382D-：0-1-背包问题"><a href="#1382D-：0-1-背包问题" class="headerlink" title="1382D ：0-1 背包问题"></a><a href="https://codeforces.com/contest/1382/problem/D" target="_blank" rel="noopener">1382D</a> ：0-1 背包问题</h3><blockquote>
<p>注意到一段选择了 <code>a[i]</code> 那么后来连续小于 <code>a[i]</code> 的都要被选择。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, maxn;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">2</span> * n];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">bool</span> dp[n + <span class="number">1</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="number">2</span> * n; i = j) &#123;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; <span class="number">2</span> * n &amp;&amp; a[j] &lt;= a[i]) ++j;</span><br><span class="line">			<span class="keyword">int</span> len = j - i;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = n; k &gt;= len; --k) &#123;</span><br><span class="line">				dp[k] |= dp[k - len];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (dp[n] ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1382C-：设-f-0-1string-gt-0-1string将字符串-0-换成-1，1-换成-0，然后倒序。给定长度为-n-的字符串-a-b-。每次可以改变-a-的前缀，给出一种方案（不超过-3n-，或者不超过-2n-）"><a href="#1382C-：设-f-0-1string-gt-0-1string将字符串-0-换成-1，1-换成-0，然后倒序。给定长度为-n-的字符串-a-b-。每次可以改变-a-的前缀，给出一种方案（不超过-3n-，或者不超过-2n-）" class="headerlink" title="1382C ：设 f: 0-1string ---&gt; 0-1string将字符串 0 换成 1，1 换成 0，然后倒序。给定长度为 $n$ 的字符串$a, b$ 。每次可以改变 $a$ 的前缀，给出一种方案（不超过 $3n$，或者不超过 $2n$ ）"></a><a href="https://codeforces.com/contest/1382/problem/C2" target="_blank" rel="noopener">1382C</a> ：设 <code>f: 0-1string ---&gt; 0-1string</code>将字符串 0 换成 1，1 换成 0，然后倒序。给定长度为 $n$ 的字符串$a, b$ 。每次可以改变 $a$ 的前缀，给出一种方案（不超过 $3n$，或者不超过 $2n$ ）</h3><ul>
<li>注意到取 $n$ 再取 $1$，再去 $n$，这样只会改变最后一个，所以就给出了不超过 $3n$ 的方案</li>
<li>可以先将 $a$变成 全$0$，再把 $b$ 变成 全$0$ 的方案反序，然后再复合。变成 $0$ 的做法就是一直让前缀数字相同。</li>
</ul>
<p>方案一：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define watch(x) std::cout &lt;&lt; (#x) &lt;&lt; &quot; is &quot; &lt;&lt; (x) &lt;&lt; std::endl</span><br><span class="line">using LL &#x3D; long long;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">	&#x2F;&#x2F;freopen(&quot;in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">	std::ios::sync_with_stdio(false);</span><br><span class="line">	std::cin.tie(nullptr);</span><br><span class="line">	int cas;</span><br><span class="line">	std::cin &gt;&gt; cas;</span><br><span class="line">	while (cas--) &#123;</span><br><span class="line">		int n;</span><br><span class="line">		std::string a, b;</span><br><span class="line">		std::cin &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		std::vector&lt;int&gt; q;</span><br><span class="line">		while (--n &gt;&#x3D; 0) &#123;</span><br><span class="line">			if(a[n] !&#x3D; b[n]) &#123;</span><br><span class="line">				q.emplace_back(n + 1);</span><br><span class="line">				q.emplace_back(1);</span><br><span class="line">				q.emplace_back(n + 1);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		std::cout &lt;&lt; q.size();</span><br><span class="line">		for (auto &amp;x : q) std::cout &lt;&lt; &quot; &quot; &lt;&lt; x;</span><br><span class="line">		std::cout &lt;&lt; std::endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方案二：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> a, b;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		a += <span class="string">'0'</span>; b += <span class="string">'0'</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; qa, qb;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] != a[i<span class="number">-1</span>]) qa.emplace_back(i);</span><br><span class="line">			<span class="keyword">if</span> (b[i] != b[i<span class="number">-1</span>]) qb.emplace_back(i);</span><br><span class="line">		&#125;</span><br><span class="line">		qa.insert(qa.<span class="built_in">end</span>(), qb.rbegin(), qb.rend());</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; qa.<span class="built_in">size</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : qa) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; x;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="百度之星-2020-初赛-1008：数论函数题"><a href="#百度之星-2020-初赛-1008：数论函数题" class="headerlink" title="百度之星 2020 初赛 1008：数论函数题"></a><a href="http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=889&amp;pid=1008" target="_blank" rel="noopener">百度之星 2020 初赛 1008</a>：数论函数题</h3><p>已知，$f(n) = \displaystyle \sum_{d|n} d \cdot [\gcd(d,\frac{n}{d}) == 1]$，求 $\displaystyle \sum_{n=1} ^N f(n)$</p>
<p>首先 </p>
<script type="math/tex; mode=display">
f(n) = \sum_{d|n} d \cdot [\gcd(d,\frac{n}{d}) == 1] = \sum_{d|n} d \cdot \sum_{l| \gcd(d,\frac{n}{d})} \mu(l) = \sum_{l^2 | n} \mu(l) \cdot l \cdot g(\frac{n}{l^2})</script><p>其中 $g(n) = \displaystyle \sum_{d|n} d$，所以 </p>
<script type="math/tex; mode=display">
\sum_{n=1} ^N f(n) = \sum_{n=1} ^N \sum_{l^2 | n} \mu(l) \cdot l \cdot g(\frac{n}{l^2}) = \sum_{l=1}^{\sqrt{N}} \mu(l) l \sum_{n=1} ^{\lfloor \frac{N}{l^2} \rfloor} g(n) = \sum_{l=1}^{\sqrt{N}} \mu(l) \cdot l \cdot h(\lfloor \frac{N}{l^2} \rfloor)</script><p>其中 $h(n) = \sum_{i = 1} ^n g(i) = \sum_{d=1}^n d \lfloor \frac{n}{d} \rfloor$，求 $h(n)$ 有众所周知的 $O (\sqrt{n})$ 的算法，所以总时间复杂度为 $O(\sum \frac{\sqrt{N}}{l}) = O(\sqrt{N} \log N)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initmu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; N; j += i) &#123;</span><br><span class="line">			mu[j] -= mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>); <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	initmu();</span><br><span class="line">	<span class="keyword">auto</span> f = [](LL n) &#123;</span><br><span class="line">		LL ret = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (LL l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">			r = n / (n / l);</span><br><span class="line">			ret += ((n / l) % M) * ((l + r) % M) % M * ((r - l + <span class="number">1</span>) % M) % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret % M * ((M + <span class="number">1</span>) / <span class="number">2</span>) % M;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		LL n, ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span> (LL i = <span class="number">1</span>; i * i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (mu[i] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">			ans += (M + mu[i]) * i % M * f(n / (i * i)) % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans%M &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一种计算思考：考虑每一个 $d$ 对答案的贡献，则 </p>
<script type="math/tex; mode=display">
\begin{array}{lc}
ans_N &= \sum_{d=1} ^N d \sum_{x d \leq N}  [\gcd(x,d) == 1] \\
&=  \sum_{d=1} ^N d \sum_{x d \leq N}  \sum_{l|gcd(x,d)} \mu(l) \\
&= \sum_{l=1} ^{\sqrt{N}} \mu(l) l \sum_{d = 1} ^{\lfloor \frac{N}{l} \rfloor}  d \cdot \lfloor \frac{N}{l^2 d} \rfloor\\
&= \sum_{l=1} ^{\sqrt{N}} \mu(l) l \sum_{d = 1} ^{\lfloor \frac{N}{l^2} \rfloor} d \cdot \lfloor \frac{ \lfloor\frac{N}{l^2} \rfloor}{d} \rfloor \\
\end{array}</script><h3 id="Atcode：经典生成函数题"><a href="#Atcode：经典生成函数题" class="headerlink" title="Atcode：经典生成函数题"></a><a href="https://atcoder.jp/contests/aising2020/tasks/aising2020_f" target="_blank" rel="noopener">Atcode</a>：经典生成函数题</h3><p>题目很容易转化成，满足所有$(a_1+\cdots+a_5)+2(b_1+\cdots+b_5) \leq N$的$a_1 \cdots a_5$之和，其中$a_i,b_i$ 均为非负整数</p>
<p>我一开始把 5 看作变量，从 <code>1,2,3</code> 一直推出 5 的公式，贼麻烦。后来  <a href="https://codeforces.com/profile/querty20002" target="_blank" rel="noopener">querty20002</a> 给出了生成函数做法的 <a href="https://codeforces.com/blog/entry/79978#comment-659438" target="_blank" rel="noopener">题解</a>。答案唯一的依赖于 $N$，即可认为答案是关于 $N$ 的数列，那么它的生成函数即为：</p>
<script type="math/tex; mode=display">
\begin{array}{cl}
\sum a_1a_2a_3a_4a_5(N) x^N &= (x+2x^2+\cdots)^5 (1+x^2+x^4+\cdots)^5 (1+x+x^2) \\
&= (\frac{x}{(1-x)^2})^5 (\frac{1}{1-x^2})^5 \frac{1}{1-x} \\
&=  \frac{x^5(1+x)^{11}}{(1-x^2)^{16}}\\
&= x^5(1+x)^{11} \sum_{n} \binom{n+15}{15} x^{2n}
\end{array}</script><p>所以答案就是 $\sum_{i=N\%2}^{11} \binom{11}{i} \binom{\frac{N-i-5}{2}+15}{15}$，所以我们选择 Python 交题 0.0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">M = <span class="number">1000000007</span></span><br><span class="line">T = int(input())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br><span class="line">	n = int(input())</span><br><span class="line">	r = <span class="number">0</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range((n<span class="number">-5</span>)%<span class="number">2</span>,<span class="number">12</span>,<span class="number">2</span>):</span><br><span class="line">		r+=math.comb(<span class="number">11</span>,i)%M*math.comb((n-i+<span class="number">25</span>)//<span class="number">2</span>,<span class="number">15</span>)%M;</span><br><span class="line">	print(r%M)</span><br></pre></td></tr></table></figure>
<p>或者 C++ 也行</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> LL M = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a,LL p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a==<span class="number">1</span>?<span class="number">1</span>:(p-p/a)*inv(p%a,p)%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">		r = r*(n-i)%M*inv(i+<span class="number">1</span>,M)%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		LL n ,r = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=(n+<span class="number">1</span>)%<span class="number">2</span>;i&lt;=<span class="number">11</span>;i+=<span class="number">2</span>) &#123;</span><br><span class="line">			r+=C(<span class="number">11</span>,i)*C((n-i+<span class="number">25</span>)/<span class="number">2</span>,<span class="number">15</span>)%M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1215E：给定长度为-n-数据范围-1-20-的数组，求最少交换相邻位置元素使得相同的数字都紧挨着"><a href="#1215E：给定长度为-n-数据范围-1-20-的数组，求最少交换相邻位置元素使得相同的数字都紧挨着" class="headerlink" title="1215E：给定长度为 $n$ 数据范围 $[1,20]$ 的数组，求最少交换相邻位置元素使得相同的数字都紧挨着"></a><a href="https://codeforces.com/contest/1215/problems" target="_blank" rel="noopener">1215E</a>：给定长度为 $n$ 数据范围 $[1,20]$ 的数组，求最少交换相邻位置元素使得相同的数字都紧挨着</h3><blockquote>
<p>参考 <a href="https://skywt.cn/posts/cf1215e" target="_blank" rel="noopener">cf1215e</a>，注意到交换两个数字，其它数字的相对位置不发生改变</p>
</blockquote>
<p><strong>状态 dp</strong>：设 <code>dp[mask]</code> 表示状态为 <code>mask</code> 的最小交换次数，其中 <code>mask&amp;(1&lt;&lt;i)=1</code> 表示值为 <code>1+i</code> 的数已经被考虑到了。所以 $dp[2^{20}-1]$ 就是我们要的结果。状态转移</p>
<script type="math/tex; mode=display">
dp[mask] = \min_{j \in mask} dp[mask\wedge2^{j}] + \sum_{k \in mask\wedge2^{j}} cnt(j,k)</script><p>其中 <code>cnt(j,k)</code> 表示把    所有的 <code>j</code> 移动到 <code>k</code> 前面需要的次数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line">LL cnt[N][N],s[N],dp[<span class="number">1</span>&lt;&lt;N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;--x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j) <span class="keyword">if</span>(x!=j)&#123;</span><br><span class="line">			cnt[x][j] += s[j];</span><br><span class="line">		&#125;</span><br><span class="line">		++s[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=(<span class="number">1</span>&lt;&lt;N);++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;N;++j) <span class="keyword">if</span>(!(i&amp;(<span class="number">1</span>&lt;&lt;j)))&#123;</span><br><span class="line">			LL s = dp[i];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;++k) <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;k))&#123;</span><br><span class="line">				s+=cnt[j][k];</span><br><span class="line">			&#125;</span><br><span class="line">			dp[i|(<span class="number">1</span>&lt;&lt;j)] = <span class="built_in">min</span>(dp[i|(<span class="number">1</span>&lt;&lt;j)],s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;dp[(<span class="number">1</span>&lt;&lt;N)<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>以上代码基本 copy <a href="https://codeforces.com/profile/WZYYN" target="_blank" rel="noopener">WZYYN</a> 的<a href="https://codeforces.com/contest/1215/submission/60614830" target="_blank" rel="noopener">代码</a></p>
</blockquote>
<h3 id="1228E：（二维）包容排斥原理"><a href="#1228E：（二维）包容排斥原理" class="headerlink" title="1228E：（二维）包容排斥原理"></a><a href="https://codeforces.com/contest/1228/problem/E" target="_blank" rel="noopener">1228E</a>：（二维）包容排斥原理</h3><blockquote>
<p>在 $n \times n$ 的格子中填不超过$k$的正整数，使得每行每列的最小值都为 1 的填法方案数。下图是 <a href="https://codeforces.com/blog/entry/70162" target="_blank" rel="noopener">官方题解</a></p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="1228E.png" alt="1228E"></p>
<p><strong>无论是 dp 还是包容排斥，定义好状态是最重要的。</strong></p>
<h3 id="1148B：在一次转机的旅行中，取消-k-个航班，使得旅客最晚达到终点"><a href="#1148B：在一次转机的旅行中，取消-k-个航班，使得旅客最晚达到终点" class="headerlink" title="1148B：在一次转机的旅行中，取消 $k$ 个航班，使得旅客最晚达到终点"></a><a href="https://codeforces.com/contest/1148/problem/B" target="_blank" rel="noopener">1148B</a>：在一次转机的旅行中，取消 $k$ 个航班，使得旅客最晚达到终点</h3><blockquote>
<p>一开始被卡住了，想一下子吃个胖子 0.0 其实枚举起点取消的航班数，然后取最大值即可</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,m,ta,tb,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;ta&gt;&gt;tb&gt;&gt;k;</span><br><span class="line">	<span class="keyword">int</span> a[n],b[m];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		a[i]+=ta;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i) <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">	<span class="keyword">if</span>(n&lt;=k||m&lt;=k)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=k;++i)&#123;</span><br><span class="line">			<span class="keyword">int</span> id = lower_bound(b,b+m,a[i])-b;</span><br><span class="line">			<span class="keyword">if</span>(id+k-i&gt;=m)&#123;</span><br><span class="line">				ans = <span class="number">-1</span>;<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			ans = <span class="built_in">max</span>(ans,tb+b[id+k-i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1251F-组成周长固定的先单调递增后单调递减的序列"><a href="#1251F-组成周长固定的先单调递增后单调递减的序列" class="headerlink" title="1251F:  组成周长固定的先单调递增后单调递减的序列"></a><a href="https://codeforces.com/contest/1251/problem/F" target="_blank" rel="noopener">1251F</a>:  组成周长固定的先单调递增后单调递减的序列</h3><blockquote>
<p>很快就能想到周长为 $2(L+x)$，其中 $L,x$ 分别表示序列最大值和长度。一开始想不明白的地方在于，如果有两个长度相同的怎么计数，后来发现相同的可以标记一个只能放左边，另一个只能放右边。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> LL M = <span class="number">998244353</span>,ROOT=<span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powmod</span><span class="params">(LL x,LL n)</span></span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%M;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>; x=x*x%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i!=a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;j) swap(a[i],a[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=a.<span class="built_in">size</span>()&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; &amp;a,<span class="keyword">bool</span> isInverse=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">	LL g = powmod(ROOT,(M<span class="number">-1</span>)/a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">		g = powmod(g,M<span class="number">-2</span>);</span><br><span class="line">		LL invLen = powmod(LL(a.<span class="built_in">size</span>()),M<span class="number">-2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a) x=x*invLen%M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(),<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=w.<span class="built_in">size</span>();++i) w[i] = w[i<span class="number">-1</span>]*g%M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x,LL y)&#123;<span class="keyword">return</span> (x+=y)&gt;=M?x-=M:x;&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">2</span>,half = <span class="number">1</span>;half!=a.<span class="built_in">size</span>();<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,half&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=a.<span class="built_in">size</span>();i+=<span class="built_in">step</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j!=half;++j)&#123;</span><br><span class="line">				LL t = (a[i+j+half]*w[a.<span class="built_in">size</span>()/<span class="built_in">step</span>*j])%M;</span><br><span class="line">				a[i+j+half]=addMod(a[i+j],M-t);</span><br><span class="line">				a[i+j]=addMod(a[i+j],t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;LL&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; a,<span class="built_in">vector</span>&lt;LL&gt; b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz=<span class="number">1</span>,tot = a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(sz&lt;tot) sz*=<span class="number">2</span>;</span><br><span class="line">	a.resize(sz);b.resize(sz);</span><br><span class="line">	nft(a);nft(b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=sz;++i) a[i] = a[i]*b[i]%M;</span><br><span class="line">	nft(a,<span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">3e5</span>+<span class="number">2</span>;</span><br><span class="line">LL fac[N],ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) fac[i] = fac[i<span class="number">-1</span>]*i%M;</span><br><span class="line">	ifac[N<span class="number">-1</span>] = powmod(fac[N<span class="number">-1</span>],M<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i;--i) ifac[i<span class="number">-1</span>] = ifac[i]*i%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binom</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> fac[n]*ifac[k]%M*ifac[n-k]%M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n,k,x,q;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">int</span> cnt[N] = &#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		++cnt[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;LL&gt; <span class="title">ans</span><span class="params">(<span class="number">2</span>*N)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(k--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="keyword">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;x;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cnt[i]&gt;<span class="number">1</span>) c2+=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(cnt[i]==<span class="number">1</span>) ++c1;</span><br><span class="line">		&#125;</span><br><span class="line">		vector&lt;LL&gt; a(c1+1),b(c2+1);</span><br><span class="line">		<span class="keyword">auto</span> inc = [](LL &amp;a,LL b)&#123;<span class="keyword">if</span>((a+=b)&gt;=M) a-=M;&#125;;</span><br><span class="line">		LL p2=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c1;++i)&#123;</span><br><span class="line">			a[i] = binom(c1,i)*p2%M;</span><br><span class="line">			inc(p2,p2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=c2;++i) b[i] = binom(c2,i);</span><br><span class="line">		a = mul(a,b);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">			inc(ans[i+x+<span class="number">1</span>],a[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;q;</span><br><span class="line">	<span class="keyword">while</span>(q--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans[x/<span class="number">2</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1251E-花最少的钱，让所有人都投票给自己（选民跟风且贪财）"><a href="#1251E-花最少的钱，让所有人都投票给自己（选民跟风且贪财）" class="headerlink" title="1251E:  花最少的钱，让所有人都投票给自己（选民跟风且贪财）"></a><a href="https://codeforces.com/contest/1251/problem/E2" target="_blank" rel="noopener">1251E</a>:  花最少的钱，让所有人都投票给自己（选民跟风且贪财）</h3><blockquote>
<p>我们按照 $m$ 分层，然后从大到小记录白嫖的人，然后实在没法白嫖的，就取消费最少的。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x,y;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">			a[x].emplace_back(y);</span><br><span class="line">		&#125;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">         <span class="comment">// q 也可以用 multiset 取代，会稍微快点</span></span><br><span class="line">		priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt;&gt; q; <span class="comment">//白嫖的votes</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a[i]) q.push(x);</span><br><span class="line">			<span class="keyword">while</span>(n-q.<span class="built_in">size</span>()&lt;i)&#123;</span><br><span class="line">				r+=q.top();</span><br><span class="line">				q.pop();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1375D-MEX-once-more，通过修改数组的某一个值成-mex，使得数组最终非降"><a href="#1375D-MEX-once-more，通过修改数组的某一个值成-mex，使得数组最终非降" class="headerlink" title="1375D: MEX once more，通过修改数组的某一个值成 mex，使得数组最终非降"></a><a href="https://codeforces.com/contest/1375/problem/D" target="_blank" rel="noopener">1375D</a>: MEX once more，通过修改数组的某一个值成 mex，使得数组最终非降</h3><blockquote>
<p>不妨最终变成 <code>0~n-1</code>，这是不好想的，特别是紧张的比赛的时候</p>
</blockquote>
<p>如果当前<code>mex = n</code> 即数列正好是一个排列，此时选择任意一个<code>a[i]!=i</code> 的位置，让 <code>a[i]=n</code>，否则 <code>mex &lt; n</code> 此时令<code>a[mex]=n</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin)</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">int</span> a[n],v[n],c[n+<span class="number">1</span>]=&#123;&#125;,<span class="built_in">step</span>=n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">			++c[a[i]];</span><br><span class="line">			v[i] = (a[i]==i);</span><br><span class="line">			<span class="keyword">if</span>(v[i]) --<span class="built_in">step</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">int</span> mex = <span class="number">0</span>,l=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(c[mex]) ++mex;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">step</span>--)&#123;</span><br><span class="line">			<span class="keyword">if</span>(mex == n)&#123;</span><br><span class="line">				<span class="keyword">while</span>(v[l]) ++l;</span><br><span class="line">				q.push_back(l+<span class="number">1</span>);</span><br><span class="line">				--c[a[l]];</span><br><span class="line">				++c[mex];</span><br><span class="line">				mex = a[l];</span><br><span class="line">				a[l] = n;</span><br><span class="line">			&#125;</span><br><span class="line">			++c[mex];</span><br><span class="line">			<span class="keyword">int</span> nmex = mex;</span><br><span class="line">			<span class="keyword">if</span>(--c[a[mex]]==<span class="number">0</span>&amp;&amp;a[mex]&lt;mex)&#123;</span><br><span class="line">				nmex = a[mex];</span><br><span class="line">			&#125;</span><br><span class="line">			a[mex] = mex;</span><br><span class="line">			v[mex] = <span class="literal">true</span>;</span><br><span class="line">			q.push_back(mex+<span class="number">1</span>);</span><br><span class="line">			mex = nmex;</span><br><span class="line">			<span class="keyword">while</span>(c[mex]) ++mex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:q) <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面算法过度追求效率而丢失了可读性。其实可以缩短一半代码量</p>
</blockquote>
<h3 id="1119C-选取-4-个角，反位，使得-A-矩阵变成-B-矩阵"><a href="#1119C-选取-4-个角，反位，使得-A-矩阵变成-B-矩阵" class="headerlink" title="1119C: 选取 4 个角，反位，使得 A 矩阵变成 B 矩阵"></a><a href="https://codeforces.com/contest/1119/problem/c" target="_blank" rel="noopener">1119C</a>: 选取 4 个角，反位，使得 A 矩阵变成 B 矩阵</h3><blockquote>
<p>把 A，B 异或到 A，然后就转化成 A 矩阵变成 0 矩阵的方案了。这个时候一行行的处理就搞定了！（一开始就是没思路，后来灵光一闪）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i][j])&#123;</span><br><span class="line">				++cnt;</span><br><span class="line">				<span class="keyword">if</span>(i!=n)&#123;</span><br><span class="line">					a[i+<span class="number">1</span>][j]^=a[i][j];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(cnt&amp;<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span>(i==n) <span class="keyword">return</span> cnt==<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin)</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x;j&lt;=m;++j)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			a[i][j]^=x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;(f(n,m)?<span class="string">"Yes"</span>:<span class="string">"No"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1110：打麻将-0-0"><a href="#1110：打麻将-0-0" class="headerlink" title="1110：打麻将 0.0"></a><a href="https://codeforces.com/contest/1110/problem/D" target="_blank" rel="noopener">1110</a>：打麻将 0.0</h3><blockquote>
<p>就是计算最容易听牌的数量，ABC 和 AAA 的个数和</p>
</blockquote>
<p>考虑 <code>ans[n][i][j]</code> 表示只考虑小于 <code>n</code> 的情况下，有 <code>i</code> 个 <code>(n-1,n)</code>和 <code>j</code> 个 <code>n</code> 剩余的答案。由于三个 <code>(n,n+1,n+2)</code> 可以转化成 <code>(n,n,n),(n+1,n+1,n+1),(n+2,n+2,n+2)</code>，所以 <code>i,j</code> 都小于 3。且 <code>ans[n+1][j][k] = max(ans[n][i][j]+i+(c[n+1]-i-j-k)/3)</code>，最后可以优化一下空间。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin)</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cnt,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cnt&gt;&gt;m;</span><br><span class="line">	<span class="keyword">int</span> c[m+<span class="number">1</span>]=&#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x;i&lt;cnt;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		++c[x];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> dp[<span class="number">3</span>][<span class="number">3</span>],new_dp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">	<span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> n=<span class="number">0</span>;n&lt;m;++n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(new_dp,<span class="number">-1</span>,<span class="keyword">sizeof</span>(new_dp));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;++k)&#123;</span><br><span class="line">					<span class="keyword">if</span>(i+j+k&lt;=c[n+<span class="number">1</span>]&amp;&amp;dp[i][j]&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">						new_dp[j][k] = <span class="built_in">max</span>(new_dp[j][k],dp[i][j]+i+(c[n+<span class="number">1</span>]-i-j-k)/<span class="number">3</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(new_dp,dp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1371E：给定长为-n-的数组和素数-p-，记满足-x-i-lt-a-sigma-i-0-leq-i-lt-n-的排列个数为-f-x-，输出所有-x-使得-p-not-n"><a href="#1371E：给定长为-n-的数组和素数-p-，记满足-x-i-lt-a-sigma-i-0-leq-i-lt-n-的排列个数为-f-x-，输出所有-x-使得-p-not-n" class="headerlink" title="1371E：给定长为 $n$ 的数组和素数 $p$，记满足 $x+i &lt; a_{\sigma(i)},0\leq i&lt;n$ 的排列个数为 $f(x)$，输出所有 $x$ 使得 $p \not | n$"></a><a href="https://codeforces.com/contest/1371/problem/E2" target="_blank" rel="noopener">1371E</a>：给定长为 $n$ 的数组和素数 $p$，记满足 $x+i &lt; a_{\sigma(i)},0\leq i&lt;n$ 的排列个数为 $f(x)$，输出所有 $x$ 使得 $p \not | n$</h3><blockquote>
<p>先排序，并且注意到 $x \in (\max a_i-n,\max a_i+n)$ 之间。</p>
</blockquote>
<p>记 $b_i$ 为数组中小于等于 $i$ 的元素个数。则 $f(x) = \prod\limits_{i=x}^{x+n-1} b_i-(i-x) = \prod \limits_{i=x}^{x+n-1} x-(i-b_i)$，所以我们预处理出 $i-b_i$ 即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,p;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">	<span class="keyword">int</span> a[n];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	<span class="keyword">int</span> mx = *max_element(a,a+n);</span><br><span class="line">	<span class="keyword">int</span> bb[n*<span class="number">2</span>+<span class="number">2</span>]=&#123;&#125;;</span><br><span class="line">	<span class="keyword">int</span> lx = mx-n;</span><br><span class="line">	<span class="keyword">int</span> *b = bb - lx; <span class="comment">// 黑科技，哈哈</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) ++b[<span class="built_in">max</span>(lx,a[i])];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n*<span class="number">2</span>+<span class="number">2</span>;++i) bb[i]+=bb[i<span class="number">-1</span>];</span><br><span class="line">	<span class="keyword">int</span> mp[n]=&#123;&#125;;</span><br><span class="line">	<span class="keyword">auto</span> modp = [](<span class="keyword">int</span> x,<span class="keyword">int</span> p)&#123;</span><br><span class="line">		x%=p;</span><br><span class="line">		<span class="keyword">return</span> x&lt;<span class="number">0</span>?x+p:x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lx;i&lt;=mx;++i)&#123;</span><br><span class="line">		++mp[modp(i-b[i],p)];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=lx;i&lt;=mx;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(mp[modp(i,p)]==<span class="number">0</span>)&#123;</span><br><span class="line">			q.emplace_back(i);</span><br><span class="line">		&#125;</span><br><span class="line">		--mp[modp(i-b[i],p)];</span><br><span class="line">		++mp[modp(i+n-b[i+n],p)];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=q.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;q[i]&lt;&lt;<span class="string">" \n"</span>[i == q.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1245F：经典-XOR-递归"><a href="#1245F：经典-XOR-递归" class="headerlink" title="1245F：经典 XOR 递归"></a><a href="https://codeforces.com/contest/1245/problem/F" target="_blank" rel="noopener">1245F</a>：经典 XOR 递归</h3><blockquote>
<p>在区间 <code>[l,r)</code> 中找 <code>(a,b)</code> 使得 $a+b = a \wedge b$ 的个数 $f(l,r)$。</p>
</blockquote>
<p>显然，$f(x,x) = 0 \; (x\neq 0),\; f(2l,2r) = 3f(l,r)$，若 $l$ 为奇数，那么 $f(l,r) = f(l+1,r) + 2(g(l,r)-g(l,l))-(l==0)$，若 $r$ 为奇数，那么 $f(l,r) = f(l,r-1) + 2(g(r-1,r)-g(r-1,l))-(r==1)$ 。其中 $g(x,n)$ 表示满足下式的 $y$ 的个数：</p>
<script type="math/tex; mode=display">
0 \leq y < n ,\; x+y = x \wedge y</script><p>通过比较 $x,n$ 的二进制，$g(x,n)$ 的计算是容易计算的的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; g = [&amp;](<span class="keyword">int</span> x ,<span class="keyword">int</span> n)-&gt;<span class="keyword">int</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ret = <span class="number">1</span>,zeros=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n&amp;i)&#123;</span><br><span class="line">				n^=i;</span><br><span class="line">				<span class="keyword">if</span>(!(x&amp;n)) ret += <span class="number">1</span>&lt;&lt;zeros;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(!(x&amp;i)) ++zeros;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;;</span><br><span class="line">	function&lt;LL(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; f = [&amp;](<span class="keyword">int</span> l ,<span class="keyword">int</span> r)-&gt;LL&#123;</span><br><span class="line">		<span class="keyword">if</span>(l==r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		LL ret = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(l&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			ret += (g(l,r)-g(l,l))*<span class="number">2</span>-(l==<span class="number">0</span>);</span><br><span class="line">			++l;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(r&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			ret += (g(r<span class="number">-1</span>,r)-g(r<span class="number">-1</span>,l))*<span class="number">2</span>-(r==<span class="number">1</span>);</span><br><span class="line">			--r;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret + <span class="number">3</span>*f(l/<span class="number">2</span>,r/<span class="number">2</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> l,r;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;f(l,r+<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1373F：-f-x-表示非负整数-x-的十进制表示的各位数之和。求最小的非负整数-x-使得-sum-i-0-k-f-x-i-n"><a href="#1373F：-f-x-表示非负整数-x-的十进制表示的各位数之和。求最小的非负整数-x-使得-sum-i-0-k-f-x-i-n" class="headerlink" title="1373F：$f(x)$ 表示非负整数 $x$ 的十进制表示的各位数之和。求最小的非负整数 $x$ 使得 $\sum_{i=0} ^k f(x+i) = n$"></a><a href="https://codeforces.com/contest/1373/problem/E" target="_blank" rel="noopener">1373F</a>：$f(x)$ 表示非负整数 $x$ 的十进制表示的各位数之和。求最小的非负整数 $x$ 使得 $\sum_{i=0} ^k f(x+i) = n$</h3><p>由于 $0 \leq k \leq 9$，也就是说 $x,x+1,\cdots,x+k$，的个位数各不相同。我们可以枚举 $x$ 的个位数，那么 $x/10,\cdots, (x+k)/10$，最多仅有两种取值。若只有一种，即没有进位（不能为 9），那么直接就可以把 $x$ 的位数和求出来，否则 $x/10$ 的个数必为 9。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">1e17</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> csum = [](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">		<span class="keyword">return</span> (a+b)*(b-a+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> f = [](<span class="keyword">int</span> n)&#123;</span><br><span class="line">		LL r = <span class="number">0</span>,d = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(n&gt;<span class="number">9</span>)&#123;</span><br><span class="line">			r+=<span class="number">9</span>*d;</span><br><span class="line">			d*=<span class="number">10</span>;</span><br><span class="line">			n-=<span class="number">9</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r+n*d;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> g = [&amp;](<span class="keyword">int</span> a,<span class="keyword">int</span> k,<span class="keyword">int</span> n) -&gt; LL&#123;</span><br><span class="line">		LL r = <span class="number">0</span>,d = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(n&lt;a) <span class="keyword">return</span> inf;</span><br><span class="line">		<span class="keyword">while</span>((n-a)%k)&#123;</span><br><span class="line">			n-=<span class="number">9</span>*(k-a);</span><br><span class="line">			r+=d*<span class="number">9</span>;</span><br><span class="line">			d*=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">if</span>(n&lt;a) <span class="keyword">return</span> inf;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r+d*(f((n-a)/k+<span class="number">1</span>)<span class="number">-1</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,k;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		<span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;f(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(k*(k<span class="number">-1</span>)/<span class="number">2</span> &gt; n)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		LL r = inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i+k&lt;=<span class="number">9</span>)&#123;</span><br><span class="line">				<span class="keyword">int</span> t = csum(i,i+k);</span><br><span class="line">				<span class="keyword">if</span>(n&gt;=t&amp;&amp;(n-t)%(k+<span class="number">1</span>)==<span class="number">0</span>) r = <span class="built_in">min</span>(r,<span class="number">10</span>*f((n-t)/(k+<span class="number">1</span>))+i);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">int</span> t = csum(i,<span class="number">9</span>)+csum(<span class="number">0</span>,i+k<span class="number">-10</span>);</span><br><span class="line">				<span class="keyword">if</span>(n&gt;=t) r = <span class="built_in">min</span>(r,<span class="number">10</span>*g(i+k<span class="number">-9</span>,k+<span class="number">1</span>,n-t)+i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(r==inf? <span class="number">-1</span>:r)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>以上代码按照时间顺序(2020/6/25——now)倒序，以下代码按照时间顺序(2020/5/22 —— 2020/6/25)排序</strong></p>
<h3 id="1355B-：贪心模仿加法进位"><a href="#1355B-：贪心模仿加法进位" class="headerlink" title="1355B ：贪心模仿加法进位"></a><a href="https://codeforces.com/contest/1355/problem/B" target="_blank" rel="noopener">1355B</a> ：贪心模仿加法进位</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>,x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		x+=a[i];</span><br><span class="line">		ans+=x/i;</span><br><span class="line">		x%=i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n,x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) a[i]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			++a[x];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;getans(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1354C-：计算包含单位正-n-边形的最小正方形的边长"><a href="#1354C-：计算包含单位正-n-边形的最小正方形的边长" class="headerlink" title="1354C  ：计算包含单位正 $n$ 边形的最小正方形的边长"></a><a href="https://codeforces.com/problemset/problem/1354/C2" target="_blank" rel="noopener">1354C</a>  ：计算包含单位正 $n$ 边形的最小正方形的边长</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="built_in">cout</span>.precision(<span class="number">10</span>);</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">double</span> x = <span class="built_in">sqrt</span>(<span class="number">1</span>-<span class="built_in">cos</span>((n/<span class="number">2</span>)*pi/n));</span><br><span class="line">			<span class="keyword">double</span> y = <span class="built_in">sqrt</span>(<span class="number">1</span>-<span class="built_in">cos</span>((n/<span class="number">2</span>+<span class="number">1</span>)*pi/n));</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(x+y)/<span class="number">2</span>/<span class="built_in">sin</span>(pi/<span class="number">2</span>/n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">1.0</span>/<span class="built_in">tan</span>(pi/<span class="number">2</span>/n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1354D-：模拟操作：-加数字或删除第-k-小的数"><a href="#1354D-：模拟操作：-加数字或删除第-k-小的数" class="headerlink" title="1354D ：模拟操作： 加数字或删除第 $k$ 小的数"></a><a href="https://codeforces.com/problemset/problem/1354/D" target="_blank" rel="noopener">1354D</a> ：模拟操作： 加数字或删除第 $k$ 小的数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> s[N], Size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (id &lt;= Size) &#123;</span><br><span class="line">		s[id] += p;</span><br><span class="line">		id += lowbit(id);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (id) &#123;</span><br><span class="line">		r += s[id];</span><br><span class="line">		id -= lowbit(id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = Size;</span><br><span class="line">	<span class="keyword">while</span> (r&gt;l) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (sum(m) &gt;= k) r = m;</span><br><span class="line">		<span class="keyword">else</span> l = m+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	add(<span class="built_in">find</span>(k), <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> q, x;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; Size &gt;&gt; q) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Size; ++i) s[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Size; ++i) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			add(x, <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (q--) &#123;</span><br><span class="line">			<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			<span class="keyword">if</span> (x &gt; <span class="number">0</span>) add(x, <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				del(-x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt;(sum(ans)&gt;<span class="number">0</span>?ans:<span class="number">0</span>)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1354F-：经典-DP-问题"><a href="#1354F-：经典-DP-问题" class="headerlink" title="1354F ：经典 DP 问题"></a><a href="https://codeforces.com/problemset/problem/1354/F" target="_blank" rel="noopener">1354F</a> ：经典 DP 问题</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">102</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="keyword">bool</span> isin[N][N],chose[N];</span><br><span class="line"><span class="keyword">using</span> node = tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;;</span><br><span class="line">node q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>]+(k<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;i &amp;&amp; j&lt;=k;++j)&#123;</span><br><span class="line">			<span class="keyword">int</span> x = dp[i<span class="number">-1</span>][j]+(k<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i]);</span><br><span class="line">			<span class="keyword">int</span> y = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+(j<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i])+<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(q[i]);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">				dp[i][j] = x;</span><br><span class="line">				isin[i][j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				dp[i][j] = y;</span><br><span class="line">				isin[i][j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;=k)&#123;</span><br><span class="line">			dp[i][i] = dp[i<span class="number">-1</span>][i<span class="number">-1</span>]+(i<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i])+<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(q[i]);</span><br><span class="line">			isin[i][i] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n,j=k;i;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isin[i][j])&#123;</span><br><span class="line">			chose[i]=<span class="literal">true</span>;</span><br><span class="line">			--j;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			chose[i]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n,k,a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			q[i] = &#123;i,a,b&#125;;</span><br><span class="line"> </span><br><span class="line">		&#125;</span><br><span class="line">		sort(q+<span class="number">1</span>,q+n+<span class="number">1</span>,[](<span class="keyword">const</span> node &amp; x, <span class="keyword">const</span> node &amp; y)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(x)&lt;<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(y);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(<span class="number">2</span>*n-k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		getans(n,k);</span><br><span class="line">		<span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(chose[i])&#123;</span><br><span class="line">				<span class="keyword">if</span>(++last == k)&#123;</span><br><span class="line">					last = i;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!chose[i])  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>&lt;&lt;-<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[last])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1345F-：经典二分，利用二阶偏导（离散偏导，即增量）是常量"><a href="#1345F-：经典二分，利用二阶偏导（离散偏导，即增量）是常量" class="headerlink" title="1345F ：经典二分，利用二阶偏导（离散偏导，即增量）是常量"></a><a href="https://codeforces.com/problemset/problem/1345/F" target="_blank" rel="noopener">1345F</a> ：经典二分，利用二阶偏导（离散偏导，即增量）是常量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	LL k,x;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">		<span class="built_in">vector</span>&lt;LL&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			q.push_back(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">auto</span> <span class="built_in">get</span> = [](LL x ,LL mx)&#123;</span><br><span class="line">			LL l=<span class="number">0</span>,r=x<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">				LL m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">if</span>(x-m*(m+<span class="number">1</span>)*<span class="number">3</span> == mx)  <span class="keyword">return</span> make_pair(m,m+<span class="number">1</span>);</span><br><span class="line">				<span class="keyword">if</span>(x-m*(m+<span class="number">1</span>)*<span class="number">3</span> &gt; mx)  l = m+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span>  r = m<span class="number">-1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> make_pair(l,l);</span><br><span class="line">		&#125;;</span><br><span class="line">		LL l = <span class="number">-3e18</span><span class="number">-3e8</span>, r = <span class="number">1e9</span>;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">			LL m = (l+r)&gt;&gt;<span class="number">1</span>,x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:q)&#123;</span><br><span class="line">				<span class="keyword">auto</span> tmp = <span class="built_in">get</span>(i,m);</span><br><span class="line">				x+=tmp.first;</span><br><span class="line">				y+=tmp.second;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(x&gt;k) l = m+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(y&lt;k) r = m<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				y-=k;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:q)&#123;</span><br><span class="line">					<span class="keyword">auto</span> tmp = <span class="built_in">get</span>(i,m);</span><br><span class="line">					<span class="comment">//cout&lt;&lt;endl&lt;&lt;tmp.first&lt;&lt;" "&lt;&lt;tmp.second&lt;&lt;endl;;</span></span><br><span class="line">					<span class="keyword">if</span>(tmp.first&lt;tmp.second &amp;&amp; y--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;tmp.first&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						<span class="built_in">cout</span>&lt;&lt;tmp.second&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1325B：Set-的用法举例"><a href="#1325B：Set-的用法举例" class="headerlink" title="1325B：Set 的用法举例"></a><a href="https://codeforces.com/problemset/problem/1325/B" target="_blank" rel="noopener">1325B</a>：Set 的用法举例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n,x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			q.insert(x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1325D：（异或）位运算：判断是否有-n-个数，异或和为-u-和为-v"><a href="#1325D：（异或）位运算：判断是否有-n-个数，异或和为-u-和为-v" class="headerlink" title="1325D：（异或）位运算：判断是否有 $n$ 个数，异或和为 $u$, 和为 $v$"></a><a href="https://codeforces.com/contest/1325/problem/D" target="_blank" rel="noopener">1325D</a>：（异或）位运算：判断是否有 $n$ 个数，异或和为 $u$, 和为 $v$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL u,v;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v)&#123;</span><br><span class="line">		<span class="keyword">if</span>(u&gt;v||((v-u)&amp;<span class="number">1</span>))&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(u == v)&#123;</span><br><span class="line">			<span class="keyword">if</span>(u)  <span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;u&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			v = (v-u)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(u&amp;v) <span class="built_in">cout</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;u&lt;&lt;<span class="string">" "</span>&lt;&lt;v&lt;&lt;<span class="string">" "</span>&lt;&lt;v&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;u+v&lt;&lt;<span class="string">" "</span>&lt;&lt;v&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意到 $a+b = a \wedge b + 2(a \&amp; b)$，并且 $(a \wedge b) \&amp; (a\&amp;b) = 0$ 当且仅当 $a b = 0$</p>
</blockquote>
<h3 id="1358D：给定区间最值问题，但是可以写的很漂亮"><a href="#1358D：给定区间最值问题，但是可以写的很漂亮" class="headerlink" title="1358D：给定区间最值问题，但是可以写的很漂亮"></a><a href="https://codeforces.com/problemset/problem/1358/D" target="_blank" rel="noopener">1358D</a>：给定区间最值问题，但是可以写的很漂亮</h3><blockquote>
<p>注意到区间最值一定在左或者右端点达到局部最大值（极值）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span>+<span class="number">102</span>;</span><br><span class="line"><span class="keyword">int</span> n,n2;</span><br><span class="line">LL a[N],b[N],s[N];</span><br><span class="line"><span class="function">LL <span class="title">f</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> ((x+<span class="number">1</span>)*x)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sumx</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> it = lower_bound(b,b+n2,x) - b;</span><br><span class="line">    <span class="comment">// 这里注意是it, 比赛的时候没减，搞得怀疑人生</span></span><br><span class="line">	<span class="keyword">return</span> s[it<span class="number">-1</span>]+f(x-b[it<span class="number">-1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL d;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;d;</span><br><span class="line">	n2=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		a[i+n] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	b[<span class="number">0</span>] = a[<span class="number">0</span>];s[<span class="number">0</span>] = f(a[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n2;++i)&#123;</span><br><span class="line">		b[i]=b[i<span class="number">-1</span>]+a[i];</span><br><span class="line">		s[i]=s[i<span class="number">-1</span>]+f(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans,sumx(b[i]+d<span class="number">-1</span>)-s[i]+a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;n2;++i)&#123;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans,s[i]-sumx(b[i]-d));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1358E：很有意思的数据处理题目，官方题解"><a href="#1358E：很有意思的数据处理题目，官方题解" class="headerlink" title="1358E：很有意思的数据处理题目，官方题解"></a><a href="https://codeforces.com/problemset/problem/1358/E" target="_blank" rel="noopener">1358E</a>：很有意思的数据处理题目，<a href="https://codeforces.com/blog/entry/77869" target="_blank" rel="noopener">官方题解</a></h3><blockquote>
<p>注意到如果 $k$ 满足答案，则 $2k$ 也满足，所以不妨设 $k&gt; \lfloor \frac{n}{2} \rfloor$，另一方面题目中要求若 $i&gt;  \lceil \frac{n}{2} \rceil$，则 $a_{i} = x$</p>
</blockquote>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line">LL a[N],s[N],m[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">int</span> n2 = (n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		s[i] = s[i<span class="number">-1</span>]+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	LL x;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n2+<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		a[i]=x;</span><br><span class="line">		s[i]=s[i<span class="number">-1</span>]+x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n2;++i)&#123;</span><br><span class="line">		m[i+<span class="number">1</span>] = <span class="built_in">min</span>(m[i],x*i-s[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=n2;k&lt;=n;++k)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[k]+m[n-k+<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;k&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1359C-读题被坑…-反正就是倒冷热水接近给定温度）"><a href="#1359C-读题被坑…-反正就是倒冷热水接近给定温度）" class="headerlink" title="1359C:  读题被坑…(反正就是倒冷热水接近给定温度）"></a><a href="https://codeforces.com/contest/1359/problem/C" target="_blank" rel="noopener">1359C</a>:  读题被坑…(反正就是倒冷热水接近给定温度）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> h,t,c;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;h&gt;&gt;c&gt;&gt;t;</span><br><span class="line">		h-=c;t-=c;</span><br><span class="line">		<span class="keyword">if</span>(h&gt;=<span class="number">2</span>*t)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			LL n = (h-t)/(<span class="number">2</span>*t-h);</span><br><span class="line">			<span class="keyword">auto</span> f = [](LL n,<span class="keyword">int</span> h,<span class="keyword">int</span> t)&#123;</span><br><span class="line">				<span class="keyword">return</span> (n+<span class="number">1</span>)*(<span class="number">2</span>*n+<span class="number">3</span>)*h+(<span class="number">2</span>*n+<span class="number">1</span>)*(n+<span class="number">2</span>)*h&gt;(<span class="number">2</span>*n+<span class="number">1</span>)*(<span class="number">2</span>*n+<span class="number">3</span>)*t*<span class="number">2</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">if</span>(f(n,h,t)) ++n;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="number">2</span>*n+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>然后对于奇数项，单调递减趋于平均问题，然后判断的时候转化成整数的判断</p>
</blockquote>
<h3 id="1359D：线段树，但是由于数据特殊，可以不用线段树"><a href="#1359D：线段树，但是由于数据特殊，可以不用线段树" class="headerlink" title="1359D：线段树，但是由于数据特殊，可以不用线段树"></a><a href="https://codeforces.com/contest/1359/problem/D" target="_blank" rel="noopener">1359D</a>：线段树，但是由于数据特殊，可以不用线段树</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;=<span class="number">30</span>;++m)&#123;</span><br><span class="line">		<span class="keyword">int</span> suml =<span class="number">0</span>,sum=<span class="number">0</span>,maxa = <span class="number">-31</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;m)&#123;</span><br><span class="line">				sum = suml = <span class="number">0</span>;</span><br><span class="line">				maxa = <span class="number">-31</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				sum+=a[i];</span><br><span class="line">				<span class="comment">//这里取全局最大是因为，我们枚举了最大值的可能</span></span><br><span class="line">				maxa = <span class="built_in">max</span>(maxa,a[i]);</span><br><span class="line">				ans = <span class="built_in">max</span>(ans,sum-suml-maxa);</span><br><span class="line">				<span class="comment">//相当于前面是全0的部分删了！并且这样不会避免中间负的情况</span></span><br><span class="line">				suml = <span class="built_in">min</span>(sum,suml);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意到 $-30&lt;a_i&lt;30 $</p>
</blockquote>
<h3 id="1359E：找到公式后就是模素数组合数"><a href="#1359E：找到公式后就是模素数组合数" class="headerlink" title="1359E：找到公式后就是模素数组合数"></a><a href="https://codeforces.com/contest/1359/problem/E" target="_blank" rel="noopener">1359E</a>：找到公式后就是模素数组合数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line">LL inv[N],frac[N];</span><br><span class="line"><span class="function">LL <span class="title">powmod</span><span class="params">(LL x, LL n, LL p)</span> </span>&#123;</span><br><span class="line">	LL r=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n) &#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">		x=x*x%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	frac[<span class="number">0</span>]=inv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</span><br><span class="line">		frac[i] = frac[i<span class="number">-1</span>]*i%M;</span><br><span class="line">	&#125;</span><br><span class="line">	inv[N<span class="number">-1</span>] = powmod(frac[N<span class="number">-1</span>],M<span class="number">-2</span>,M);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-2</span>;i;--i)&#123;</span><br><span class="line">		inv[i] = inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(n==m||m==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> frac[n]*inv[m]%M*inv[n-m]%M;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	init();</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> x = n/i;</span><br><span class="line">		<span class="keyword">if</span>(x&lt;k) <span class="keyword">break</span>;</span><br><span class="line">		ans += C(x<span class="number">-1</span>,k<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先考虑$k=2$ 的情况知道 $a_1|a_2$，然后发现对于任意$k$，仅需 $a_1|a_i$ 即可。</p>
</blockquote>
<h3 id="1363E：有根数，互换子树的节点位数到预定值，dfs-和图存储范例"><a href="#1363E：有根数，互换子树的节点位数到预定值，dfs-和图存储范例" class="headerlink" title="1363E：有根数，互换子树的节点位数到预定值，dfs 和图存储范例"></a><a href="https://codeforces.com/contest/1363/problem/E" target="_blank" rel="noopener">1363E</a>：有根数，互换子树的节点位数到预定值，dfs 和图存储范例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="comment">// head[u] 和 cnt 的初始值都为 -1</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">bool</span> b[N],c[N];</span><br><span class="line"></span><br><span class="line">tuple&lt;int,int,LL&gt; dfs(int u,int parent,int mn)&#123;</span><br><span class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">	LL cost=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(b[u]!=c[u])&#123;</span><br><span class="line">		<span class="keyword">if</span>(b[u]) ++l;</span><br><span class="line">		<span class="keyword">else</span> ++r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v:g[u])&#123;</span><br><span class="line">		<span class="keyword">if</span>(v == parent) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">auto</span> [sl,sr,scost] = dfs(v,u,<span class="built_in">min</span>(mn,a[u]));</span><br><span class="line">		l+=sl;r+=sr;cost+=scost;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(a[u]&lt;mn)&#123;</span><br><span class="line">		<span class="keyword">int</span> take = <span class="built_in">min</span>(l,r);</span><br><span class="line">		cost += LL(a[u])*(take*<span class="number">2</span>);</span><br><span class="line">		l -= take;</span><br><span class="line">		r -= take;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> &#123;l,r,cost&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,u,v;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;u&gt;&gt;v;</span><br><span class="line">		g[u].push_back(v);</span><br><span class="line">		g[v].push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> [l,r,cost] = dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">2e9</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;(l||r?<span class="number">-1</span>:cost)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面代码写得呢，就很优雅，哈哈！</p>
</blockquote>
<h3 id="1361E-：下面代码至今没过我也是没懂为什么"><a href="#1361E-：下面代码至今没过我也是没懂为什么" class="headerlink" title="1361E ：下面代码至今没过我也是没懂为什么"></a>1361E ：下面代码至今没过我也是没懂为什么</h3><blockquote>
<p>模仿进制的操作，最后用其他代码过的题。多设几个变量没坏处的其实。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL a[N],p;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">powmod</span><span class="params">(T x,U n,T p)</span></span>&#123;</span><br><span class="line">	<span class="function">T <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;  x=x*x%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(p==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;(n&amp;<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">		LL ans = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(n&gt;<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(ans==<span class="number">0</span>)&#123;</span><br><span class="line">				ans = <span class="number">1</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[n]==a[n<span class="number">-1</span>]) --ans;</span><br><span class="line">				<span class="keyword">else</span>&#123;</span><br><span class="line">					<span class="keyword">while</span>(a[n]&gt;a[n<span class="number">-1</span>])&#123;</span><br><span class="line">						ans*=p;</span><br><span class="line">						--a[n];</span><br><span class="line">						<span class="keyword">if</span>(ans&gt;n) <span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span>(a[n]!=a[n<span class="number">-1</span>]) <span class="keyword">break</span>;</span><br><span class="line">					--ans;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			--n;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = ans%M*powmod(p,a[n],M)%M;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">			ans-=powmod(p,a[i],M);</span><br><span class="line">		&#125;</span><br><span class="line">		ans = (M+ans%M)%M;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1349F-：神奇的对应"><a href="#1349F-：神奇的对应" class="headerlink" title="1349F ：神奇的对应"></a><a href="https://codeforces.com/contest/1349/problem/F1" target="_blank" rel="noopener">1349F</a> ：神奇的对应</h3><p>我们称一个长度为 $n$ 的序列 $p$ 为<strong>好序列</strong>，如果对任意正整数$k&gt;1$，存在 $1 \leq i &lt; j \leq n$ 使得，$p_i = k-1, p_j = k$</p>
<p>存在 <strong>好序列</strong> 和长为 $n$ 的排列一一对应：</p>
<ul>
<li>给定排列 $a_1,a_2,\cdots, a_n$ ， 相邻两个之间添加 <code>&gt;</code> 或 <code>&lt;</code> ,那么 $p_{a_i}$ 就定义为 $a_1,\cdots,a_i$ 中 <code>&lt;</code> 个数加一</li>
<li>给定好序列 $p$，从右到左依次标记出 <code>1,2,...</code> ，直到标记完所有数即得到了排列</li>
</ul>
<p>因此 <strong>好序列</strong> 中最大值对应这排列中单调递减区间的个数！</p>
<blockquote>
<p>答案要求的是：所有好序列中出现 $k$ 的个数之和。</p>
</blockquote>
<p>代码下次再写吧…</p>
<h3 id="1365E：这题其实没啥，但是比赛的时候竟然把-想成了-，很烦"><a href="#1365E：这题其实没啥，但是比赛的时候竟然把-想成了-，很烦" class="headerlink" title="1365E：这题其实没啥，但是比赛的时候竟然把 | 想成了 ^ ，很烦"></a><a href="https://codeforces.com/problemset/problem/1365/E" target="_blank" rel="noopener">1365E</a>：这题其实没啥，但是比赛的时候竟然把 <code>|</code> 想成了 <code>^</code> ，很烦</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		LL a[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		sort(a,a+n,greater&lt;LL&gt;());</span><br><span class="line">		LL ans = a[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">2</span>*a[i]&lt;=a[<span class="number">0</span>]) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;++j)&#123;</span><br><span class="line">				LL t = a[i]|a[j];</span><br><span class="line">				ans = <span class="built_in">max</span>(ans,t);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;n;++k)&#123;</span><br><span class="line">					ans = <span class="built_in">max</span>(ans,t|a[k]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1312D：计算满足条件的数列个数"><a href="#1312D：计算满足条件的数列个数" class="headerlink" title="1312D：计算满足条件的数列个数"></a><a href="https://codeforces.com/contest/1312/problem/D" target="_blank" rel="noopener">1312D</a>：计算满足条件的数列个数</h3><p>计算满足下列条件的数列个数：</p>
<ul>
<li>数列项数为 $n$，且每一项都是不超过 $m$ 的正整数，$2\cdot 10^5 =N&gt;m \geq n \geq 2$</li>
<li>数列中有且仅有两项是相同的</li>
<li>数列在 $i$ 项前严格单调递增，$i$ 项后严格单调递减</li>
</ul>
<p>我们枚举 $i$ 的位置和 $i$ 的值，以及相同的项，则显然有如下计算式</p>
<script type="math/tex; mode=display">
\sum_{i=2} ^ {n-1} \sum_{j=n-1} ^m {j-1 \choose 1} {j-2 \choose i-2} {j-i \choose n-i-1} = \sum_{i=2} ^{n-1} \frac{1}{(i-2)!(n-i-1)} \sum_{j=n-1}^m \frac{(j-1)!}{(j-n+1)!}</script><p>预处理一下阶乘和阶乘逆，我们就可以在 $O(N)$ 解决问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function">LL <span class="title">powmod</span><span class="params">(LL a,LL n)</span></span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*a%M;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;  a=a*a%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">LL fac[N],ifac[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=N;++i)&#123;</span><br><span class="line">		fac[i] = fac[i<span class="number">-1</span>]*i%M;</span><br><span class="line">	&#125;</span><br><span class="line">	ifac[N<span class="number">-1</span>] = powmod(fac[N<span class="number">-1</span>],M<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-2</span>;~i;--i)&#123;</span><br><span class="line">		ifac[i] = ifac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%M; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		LL x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">			x+=fac[i<span class="number">-1</span>]*ifac[i-n+<span class="number">1</span>]%M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">			y+=ifac[i<span class="number">-2</span>]*ifac[n-i<span class="number">-1</span>]%M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(x%M)*(y%M)%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>但是<a href="https://codeforces.com/blog/entry/74640" target="_blank" rel="noopener">官方题解</a>给了一个更简单的方法</p>
</blockquote>
<p>首先把 $n=2$ 时无解，所以考虑 $n&gt;2$ 的情况，首先把所有用到的数字选好：$m \choose n-1$，然后选择好相同的数字：$n-2$，然后剩下的非最大的数，要么放在最大的数左边要么放在最大的数右边：$2^{n-3}$，即最终答案是 ${m \choose n-1}(n-2)2^{n-3}$</p>
<h3 id="1312E：经典-DP，解释放在"><a href="#1312E：经典-DP，解释放在" class="headerlink" title="1312E：经典 DP，解释放在 "></a><a href="https://codeforces.com/contest/1312/problem/E" target="_blank" rel="noopener">1312E</a>：经典 DP，解释放在 <a href="/dynamicProgramming/" title="动态规划">动态规划</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1022</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">502</span>][N],b[<span class="number">502</span>][N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,x;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(ans,inf,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		ans[<span class="number">0</span>][x] = <span class="number">1</span>;</span><br><span class="line">		b[<span class="number">0</span>][x]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;++j)&#123;</span><br><span class="line">				<span class="keyword">if</span>(ans[i<span class="number">-1</span>][j]!=inf)&#123;</span><br><span class="line">					ans[i][x] = <span class="built_in">min</span>(ans[i][x],ans[i<span class="number">-1</span>][j]+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				b[i][x]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> s = i<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">while</span>(s&gt;=<span class="number">0</span>&amp;&amp;ans[s][x]!=inf)&#123;</span><br><span class="line">				ans[i][x+<span class="number">1</span>] = ans[s][x];</span><br><span class="line">				b[i][x+<span class="number">1</span>] = b[s][x];</span><br><span class="line">				s = b[s][x]<span class="number">-1</span>;</span><br><span class="line">				++x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r = inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</span><br><span class="line">			r = <span class="built_in">min</span>(r,ans[n<span class="number">-1</span>][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1295E：题解，相当精彩的线段树实例"><a href="#1295E：题解，相当精彩的线段树实例" class="headerlink" title="1295E：题解，相当精彩的线段树实例"></a><a href="https://codeforces.com/contest/1295/problem/E" target="_blank" rel="noopener">1295E</a>：<a href="https://codeforces.com/blog/entry/73467" target="_blank" rel="noopener">题解</a>，相当精彩的线段树实例</h3><blockquote>
<p>下面代码取自：<a href="https://codeforces.com/profile/jiangly" target="_blank" rel="noopener">jiangly</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="built_in">min</span>, tag;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">long</span> <span class="keyword">long</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">min</span>[p] += v;</span><br><span class="line">        tag[p] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        add(<span class="number">2</span> * p, tag[p]);</span><br><span class="line">        add(<span class="number">2</span> * p + <span class="number">1</span>, tag[p]);</span><br><span class="line">        tag[p] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">min</span>[p] = <span class="built_in">std</span>::<span class="built_in">min</span>(<span class="built_in">min</span>[<span class="number">2</span> * p], <span class="built_in">min</span>[<span class="number">2</span> * p + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rangeAdd</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= y || r &lt;= x)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)</span><br><span class="line">            <span class="keyword">return</span> add(p, v);</span><br><span class="line">        <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        push(p);</span><br><span class="line">        rangeAdd(<span class="number">2</span> * p, l, m, x, y, v);</span><br><span class="line">        rangeAdd(<span class="number">2</span> * p + <span class="number">1</span>, m, r, x, y, v);</span><br><span class="line">        pull(p);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SegmentTree(<span class="keyword">int</span> n) : n(n), <span class="built_in">min</span>(<span class="number">4</span> * n), tag(<span class="number">4</span> * n) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rangeAdd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        rangeAdd(<span class="number">1</span>, <span class="number">0</span>, n, l, r, v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p, a, pos;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    p.resize(n);</span><br><span class="line">    a.resize(n);</span><br><span class="line">    pos.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">        --p[i];</span><br><span class="line">        pos[p[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="function">SegmentTree <span class="title">t</span><span class="params">(n - <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        t.rangeAdd(pos[i], n - <span class="number">1</span>, a[pos[i]]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = t.getMin();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        t.rangeAdd(pos[i], n - <span class="number">1</span>, -a[pos[i]]);</span><br><span class="line">        t.rangeAdd(<span class="number">0</span>, pos[i], a[pos[i]]);</span><br><span class="line">        ans = <span class="built_in">std</span>::<span class="built_in">min</span>(ans, t.getMin());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1295F：给定区间的非降序列概率（个数）"><a href="#1295F：给定区间的非降序列概率（个数）" class="headerlink" title="1295F：给定区间的非降序列概率（个数）"></a><a href="https://codeforces.com/contest/1295/problem/F" target="_blank" rel="noopener">1295F</a>：给定区间的非降序列概率（个数）</h3><blockquote>
<p>下面代码取自：<a href="https://codeforces.com/profile/jiangly" target="_blank" rel="noopener">jiangly</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> P = <span class="number">998'244'353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">            res = <span class="number">1L</span>L * res * a % P;</span><br><span class="line">        a = <span class="number">1L</span>L * a * a % P;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l, r, v, inv, dp;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    l.resize(n);</span><br><span class="line">    r.resize(n);</span><br><span class="line">    v.reserve(<span class="number">2</span> * n);</span><br><span class="line">    inv.resize(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        inv[i] = power(i, P - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> total = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; l[i] &gt;&gt; r[i];</span><br><span class="line">        ++r[i];</span><br><span class="line">        v.push_back(l[i]);</span><br><span class="line">        v.push_back(r[i]);</span><br><span class="line">        total = <span class="number">1L</span>L * total * (r[i] - l[i]) % P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>());</span><br><span class="line">    v.erase(<span class="built_in">std</span>::unique(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>()), v.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        l[i] = <span class="built_in">std</span>::lower_bound(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), l[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">        r[i] = <span class="built_in">std</span>::lower_bound(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), r[i]) - v.<span class="built_in">begin</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    c.assign(v.<span class="built_in">size</span>() - <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(v.<span class="built_in">size</span>()) - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        c[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            c[i][j] = <span class="number">1L</span>L * c[i][j - <span class="number">1</span>] * (j - <span class="number">1</span> + v[i + <span class="number">1</span>] - v[i]) % P * inv[j] % P;</span><br><span class="line">    &#125;</span><br><span class="line">    dp.resize(n + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="keyword">int</span>(v.<span class="built_in">size</span>()) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = n - <span class="number">1</span>; a &gt;= <span class="number">0</span>; --a) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = a; b &lt; n; ++b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; l[b] || i &gt;= r[b])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                dp[b + <span class="number">1</span>] = (dp[b + <span class="number">1</span>] + <span class="number">1L</span>L * dp[a] * c[i][b - a + <span class="number">1</span>]) % P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1L</span>L * dp[n] * power(total, P - <span class="number">2</span>) % P &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1364C：已知-a-i-MEX-b-1-cdots-b-i-为不出现在-b-1-cdots-b-i-中的最小非负整数，在给定-0-leq-a-i-leq-i-a-i-lt-a-i-1-的情况下，给出一种-b-i-的方案"><a href="#1364C：已知-a-i-MEX-b-1-cdots-b-i-为不出现在-b-1-cdots-b-i-中的最小非负整数，在给定-0-leq-a-i-leq-i-a-i-lt-a-i-1-的情况下，给出一种-b-i-的方案" class="headerlink" title="1364C：已知 $a_i=MEX({b_1,\cdots,b_i})$ 为不出现在 $b_1,\cdots,b_i$ 中的最小非负整数，在给定 $0\leq a_i \leq i,a_i&lt;a_{i+1}$ 的情况下，给出一种 $b_i$ 的方案"></a><a href="https://codeforces.com/contest/1364/problem/C" target="_blank" rel="noopener">1364C</a>：已知 $a_i=MEX({b_1,\cdots,b_i})$ 为不出现在 $b_1,\cdots,b_i$ 中的最小非负整数，在给定 $0\leq a_i \leq i,a_i&lt;a_{i+1}$ 的情况下，给出一种 $b_i$ 的方案</h3><p>方案就是：设当前最大值为 $n$，从尾部开始，先标 <code>a[i]</code> 的值被访问，然后看 <code>a[i]</code> 是否等于 <code>a[i-1]</code>，如果是就在没被访问的点中给一个最大给 <code>b[i]</code>，否则 $b[i]=a[i-1]$。然后边界判断！ <code>i=1</code> 时，当作不等处理。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="keyword">bool</span> v[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ma = n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">0</span>;--i)&#123;</span><br><span class="line">		v[a[i]]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(i==<span class="number">1</span>||a[i]==a[i<span class="number">-1</span>])&#123;</span><br><span class="line">			<span class="keyword">while</span>(ma&gt;=<span class="number">0</span>&amp;&amp;v[ma]) --ma;</span><br><span class="line">			v[ma] = <span class="literal">true</span>;</span><br><span class="line">			b[i] = ma--;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			b[i]=a[i<span class="number">-1</span>];</span><br><span class="line">			v[b[i]]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforc.com/contest/1353/problem/D" target="_blank" rel="noopener">1353D</a>：有趣的标准优先队列+BFS 题目</p>
<blockquote>
<p>初始值为 0 的长度为 n 的数组，每次在连续 0 中长度最大的那一段的中点编号，直到编完。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> l,r;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp; A)<span class="keyword">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (r-l)&lt;(A.r-A.l)||((r-l)==(A.r-A.l)&amp;&amp;l&gt;A.l);</span><br><span class="line">	&#125;</span><br><span class="line">	Node(<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)&#123;</span><br><span class="line">		l = _l;</span><br><span class="line">		r = _r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		LL n;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">int</span> a[n+<span class="number">1</span>];</span><br><span class="line">		priority_queue&lt;Node&gt; q;</span><br><span class="line">		q.push(&#123;<span class="number">1</span>,n&#125;);</span><br><span class="line">		<span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(!q.empty())&#123;</span><br><span class="line">			<span class="keyword">auto</span> u = q.top();</span><br><span class="line">			<span class="keyword">int</span> l=u.l,r=u.r;</span><br><span class="line">			q.pop();</span><br><span class="line">			a[(l+r)/<span class="number">2</span>] = ++now;</span><br><span class="line">			<span class="keyword">if</span>(l==r) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>((r-l)%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">				q.push(Node(l,(l+r)/<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">				q.push(Node((l+r)/<span class="number">2</span>+<span class="number">1</span>,r));</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				q.push(Node((l+r)/<span class="number">2</span>+<span class="number">1</span>,r));</span><br><span class="line">				<span class="keyword">if</span>(l&lt;(l+r)/<span class="number">2</span>) q.push(Node(l,(l+r)/<span class="number">2</span><span class="number">-1</span>));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" \n"</span>[i==n];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://codeforc.com/contest/1353/problem/E" target="_blank" rel="noopener">1353E</a>：在 <code>01</code>序列中改变最小的位，使得其中的所有 <code>1</code> 都是连续的。</p>
<blockquote>
<p>设 <code>dp[i]</code> 为使得前 <code>i</code> 位中 1 连续出现，且第 <code>i</code> 位为 1 的最小改变位数，状态转移就显然了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,k;</span><br><span class="line">		<span class="built_in">string</span> a;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;a;</span><br><span class="line">		<span class="keyword">auto</span> solve = [](<span class="keyword">const</span> <span class="built_in">string</span> &amp;s)&#123;</span><br><span class="line">			<span class="keyword">int</span> n = s.length();</span><br><span class="line">			<span class="keyword">int</span> all = count(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),<span class="string">'1'</span>);</span><br><span class="line">			<span class="keyword">int</span> s1=(s[<span class="number">0</span>]==<span class="string">'1'</span>);</span><br><span class="line">			<span class="keyword">int</span> ans = all-s1,res = <span class="number">1</span>-s1;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">				<span class="keyword">int</span> cur = (s[i]==<span class="string">'1'</span>);</span><br><span class="line">				s1+=cur;</span><br><span class="line">				res = <span class="number">1</span>-cur+<span class="built_in">min</span>(res,s1-cur);</span><br><span class="line">				ans = <span class="built_in">min</span>(ans,res+all-s1);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> all-ans;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">			<span class="built_in">string</span> s;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n;j+=k)&#123;</span><br><span class="line">				s+=a[j];</span><br><span class="line">			&#125;</span><br><span class="line">			mx = <span class="built_in">max</span>(mx,solve(s));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;count(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="string">'1'</span>)-mx&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1367E：不难但是很有趣的数学题"><a href="#1367E：不难但是很有趣的数学题" class="headerlink" title="1367E：不难但是很有趣的数学题"></a><a href="https://codeforces.com/contest/1367/problem/E" target="_blank" rel="noopener">1367E</a>：不难但是很有趣的数学题</h3><blockquote>
<p>在给定一些元素中取出最大数量构成一个 k 旋转不变的圈</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n,k;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s;</span><br><span class="line">		<span class="keyword">int</span> c[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:s) ++c[i-<span class="string">'a'</span>];</span><br><span class="line">		sort(c,c+<span class="number">26</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">		<span class="keyword">auto</span> check=[&amp;](<span class="keyword">int</span> m)&#123;</span><br><span class="line">			<span class="keyword">int</span> d = __gcd(m,k);</span><br><span class="line">			<span class="keyword">int</span> md = m/d;</span><br><span class="line">			<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">				x+=c[i]/md;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> x&gt;=d;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">while</span>(!check(n)) --n;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1367F：给定规则最小步骤使得数列有序"><a href="#1367F：给定规则最小步骤使得数列有序" class="headerlink" title="1367F：给定规则最小步骤使得数列有序"></a><a href="https://codeforces.com/problemset/problem/1367/F1" target="_blank" rel="noopener">1367F</a>：给定规则最小步骤使得数列有序</h3><blockquote>
<p>只允许将数列中某一个数最前或者最后，问最少多少步使得数列有序。</p>
</blockquote>
<p>我们称数列中两个数 $a_i \leq a_j$是<strong>相接</strong>的，如果 $i&lt;j$ 且排好序后 $a_i,a_j$ 相邻。那么我们的答案就是 $n-$ 最长相接子列的长度。</p>
<p><strong>原因</strong>：首先它是一个可行的答案，其次答案的方案去掉数列中被移动的数，剩下的数必然是相接的！</p>
<blockquote>
<p>因为数列中的数的大小并不影响结果，影响结果的是相对关系，因此可以通过预处理，让数列的取值范围是一个区间。</p>
</blockquote>
<p>记 <code>dp[i]</code> 为以 $i$ 结尾的最长相接子列。状态转移是好写的。</p>
<p>如果数列中元素两两互异，会很简单，因为有相同元素的时候要考虑 <code>0 1 0 2</code> 这种数列。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">		<span class="keyword">int</span> a[n],id[n];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		iota(id,id+n,<span class="number">0</span>);</span><br><span class="line">		sort(id,id+n,[&amp;](<span class="keyword">int</span> &amp;i,<span class="keyword">int</span> &amp;j)&#123;</span><br><span class="line">			<span class="keyword">return</span> a[i]==a[j]?i&lt;j:a[i]&lt;a[j];</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			a[id[i]] = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> dp[n],ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			dp[i] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&gt;<span class="number">0</span> &amp;&amp; id[a[i]<span class="number">-1</span>]&lt;i) dp[i] += dp[id[a[i]<span class="number">-1</span>]];</span><br><span class="line">			ans = <span class="built_in">max</span>(ans,dp[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;n-ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>否则，我们就要考虑 $i$ 之前 <code>a[i]</code> 严格小的相接元的 <code>dp</code> 最小值加上这些元的元素个数。</p>
<p>但是也可以直接求不用 DP 参考 <a href="https://codeforces.com/contest/1367/submission/83985710" target="_blank" rel="noopener">jiangly 的代码</a>，直接找包含第 $i$ 位最长的相接子列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> N = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[N], p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> z;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; z;</span><br><span class="line">    <span class="keyword">while</span> (z--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">std</span>::iota(p, p + n, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">std</span>::sort(p, p + n, [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;<span class="keyword">return</span> a[i] &lt; a[j] || (a[i] == a[j] &amp;&amp; i &lt; j);&#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, r; l &lt; n; l = r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (r = l + <span class="number">1</span>; r &lt; n &amp;&amp; p[r] &gt; p[r - <span class="number">1</span>]; ++r)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">int</span> res = r - l;</span><br><span class="line">            <span class="keyword">if</span> (l)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = l - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; a[p[i]] == a[p[l - <span class="number">1</span>]]; --i)</span><br><span class="line">                    <span class="keyword">if</span> (p[i] &lt; p[l])</span><br><span class="line">                        ++res;</span><br><span class="line">            <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt; n &amp;&amp; a[p[i]] == a[p[r]]; ++i)</span><br><span class="line">                    <span class="keyword">if</span> (p[i] &gt; p[r - <span class="number">1</span>])</span><br><span class="line">                        ++res;</span><br><span class="line">            ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, m, r; l &lt; n; l = m) &#123;</span><br><span class="line">            <span class="keyword">for</span> (m = l; m &lt; n &amp;&amp; a[p[m]] == a[p[l]]; ++m)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">if</span> (m == n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span> (r = m; r &lt; n &amp;&amp; a[p[r]] == a[p[m]]; ++r)</span><br><span class="line">                ;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = l, j = m; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; r &amp;&amp; p[j] &lt; p[i])</span><br><span class="line">                    ++j;</span><br><span class="line">                ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, i + <span class="number">1</span> - l + r - j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; n - ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1368B：简单的问题比赛的时候无语的想复杂了！然后就是参看-tourist-男神的优雅代码"><a href="#1368B：简单的问题比赛的时候无语的想复杂了！然后就是参看-tourist-男神的优雅代码" class="headerlink" title="1368B：简单的问题比赛的时候无语的想复杂了！然后就是参看 tourist 男神的优雅代码"></a><a href="https://codeforces.com/contest/1368/problem/B" target="_blank" rel="noopener">1368B</a>：简单的问题比赛的时候无语的想复杂了！然后就是参看 tourist 男神的优雅代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *    author:  tourist</span></span><br><span class="line"><span class="comment"> *    created: 18.06.2020 17:46:48       </span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">  <span class="built_in">string</span> s = <span class="string">"codeforces"</span>;</span><br><span class="line">  <span class="keyword">int</span> n = (<span class="keyword">int</span>) s.<span class="built_in">size</span>();</span><br><span class="line">  <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">a</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> prod = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> it = <span class="number">0</span>; prod &lt; k; it = (it + <span class="number">1</span>) % n) &#123;</span><br><span class="line">    prod = prod / a[it] * (a[it] + <span class="number">1</span>);</span><br><span class="line">    ++a[it];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a[i]; j++) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1368D：一眼看出！哎要不是-B-题被卡了，我决定能上大分！好气"><a href="#1368D：一眼看出！哎要不是-B-题被卡了，我决定能上大分！好气" class="headerlink" title="1368D：一眼看出！哎要不是 B 题被卡了，我决定能上大分！好气"></a><a href="https://codeforces.com/contest/1368/problem/D" target="_blank" rel="noopener">1368D</a>：一眼看出！哎要不是 B 题被卡了，我决定能上大分！好气</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">int</span> a[<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;,x;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(x)&#123;</span><br><span class="line">				<span class="keyword">if</span>(x&amp;<span class="number">1</span>) ++a[j];</span><br><span class="line">				x&gt;&gt;=<span class="number">1</span>; ++j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		LL r=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			LL t = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>;i&lt;<span class="number">20</span>;++i,j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">					t+=j;</span><br><span class="line">					--a[i];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			r+=t*t;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1285D：比赛的时候想到了，但是怕复杂度过补了，能过复杂度是因为每个元素-a-最多递归-log-a-次"><a href="#1285D：比赛的时候想到了，但是怕复杂度过补了，能过复杂度是因为每个元素-a-最多递归-log-a-次" class="headerlink" title="1285D：比赛的时候想到了，但是怕复杂度过补了，能过复杂度是因为每个元素 $a$ 最多递归 $\log a$ 次"></a><a href="https://codeforces.com/contest/1285/problem/D" target="_blank" rel="noopener">1285D</a>：比赛的时候想到了，但是怕复杂度过补了，能过复杂度是因为每个元素 $a$ 最多递归 $\log a$ 次</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a,<span class="keyword">int</span> <span class="built_in">bit</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">bit</span>&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l,r;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a)&#123;</span><br><span class="line">		<span class="keyword">if</span>((x&gt;&gt;<span class="built_in">bit</span>)&amp;<span class="number">1</span>) l.push_back(x);</span><br><span class="line">		<span class="keyword">else</span> r.push_back(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(l.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> solve(r,<span class="built_in">bit</span><span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(r.<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">return</span> solve(l,<span class="built_in">bit</span><span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(solve(l,<span class="built_in">bit</span><span class="number">-1</span>),solve(r,<span class="built_in">bit</span><span class="number">-1</span>))+(<span class="number">1</span>&lt;&lt;<span class="built_in">bit</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a) <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;solve(a,<span class="number">30</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1285C：找出使得-max-a-b-最小并使得-lcm-a-b-x-的最小-a-b"><a href="#1285C：找出使得-max-a-b-最小并使得-lcm-a-b-x-的最小-a-b" class="headerlink" title="1285C：找出使得$\max(a,b)$最小并使得$lcm(a,b)=x$的最小$a,b$"></a><a href="https://codeforces.com/contest/1285/problem/C" target="_blank" rel="noopener">1285C</a>：找出使得$\max(a,b)$最小并使得$lcm(a,b)=x$的最小$a,b$</h3><blockquote>
<p>将 $x$ 分解素因子可知，$\max(a,b)$ 最小的前提是，$\gcd(a,b)=1$，又因为 $x$ 的因子个数不超过$2\sqrt{x}$，搞定</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		LL r = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(LL i=<span class="number">1</span>;i*i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(n%i==<span class="number">0</span>&amp;&amp;__gcd(i,n/i)==<span class="number">1</span>)&#123;</span><br><span class="line">				r=i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="string">" "</span>&lt;&lt;n/r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本来不想写这个题，但是由于下题都是 <code>lcm</code> 问题，又是同一场，所以就记录一下</p>
<h3 id="1285F：一道很秀的-lcm-题，计算-displaystyle-max-1-leq-i-lt-j-leq-n-lcm-a-i-a-j"><a href="#1285F：一道很秀的-lcm-题，计算-displaystyle-max-1-leq-i-lt-j-leq-n-lcm-a-i-a-j" class="headerlink" title="1285F：一道很秀的 lcm 题，计算 $\displaystyle \max_{1\leq i&lt; j \leq n} lcm(a_i,a_j)$"></a><a href="https://codeforces.com/contest/1285/problem/F" target="_blank" rel="noopener">1285F</a>：一道很秀的 lcm 题，计算 $\displaystyle \max_{1\leq i&lt; j \leq n} lcm(a_i,a_j)$</h3><blockquote>
<p>参考这里：<a href="https://www.xht37.com/codeforces-round-613-div-2-题解/#Classical" target="_blank" rel="noopener">https://www.xht37.com/codeforces-round-613-div-2-%E9%A2%98%E8%A7%A3/#Classical</a></p>
</blockquote>
<p>通过加入 $a_i$ 的所有因子，我们可以改成计算 $\displaystyle \max_{\gcd(a_i,a_j)=1} a_ia_j$，我们将 $a_i$ 从大到小排序，然后开始遍历，用堆 s 保存之前的内容，注意到，如果堆 s 中有一个元素 t，跟当前需要遍历的元素 $a_i$ 互素，那么小于 s 中小于 $t$ 的元素讲不再能为结果做贡献。因此可以踢出栈中，现在问题是我们如何快速的记录<strong>堆 $s$ 中是否有与$a_i$ 互素的元素</strong>。记 $c_i$ 为堆中是 $i$ 的倍数的元素个数，那么堆中和$x$互素的个数为 $cop = \sum_{d|x} \mu(d) c_d$，这是因为包容排斥原理，首先所有数都是 1 的倍数，然后减去和 $x$ 的最小公约数为素数的，在加上和 $x$ 的最小公约数为两个素数相乘…。若 $cop$ 不为 0，那么就一个个的剔除，剔除的时候可以计算一下乘积（虽然不一定互素，但是不会影响的最终结果）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">bool</span> a[N]=&#123;&#125;;</span><br><span class="line">		<span class="keyword">int</span> mx=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,x;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			a[x]=<span class="number">1</span>;</span><br><span class="line">			mx = <span class="built_in">max</span>(mx,x);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p[mx+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> mu[mx+<span class="number">1</span>]=&#123;&#125;,c[mx+<span class="number">1</span>]=&#123;&#125;;</span><br><span class="line">		mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=mx;++i)&#123;</span><br><span class="line">			p[i].push_back(i);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*i;j&lt;=mx;j+=i)&#123;</span><br><span class="line">				p[j].push_back(i);</span><br><span class="line">				a[i]|=a[j];</span><br><span class="line">				mu[j]-=mu[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">		LL ans = mx;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=mx;i;--i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i])&#123;</span><br><span class="line">				<span class="keyword">int</span> cop = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:p[i]) cop+=mu[x]*c[x];</span><br><span class="line">				<span class="keyword">while</span>(cop)&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:p[s.top()])&#123;</span><br><span class="line">						--c[x];</span><br><span class="line">						<span class="keyword">if</span>(i%x==<span class="number">0</span>) cop-=mu[x];</span><br><span class="line">					&#125;</span><br><span class="line">					ans = <span class="built_in">max</span>(ans,LL(i)*s.top());</span><br><span class="line">					s.pop();</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:p[i]) ++c[x];</span><br><span class="line">				s.push(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1370D：在长为-n-的序列中找一个长为-k-的子列，子列中奇数项最大值和偶数项最大值的最小值最小"><a href="#1370D：在长为-n-的序列中找一个长为-k-的子列，子列中奇数项最大值和偶数项最大值的最小值最小" class="headerlink" title="1370D：在长为 n 的序列中找一个长为 k 的子列，子列中奇数项最大值和偶数项最大值的最小值最小"></a><a href="https://codeforces.com/contest/1370/problem/D" target="_blank" rel="noopener">1370D</a>：在长为 n 的序列中找一个长为 k 的子列，子列中奇数项最大值和偶数项最大值的最小值最小</h3><blockquote>
<p>比赛的时候，我很快就知可以二分查找答案，但是顾前不顾尾，下面代码没过，因为当最后一个数正好是满足 <code>a[i]&lt;=m</code> 时答案就不行了！<strong>应该按照原来的逻辑去叠加啊！</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此代码是错误代码！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="keyword">int</span> a[n],r=<span class="number">0</span>,l=<span class="number">1e9</span>+<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">		r = <span class="built_in">max</span>(r,a[i]);</span><br><span class="line">		l = <span class="built_in">min</span>(l,a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> m)&#123;</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">-2</span>,s=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=k%<span class="number">2</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;=m)&#123;</span><br><span class="line">				<span class="keyword">if</span>(i&gt;now+<span class="number">1</span>)&#123;</span><br><span class="line">					++s;</span><br><span class="line">					now = i;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s&gt;=k/<span class="number">2</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(f(m)) r=m<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是修正的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,k;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a) <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">	<span class="keyword">auto</span> g = [&amp;](<span class="keyword">int</span> m,<span class="keyword">bool</span> cur)&#123;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(cur)&#123;</span><br><span class="line">				cur = !cur;</span><br><span class="line">				++s;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(a[i]&lt;=m)&#123;</span><br><span class="line">					++s;</span><br><span class="line">					cur = !cur;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> s&gt;=k;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> l = *min_element(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> r = *max_element(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line">   	<span class="comment">//auto lr = minmax_element(a.begin(),a.end());</span></span><br><span class="line">	<span class="comment">//int l = *lr.first,r = *lr.second;</span></span><br><span class="line">	<span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l+r)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span>(g(m,<span class="number">0</span>)||g(m,<span class="number">1</span>)) r=m<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> l=m+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;l&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1370E：找出最少的轮换使得字符串-s-变成-t"><a href="#1370E：找出最少的轮换使得字符串-s-变成-t" class="headerlink" title="1370E：找出最少的轮换使得字符串 s 变成 t"></a><a href="https://codeforces.com/contest/1370/problem/E" target="_blank" rel="noopener">1370E</a>：找出最少的轮换使得字符串 s 变成 t</h3><p>我一开始知道是贪心，然后我以为 <strong>是找到其中最长的连续 0 或者 1</strong>，然后发现并不是！！！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此代码是错误代码！</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">string</span> a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="keyword">int</span> ab=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a) <span class="keyword">if</span>(x==<span class="string">'1'</span>) ++ab;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:b) <span class="keyword">if</span>(x==<span class="string">'1'</span>) --ab;</span><br><span class="line">	<span class="keyword">if</span>(ab)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]!=b[i]) s.push_back(a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	s+=s;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;s&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,t;i&lt;s.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>((i == <span class="number">0</span>)||(s[i]!=s[i<span class="number">-1</span>])) t=<span class="number">0</span>;</span><br><span class="line">		ans = <span class="built_in">max</span>(ans,++t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后看了<a href="https://codeforces.com/blog/entry/79107" target="_blank" rel="noopener">官方题解</a>！</p>
<p>在有解的前提下，我们可以构造取值在 $\{-1,0,1\}$ 的数组 $a$： if  $s_i = t_i,a_i = 0$，else if $s_i = 1,a_i=1$ else $a_i=-1$。因此答案就是</p>
<script type="math/tex; mode=display">
\max _{1 \leq l \leq r \leq n} |\sum_{i=l} ^r  a_i| = max(\max _{1 \leq l \leq r \leq n} \sum_{i=l} ^r  a_i,\max _{1 \leq l \leq r \leq n} \sum_{i=l} ^r  -a_i)</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">string</span> s,t;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(s[i]==t[i]) <span class="keyword">continue</span>;</span><br><span class="line">		a.emplace_back(s[i]==<span class="string">'1'</span>?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(accumulate(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),<span class="number">0</span>))&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> sign)&#123;</span><br><span class="line">		<span class="keyword">int</span> mx = <span class="number">0</span>,cur=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a)&#123;</span><br><span class="line">			cur += sign*x;</span><br><span class="line">			mx = <span class="built_in">max</span>(mx,cur);</span><br><span class="line">			cur = <span class="built_in">max</span>(cur,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> mx;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">max</span>(f(<span class="number">1</span>),f(<span class="number">-1</span>))&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1263D：Set-lt-int-gt-集合操作范例"><a href="#1263D：Set-lt-int-gt-集合操作范例" class="headerlink" title="1263D：Set&lt;int&gt; 集合操作范例"></a><a href="https://codeforces.com/problemset/problem/1263/D" target="_blank" rel="noopener">1263D</a>：<code>Set&lt;int&gt;</code> 集合操作范例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin)</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a[<span class="number">26</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:s) a[c-<span class="string">'a'</span>].insert(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">set</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; q;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(a[x].<span class="built_in">size</span>()==<span class="number">0</span>) ++x;</span><br><span class="line">	q.insert(a[x]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>;i&lt;<span class="number">26</span>;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i].<span class="built_in">size</span>()==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; p;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:q)&#123;</span><br><span class="line">			<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line">			set_intersection(x.<span class="built_in">begin</span>(),x.<span class="built_in">end</span>(),a[i].<span class="built_in">begin</span>(),a[i].<span class="built_in">end</span>(),inserter(t, t.<span class="built_in">begin</span>()));</span><br><span class="line">			<span class="keyword">if</span>(t.<span class="built_in">size</span>())&#123;</span><br><span class="line">				set_union(x.<span class="built_in">begin</span>(),x.<span class="built_in">end</span>(),a[i].<span class="built_in">begin</span>(),a[i].<span class="built_in">end</span>(),inserter(t, t.<span class="built_in">begin</span>()));</span><br><span class="line">				a[i] = t;</span><br><span class="line">				p.insert(x);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">set</span>&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; t;</span><br><span class="line">		set_difference(q.<span class="built_in">begin</span>(),q.<span class="built_in">end</span>(),p.<span class="built_in">begin</span>(),p.<span class="built_in">end</span>(),inserter(t, t.<span class="built_in">begin</span>()));</span><br><span class="line">		t.insert(a[i]);</span><br><span class="line">		q = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;q.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1369D-组合计数问题"><a href="#1369D-组合计数问题" class="headerlink" title="1369D:  组合计数问题"></a><a href="https://codeforces.com/contest/1369/problem/D" target="_blank" rel="noopener">1369D</a>:  组合计数问题</h3><blockquote>
<p>题解写在官方的 <a href="https://codeforces.com/blog/entry/79235#comment-648996" target="_blank" rel="noopener">教程里面</a>，代码也不想 copy 过来了。</p>
</blockquote>
<p>补充一个更好的生成函数的做法：已知 $a_n$，满足 $a_n = a_{n-1} + 2 a_{n-2} + (n \% 3==0?4:0)$，$a_0 = a_1= a_2 = 0$，计算$a_n$。</p>
<p>设 $f(x) = \sum_{n=0} ^ {\infty} a_n x^n$，则我们有</p>
<script type="math/tex; mode=display">
f(x) = \sum_{n=0} ^ {\infty} (a_{n-1} + 2 a_{n-2} ) x^n + \sum_{n=1} ^ {\infty} 4x^{3n} = xf(x) + x^2f(x) + 4 \sum_{n=1} ^ {\infty} x^{3n}</script><p>所以</p>
<script type="math/tex; mode=display">
f(x) = \frac{4 \sum_{n=1} ^ {\infty} x^{3n}}{(1-2x)(1+x)}</script><p>由于 $\frac{1}{1-x} = \sum_{n=0}^{\infty} x^n$，所以 $\frac{1}{(1-2x)(1+x)} = \frac{2}{3(1-2x)} + \frac{1}{3(1+x)} = \sum_{n=0}^{\infty} \frac{2^{n+1}+(-1)^n}{3}x^n$（推荐），$\frac{1}{(1-2x)(1+x)} = \sum_{n=0}^{\infty} (2x)^n \sum_{n=0}^{\infty}(-x)^n = \sum_{n=0}^{\infty} \frac{2^{n+1}+(-1)^n}{3}x^n$（不推荐），因此</p>
<script type="math/tex; mode=display">
f(x) = \frac{4}{3} \sum_{n=0} ^ \infty (\frac{2^{n \% 3 +1} (8^{n/3}-1)}{8-1} + \frac{(-1)^{n \% 3 +1} ((-1)^{n/3}-1)}{-1-1}) x^n</script><h3 id="1369F：博弈题"><a href="#1369F：博弈题" class="headerlink" title="1369F：博弈题"></a><a href="https://codtforcts.com/conttst/1369/probltm/F" target="_blank" rel="noopener">1369F</a>：博弈题</h3><blockquote>
<p>给定两个正整数 $s \leq t$，$A,B$ 两人依次玩游戏，每次可以从$s$变成 $s+1$ 或 $2s$，谁先严格大于 $t$，谁输了。</p>
<p>现在给你一堆的 $s_i,t_i$，$A,B$ 两人依次玩游戏，每一局输了的人作为下一局开始的人。问 $A$ 能否最后一局必赢，能否最后一局必输</p>
</blockquote>
<p>先考虑单个 $s,t$ 的情况。</p>
<p>用$f(s,t)$ 分别表示$A$ 是否有必胜策略。</p>
<ul>
<li>$t$ 为奇数，若 $s$ 为偶数，那么 $A$ 就让它变成 $s+1$，那么无论 $B$ 如何操作只能变成偶数，所以此时 $f(s,t) = 1$，若 $s$ 为奇数，显然若 $B$ 用 $A$ 刚刚的策略，则 $A$ 输，$f(s,t) = 0$。</li>
<li>$t$ 为偶数，若 $2s&gt;t$，此时只能做加法，$f(s,t) = s \mod 2$，若 $4s&gt;t \geq 2s$，此时 $f(s,t)=1$ ，因为总可以变成 $f(2s,t)=0$。若 $4s \leq t$，若 $f(s,\lfloor \frac{t}{4} \rfloor) = 1$, 则 $A$ 必有策略到达区间 $(\lfloor \frac{t}{4} \rfloor,2\lfloor \frac{t}{4} \rfloor)$ 的某一点，从而 $f(s,t)=1$, 同理若 $f(s,\lfloor \frac{t}{4} \rfloor) = 0$，则 $B$ 有 $A$ 的策略，从而 $f(s,t)=0$ （<strong>比赛的时候能想出来的人是真的虎</strong>) 。</li>
</ul>
<p>用 $g(s,t)$ 分别表示 $A$ 是否有必输的策略：若 $2s&gt;t$，则 $g(s,t)=1$，同理，若 $2s \leq t$，$f(s,\lfloor \frac{t}{2} \rfloor)=1$，则必有策略使得 $B$ 到达 $(\lfloor \frac{t}{2} \rfloor,2\lfloor \frac{t}{2} \rfloor)$ 的某一点，所以 $g(s,t) = f(s,\lfloor \frac{t}{2} \rfloor)$</p>
<p>有了这两个函数后，我们就可以从后往前依次来决定最后能否有必胜或必输的决策。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin)</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	function&lt;<span class="keyword">bool</span>(LL,LL)&gt; f = [&amp;](LL s,LL t)-&gt;<span class="keyword">bool</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(t%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> s%<span class="number">2</span>==<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">2</span>*s&gt;t) <span class="keyword">return</span> s%<span class="number">2</span>==<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">4</span>*s&gt;t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> f(s,t/<span class="number">4</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	function&lt;<span class="keyword">bool</span>(LL,LL)&gt; g = [&amp;](LL s,LL t)-&gt;<span class="keyword">bool</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">2</span>*s&gt;t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">return</span> f(s,t/<span class="number">2</span>);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">bool</span> win=<span class="number">0</span>,lose=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		LL s,t;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;t;</span><br><span class="line">		<span class="keyword">if</span>(win^lose==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(lose)&#123;</span><br><span class="line">			win = f(s,t);</span><br><span class="line">			lose = g(s,t);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			win = !f(s,t);</span><br><span class="line">			lose = !g(s,t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;win&lt;&lt;<span class="string">" "</span>&lt;&lt;lose&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们可以认为一开始仅有必输策略所以让$A$先选，然后如果$A$原来有必胜且有必败策略，这后面必然一直有，若没有必胜也没有必败策略，则后面也是。所以只用考虑仅有其中之一的情形。</p>
</blockquote>
<h2 id="300iq-Contest-3"><a href="#300iq-Contest-3" class="headerlink" title="300iq Contest 3"></a><a href="https://codeforces.com/gym/102538/" target="_blank" rel="noopener">300iq Contest 3</a></h2><blockquote>
<p>罗列一下自己有兴趣的题目，<a href="300iqContest3.pdf">官方题解</a></p>
</blockquote>
<h3 id="A-Airplane-Cliques"><a href="#A-Airplane-Cliques" class="headerlink" title="A. Airplane Cliques"></a>A. Airplane Cliques</h3><p>题意：给定 $n$ 个节点的树，称两个节点是友好的，如果它们相连的边数不超过 $x$，问对任意 $1 \leq k \leq n$，有多少个元素个数为 $k$ 的集合，它们的点之间两两友好。其中 $1 \leq n \leq 300,000, 0 \leq x &lt; n$，最终答案对 998244353 取模</p>
<blockquote>
<p>看别人代码 200 多行，下次吧。</p>
</blockquote>
<h3 id="C-Cells-Blocking"><a href="#C-Cells-Blocking" class="headerlink" title="C. Cells Blocking"></a>C. Cells Blocking</h3><p>题意：从 <code>(1, 1)</code> 到 <code>(n, m)</code> 只能往右或往下走格子，然后有些格子是不能走的，让你将 2 个能走的格子变得不能走，最后使得格子 <code>(1, 1)</code> 无法到达 <code>(n, m)</code>，问有多少种变的方式。 $1 \leq m, n \leq 3000$</p>
<p>做法，首先从任意点看它是否可以到 <code>(n, m)</code>，再看任意点是否可从 <code>(1, 1)</code> 到。然后就可以选择最下和最上的两个路径，显然路径重叠的点被移除的时候 <code>(1, 1)</code> 就无法到达 <code>(n, m)</code>（如果一开始就无法到达，答案自然就是 $\text{nm} \choose 2$, nm 表示可以走的格子数)，然后最下的路径不重叠的点，必然可以必须需要删去其中的一个，删除之后再让它走最下的路径，看它与最上路径的交点，交点个数就是可选点的个数。（一个小技巧就是一开始重叠的点标记一下，不再考虑，这样就不会重复计数了）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> nm = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : s) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		nm += <span class="built_in">std</span>::count(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), <span class="string">'.'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">a</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(m))</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> b = a;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;pii&gt; Q;</span><br><span class="line">	<span class="keyword">if</span> (s[n - <span class="number">1</span>][m - <span class="number">1</span>] == <span class="string">'.'</span>) &#123;</span><br><span class="line">		Q.push(&#123;n - <span class="number">1</span>, m - <span class="number">1</span>&#125;);</span><br><span class="line">		b[n - <span class="number">1</span>][m - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">0</span> &amp;&amp; s[x - <span class="number">1</span>][y] == <span class="string">'.'</span> &amp;&amp; b[x - <span class="number">1</span>][y] == <span class="number">0</span>) &#123;</span><br><span class="line">			Q.push(&#123;x - <span class="number">1</span>, y&#125;);</span><br><span class="line">			b[x - <span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; s[x][y - <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; b[x][y - <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">			Q.push(&#123;x, y - <span class="number">1</span>&#125;);</span><br><span class="line">			b[x][y - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">print</span>(<span class="number">1l</span>l * nm * (nm - <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (s[<span class="number">0</span>][<span class="number">0</span>] == <span class="string">'.'</span>) &#123;</span><br><span class="line">		Q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">		a[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">if</span> (x + <span class="number">1</span> &lt; n &amp;&amp; s[x + <span class="number">1</span>][y] == <span class="string">'.'</span> &amp;&amp; a[x + <span class="number">1</span>][y] == <span class="number">0</span>) &#123;</span><br><span class="line">			Q.push(&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">			a[x + <span class="number">1</span>][y] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (y + <span class="number">1</span> &lt; m &amp;&amp; s[x][y + <span class="number">1</span>] == <span class="string">'.'</span> &amp;&amp; a[x][y + <span class="number">1</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">			Q.push(&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">			a[x][y + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;pii&gt; leftRoad, rightRoad;</span><br><span class="line">	leftRoad.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">while</span> (leftRoad.back() != <span class="built_in">std</span>::make_pair(n - <span class="number">1</span>, m - <span class="number">1</span>)) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = leftRoad.back();</span><br><span class="line">		<span class="keyword">if</span> (x + <span class="number">1</span> &lt; n &amp;&amp; b[x + <span class="number">1</span>][y]) leftRoad.push_back(&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">		<span class="keyword">else</span> leftRoad.push_back(&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	rightRoad.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">while</span> (rightRoad.back() != <span class="built_in">std</span>::make_pair(n - <span class="number">1</span>, m - <span class="number">1</span>)) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = rightRoad.back();</span><br><span class="line">		<span class="keyword">if</span> (y + <span class="number">1</span> &lt; m &amp;&amp; b[x][y + <span class="number">1</span>]) rightRoad.push_back(&#123;x, y + <span class="number">1</span>&#125;);</span><br><span class="line">		<span class="keyword">else</span> rightRoad.push_back(&#123;x + <span class="number">1</span>, y&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cnt</span><span class="params">(n + m - <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> nm1 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != rightRoad.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (leftRoad[i] == rightRoad[i]) ++nm1;</span><br><span class="line">		<span class="keyword">else</span> cnt[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	LL r = <span class="number">1l</span>l * nm1 * (nm - nm1) + <span class="number">1l</span>l * nm1 * (nm1 - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;](pii p) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = p;</span><br><span class="line">		<span class="keyword">int</span> r = cnt[x + y] * (rightRoad[x + y] == p);</span><br><span class="line">		<span class="keyword">while</span> (x + y) &#123;</span><br><span class="line">			<span class="keyword">if</span> (y &gt; <span class="number">0</span> &amp;&amp; a[x][y - <span class="number">1</span>]) &#123;</span><br><span class="line">				r += cnt[x + y - <span class="number">1</span>] * (rightRoad[x + y - <span class="number">1</span>] == <span class="built_in">std</span>::make_pair(x, y - <span class="number">1</span>));</span><br><span class="line">				--y;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r += cnt[x - <span class="number">1</span> + y] * (rightRoad[x - <span class="number">1</span> + y] == <span class="built_in">std</span>::make_pair(x - <span class="number">1</span>, y));</span><br><span class="line">				--x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		x = p.first; y = p.second;</span><br><span class="line">		<span class="keyword">while</span> (x + y &lt; n + m - <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((x + <span class="number">1</span> &lt; n) &amp;&amp; b[x + <span class="number">1</span>][y]) &#123;</span><br><span class="line">				r += cnt[x + <span class="number">1</span> + y] * (rightRoad[x + <span class="number">1</span> + y] == <span class="built_in">std</span>::make_pair(x + <span class="number">1</span>, y));</span><br><span class="line">				++x;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r += cnt[x + y + <span class="number">1</span>] * (rightRoad[x + y + <span class="number">1</span>] == <span class="built_in">std</span>::make_pair(x, y + <span class="number">1</span>));</span><br><span class="line">				++y;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + m - <span class="number">1</span>; ++i) <span class="keyword">if</span>(leftRoad[i] != rightRoad[i]) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [x, y] = leftRoad[i];</span><br><span class="line">		--x; ++y;</span><br><span class="line">		<span class="keyword">while</span> (a[x][y] == <span class="number">0</span> || b[x][y] == <span class="number">0</span>) &#123;</span><br><span class="line">			--x; ++y;</span><br><span class="line">		&#125;</span><br><span class="line">		r += f(&#123;x, y&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Easy-Win"><a href="#E-Easy-Win" class="headerlink" title="E. Easy Win"></a><a href="https://codeforces.com/gym/102538/problem/E" target="_blank" rel="noopener">E. Easy Win</a></h3><blockquote>
<p>SG 函数-博弈问题</p>
</blockquote>
<p>题意：有 $n$ 堆石子 $(a_1, \cdots, a_n)$（$a_i \leq n$），每次最少选 1 个，最多选 $x$ 个，最后谁没法选谁输，问对于所有的 $1 \leq x \leq n$，先手赢还是先手输。其中 $1 \leq n \leq 500,000$</p>
<p>首先，对每一个具体的 $x$ 答案是 $f(x) = (a_1 \mod x + 1) \oplus \cdots \oplus (a_n \mod x + 1)$ 是否为 0. 原因可参考之前的博文： <a href="/nimSgFunction/" title="SG 函数之取石子博弈">SG 函数之取石子博弈</a></p>
<p>为了优化时间复杂度，我们逐位计算 $f(x)$（即 计算 $f(x) \And 2^{j}$ 的值），首先我们对 $a_i$ 去重，用 $c_i = |\{t | a_t = i \}|$，令 $y = x + 1$。所以此时 $f(x) \And 2^{j} = \sum_{i = 1}^n c[i] (i \mod y) \mod 2 \cdot 2^{j}$<br>我们将 $[0, n]$ 分成 $[0, y), [y, 2y), \cdots, [ky, n]$，注意到若 $ky \leq a_i &lt; (k + 1) y$，那么 $a_i \equiv a_i - ky \mod y$，如果对于每个区间我们在预处理的前提下，能在 $O(1)$ 时间复杂度计算出每个区间的值，那么我们就能在 $O(n \log^2 n)$ 解决此问题。注意到区间 $[ky, (k+1)y)$ 对答案的贡献是：那些满足 $ky \leq t &lt; (k+1)y$，且 $t - ky$ 包含 j 位的那些 $c_t$ 的和。我们定义 $\displaystyle f_{i, j} = \sum_{x \geq i, (x - i) \And (2^j) \neq 0} c_x$，那么由于 $(x - i) \And 2^{j} \neq 0$ 等价于 $(x - i \pm 2^{j+1} \neq 0)$。所以有状态转移：</p>
<script type="math/tex; mode=display">
f_{i, j} = f_{i + 2^{j + 1}} + \sum_{t = i + 2^{j}}^{i + 2 ^{j + 1} - 1} c_t</script><p>然后区间 $[ky, (k+1)y)$ 对答案的贡献就是 $f_{ky, j} - f_{t, j} - \sum_{i = \min((k + 1)y, t - 2^{j})}^{t - 1} c_i$，其中 $t = ky + \lfloor \frac{y}{2^{j + 1}} \rfloor$ 是不小于 $(k + 1) y$ 且与 $ky$ 模 $2^{j + 1}$ 次数最小的值。后面那个求和是因为那部分的和中 $i - ky$ 必然有 $j$ 位。搞定！</p>
<blockquote>
<p>下面代码并不完全和上面解释一致，是因为我们值关心每一个位置是否为 0，用加减不方便，直接异或就行，也就是说其实下面很多 <code>int</code> 都可以换成 <code>bool</code>，不过 <code>std::vector&lt;bool&gt;</code> 不是 bool 型的向量，用起来不方便就没这么做了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;int&gt; c(n + 1), s(n + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		c[x] ^= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s[n] = c[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) s[i] = s[i + <span class="number">1</span>] ^ c[i];</span><br><span class="line">	<span class="keyword">auto</span> sum = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="keyword">return</span> x &gt; n ? <span class="number">0</span> : s[x];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">bit</span> = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; <span class="built_in">bit</span>) &lt;= n; ++<span class="built_in">bit</span>) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">f</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">auto</span> fum = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">			<span class="keyword">return</span> x &gt; n ? <span class="number">0</span> : f[x];</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			f[i] = fum(i + (<span class="number">2</span> &lt;&lt; <span class="built_in">bit</span>)) ^ sum(i + (<span class="number">1</span> &lt;&lt; <span class="built_in">bit</span>)) ^ sum(i + (<span class="number">2</span> &lt;&lt; <span class="built_in">bit</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">2</span>; x &lt; n; ++x, ++y) <span class="keyword">if</span> (r[x] == <span class="number">0</span> &amp;&amp; y &gt; (<span class="number">1</span> &lt;&lt; <span class="built_in">bit</span>)) &#123;</span><br><span class="line">			<span class="keyword">int</span> sy = <span class="number">0</span>, <span class="built_in">step</span> = (y + (<span class="number">2</span> &lt;&lt; <span class="built_in">bit</span>) - <span class="number">1</span>) &gt;&gt; <span class="built_in">bit</span> + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k * y &lt;= n; ++k) &#123;</span><br><span class="line">				<span class="keyword">int</span> t = k * y + (<span class="built_in">step</span> &lt;&lt; <span class="built_in">bit</span> + <span class="number">1</span>);</span><br><span class="line">				sy ^= f[k * y] ^ fum(t) ^ sum(<span class="built_in">std</span>::<span class="built_in">max</span>((k + <span class="number">1</span>) * y, t - (<span class="number">1</span> &lt;&lt; <span class="built_in">bit</span>))) ^ sum(t);</span><br><span class="line">			&#125;</span><br><span class="line">			r[x] |= sy;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (x ? <span class="string">"Alice "</span> : <span class="string">"Bob "</span>);</span><br><span class="line">	<span class="built_in">println</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-Ignore-Submasks"><a href="#I-Ignore-Submasks" class="headerlink" title="I. Ignore Submasks"></a>I. Ignore Submasks</h3><blockquote>
<p>本场最简单的一题</p>
</blockquote>
<p>题意：给定序列 $a_1, \cdots, a_n$ （$0 \leq a_i &lt; 2^k$），记 $f(x)$ 为使得 $a_i \And x \neq a_i$ 的最小的 $i$，如果没有就为 0，求 $\sum_{i = 0}^{2^k - 1} f(i)$，对答案取模 998244353，其中 $1 \leq n \leq 100, 1 \leq k \leq 60$</p>
<p>做法：相当于一开始有 $k$ 个位是自由的，假设当前还有 $r$ 个位是自由的，$a_i$ 占有其中 c 个自由位，然后其它的自由位随便取，所以它对结果的贡献就是 $(2^r - 1) \cdot 2^{k - r} \cdot i$，注意 $k \leq 60$，很多地方记得加 <code>ll</code>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">v</span><span class="params">(k, <span class="literal">true</span>)</span></span>;</span><br><span class="line">	LL r = <span class="number">0</span>, id = <span class="number">0</span>, rest = k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((x &amp; (<span class="number">1l</span>l &lt;&lt; i)) &amp;&amp; v[i]) &#123;</span><br><span class="line">				v[i] = <span class="literal">false</span>;</span><br><span class="line">				++cnt;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		r += ((<span class="number">1l</span>l &lt;&lt; cnt) - <span class="number">1</span>) % M * ((<span class="number">1l</span>l &lt;&lt; (rest -= cnt)) % M) % M * (++id) % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">print</span>(r % M);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="耻辱记录"><a href="#耻辱记录" class="headerlink" title="耻辱记录"></a>耻辱记录</h2><ul>
<li>2020/5/24 水题竟然也能被卡，傻子吧我！</li>
<li>被 <code>lower_bound</code> 坑了，也怪自己，<code>lower_bound(a.begin(),a.end(),x)-a</code> ：对于单调递增的序列，返回第一个大于等于<code>x</code>的序号。<code>upper_bound</code> 返回的是第一个大于 <code>x</code> 的序号，所以讲道理，upper_bound 更好用！</li>
<li>2020/6/1 低级错误，把 <code>int</code> 型变量放在 <code>bool</code> 型后面定义了！结果找了半天的错误！！导致少做一题。给了自己几巴掌</li>
<li><a href="https://codeforces.com/contest/1379" target="_blank" rel="noopener">Codeforces Round #657 (Div. 2)</a>：只做了一题？？？被 A 题卡了一个多小时？？？</li>
<li><a href="https://codeforces.com/contest/1397" target="_blank" rel="noopener">Codeforces Round #666 (Div. 2)</a>：犯了一堆低级错误</li>
<li><a href="https://codeforces.com/contest/1407" target="_blank" rel="noopener">Codeforces Round #669 (Div. 2)</a>：由读题引发的一系列低级错误！</li>
<li><a href="https://codeforces.com/contest/1438" target="_blank" rel="noopener">Codeforces Round #682 (Div. 2)</a>：10 分钟后没过题，被 C 卡了！！！不定闹钟的坏处！</li>
<li><a href="https://codeforces.com/contest/1456" target="_blank" rel="noopener">Codeforces Round #687 (Div. 1, based on Technocup 2021 Elimination Round 2)</a>：首场 Div1，惨败（跟 jiangly 分到一个 room），还被人 hack 了！</li>
<li><a href="https://codeforces.com/contest/1461" target="_blank" rel="noopener">Codeforces Round #689 (Div. 2, based on Zed Code Competition)</a>，又被 b 题卡，真的菜！</li>
<li><a href="https://codeforces.com/contest/1466" target="_blank" rel="noopener">Good Bye 2020</a>：被一道简单的 DP C 题，卡了一个小时最后也没搞定，吐了。</li>
<li><a href="https://codeforces.com/contest/1467" target="_blank" rel="noopener">Codeforces Round #695 (Div. 2)</a>：只做了一个 C ？？？</li>
<li><a href="https://codeforces.com/contest/1481" target="_blank" rel="noopener">Codeforces Round #699 (Div. 2)</a>：首次忘了提前注册。</li>
</ul>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><ul>
<li><a href="https://codeforces.com/contest/1428" target="_blank" rel="noopener">Codeforces Raif Round 1 (Div. 1 + Div. 2)</a> 是一场非常好，但是我没做好的一场比赛</li>
<li><a href="https://codeforces.com/contest/1366" target="_blank" rel="noopener">Educational Codeforces Round 89 (Rated for Div. 2)</a>：我竟然有做 5 题的实力！，但是因为网络原因我只做了 4 题。最后一个差一点，后面 1A 补上了。可惜。不过也还行加油！</li>
<li><a href="https://codeforces.com/contest/1367" target="_blank" rel="noopener">Codeforces Round #650 (Div. 3)</a>：第一次两小时内做 5 题，全部 1A，虽然是 div3！(竟然最后只加了 131 分)</li>
<li><a href="https://codeforces.com/contest/1370" target="_blank" rel="noopener">Codeforces Round #651 (Div. 2)</a>：唯一一次<del>不加不减</del>（过几小时之后它又减了我一分），但是，收获颇多的一次。</li>
<li><a href="https://codeforces.com/contest/1373" target="_blank" rel="noopener">Educational Codeforces Round 90 (Rated for Div. 2)</a>：做了 4 题，因为第五题没做出来，所以没交题！</li>
<li><a href="https://codeforces.com/contest/1371" target="_blank" rel="noopener">Codeforces Round #654 (Div. 2)</a>：好烦啊，又是结束后 5 分钟做出第五题。</li>
<li>目前，打字（代码）速度是限制我做 5 题的瓶颈！</li>
<li>提高码字速度，多总结，最近不要主动刷新题了。（2020/7/5)</li>
<li><a href="https://codeforces.com/contest/1251" target="_blank" rel="noopener">Educational Codeforces Round 75 (Rated for Div. 2)</a>: 第一次补完题目 （2020/7/9)</li>
<li><a href="https://codeforces.com/contest/1399" target="_blank" rel="noopener">Codeforces Round #661 (Div. 3)</a> 补完题目</li>
<li>图论，树上的问题也没那么可怕，就是麻烦点</li>
<li><a href="https://codeforces.com/contest/1430" target="_blank" rel="noopener">Educational Codeforces Round 96 (Rated for Div2)</a>：第一次 Div2 做 5 题，但是因为提交问题和低级错误，导致用时太久从而没有一个好的排名。</li>
<li><a href="https://codeforces.com/contest/1447" target="_blank" rel="noopener">Code(forces Round #683 (Div. 2, by Meet IT)</a>：首次进前 100</li>
<li><a href="https://codeforces.com/contest/1440" target="_blank" rel="noopener">Codeforces Round #684 (Div. 2)</a>：首次成为 Candidate Master</li>
<li><a href="https://codeforces.com/contest/1462" target="_blank" rel="noopener">Codeforces Round #690 (Div. 3)</a>: 1:39:54 AK</li>
<li><a href="https://codeforces.com/contest/1465" target="_blank" rel="noopener">Codeforces Round #692 (Div. 2, based on Technocup 2021 Elimination Round 3)</a> 第 47 名，首次进前 50。</li>
<li><a href="https://codeforces.com/contest/1472" target="_blank" rel="noopener">Codeforces Round #693 (Div. 3)</a> <a href="https://codeforces.com/contest/1472/submission/103302494" target="_blank" rel="noopener">01:59:57 AC</a> 也太刺激了吧，虽然这场不算分。</li>
<li><a href="https://atcoder.jp/contests/abc185" target="_blank" rel="noopener">ABC 185</a> 01:20:27 AK</li>
<li><a href="https://atcoder.jp/contests/abc189" target="_blank" rel="noopener">ABC 189</a> 01:31:38 AK</li>
<li><a href="https://codeforces.com/contest/1475" target="_blank" rel="noopener">Codeforces Round #697 (Div. 3)</a> 01:49:00 AK</li>
</ul>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
        <tag>图论</tag>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 字符串模板</title>
    <url>/string/</url>
    <content><![CDATA[<p>本篇内容为 <a href="https://oi-wiki.org/string" target="_blank" rel="noopener">oi-wiki 字符串篇</a> 的学习笔记。</p>
<h2 id="字典树（Trie）"><a href="#字典树（Trie）" class="headerlink" title="字典树（Trie）"></a>字典树（Trie）</h2><p>假设在一堆仅有大/小写字母的字符串中，需要快速检测某个字符串是否存在，那么 Trie 是个不错的选择。</p>
<h3 id="仅包含小写字母的-Trie（大写字母同理）"><a href="#仅包含小写字母的-Trie（大写字母同理）" class="headerlink" title="仅包含小写字母的 Trie（大写字母同理）"></a>仅包含小写字母的 Trie（大写字母同理）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, <span class="number">26</span>&gt;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; nxt;</span><br><span class="line">	<span class="comment">// 0 表示没有，1 表示有且没被访问过，2 表示有且被访问过</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tag;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		nxt[fa][c] = nxt.<span class="built_in">size</span>();</span><br><span class="line">		nxt.emplace_back(Node());</span><br><span class="line">		tag.emplace_back(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Trie() : nxt(<span class="number">1</span>), tag(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = x - <span class="string">'a'</span>;</span><br><span class="line">			<span class="keyword">if</span> (nxt[p][c] == <span class="number">0</span>) addNode(p, c);</span><br><span class="line">			p = nxt[p][c]; </span><br><span class="line">		&#125;</span><br><span class="line">		tag[p] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = x - <span class="string">'a'</span>;</span><br><span class="line">			<span class="keyword">if</span> (nxt[p][c] == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			p = nxt[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (tag[p] != <span class="number">1</span>) <span class="keyword">return</span> tag[p];</span><br><span class="line">		tag[p] = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P2580" target="_blank" rel="noopener">LOJ P2580</a></p>
<h3 id="01-Trie-求异或最大值"><a href="#01-Trie-求异或最大值" class="headerlink" title="01-Trie 求异或最大值"></a>01-Trie 求异或最大值</h3><p>做法：将数的二进制表示看成一个字符串，就可以建出字符集为 <code>{0, 1}</code> 的 Trie 树。把所有数字丢进去建好树之后，<br>对于这 n 个数中每个数，查找和它当前位不一致的位有没有。有就取，没有只能取自己，然后接着跑到底。</p>
<blockquote>
<p>注意这里可以，丢一个进去算一个，也就是说可以支持动态添加。因为要求异或最值，因此我们需要从最高位往最低位建 Trie，因此要统一高度。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, <span class="number">2</span>&gt;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; ch;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		ch[fa][c] = ch.<span class="built_in">size</span>();</span><br><span class="line">		ch.emplace_back(Node());</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Trie() : ch(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>, p = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (ch[p][c] == <span class="number">0</span>) addNode(p, c);</span><br><span class="line">			p = ch[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>, p = <span class="number">0</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (ch[p][c ^ <span class="number">1</span>]) &#123;</span><br><span class="line">				p = ch[p][c ^ <span class="number">1</span>];</span><br><span class="line">				r |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				p = ch[p][c];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAns</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">			insert(x);</span><br><span class="line">			r = <span class="built_in">std</span>::<span class="built_in">max</span>(r, getMax(x));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>典型例题：<a href="https://www.luogu.com.cn/problem/P4551" target="_blank" rel="noopener">LOJ P4551</a></p>
<p>此问题是树上问题，即树上两点路径上的异或和最大。任取一点为根可以将此问题转化成数列问题。</p>
<h3 id="01-Trie-Fusion-Tree-求异或和（支持修改，全局加-1，暂不支持合并）"><a href="#01-Trie-Fusion-Tree-求异或和（支持修改，全局加-1，暂不支持合并）" class="headerlink" title="01-Trie (Fusion Tree) 求异或和（支持修改，全局加 1，暂不支持合并）"></a>01-Trie (Fusion Tree) 求异或和（支持修改，全局加 1，暂不支持合并）</h3><blockquote>
<p>这里求异或和，可以从最低位往最高位建树节省空间。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span> &#123;</span></span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, <span class="number">4</span>&gt;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; ch;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> lson ch[p][0]</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rson ch[p][1]</span></span><br><span class="line">	<span class="comment">// ch[p][2] 表示以 p 为根的子树的大小</span></span><br><span class="line">	<span class="comment">// ch[p][3] 表示以 p 为根的子树的异或值</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		ch[p][c] = ch.<span class="built_in">size</span>();</span><br><span class="line">		ch.emplace_back(Node());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		ch[p][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (lson) ch[p][<span class="number">3</span>] ^= (ch[lson][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (rson) ch[p][<span class="number">3</span>] ^= (ch[rson][<span class="number">3</span>] &lt;&lt; <span class="number">1</span>) | (ch[rson][<span class="number">2</span>] &amp; <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 注意这里 ch[lson][2] = ch[p][2] - ch[rson] 是延迟更新的。</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		++ch[p][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (!ch[p][x &amp; <span class="number">1</span>]) addNode(p, x &amp; <span class="number">1</span>);</span><br><span class="line">		insert(ch[p][x &amp; <span class="number">1</span>], x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		pushUp(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		--ch[p][<span class="number">2</span>];</span><br><span class="line">		<span class="keyword">if</span> (!x) <span class="keyword">return</span>;</span><br><span class="line">		erase(ch[p][x &amp; <span class="number">1</span>], x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">		pushUp(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (!ch[p][<span class="number">2</span>]) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (rson) addAll(rson);</span><br><span class="line">		<span class="comment">// 为了进位，先补 0，补 0 的时候记得更新 ch[lson][2]（它延迟更新了）</span></span><br><span class="line">		<span class="keyword">if</span> (!lson) addNode(p, <span class="number">0</span>);</span><br><span class="line">		ch[lson][<span class="number">2</span>] = ch[p][<span class="number">2</span>] - (rson ? ch[rson][<span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">std</span>::swap(lson, rson);</span><br><span class="line">		pushUp(p);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Trie() : ch(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		insert(<span class="number">0</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		erase(<span class="number">0</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		addAll(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getVal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ch[<span class="number">0</span>][<span class="number">3</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P6018" target="_blank" rel="noopener">LOJ P6018</a></p>
<blockquote>
<p>注意数据必须保证任意时刻每个节点的矿泉水数非负。</p>
</blockquote>
<p><a href="https://www.luogu.com.cn/record/46497724" target="_blank" rel="noopener">灵活变长版</a> 和 <a href="https://www.luogu.com.cn/record/46496796" target="_blank" rel="noopener">定长版</a></p>
<h2 id="前缀函数"><a href="#前缀函数" class="headerlink" title="前缀函数"></a>前缀函数</h2><script type="math/tex; mode=display">
\pi[i] = \max_{k = 0, \cdots, i} \{ k : s[0, \cdots, k - 1] = s[i - (k - 1), \cdots i] \}</script><p>即子串 $s[0, \cdots, i]$ 的最长相等<strong>真</strong>前缀与<strong>真</strong>后缀的长度。</p>
<p>注意到两个事实：由定义知 $\pi[i + 1] \leq \pi[i] + 1$，因此若 $s[i + 1] == s[\pi[i]]$，那 $\pi[i + 1] = \pi[i] + 1$，反之，注意到我们始终有 $s[0, \cdots, \pi[i] - 1] = s[i - \pi[i] + 1, \cdots, i]$，对于的第二大的长度 $j$，我们有：</p>
<script type="math/tex; mode=display">
s[0, \cdots, j - 1] = s[i - j + 1, \cdots, i] = s[\pi[i] - j, \cdots, \pi[i] - 1]</script><p>即 j 等价于字串 $s[\pi[i] - 1]$ 的前缀和函数值，即 $j = \pi[\pi[i] - 1]$，然后依次这样进行下去即可。</p>
<p>复杂度：$O(n)$，注意到 $\pi[i + 1] \leq \pi[i] + 1$，若取等，我们称为上升（每步最多上升一次），反之我们称为下降，显然严格下降的次数不会超过上升的次数，因此整体上升下降次数不会超过 $2n$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">prefixFunction</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> j = p[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != s[j]) j = p[j - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[i] == s[j]) ++j;</span><br><span class="line">		p[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意上述算法是一个在线算法，即可以一个一个的字符添加。</p>
</blockquote>
<h3 id="KMP-算法（Knuth-Morris-Pratt-算法）"><a href="#KMP-算法（Knuth-Morris-Pratt-算法）" class="headerlink" title="KMP 算法（Knuth-Morris-Pratt 算法）"></a>KMP 算法（Knuth-Morris-Pratt 算法）</h3><p>给定文本 t 和 字符串 s，尝试找到并展示 s 在 t 中的所有出现。</p>
<p>我们可以构建一个字符串 <code>s + # + t</code>，然后求前缀函数即可，<br>并且注意</p>
<ol>
<li>函数值最大为 n</li>
<li>若值为 n 表示匹配成功，且 i - 2n 为出现位置</li>
<li>我们不需要保存 t 的信息。</li>
</ol>
<p>因此我们可以在 $O(n + m)$ 时间 $O(n)$ 空间利用前缀函数解决此问题。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回所有匹配在 t 的首位置</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">kmp</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="built_in">std</span>::<span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>(), m = t.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (n &gt; m) <span class="keyword">return</span> ans;</span><br><span class="line">	<span class="keyword">auto</span> p = prefixFunction(s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[j] != t[i]) j = p[j - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (s[j] == t[i] &amp;&amp; ++j == n) ans.emplace_back(i - n + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://codeforces.com/problemset/problem/126/B" target="_blank" rel="noopener">126B</a>，找一个最长的既是前缀又是后缀又是中间的最长字符串。</p>
<p>做法：首先计算出前缀函数，然后，用 kmp 看 s[0, pi[n - 1]] 是否在 s[1, n - 2] 中出现，没出现就看就继续看 $pi[pi[n - 1] - 1]$ 直到 0 即可。当然了可以有很多细节上的优化（例如 kmp 的时候不用每次都求一次前缀函数，在跑 KMP 的时候也只需要跑一次即可），但是此题不需要，<a href="https://codeforces.com/contest/126/submission/107155685" target="_blank" rel="noopener">我的代码</a> 也没优化，因为做题主要是测试代码正确性的。</p>
<h3 id="字符串的周期"><a href="#字符串的周期" class="headerlink" title="字符串的周期"></a>字符串的周期</h3><p>显然 $n - \pi[n - 1], n - \pi[pi[n - 1]], \cdots$ 为全部字符串的周期。</p>
<h3 id="统计每个前缀出现的次数"><a href="#统计每个前缀出现的次数" class="headerlink" title="统计每个前缀出现的次数"></a>统计每个前缀出现的次数</h3><p>首先以 i 为右端点有长度 $\pi[i]$ 的前缀，有长度 $\pi[\pi[i] - 1]$ 的前缀，等等知道长度为 0。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 长度为 i 的前缀出现的次数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countPrefix</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> p = prefixFunction(s);</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : p) ++ans[x];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) ans[p[i - <span class="number">1</span>]] += ans[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) ++ans[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回 s 长度为 i 的前缀在 t 中出现的次数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">countPrefix</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="built_in">std</span>::<span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> p = prefixFunction(s);</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>(), m = t.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; t[i] != s[j]) j = p[j - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (t[i] == s[j]) ++j;</span><br><span class="line">		++ans[j];</span><br><span class="line">	&#125;</span><br><span class="line">	++ans[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; --i) ans[p[i - <span class="number">1</span>]] += ans[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://codeforces.com/problemset/problem/432/D" target="_blank" rel="noopener">432D</a> 的<a href="https://codeforces.com/contest/432/submission/107155940" target="_blank" rel="noopener">代码</a></p>
<h2 id="BM-算法，Sunday-等一系列算法还是下次一定吧"><a href="#BM-算法，Sunday-等一系列算法还是下次一定吧" class="headerlink" title="BM 算法，Sunday 等一系列算法还是下次一定吧"></a>BM 算法，Sunday 等一系列算法还是下次一定吧</h2><h2 id="Z-函数，也称拓展-KMP"><a href="#Z-函数，也称拓展-KMP" class="headerlink" title="Z-函数，也称拓展 KMP"></a>Z-函数，也称拓展 KMP</h2><p>类似于前缀函数，Z-函数也可以用来求 KMP，也可以 $O(n)$ 给出 Z-函数，也当作另一种思路。</p>
<p>$z[i]$ 表示 s 和 $s[i, n - 1]$ 的最长公共前缀，约定 $z[0] = 0$</p>
<p>我们称 $i, i + z[i] - 1$ 是 i 的匹配段，也称 z-Box。</p>
<p>维护右端点最大的匹配段，记作 $[l, r]$，即 $s[l, r]$ 是 s 的前缀。</p>
<p>首先初始化，$l = r = 0, i = 1$（始终保证 $l \leq i$）</p>
<ul>
<li>若 $i \leq r$，根据定义 $s[i, r] = s[i - l, r - l]$，若 $s[i - l] &lt; r - i + 1$，则 $z[i] = z[i - l]$，反之，令 <code>z[i] = r - i + 1</code> 然后暴力拓展直到不能拓展为止</li>
<li>若 $i &gt; r$，那我们直接暴力求出 $z[i]$，</li>
</ul>
<p>无论那种情况都要更新 r。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">zFunction</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">z</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = <span class="number">0</span>, r = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &lt;= r &amp;&amp; z[i - l] &lt; r - i + <span class="number">1</span>) &#123;</span><br><span class="line">			z[i] = z[i - l];</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> j = <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">while</span> (i + j &lt; n &amp;&amp; s[j] == s[i + j]) ++j;</span><br><span class="line">			z[i] = j;</span><br><span class="line">			<span class="keyword">if</span> (i + j - <span class="number">1</span> &gt; r) &#123;</span><br><span class="line">				l = i;</span><br><span class="line">				r = i + j - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度，每次拓展 r 增加 1，因此总拓展次数小于 n，所以整体复杂度 $O(n)$。</p>
<p>类似于前缀函数，我们也可以求 KMP</p>
<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>构造 <code>s + # + t</code> 的串，那么我们可以通过计算 s 的 Z-函数，然后，在 t 中也类似的做，然后如果 t 中找到了长度为 s 长度的<br>z 值，那么就相当于匹配到了，并且注意到我们在这里不会再更新 r 值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回所有匹配在 t 的首位置</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">kmp</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s, <span class="built_in">std</span>::<span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>(), m = t.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (n &gt; m) <span class="keyword">return</span> ans;</span><br><span class="line">	<span class="keyword">auto</span> z = zFunction(s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; r || z[i - l] &gt;= r - i + <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, r - i + <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">while</span> (j &lt; n &amp;&amp; i + j &lt; m &amp;&amp; s[j] == t[i + j]) ++j;</span><br><span class="line">			<span class="keyword">if</span> (j == n) ans.emplace_back(i);</span><br><span class="line">			<span class="keyword">if</span> (i + j - <span class="number">1</span> &gt; r) &#123;</span><br><span class="line">				l = i;</span><br><span class="line">				r = i + j - <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="自动机（多模式串匹配）"><a href="#自动机（多模式串匹配）" class="headerlink" title="自动机（多模式串匹配）"></a>自动机（多模式串匹配）</h2><p><a href="https://oi-wiki.org/string/automaton/" target="_blank" rel="noopener">OI-wiki</a> 上讲的是真的好，就不赘述了。</p>
<p>主要用途，多串匹配。</p>
<h3 id="AC-自动机（Automaton）"><a href="#AC-自动机（Automaton）" class="headerlink" title="AC 自动机（Automaton）"></a>AC 自动机（Automaton）</h3><p>以 Trie 机构为基础，结合 KMP 的思想建立的。</p>
<ul>
<li>将所有模式串构成一颗 Trie</li>
<li>对 Trie 树上的所有节点构造失配（fail）指针（利用 KMP 思想）。</li>
</ul>
<p>上面是原始思想，一般都会做两个优化：路径压缩（也称建 Trie 图），后缀链接（也称 last 优化）</p>
<p>路径压缩会改变 Trie 的结构，即改变了状态转移，但是并没有改变最终状态点。它压缩了 fail 指针，一步到位。后缀链接压缩的模式匹配的时候不计入答案的直接跳过。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3808" target="_blank" rel="noopener">LOJ P3808</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span> &#123;</span></span><br><span class="line">	<span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CHAR = <span class="number">26</span>;</span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, CHAR&gt;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; nxt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt, fail, last;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">charToInt</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123; <span class="keyword">return</span> x - <span class="string">'a'</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		nxt[fa][c] = nxt.<span class="built_in">size</span>();</span><br><span class="line">		nxt.emplace_back(Node());</span><br><span class="line">		cnt.emplace_back(<span class="number">0</span>);</span><br><span class="line">		fail.emplace_back(<span class="number">0</span>);</span><br><span class="line">		last.emplace_back(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Automaton() : nxt(<span class="number">1</span>), cnt(<span class="number">1</span>), fail(<span class="number">1</span>), last(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = charToInt(x);</span><br><span class="line">			<span class="keyword">if</span> (nxt[p][c] == <span class="number">0</span>) addNode(p, c);</span><br><span class="line">			p = nxt[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">		++cnt[p];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; CHAR; ++c) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nxt[<span class="number">0</span>][c]) Q.push(nxt[<span class="number">0</span>][c]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> p = Q.front(); Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; CHAR; ++c) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">int</span> &amp;q = nxt[p][c]; q != <span class="number">0</span>) &#123;</span><br><span class="line">					fail[q] = nxt[fail[p]][c];</span><br><span class="line">					Q.push(q);</span><br><span class="line">					<span class="comment">// 用作模式匹配时计数的优化</span></span><br><span class="line">					last[q] = cnt[fail[q]] ? fail[q] : last[fail[q]];</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					q = nxt[fail[p]][c];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 具体写法见题目要求</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">auto</span> add = [&amp;](<span class="keyword">int</span> &amp; x) &#123;</span><br><span class="line">			r += x; x = <span class="number">0</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = charToInt(x);</span><br><span class="line">			p = nxt[p][c];</span><br><span class="line">			<span class="keyword">if</span> (cnt[p]) add(cnt[p]);</span><br><span class="line">			<span class="keyword">int</span> q = p;</span><br><span class="line">			<span class="keyword">while</span> (last[q]) &#123;</span><br><span class="line">				q = last[q];</span><br><span class="line">				<span class="keyword">if</span> (cnt[q]) add(cnt[q]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	Automaton A;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">		A.insert(s);</span><br><span class="line">	&#125;</span><br><span class="line">	A.build();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> t;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; A.query(t) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外加强版例题：<a href="https://www.luogu.com.cn/problem/P3796" target="_blank" rel="noopener">LOJ P3796</a></p>
<p>我直接骚气的来一波节点存字符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Automaton</span> &#123;</span></span><br><span class="line">	<span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CHAR = <span class="number">26</span>;</span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">int</span>, CHAR&gt;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; nxt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fail, last;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">charToInt</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123; <span class="keyword">return</span> x - <span class="string">'a'</span>;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> fa, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		nxt[fa][c] = nxt.<span class="built_in">size</span>();</span><br><span class="line">		nxt.emplace_back(Node());</span><br><span class="line">		fail.emplace_back(<span class="number">0</span>);</span><br><span class="line">		last.emplace_back(<span class="number">0</span>);</span><br><span class="line">		str.emplace_back(<span class="built_in">std</span>::<span class="built_in">string</span>());</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Automaton() : nxt(<span class="number">1</span>), str(<span class="number">1</span>), fail(<span class="number">1</span>), last(<span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; str;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = charToInt(x);</span><br><span class="line">			<span class="keyword">if</span> (nxt[p][c] == <span class="number">0</span>) addNode(p, c);</span><br><span class="line">			p = nxt[p][c];</span><br><span class="line">		&#125;</span><br><span class="line">		str[p] = s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; CHAR; ++c) &#123;</span><br><span class="line">			<span class="keyword">if</span> (nxt[<span class="number">0</span>][c]) Q.push(nxt[<span class="number">0</span>][c]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> p = Q.front(); Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; CHAR; ++c) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">int</span> &amp;q = nxt[p][c]; q != <span class="number">0</span>) &#123;</span><br><span class="line">					fail[q] = nxt[fail[p]][c];</span><br><span class="line">					Q.push(q);</span><br><span class="line">					<span class="comment">// 用作模式匹配时计数的优化</span></span><br><span class="line">					last[q] = str[fail[q]].<span class="built_in">size</span>() ? fail[q] : last[fail[q]];</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					q = nxt[fail[p]][c];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 具体写法见题目要求</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">query</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(str.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">		<span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = charToInt(x);</span><br><span class="line">			p = nxt[p][c];</span><br><span class="line">			<span class="keyword">if</span> (str[p].<span class="built_in">size</span>()) ++r[p];</span><br><span class="line">			<span class="keyword">int</span> q = p;</span><br><span class="line">			<span class="keyword">while</span> (last[q]) &#123;</span><br><span class="line">				q = last[q];</span><br><span class="line">				++r[q];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		Automaton A;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">			A.insert(s);</span><br><span class="line">		&#125;</span><br><span class="line">		A.build();</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> t;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">		<span class="keyword">auto</span> r = A.query(t);</span><br><span class="line">		<span class="keyword">int</span> x = *<span class="built_in">std</span>::max_element(r.<span class="built_in">begin</span>(), r.<span class="built_in">end</span>());</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (r[i] == x) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; A.str[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="后缀数组-SA，后缀自动机-SAM，广义后缀自动机-Trie-SAM"><a href="#后缀数组-SA，后缀自动机-SAM，广义后缀自动机-Trie-SAM" class="headerlink" title="后缀数组 SA，后缀自动机 SAM，广义后缀自动机(Trie + SAM)"></a>后缀数组 SA，后缀自动机 SAM，广义后缀自动机(Trie + SAM)</h2><p>遇到问题再补吧。</p>
<h2 id="回文子串的-Manacher-算法"><a href="#回文子串的-Manacher-算法" class="headerlink" title="回文子串的 Manacher 算法"></a>回文子串的 Manacher 算法</h2><p>问题：给定字符串 s，求所有回文子串。</p>
<p>首先注意到以一个位置为中心的最长回文串的子串都是回文子串，因此我们直到对每个位置 i，求它们的半径 $d_i$ 即可。而 Manacher 给出了一个 $O(|s|)$ 时空的算法。由于回文串长度的奇偶性使得要分两种情况讨论，但是我们其实也可以在其中插入 <code>#</code> 来统一成奇数的形式。</p>
<p>模板例题：<a href="https://vjudge.net/problem/UVA-11475" target="_blank" rel="noopener">UVA-11475</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅处理奇数长回文串，这个实现像极了 Z-函数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Manacher</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> k = i &gt; r ? <span class="number">1</span> : <span class="built_in">std</span>::<span class="built_in">min</span>(d[l + r - i], r - i);</span><br><span class="line">		<span class="keyword">while</span> (k &lt;= i &amp;&amp; i + k &lt; n &amp;&amp; s[i - k] == s[i + k]) ++k;</span><br><span class="line">		d[i] = k--;</span><br><span class="line">		<span class="keyword">if</span> (i + k &gt; r) &#123;</span><br><span class="line">			l = i - k;</span><br><span class="line">			r = i + k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">ss</span><span class="params">(<span class="string">"#"</span>)</span></span>;</span><br><span class="line">		<span class="built_in">std</span>::swap(ss, s);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : ss) &#123;</span><br><span class="line">			s += x; s += <span class="string">'#'</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">auto</span> d = Manacher(s);</span><br><span class="line">		<span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (now &lt; s.<span class="built_in">size</span>() &amp;&amp; now + d[now] != s.<span class="built_in">size</span>()) ++now;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ss;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = now - d[now]; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span> (s[i] != <span class="string">'#'</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s[i];</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其它例题：<a href="https://www.luogu.com.cn/problem/P4555" target="_blank" rel="noopener">LOJ P4555</a>，求最长双回文子串（即可以拆成两个回文子串）</p>
<p>我们定义 $l[i], r[i]$ 分别表示以 i 开头和以 i 结尾的回文长度。则 </p>
<script type="math/tex; mode=display">
l[i] = \max(l[i], l[i + 2] - 2), r[i] = \max(r[i], r[i - 2] - 2)</script><p>枚举每一个 <code>#</code> 为断点，更新答案即可。 </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅处理奇数长回文串</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Manacher</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">-1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> k = i &gt; r ? <span class="number">1</span> : <span class="built_in">std</span>::<span class="built_in">min</span>(d[l + r - i], r - i);</span><br><span class="line">		<span class="keyword">while</span> (k &lt;= i &amp;&amp; i + k &lt; n &amp;&amp; s[i - k] == s[i + k]) ++k;</span><br><span class="line">		d[i] = k--;</span><br><span class="line">		<span class="keyword">if</span> (i + k &gt; r) &#123;</span><br><span class="line">			l = i - k;</span><br><span class="line">			r = i + k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">ss</span><span class="params">(<span class="string">"#"</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::swap(ss, s);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : ss) &#123;</span><br><span class="line">		s += x; s += <span class="string">'#'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> d = Manacher(s);</span><br><span class="line">	<span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">	std::vector&lt;int&gt; l(n), r(n);</span><br><span class="line">	<span class="keyword">auto</span> cmax = [](<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; y) x = y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		cmax(l[i + d[i] - <span class="number">1</span>], d[i] - <span class="number">1</span>);</span><br><span class="line">		cmax(r[i - d[i] + <span class="number">1</span>], d[i] - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i -= <span class="number">2</span>)  cmax(l[i], l[i + <span class="number">2</span>] - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i += <span class="number">2</span>) cmax(r[i], r[i - <span class="number">2</span>] - <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i += <span class="number">2</span>) <span class="keyword">if</span> (l[i] &amp;&amp; r[i]) cmax(ans, l[i] + r[i]);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="回文自动机"><a href="#回文自动机" class="headerlink" title="回文自动机"></a>回文自动机</h2><p>待补</p>
<h2 id="序列自动机"><a href="#序列自动机" class="headerlink" title="序列自动机"></a>序列自动机</h2><h2 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h2><p>我们称两个字符串 S 和 T <strong>循环同构</strong>，如果它们各自首尾相接得到一个有向环是相同的。</p>
<p>最小表示：与 S 循环同构的字典序最小的字符串。</p>
<p>我们记 $S_i$ 表示以 S 的第 i 个字符开头与 S 循环同构的字符串。</p>
<p>直接暴力是 $O(n^2)$ 的，但是观察到，若 $s[i, \cdots, i +k - 1] = s[j \cdot, j + k - 1]$，那么我们就要开始比较 s[i + k] 和 s[j + k]，不妨设 $s[i + k] &gt; s[j + k]$，那么显然 $S_{i + p} &lt; S_{j + p} (p \leq k)$ 若 $l \in [i, i + k]$，则 $S_l$ 不可能成为最小表示。</p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P1368" target="_blank" rel="noopener">LOJ P1368</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minPresent</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">1</span>, n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">while</span> (k &lt; n &amp;&amp; i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[(i + k) % n] == a[(j + k) % n]) &#123;</span><br><span class="line">			++k;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			a[(i + k) % n] &gt; a[(j + k) % n] ? i += k + <span class="number">1</span> : j += k + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span> (i == j) ++i;</span><br><span class="line">			k = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">min</span>(i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lyndon-分解"><a href="#Lyndon-分解" class="headerlink" title="Lyndon 分解"></a>Lyndon 分解</h2><p>Lyndon word：我们称 $s$ 是 Lyndon word，如果 s 的字典序严格小于它所有真后缀的字典序。这等价于说它是自己的循环同构中最小的。</p>
<p>Lyndon 分解：$s = w_1 \cdots, w_k$，其中 $w_i$ 是 Lyndon word，且 $w_1 \geq w_2 \geq \cdots, w_k$。可以证明分解存在且唯一。</p>
<p>Duval 算法：在 $O(n)$ 时间给出一个串的 Lyndon 分解。（待补）</p>
<p>根据 Shirshov 分解：$s = s_L s_R$，其中 $s_R$ 是字典序最小的后缀（从而是 Lyndon word），若 $s_R = s$ 结束；否则，我们对剩下的 $s_L$ 做同样的操作。</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 图论模板</title>
    <url>/graph/</url>
    <content><![CDATA[<p>图论还是一个特别强的工具。 为什么没有图论的 STL？</p>
<h2 id="其他人的图论模板可做参考（其实我自己的够用了目前看）"><a href="#其他人的图论模板可做参考（其实我自己的够用了目前看）" class="headerlink" title="其他人的图论模板可做参考（其实我自己的够用了目前看）"></a>其他人的图论模板可做参考（其实我自己的够用了目前看）</h2><ul>
<li><a href="https://uoj.ac/submission/160478" target="_blank" rel="noopener">Nisiyama_Suzune</a> 的图论模板</li>
<li><a href="https://github.com/DQ9911/icpc_template_2020" target="_blank" rel="noopener">DQ9911</a> 的模板</li>
<li><a href="HDU_ACM-ICPC_Templates.pdf">HDU 模板</a> 也可以作为参考</li>
</ul>
<h2 id="存边方式"><a href="#存边方式" class="headerlink" title="存边方式"></a>存边方式</h2><ul>
<li>不涉及删边和反边（最简单常用的情况），可以直接用 vector 邻接表 <code>std::vector&lt;std::vector&lt;std::pair&lt;int, T&gt;&gt;&gt;</code></li>
<li>仅涉及反向边，不涉及删边（如网络流问题），可以使用 vector 版本的链式前向星（写法特别简洁）</li>
<li>不涉及重边（即使涉及重边也可以！其它操作随意，无向图其实也可以操作），都可以使用 vector 邻接表 <code>std::vector&lt;std::unordered_map&lt;int, int&gt;&gt;</code>（更快）或<code>std::vector&lt;std::map&lt;int, T&gt;&gt;</code>，当然了各种操作都要带个 log </li>
<li>如果涉及重边（逻辑上没法合并的那种），就不存在反边的概念了。此时可以用链式前向星，也可以使用 最简单情况的 vector 邻接表（也支持删边，只是比较慢）无论怎么，即使不用链式前向星，这种思想还是值得学习的。</li>
</ul>
<h3 id="链式前向星-（弃用）"><a href="#链式前向星-（弃用）" class="headerlink" title="链式前向星 （弃用）"></a>链式前向星 （弃用）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStar</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; head, nxt, to;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; w;</span><br><span class="line">	LinkStar(<span class="keyword">int</span> n) &#123;</span><br><span class="line">		nxt.<span class="built_in">clear</span>();</span><br><span class="line">		to.<span class="built_in">clear</span>();</span><br><span class="line">		head = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL val)</span> </span>&#123;</span><br><span class="line">		nxt.emplace_back(head[u]);</span><br><span class="line">		head[u] = to.<span class="built_in">size</span>();</span><br><span class="line">		to.emplace_back(v);</span><br><span class="line">		w.emplace_back(val);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="邻接矩阵存边（太简单就不写了）"><a href="#邻接矩阵存边（太简单就不写了）" class="headerlink" title="邻接矩阵存边（太简单就不写了）"></a>邻接矩阵存边（太简单就不写了）</h3><h3 id="邻接-map-or-unorder-map-存边（同上）"><a href="#邻接-map-or-unorder-map-存边（同上）" class="headerlink" title="邻接 map or unorder_map 存边（同上）"></a>邻接 map or unorder_map 存边（同上）</h3><h3 id="vector-版本链式前向星（见后面网络流的做法）"><a href="#vector-版本链式前向星（见后面网络流的做法）" class="headerlink" title="vector 版本链式前向星（见后面网络流的做法）"></a>vector 版本链式前向星（见后面网络流的做法）</h3><h2 id="树上问题转化成序列问题"><a href="#树上问题转化成序列问题" class="headerlink" title="树上问题转化成序列问题"></a>树上问题转化成序列问题</h2><h3 id="无根树的-Prufer-序列"><a href="#无根树的-Prufer-序列" class="headerlink" title="无根树的 Prufer 序列"></a>无根树的 Prufer 序列</h3><blockquote>
<p>A.Cayley 在 1889 年首先公布并证明 $n$ 个节点的无根树和长度为 $n-2$，数值在 $1 \to n$ 的序列有一一对应</p>
<p>构造方式：删除编号最小的叶子节点，并记录它的父节点。</p>
</blockquote>
<p>曾在 <a href="/catWithPy/" title="猫咪状态数">猫咪状态数</a> 中有记录过。<a href="https://cp-algorithms.com/graph/pruefer_code.html" target="_blank" rel="noopener">CP-algorithm</a> 中有详细的讲解和代码 无根树 和 Prufer 序列 互转的 $O(n \log n)$ 和 $O(n)$ 两类代码。</p>
<h3 id="有根树的-dfs-序"><a href="#有根树的-dfs-序" class="headerlink" title="有根树的 dfs 序"></a>有根树的 <strong>dfs 序</strong></h3><blockquote>
<p>本质作用： 将树上问题转化成序列问题，dfs 序是基础，Euler 序可以认为是推广。</p>
</blockquote>
<p>树节点按 dfs 过程中的访问顺序排序（进入记录一次，出去记录一次），称为 dfs 序。处理子树的问题很有用。</p>
<p><a href="https://www.cnblogs.com/bytebull/p/5929137.html" target="_blank" rel="noopener">这里</a> 给出了 dfs 序的一些应用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DfsTour</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, cnt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; l, r;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	DfsTour(<span class="keyword">int</span> _n) : n(_n), e(n), l(n), r(n), cnt(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">		l[u] = ++cnt;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			dfs(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">		r[u] = cnt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 u 的子树的编号正好是区间 $[l_u, r_u]$</p>
</blockquote>
<p>关于子树的问题，可以考虑一下 dfs 序。</p>
<ol>
<li>在节点权值可修改的情况下，查询某个子树里的所有点权和。<blockquote>
<p>由于在上述 dfs 序中子树 x 是连续的一段 $[l_x, r_x]$，所以用树状数组：单点更新，区间查询。</p>
</blockquote>
</li>
<li>节点 X 到 Y 的最短路上所有点权都加上一个数 W，查询某个子树里的所有点权和。<br>可以理解为更新 4 段区间，根节点到 X，根节点到 Y，根节点到 lca(X, Y)，根节点到 fa[lca(X, Y)]，可以用 线段树 或 带区间更新的树状数组。</li>
</ol>
<h3 id="有根树的-Euler-序列（长度为-2n-1）"><a href="#有根树的-Euler-序列（长度为-2n-1）" class="headerlink" title="有根树的 Euler 序列（长度为 2n - 1）"></a>有根树的 Euler 序列（长度为 2n - 1）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以 rt 为根的树，只记录进入的 Euler 序（长度为 2n - 1)</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">EulerTour</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; e, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		r.emplace_back(u);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			dfs(v, u);</span><br><span class="line">			r.emplace_back(u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	dfs(rt, rt);</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先观察到这个树的 Euler 序列首尾都是根的编号，如果把首尾连接起来，就会发现：<strong>这个序列中元素出现的次数正好是它的度</strong>。并且我们可以轻松的<strong>换根节点</strong>!!!，以谁为根就以谁开始转圈！并且如果删除某个节点，那么就会形成<strong>以这个节点为度的个数的连通分支</strong>。</p>
<p>问题 1：求 最近公共祖先（LCA）</p>
<p>求完 Euler 序列后，求 <code>lca(u, v)</code> 那就是 $E[pos[u], \cdots, pos[v]]$ 的最小值，其中 <code>pos[u]</code> 为 u 首次出现在 E 中的标号。那么显然我们可以用线段树 $O(n)$ 预处理，单步 $O(\log n)$ 在线查询 lca。</p>
<p>问题 2：求树上任意两点的距离</p>
<p>求完 Euler 序列的同时，我们先求出根节点和其它点的距离，由上述步骤我们能求 lca，那么树上任意两点 $u, v$ 的距离就是 <code>d[u] + d[v] - d[lca(u, v)]</code></p>
<blockquote>
<p>如果求树上任意两点距离之和：只需统计每条边经过多少次就行，显然等价于每条边左右两边节点个数，就不用上述做法了。</p>
</blockquote>
<p>问题 3：求树上节点到根节点的最短路径点权和</p>
<h3 id="树链剖分-Heavy-Light-decomposition"><a href="#树链剖分-Heavy-Light-decomposition" class="headerlink" title="树链剖分 Heavy-Light decomposition"></a><a href="https://oi-wiki.org/graph/hld/" target="_blank" rel="noopener">树链剖分 Heavy-Light decomposition</a></h3><p>重链剖分可以理解为 dfs 序和 Euler 序的增强优化拓展版本。</p>
<h4 id="重链剖分求-LCA-的模板例题：LOJ-3379，我的实现"><a href="#重链剖分求-LCA-的模板例题：LOJ-3379，我的实现" class="headerlink" title="重链剖分求 LCA 的模板例题：LOJ 3379，我的实现"></a>重链剖分求 LCA 的模板例题：<a href="https://www.luogu.com.cn/problem/P3379" target="_blank" rel="noopener">LOJ 3379</a>，<a href="https://www.luogu.com.cn/record/45492112" target="_blank" rel="noopener">我的实现</a></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LCA</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa, dep, sz, son, top;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	LCA(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="keyword">int</span> rt = <span class="number">1</span>) : n(e.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		fa.resize(n);</span><br><span class="line">		dep.resize(n);</span><br><span class="line">		sz.resize(n);</span><br><span class="line">		son.resize(n);</span><br><span class="line">		fa[rt] = rt;</span><br><span class="line">		dep[rt] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			sz[u] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">				dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">				fa[v] = u;</span><br><span class="line">				sz[u] += pdfs(v);</span><br><span class="line">				<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sz[u];</span><br><span class="line">		&#125;;</span><br><span class="line">		top.resize(n);</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> t) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">			top[u] = t;</span><br><span class="line">			<span class="keyword">if</span> (son[u] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">			dfs(son[u], t);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u]) dfs(v, v);</span><br><span class="line">		&#125;;</span><br><span class="line">		pdfs(rt);</span><br><span class="line">		dfs(rt, rt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">				u = fa[top[u]];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				v = fa[top[v]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m, rt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; rt;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LCA <span class="title">g</span><span class="params">(e, rt)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.lca(x, y) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重链剖分求任意两点路径上所有节点的点权和，求子树的点权和（利用-dfs-编号和-sz-直接区间查询或区间修改）"><a href="#重链剖分求任意两点路径上所有节点的点权和，求子树的点权和（利用-dfs-编号和-sz-直接区间查询或区间修改）" class="headerlink" title="重链剖分求任意两点路径上所有节点的点权和，求子树的点权和（利用 dfs 编号和 sz 直接区间查询或区间修改）"></a>重链剖分求任意两点路径上所有节点的点权和，求子树的点权和（利用 dfs 编号和 sz 直接区间查询或区间修改）</h4><p>例题：<a href="https://www.luogu.com.cn/problem/P3384" target="_blank" rel="noopener">LOJ 3384</a>，参考：<a href="https://www.cnblogs.com/chinhhh/p/7965433.html" target="_blank" rel="noopener">ChinHhh’s blog</a>，用加强版树状数组而非线段树算的：<a href="https://www.luogu.com.cn/record/45509401" target="_blank" rel="noopener">提交记录</a>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line">LL M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; s;</span><br><span class="line">	TreeArray() &#123;&#125;</span><br><span class="line">	TreeArray(<span class="keyword">int</span> n) : s(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			(s[id] += p) %= M;</span><br><span class="line">			id += lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (id) &#123;</span><br><span class="line">			(r += s[id]) %= M;</span><br><span class="line">			id -= lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeArrayPlus</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// c[i] = a[i] - a[i - 1], b_i = (i - 1) * c_i</span></span><br><span class="line">	TreeArray B, C;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		C.add(id, p);</span><br><span class="line">		B.add(id, (id - <span class="number">1</span>) * p % M);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	TreeArrayPlus() &#123;&#125;</span><br><span class="line">	TreeArrayPlus(<span class="keyword">int</span> _n) : n(_n), B(n), C(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		add(l, p);</span><br><span class="line">		add(r + <span class="number">1</span>, -p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (id * C.sum(id) + M - B.sum(id)) % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ((sum(r) - sum(l - <span class="number">1</span>)) % M + M) % M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HLD</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fa, dep, sz, son, top, dfn;</span><br><span class="line">	TreeArrayPlus Tree;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	HLD(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> rt = <span class="number">1</span>) : n(e.<span class="built_in">size</span>()), Tree(n + <span class="number">1</span>) &#123;</span><br><span class="line">		fa.resize(n);</span><br><span class="line">		dep.resize(n);</span><br><span class="line">		sz.resize(n);</span><br><span class="line">		son.resize(n);</span><br><span class="line">		fa[rt] = dep[rt] = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			sz[u] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa[u]) &#123;</span><br><span class="line">				dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">				fa[v] = u;</span><br><span class="line">				sz[u] += pdfs(v);</span><br><span class="line">				<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> sz[u];</span><br><span class="line">		&#125;;</span><br><span class="line">		top.resize(n);</span><br><span class="line">		dfn.resize(n);</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> t) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">			top[u] = t;</span><br><span class="line">			dfn[u] = ++cnt;</span><br><span class="line">			<span class="keyword">if</span> (son[u] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">			dfs(son[u], t);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa[u] &amp;&amp; v != son[u]) dfs(v, v);</span><br><span class="line">		&#125;;</span><br><span class="line">		pdfs(rt);</span><br><span class="line">		dfs(rt, rt);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) Tree.add(dfn[i], dfn[i], a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// u 到根的最短路径上所有边权值加 c</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (u) &#123;</span><br><span class="line">			Tree.add(dfn[top[u]], dfn[u], c);</span><br><span class="line">			u = fa[top[u]];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// u 到根的最短路径上所有边权值之和</span></span><br><span class="line">	<span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (u) &#123;</span><br><span class="line">			r += Tree.sum(dfn[top[u]], dfn[u]);</span><br><span class="line">			u = fa[top[u]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// u, v 的最短路径上所有边权值加 c（可以通过 lca 和根来搞，但是会很慢）</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">				Tree.add(dfn[top[u]], dfn[u], c);</span><br><span class="line">				u = fa[top[u]];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Tree.add(dfn[top[v]], dfn[v], c);</span><br><span class="line">				v = fa[top[v]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123;</span><br><span class="line">			Tree.add(dfn[u], dfn[v], c);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Tree.add(dfn[v], dfn[u], c);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// u, v 的最短路径上所有边权值之和（可以通过 lca 和根来搞，但是会很慢）</span></span><br><span class="line">	<span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">				r += Tree.sum(dfn[top[u]], dfn[u]);</span><br><span class="line">				u = fa[top[u]];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				r += Tree.sum(dfn[top[v]], dfn[v]);</span><br><span class="line">				v = fa[top[v]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (dep[u] &lt; dep[v]) &#123;</span><br><span class="line">			r += Tree.sum(dfn[u], dfn[v]);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			r += Tree.sum(dfn[v], dfn[u]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addSon</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		Tree.add(dfn[u], dfn[u] + sz[u] - <span class="number">1</span>, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">querySon</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> Tree.sum(dfn[u], dfn[u] + sz[u] - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">				u = fa[top[u]];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				v = fa[top[v]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m, rt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; rt &gt;&gt; M;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">HLD <span class="title">g</span><span class="params">(e, a, rt)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> op, x, y, z;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">		<span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">			g.add(x, y, z);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.query(x, y) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; z;</span><br><span class="line">			g.addSon(x, z);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.querySon(x) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// auto start = std::clock();</span></span><br><span class="line">	<span class="comment">// std::cout &lt;&lt; "Time used: " &lt;&lt; (std::clock() - start) &lt;&lt; "ms" &lt;&lt; std::endl;</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="长链剖分优化-DP，例题：1009F"><a href="#长链剖分优化-DP，例题：1009F" class="headerlink" title="长链剖分优化 DP，例题：1009F"></a>长链剖分优化 DP，例题：<a href="https://codeforces.com/contest/1009/problem/F" target="_blank" rel="noopener">1009F</a></h4><p>这个题显然可以用重链剖分来做，或者说下面的 dsu on tree 来做（$O(n \log n)$），但是<a href="https://codeforces.com/blog/entry/60630" target="_blank" rel="noopener">官方题解</a> 用长链剖分可以优化到 $O(n)$！太强了。主要原因是因为，每个轻儿子节点最多被合并一次（它第一次合并之后，它的信息就被和他同深度的重兄弟节点给吸收了），后面再合并的时候就不算它被合并而算当前重儿子节点的合并了（妙不可言）。但是父节点占据儿子节点的时候有个问题就是用 std::map 或 std::unordered_map 本质上都会带一个 log，因此我们需要用 vector 保存信息。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始。</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		sz[u] = sz[son[u]] + <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &#123;</span><br><span class="line">		<span class="keyword">if</span> (son[u] == <span class="number">0</span>) &#123;</span><br><span class="line">			ans[u] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">return</span> &#123;<span class="number">1</span>&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">auto</span> a = dfs(son[u], u);</span><br><span class="line">		ans[u] = ans[son[u]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			<span class="keyword">auto</span> tmp = dfs(v, u);</span><br><span class="line">			<span class="comment">// 这里需要对齐</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> ai = a.<span class="built_in">size</span>() - <span class="number">1</span>, ti = tmp.<span class="built_in">size</span>() - <span class="number">1</span>; ti &gt;= <span class="number">0</span>; --ti, --ai) &#123;</span><br><span class="line">				a[ai] += tmp[ti];</span><br><span class="line">				<span class="keyword">if</span> (a[ai] &gt; a[ans[u]] || (a[ai] == a[ans[u]] &amp;&amp; ai &gt; ans[u])) &#123;</span><br><span class="line">					ans[u] = ai;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		a.emplace_back(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (a[ans[u]] == <span class="number">1</span>) ans[u] = sz[u] - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt, <span class="number">0</span>);</span><br><span class="line">	dfs(rt, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) ans[i] = sz[i] - <span class="number">1</span> - ans[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> r = dsuOnTree(e);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; r[i] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树上启发式算法（dsu-on-tree）"><a href="#树上启发式算法（dsu-on-tree）" class="headerlink" title="树上启发式算法（dsu on tree）"></a><a href="https://oi-wiki.org/graph/dsu-on-tree/" target="_blank" rel="noopener">树上启发式算法（dsu on tree）</a></h3><p>先处理轻儿子，但是不保留影响，再处理重儿子保留，再暴力处理所有其它情况，再看次节点是否需要保留。</p>
<p>复杂度分析真的太妙了！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了代码简洁，树的编号以 1 开始，参考：https://www.cnblogs.com/zwfymqz/p/9683124.html</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">dsuOnTree</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> rt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="comment">// 预处理出重儿子</span></span><br><span class="line">	std::vector&lt;int&gt; sz(n), son(n), cnt(n);</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			sz[u] += pdfs(v, u);</span><br><span class="line">			<span class="keyword">if</span> (sz[v] &gt; sz[son[u]]) son[u] = v;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sz[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 这个函数具体问题具体分析</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> mx = <span class="number">0</span>, Son = <span class="number">0</span>;</span><br><span class="line">	LL sm = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; deal = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		++cnt[a[u]];</span><br><span class="line">		<span class="keyword">if</span> (cnt[a[u]] &gt; mx) &#123;</span><br><span class="line">			mx = cnt[a[u]];</span><br><span class="line">			sm = a[u];</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt[a[u]] == mx) &#123;</span><br><span class="line">			sm += a[u];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != Son) &#123;</span><br><span class="line">			deal(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; del = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		--cnt[a[u]];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) del(v, u);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">bool</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa, <span class="keyword">bool</span> save) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa &amp;&amp; v != son[u]) &#123;</span><br><span class="line">			dfs(v, u, <span class="number">0</span>); <span class="comment">// 先计算轻边贡献，但最终要消除影响，防止轻边互相干扰</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (son[u]) dfs(son[u], u, <span class="number">1</span>);  <span class="comment">// 统计重儿子的贡献，但不消除影响</span></span><br><span class="line">		Son = son[u];</span><br><span class="line">		deal(u, fa); <span class="comment">// 暴力处理除重儿子外的贡献</span></span><br><span class="line">		Son = <span class="number">0</span>;</span><br><span class="line">		ans[u] = sm;</span><br><span class="line">		<span class="keyword">if</span> (!save) &#123;</span><br><span class="line">			del(u, fa);</span><br><span class="line">			sm = <span class="number">0</span>;</span><br><span class="line">			mx = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	pdfs(rt, rt);</span><br><span class="line">	dfs(rt, rt, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>思想是这样的，到时候具体问题灵活运用，不必死套模板，例如 <a href="https://codeforces.com/gym/102832/problem/F" target="_blank" rel="noopener">gym 102832F</a> 我的另样做法 <a href="https://codeforces.com/gym/102832/submission/105273241" target="_blank" rel="noopener">submission 105273241</a> 更加优秀，快速。</p>
</blockquote>
<h2 id="树上问题"><a href="#树上问题" class="headerlink" title="树上问题"></a>树上问题</h2><h3 id="树的直径：先从任意点开始寻找最远距离点（bfs-遍历一下），然后再找一次就是了（易证）"><a href="#树的直径：先从任意点开始寻找最远距离点（bfs-遍历一下），然后再找一次就是了（易证）" class="headerlink" title="树的直径：先从任意点开始寻找最远距离点（bfs 遍历一下），然后再找一次就是了（易证）"></a>树的直径：先从任意点开始寻找最远距离点（bfs 遍历一下），然后再找一次就是了（易证）</h3><p>例题：<a href="https://codeforces.com/contest/1405/problem/D" target="_blank" rel="noopener">1405D</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> bfs = [&amp;](<span class="keyword">int</span> x) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	d[x] = <span class="number">0</span>;</span><br><span class="line">	Q.push(x);</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">			d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">			Q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::max_element(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()) - d.<span class="built_in">begin</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="树的中心-：所有点到该点的最大值最小（直径的中点）"><a href="#树的中心-：所有点到该点的最大值最小（直径的中点）" class="headerlink" title="[树的中心]：所有点到该点的最大值最小（直径的中点）"></a>[树的中心]：所有点到该点的最大值最小（直径的中点）</h3><h3 id="树的重心：去掉这个点后连通分支的节点数量的最大值最小"><a href="#树的重心：去掉这个点后连通分支的节点数量的最大值最小" class="headerlink" title="树的重心：去掉这个点后连通分支的节点数量的最大值最小"></a><a href="https://oi-wiki.org/graph/tree-centroid/" target="_blank" rel="noopener">树的重心</a>：去掉这个点后连通分支的节点数量的最大值最小</h3><p>根据 DFS 子树的大小和“向上”的子树大小就可以知道所有子树中最大的子树节点数。：<a href="https://codeforces.com/contest/1406/problem/C" target="_blank" rel="noopener">例题 1406C</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其中 e 表示树的边，n 为数的数量</span></span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; degree = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">	d[u] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (d[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">		d[u] += degree(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d[u];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> barycenter = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">int</span> cnt = degree(x);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">w</span><span class="params">(n, n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	Q.push(x);</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		w[u] = cnt - d[u];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (w[v] == n) &#123;</span><br><span class="line">			w[u] = <span class="built_in">std</span>::<span class="built_in">max</span>(w[u], d[v]);</span><br><span class="line">			Q.push(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="built_in">std</span>::min_element(w.<span class="built_in">begin</span>(), w.<span class="built_in">end</span>()) - w.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::make_pair(r, w[r]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="最近公共祖先简称-LCA（Lowest-Common-Ancestor）"><a href="#最近公共祖先简称-LCA（Lowest-Common-Ancestor）" class="headerlink" title="最近公共祖先简称 LCA（Lowest Common Ancestor）"></a>最近公共祖先简称 LCA（Lowest Common Ancestor）</h3><ul>
<li>策略 1：其中一个节点一直往上标记父辈到根，然后另一个节点往上找父辈，直到找到首次被标记过的节点</li>
<li>策略 2：标记没个节点的深度，深度高的往上到同一层，然后一起一步步上去，直到是公共节点</li>
<li>策略 3：做一次 DFS 得到 Euler 序列，然后就变成找区间最小值问题了（可以使用线段树）</li>
<li>策略 4：树链剖分（见下面做法，目前我的做法）</li>
<li>其他：倍增（记录 <code>fa[u][i]</code>：表示 <code>u</code> 的第$2^i$祖先），Tarjan 算法，动态树<br><a href="https://oi-wiki.org/graph/lca/" target="_blank" rel="noopener">OI-wiki</a> 给了很多做法，竟然有标准 $O(N)$ 时空复杂度的 RMQ 做法还支持在线，太强了，太强了，mark 一下，有模板，但是并不想学。</li>
</ul>
<h3 id="有向图的拓扑排序之-Kahn-算法"><a href="#有向图的拓扑排序之-Kahn-算法" class="headerlink" title="有向图的拓扑排序之 Kahn 算法"></a><a href="https://oi-wiki.org/graph/topo/" target="_blank" rel="noopener">有向图的拓扑排序之 Kahn 算法</a></h3><p>给定有向图，然后把节点按照顺序排列，使得任意有向边的起点在终点前。</p>
<p>做法：维护一个入度为 0 的节点集合，一次删除节点（加入拓扑序列），删除的时候它连接的所有点入度减 1，为 0 就加入节点集合。</p>
<blockquote>
<p>一个有向图是无环图，当且仅当它存在拓扑排序。</p>
</blockquote>
<h3 id="笛卡尔树-：我去，竟然是-O-n-复杂度的建树（弃用没必要直接学单调栈即可）"><a href="#笛卡尔树-：我去，竟然是-O-n-复杂度的建树（弃用没必要直接学单调栈即可）" class="headerlink" title="笛卡尔树 ：我去，竟然是 $O(n)$ 复杂度的建树（弃用没必要直接学单调栈即可）"></a><a href="https://oi-wiki.org/ds/cartesian-tree/" target="_blank" rel="noopener">笛卡尔树</a> ：我去，竟然是 $O(n)$ 复杂度的建树（弃用没必要直接学单调栈即可）</h3><blockquote>
<p>从<a href="https://oi-wiki.org/ds/cartesian-tree/" target="_blank" rel="noopener">OI - wiki</a> 中看到的讲解和复杂度分析!，注意到右链是从尾巴往上查找的。<br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1506" target="_blank" rel="noopener"><strong>hdu 1506</strong></a><br>这就给出了一个 $O(n)$ 复杂度求出包含 <code>i</code>且以 <code>a[i]</code> 为最大值的区间的方法（最小值保存的时候取负数即可），太强了！<br>求上述对应的最大值区间，需要修改 0 节点的值，以及 build 的大于号改成小于号。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> id, val, par, ch[<span class="number">2</span>];</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _id, <span class="keyword">int</span> _val, <span class="keyword">int</span> _par)</span> </span>&#123;</span><br><span class="line">		id = _id, val = _val, par = _par, ch[<span class="number">0</span>] = ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cartesian_build</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; &amp;tree, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> k = i - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (tree[k].val &lt; tree[i].val) k = tree[k].par;</span><br><span class="line">		tree[i].ch[<span class="number">0</span>] = tree[k].ch[<span class="number">1</span>];</span><br><span class="line">		tree[k].ch[<span class="number">1</span>] = i;</span><br><span class="line">		tree[i].par = k;</span><br><span class="line">		tree[tree[i].ch[<span class="number">0</span>]].par = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> tree[<span class="number">0</span>].ch[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; <span class="title">tree</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">		tree[<span class="number">0</span>].init(<span class="number">0</span>, INT_MAX, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">			tree[i].init(i, x, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> root = cartesian_build(tree, n);</span><br><span class="line">		LL ans = <span class="number">0</span>;</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> x) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> sz = dfs(tree[x].ch[<span class="number">0</span>]);</span><br><span class="line">			sz += dfs(tree[x].ch[<span class="number">1</span>]);</span><br><span class="line">			ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, LL(sz + <span class="number">1</span>) * tree[x].val);</span><br><span class="line">			<span class="keyword">return</span> sz + <span class="number">1</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">		dfs(root);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 下面是求以 a[i] 为最大值且包含 i 的最大区间</span></span><br><span class="line">		std::vector&lt;int&gt; l(n + 1), r(n + 1);</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; getinterval = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">if</span> (tree[tree[x].par].ch[<span class="number">0</span>] == x) &#123;</span><br><span class="line">				r[x] = tree[x].par - <span class="number">1</span>;</span><br><span class="line">				l[x] = l[tree[x].par];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				l[x] = tree[x].par + <span class="number">1</span>;</span><br><span class="line">				r[x] = r[tree[x].par];</span><br><span class="line">			&#125;</span><br><span class="line">			getinterval(tree[x].ch[<span class="number">0</span>]);</span><br><span class="line">			getinterval(tree[x].ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;;</span><br><span class="line">		l[root] = <span class="number">1</span>;</span><br><span class="line">		r[root] = n;</span><br><span class="line">		getinterval(tree[root].ch[<span class="number">0</span>]);</span><br><span class="line">		getinterval(tree[root].ch[<span class="number">1</span>]);</span><br><span class="line">		<span class="comment">// 要考虑有相同值的情形，必须要分两次搞，不然有bug</span></span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>)&gt; updateinterval = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">			<span class="keyword">if</span> (tree[tree[x].par].ch[<span class="number">0</span>] == x) &#123;</span><br><span class="line">				<span class="keyword">if</span> (tree[x].val == tree[tree[x].par].val) r[x] = r[tree[x].par];</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (tree[x].val == tree[tree[x].par].val) l[x] = l[tree[x].par];</span><br><span class="line">			&#125;</span><br><span class="line">			updateinterval(tree[x].ch[<span class="number">0</span>]);</span><br><span class="line">			updateinterval(tree[x].ch[<span class="number">1</span>]);</span><br><span class="line">		&#125;;</span><br><span class="line">		updateinterval(tree[root].ch[<span class="number">0</span>]);</span><br><span class="line">		updateinterval(tree[root].ch[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; r[i] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>洛谷 T126268 「SWTR-05」Subsequence 有一个典型的应用</p>
</blockquote>
<h3 id="最小生成树-prim-算法"><a href="#最小生成树-prim-算法" class="headerlink" title="最小生成树 prim 算法"></a>最小生成树 prim 算法</h3><p>任取一个节点，然后开始找相邻边中边最小的节点加入，然后继续。<a href="https://baike.baidu.com/item/Prim/10242166" target="_blank" rel="noopener">百度百科</a>里的图解一看就懂，怎么明确证明正确性呢？（在保证连通的前提下每次删除图中最大的边，不会影响最终结果，而我们每步得到的是当前节点构成的子图的最小生成树）当然了堆优化常规操作，另外不连通输出 <code>INT64_MAX</code>, 例题：<a href="https://www.luogu.com.cn/problem/P3366" target="_blank" rel="noopener">LOJ3366</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;;</span><br><span class="line"><span class="function">LL <span class="title">Prim</span><span class="params">(<span class="keyword">const</span> edge &amp;e)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>(), cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(n)</span></span>;</span><br><span class="line">	Q.push(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [w, u] = Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">		++cnt;</span><br><span class="line">		r -= w;</span><br><span class="line">		vis[u] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, c] : e[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">			Q.push(&#123;-c, v&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt == n ? r : INT64_MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最小树形图的-O-nm-刘朱算法"><a href="#最小树形图的-O-nm-刘朱算法" class="headerlink" title="最小树形图的 $O(nm)$ 刘朱算法"></a>最小树形图的 $O(nm)$ <a href="https://www.luogu.com.cn/blog/i207M/shu-xing-tu-shu-liu-suan-fa-xue-xi-bi-ji-xie-ti-bao-gao-p4716-post" target="_blank" rel="noopener">刘朱算法</a></h3><ol>
<li>对每个点，找入边权值最小的边构成集合。</li>
<li>如果这些边构成有向环，缩点后进入 1，否则结束，找到了。</li>
</ol>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4716" target="_blank" rel="noopener">LOJ4716</a></p>
<p><strong>问题变形</strong>：如果不指定根节点，那么可以建一个根节点，然后它和所有其它点连特别大的边即可。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Edge = <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="function">LL <span class="title">LiuZhu</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt; e, <span class="keyword">int</span> n, <span class="keyword">int</span> rt)</span> </span>&#123; <span class="comment">// e 中无自环</span></span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="comment">// 寻找入边权值最小的边</span></span><br><span class="line">		std::vector&lt;int&gt; in(n, INT_MAX), pre(n, -1);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [u, v, w] : e) <span class="keyword">if</span> (u != v &amp;&amp; in[v] &gt; w) &#123;</span><br><span class="line">			in[v] = w;</span><br><span class="line">			pre[v] = u;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 判定是否无解</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (i != rt &amp;&amp; pre[i] == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">// 判定是否有环</span></span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">		std::vector&lt;int&gt; vis(n, -1), id(n, -1);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (i != rt) &#123;</span><br><span class="line">			ans += in[i];</span><br><span class="line">			<span class="keyword">int</span> v = i;</span><br><span class="line">			<span class="comment">// 注意到可能出现 6 型的路径，所以两个指标很必要</span></span><br><span class="line">			<span class="keyword">while</span> (vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v != rt) &#123;</span><br><span class="line">				vis[v] = i;</span><br><span class="line">				v = pre[v];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (id[v] == <span class="number">-1</span> &amp;&amp; v != rt) &#123;</span><br><span class="line">				<span class="keyword">int</span> u = v;</span><br><span class="line">				<span class="keyword">do</span> &#123;</span><br><span class="line">					id[u] = cnt;</span><br><span class="line">					u = pre[u];</span><br><span class="line">				&#125; <span class="keyword">while</span> (u != v);</span><br><span class="line">				++cnt;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">// 更新节点和边，也可以重开一个 vector，然后 swap 一下</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (id[i] == <span class="number">-1</span>) id[i] = cnt++;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[u, v, w] : e) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id[u] != id[v]) w -= in[v];</span><br><span class="line">			u = id[u];</span><br><span class="line">			v = id[v];</span><br><span class="line">		&#125;</span><br><span class="line">		rt = id[rt];</span><br><span class="line">		n = cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h2><h3 id="知乎上看到-YYYYLLL-关于-Floyd-算法的解释挺好的，再次记录-稍加修改）"><a href="#知乎上看到-YYYYLLL-关于-Floyd-算法的解释挺好的，再次记录-稍加修改）" class="headerlink" title="知乎上看到 YYYYLLL 关于 Floyd 算法的解释挺好的，再次记录(稍加修改）"></a>知乎上看到 <a href="https://www.zhihu.com/people/yyyylll-37" target="_blank" rel="noopener">YYYYLLL</a> 关于 Floyd 算法的解释挺好的，再次记录(稍加修改）</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">DP[<span class="string">k</span>][<span class="symbol">i</span>][<span class="string">j</span>] 表示只经过 1～k 号节点优化，i 点到 j 点的最短路径长度。</span><br><span class="line">则 DP[<span class="string">k</span>][<span class="symbol">i</span>][<span class="string">j</span>] = min( DP[<span class="string">k-1</span>][<span class="symbol">i</span>][<span class="string">j</span>], DP[<span class="string">k-1</span>][<span class="symbol">i</span>][<span class="string">k</span>]+DP[<span class="string">k-1</span>][<span class="symbol">k</span>][<span class="string">j</span>] ) </span><br><span class="line">= min( DP[<span class="string">k-1</span>][<span class="symbol">i</span>][<span class="string">j</span>], DP[<span class="string">k</span>][<span class="symbol">i</span>][<span class="string">k</span>]+DP[<span class="string">k</span>][<span class="symbol">k</span>][<span class="string">j</span>] ) </span><br><span class="line">DP[<span class="string">0</span>][<span class="symbol"></span>][<span class="string"></span>] 是初始图的邻接矩阵，DP[<span class="string">n</span>][<span class="symbol"></span>][<span class="string"></span>] 就是最终求得的最短路长度矩阵了</span><br></pre></td></tr></table></figure>
<p>本来一开始是没法做空间优化的， 但是第二个等式， 就保证了可以做空间优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1003</span>;</span><br><span class="line">LL dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> cmin = [](<span class="keyword">auto</span> &amp;x, <span class="keyword">auto</span> y) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; y) x = y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k != n; ++k)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j)</span><br><span class="line">				cmin(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Floyd-带路径-—-未测试"><a href="#Floyd-带路径-—-未测试" class="headerlink" title="Floyd 带路径 —- 未测试"></a>Floyd 带路径 —- 未测试</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1003</span>;</span><br><span class="line">LL dp[N][N], path[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(path, <span class="number">-1</span>, <span class="keyword">sizeof</span>(path));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k != n; ++k)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) <span class="keyword">if</span> (dp[i][j] &gt; dp[i][k] + dp[k][j]) &#123;</span><br><span class="line">				path[i][j] = k;</span><br><span class="line">			&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">getPath</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (path[x][y] == <span class="number">-1</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;x&#125;;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&#123;x, y&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> left = getPath(x, path[x][y]);</span><br><span class="line">	<span class="keyword">auto</span> now = getPath(path[x][y], y);</span><br><span class="line">	left.insert(left.<span class="built_in">end</span>(), now.<span class="built_in">begin</span>(), now.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Floyd 算法其它用途：</p>
<ul>
<li>找最小环（至少三个节点）考虑环上最大节点 $u$，$f[u - 1][x][y]$ 和 $(y, u), (u, x)$ 构成最小环（值小于 INF 才是真的有环）</li>
<li>传递闭包：跟最短路完全类似，只是这里加法改成 或运算，可用 bitset 优化成 $O(\frac{n^3}{w})$，其中 $w = 32, 64$。<h3 id="堆优化-Dijkstra"><a href="#堆优化-Dijkstra" class="headerlink" title="堆优化 Dijkstra"></a>堆优化 Dijkstra</h3></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">const</span> edge &amp;e)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;LL, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">d</span><span class="params">(e.<span class="built_in">size</span>(), INT64_MAX)</span></span>;</span><br><span class="line">	d[s] = <span class="number">0</span>;</span><br><span class="line">	Q.push(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [du, u] = Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">if</span> (d[u] != -du) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) <span class="keyword">if</span> (d[v] &gt; d[u] + w) &#123;</span><br><span class="line">			d[v] = d[u] + w;</span><br><span class="line">			Q.emplace(-d[v], v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆优化-Dijkstra-弃用"><a href="#堆优化-Dijkstra-弃用" class="headerlink" title="堆优化 Dijkstra (弃用)"></a>堆优化 Dijkstra (弃用)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">const</span> edge &amp;e)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;LL, <span class="keyword">int</span>&gt;&gt; h;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">dist</span><span class="params">(e.<span class="built_in">size</span>(), INT64_MAX)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vis</span><span class="params">(e.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">	dist[s] = <span class="number">0</span>;</span><br><span class="line">	h.push(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">	<span class="keyword">while</span> (!h.empty()) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [d, u] = h.top();</span><br><span class="line">		h.pop();</span><br><span class="line">		<span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">		vis[u] = <span class="number">1</span>;</span><br><span class="line">		dist[u] = -d;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : e[u]) h.emplace(d - w, v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BellmanFord</span><span class="params">(edge &amp;e, <span class="keyword">int</span> n, <span class="keyword">int</span> x = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dist</span><span class="params">(n + <span class="number">1</span>, INT_MAX)</span></span>;</span><br><span class="line">	dist[x] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> judge = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [u, v, w] : e) <span class="keyword">if</span> (dist[u] != INT_MAX) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">				dist[v] = dist[u] + w;</span><br><span class="line">				judge = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!judge) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> edge = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(edge &amp;e, <span class="keyword">int</span> x = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	std::vector&lt;int&gt; dist(n, INT_MAX), cnt(n), inQ(n);</span><br><span class="line">	Q.push(x);</span><br><span class="line">	inQ[x] = <span class="number">1</span>;</span><br><span class="line">	dist[x] = <span class="number">0</span>;</span><br><span class="line">	++cnt[x];</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		inQ[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [v, w]: e[u]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dist[v] &gt; dist[u] + w) &#123;</span><br><span class="line">				dist[v] = dist[u] + w;</span><br><span class="line">				<span class="keyword">if</span> (!inQ[v]) &#123;</span><br><span class="line">					Q.push(v);</span><br><span class="line">					inQ[v] = <span class="number">1</span>;</span><br><span class="line">					<span class="keyword">if</span> (++cnt[v] == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="无向图染色问题"><a href="#无向图染色问题" class="headerlink" title="无向图染色问题"></a>无向图染色问题</h2><h3 id="2-color"><a href="#2-color" class="headerlink" title="2-color"></a>2-color</h3><blockquote>
<p>仅用两种颜色给无向图染色，使得相邻节点不同色，每个连通块考虑即可，每个连通块要么是 2，要么是 0（判断依据有无奇圈）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="comment">// 图以 0 开始编号</span></span><br><span class="line"><span class="function">LL <span class="title">color2</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">val</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> bfs = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		Q.push(x);</span><br><span class="line">		val[x] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (val[v]) &#123;</span><br><span class="line">					<span class="keyword">if</span> (val[v] != -val[u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					val[v] = -val[u];</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (val[i] == <span class="number">0</span>) &#123;</span><br><span class="line">		r = r * bfs(i) % M;</span><br><span class="line">		<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="The-Chromatic-Polynomial"><a href="#The-Chromatic-Polynomial" class="headerlink" title="The Chromatic Polynomial"></a><a href="https://www.whitman.edu/mathematics/cgt_online/book/section05.09.html" target="_blank" rel="noopener">The Chromatic Polynomial</a></h3><blockquote>
<p>对于一般的 $n$-color 问题对应的 <a href="https://www.whitman.edu/mathematics/cgt_online/book/section05.09.html" target="_blank" rel="noopener">The Chromatic Polynomial</a> 可在书 <a href="https://www.whitman.edu/mathematics/cgt_online/book/" target="_blank" rel="noopener">Combinatorics and Graph Theory</a> 中找到。思想就是破圈和缩点的做法。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> BINT = boost::multiprecision::cpp_int;</span><br><span class="line"></span><br><span class="line"><span class="comment">// chromaticPoly of a tree with n node</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; <span class="title">chromaticPoly</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; <span class="title">r</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	BINT now&#123;n % <span class="number">2</span> == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		r[i + <span class="number">1</span>] = now;</span><br><span class="line">		now = -now * (n - <span class="number">1</span> - i) / (i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; <span class="title">colorConnect</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	std::vector&lt;bool&gt; v1(n), v2(n);</span><br><span class="line">	<span class="keyword">auto</span> r = chromaticPoly(n); <span class="comment">// 可以先预处理出来</span></span><br><span class="line">	<span class="keyword">auto</span> subtract = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; &amp;a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; b) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != b.<span class="built_in">size</span>(); ++i) a[i] -= b[i];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	Q.push(<span class="number">0</span>);</span><br><span class="line">	v1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">auto</span> enow = e;</span><br><span class="line">	<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">		<span class="keyword">int</span> u = Q.front();</span><br><span class="line">		v2[u] = <span class="number">1</span>;</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (!v2[v]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (v1[v]) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; ed;</span><br><span class="line">				<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, now = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">					<span class="keyword">if</span> (i != u &amp;&amp; i != v) &#123;</span><br><span class="line">						p[i] = now++;</span><br><span class="line">					&#125; <span class="keyword">else</span> p[i] = n - <span class="number">2</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (i != u &amp;&amp; i != v) &#123;</span><br><span class="line">					<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">auto</span> x : enow[i]) tmp.insert(p[x]);</span><br><span class="line">					ed.emplace_back(tmp);</span><br><span class="line">				&#125;</span><br><span class="line">				enow[u].erase(v);</span><br><span class="line">				enow[v].erase(u);</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> x : enow[u]) tmp.insert(p[x]);</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> x : enow[v]) tmp.insert(p[x]);</span><br><span class="line">				ed.emplace_back(tmp);</span><br><span class="line">				subtract(r, colorConnect(ed));</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				Q.push(v);</span><br><span class="line">				v1[v] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		e = enow;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; <span class="title">color</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">vis</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> <span class="built_in">connect</span> = [&amp;](<span class="keyword">int</span> x) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; visc(n);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		Q.push(x);</span><br><span class="line">		visc[x] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (!visc[v]) &#123;</span><br><span class="line">				visc[v] = <span class="number">1</span>;</span><br><span class="line">				Q.push(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, now = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (visc[i]) &#123;</span><br><span class="line">			p[i] = now++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; ec;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (visc[i]) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : e[i]) tmp.insert(p[x]);</span><br><span class="line">			ec.emplace_back(tmp);</span><br><span class="line">			vis[i] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ec;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> mul = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; &amp;a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; b) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; c(a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != b.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">				c[i + j] += a[i] * b[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;BINT&gt; <span class="title">r</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">		r = mul(r, colorConnect(<span class="built_in">connect</span>(i)));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">			<span class="keyword">int</span> u, v;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">			--u; --v;</span><br><span class="line">			e[u].insert(v);</span><br><span class="line">			e[v].insert(u);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : color(e)) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连通性问题"><a href="#连通性问题" class="headerlink" title="连通性问题"></a>连通性问题</h2><h3 id="Kosaraju-算法缩点"><a href="#Kosaraju-算法缩点" class="headerlink" title="Kosaraju 算法缩点"></a>Kosaraju 算法缩点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Scc</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, nScc;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis, color, order;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; e, e2;</span><br><span class="line">	Scc(<span class="keyword">int</span> _n) : n(_n * <span class="number">2</span>) &#123;</span><br><span class="line">		nScc = <span class="number">0</span>;</span><br><span class="line">		e.resize(n);</span><br><span class="line">		e2.resize(n);</span><br><span class="line">		vis.resize(n);</span><br><span class="line">		color.resize(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e2[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (!vis[v]) dfs(v);</span><br><span class="line">		order.emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		color[u] = nScc;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e2[u]) <span class="keyword">if</span> (!color[v]) dfs2(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!vis[i]) dfs(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = order.rbegin(); it != order.rend(); ++it) <span class="keyword">if</span> (!color[*it]) &#123;</span><br><span class="line">			++nScc;</span><br><span class="line">			dfs2(*it);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h3><p>Kosaraju 算法通过两次 dfs，给强连通分量进行染色，染色数就是强联通分量数，最后缩点后得到的就是一个有向无环图(DAG)，如果有相邻（仅取一个）节点在同一个强连通分量中，那么显然不存在解，否则我们取颜色编号大的连通分量（一定有解！）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// n / 2 对 (2i, 2i + 1)，每对选出一个元素，使得无矛盾</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">twoSAT</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, nScc;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis, color, order;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; e, e2;</span><br><span class="line">	twoSAT(<span class="keyword">int</span> _n) : n(_n * <span class="number">2</span>) &#123;</span><br><span class="line">		nScc = <span class="number">0</span>;</span><br><span class="line">		e.resize(n);</span><br><span class="line">		e2.resize(n);</span><br><span class="line">		vis.resize(n);</span><br><span class="line">		color.resize(n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e2[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		vis[u] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (!vis[v]) dfs(v);</span><br><span class="line">		order.emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">		color[u] = nScc;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e2[u]) <span class="keyword">if</span> (!color[v]) dfs2(v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Kosaraju</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!vis[i]) dfs(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> it = order.rbegin(); it != order.rend(); ++it) <span class="keyword">if</span> (!color[*it]) &#123;</span><br><span class="line">			++nScc;</span><br><span class="line">			dfs2(*it);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Kosaraju();</span><br><span class="line">		<span class="comment">// 选择颜色编号大的强连通分量</span></span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">choose</span><span class="params">(nScc + <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> c1 = color[i], c2 = color[i + <span class="number">1</span>];</span><br><span class="line">			<span class="keyword">if</span> (c1 == c2) <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">			<span class="keyword">if</span> (choose[c1] || choose[c2]) <span class="keyword">continue</span>;</span><br><span class="line">			choose[<span class="built_in">std</span>::<span class="built_in">max</span>(c1, c2)] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n / <span class="number">2</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i * <span class="number">2</span> &lt; n; ++i) r[i] = (choose[color[i * <span class="number">2</span>]] ? <span class="number">1</span> : <span class="number">-1</span>); </span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>此内容包含 <a href="https://oi-wiki.org/graph/scc/" target="_blank" rel="noopener">强连通分量</a>，采用其中的 Kosaraju 算法缩点。参考 <a href="https://oi-wiki.org/graph/2-sat/" target="_blank" rel="noopener">OI-wiki</a> 和 <a href="https://wenku.baidu.com/view/31fd7200bed5b9f3f90f1ce2.html" target="_blank" rel="noopener">百度文库</a>。<a href="https://codeforces.com/contest/1239/problem/D" target="_blank" rel="noopener">例题 1</a>：<a href="https://codeforces.com/contest/1239/submission/98425115" target="_blank" rel="noopener">答案</a>，<a href="https://codeforces.com/gym/101987" target="_blank" rel="noopener">例题 2: K-TV Show Game</a>：<a href="https://codeforces.com/gym/101987/submission/98427737" target="_blank" rel="noopener">答案</a>，有些特殊的 2-SAT 可以用奇偶性解决，例如: <a href="https://codeforces.com/contest/1438/problem/C" target="_blank" rel="noopener">1438C</a></p>
</blockquote>
<p><a href="https://oi-wiki.org/graph/cut/" target="_blank" rel="noopener">OI-wiki 割点割边讲解</a></p>
<h3 id="割点（无向图中删除该点使得连通分量数量增多的节点）"><a href="#割点（无向图中删除该点使得连通分量数量增多的节点）" class="headerlink" title="割点（无向图中删除该点使得连通分量数量增多的节点）"></a>割点（无向图中删除该点使得连通分量数量增多的节点）</h3><p>首先 dfs 序给出每个节点的编号记作 <code>dfs[i]</code>，再来一个数组 low，表示不经过父节点能够到达的编号最小的点。显然如果至少有一个儿子满足的 low 值不超过它的 dfs 值，那么此节点就是割点（但是根节点除外，根节点始终满足，如果根节点有大于一个真儿子，那么必然是割点）。不难看出这是割点的冲要条件，因此问题就转化成求 dfs 和 low 了。</p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P3388" target="_blank" rel="noopener">LOJ3388</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cutVertex</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; e)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = e.<span class="built_in">size</span>(), cnt = <span class="number">0</span>;</span><br><span class="line">	std::vector&lt;int&gt; dfs(n), low(n), flag(n), r;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; Tarjan = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		low[u] = dfs[u] = ++cnt;</span><br><span class="line">		<span class="keyword">int</span> ch = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) &#123;</span><br><span class="line">			<span class="keyword">if</span> (dfs[v] == <span class="number">0</span>) &#123;</span><br><span class="line">				++ch;</span><br><span class="line">				Tarjan(v, u);</span><br><span class="line">				low[u] = <span class="built_in">std</span>::<span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">				<span class="keyword">if</span> (u != fa &amp;&amp; low[v] &gt;= dfs[u]) flag[u] = <span class="number">1</span>; </span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">				low[u] = <span class="built_in">std</span>::<span class="built_in">min</span>(low[u], dfs[v]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (u == fa &amp;&amp; ch &gt; <span class="number">1</span>) flag[u] = <span class="number">1</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (dfs[i] == <span class="number">0</span>) Tarjan(i, i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (flag[i]) r.emplace_back(i);</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="割边（无向图中删除该边使得连通分量数量增多的边）"><a href="#割边（无向图中删除该边使得连通分量数量增多的边）" class="headerlink" title="割边（无向图中删除该边使得连通分量数量增多的边）"></a>割边（无向图中删除该边使得连通分量数量增多的边）</h3><p>与割点处理同理，只是不用特判根节点。注意到做一次 dfs 后，—<strong>不在 dfs 路径上的边不可能为割边</strong>！但是为了处理重边的情况，没办法只能用 vector 版链式前向星存边了。</p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/T103481" target="_blank" rel="noopener">LOJ T103481</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CutEdge</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, cnt;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e, flag, dfs, low;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> inEdgeNum)</span> </span>&#123;</span><br><span class="line">		low[u] = dfs[u] = ++cnt;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = e[i];</span><br><span class="line">			<span class="keyword">if</span> (dfs[v] == <span class="number">0</span>) &#123;</span><br><span class="line">				Tarjan(v, i);</span><br><span class="line">				low[u] = <span class="built_in">std</span>::<span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">				<span class="keyword">if</span> (low[v] &gt; dfs[u]) flag[i] = flag[i ^ <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((i ^ <span class="number">1</span>) != inEdgeNum) &#123;</span><br><span class="line">				low[u] = <span class="built_in">std</span>::<span class="built_in">min</span>(low[u], dfs[v]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	CutEdge(<span class="keyword">int</span> _n) : n(_n), g(_n), dfs(n), low(n), cnt(<span class="number">0</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v);</span><br><span class="line">		flag.emplace_back(<span class="number">0</span>);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u);</span><br><span class="line">		flag.emplace_back(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (dfs[i] == <span class="number">0</span>) Tarjan(i, <span class="number">-1</span>);</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : flag) r += x;</span><br><span class="line">		<span class="keyword">return</span> r / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="图的匹配算法"><a href="#图的匹配算法" class="headerlink" title="图的匹配算法"></a><a href="https://oi-wiki.org/topic/graph-matching/graph-match/" target="_blank" rel="noopener">图的匹配算法</a></h2><p>OI-wiki 上有专题专门讲这个的，分最大匹配和最大权匹配，对于特殊的图（例如二分图）有<a href="https://oi-wiki.org/topic/graph-matching/bigraph-match/" target="_blank" rel="noopener">特殊的算法</a>，例如可以增加源点和汇点转化成网络流问题，用下面 Dinic 算法在 $O(\sqrt{n} m)$ 解决。</p>
<blockquote>
<p>其中一般图的最大匹配可以参考 <a href="https://uoj.ac/submission/221981" target="_blank" rel="noopener">Min_25 的模板</a></p>
</blockquote>
<h2 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h2><h3 id="有向图-S-T-最大流-Dinic-算法-O-n-2-m-（对偶问题：S-T-最大流等于-S-T-最小割）"><a href="#有向图-S-T-最大流-Dinic-算法-O-n-2-m-（对偶问题：S-T-最大流等于-S-T-最小割）" class="headerlink" title="有向图 S-T 最大流 Dinic 算法 $O(n^2 m)$（对偶问题：S-T 最大流等于 S-T 最小割）"></a>有向图 S-T 最大流 Dinic 算法 $O(n^2 m)$（对偶问题：S-T 最大流等于 S-T 最小割）</h3><p>参考资料：<a href="https://oi-wiki.org/graph/flow/max-flow/" target="_blank" rel="noopener">OI-wiki</a> 和 <a href="https://www.cnblogs.com/owenyu/p/6852664.html" target="_blank" rel="noopener">最大流算法-ISAP</a>，<a href="https://blog.csdn.net/lym940928/article/details/90209172?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">需要反向边的原因的例子说明</a>，下面代码借鉴于 jiangly。注意代码本质上是支持动态更新的</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur, h;</span><br><span class="line">	<span class="comment">// h[i] 表示 bfs 从 s 到 i 的距离，如果找到了 t，那么就说明找到了增广路。</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		h.assign(n, <span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		h[s] = <span class="number">0</span>;</span><br><span class="line">		Q.push(s);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> h[t] != <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// f 表示从 u 点出发拥有的最大流量，输出的是 u 到 t 的最大流量</span></span><br><span class="line">	<span class="function">LL <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, LL f)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == t || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">		LL r = f;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u]; i &lt; g[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = g[u][i];</span><br><span class="line">			<span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">			<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> a = dfs(v, t, <span class="built_in">std</span>::<span class="built_in">min</span>(r, LL(c)));</span><br><span class="line">				e[j].second -= a;</span><br><span class="line">				e[j ^ <span class="number">1</span>].second += a;</span><br><span class="line">				r -= a;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f - r;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Dinic(<span class="keyword">int</span> _n) : n(_n), g(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">			cur.assign(n, <span class="number">0</span>);</span><br><span class="line">			r += dfs(s, t, INT64_MAX);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="使用-unordered-map-直接存边的-Dinic-算法（注意结果是否超-int）"><a href="#使用-unordered-map-直接存边的-Dinic-算法（注意结果是否超-int）" class="headerlink" title="使用 unordered_map 直接存边的 Dinic 算法（注意结果是否超 int）"></a>使用 unordered_map 直接存边的 Dinic 算法（注意结果是否超 int）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator&gt; cur;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h;</span><br><span class="line">	<span class="comment">// h[i] 表示 bfs 从 s 到 i 的距离，如果找到了 t，那么就说明找到了增广路。</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		h.assign(n, <span class="number">-1</span>);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		h[s] = <span class="number">0</span>;</span><br><span class="line">		Q.push(s);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [v, c] : g[u]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">					h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> h[t] != <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// f 表示从 u 点出发拥有的最大流量，输出的是 u 到 t 的最大流量</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == t || f == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">		<span class="keyword">int</span> r = f;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;it = cur[u]; it != g[u].<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">			<span class="keyword">int</span> v = it-&gt;first;</span><br><span class="line">			<span class="keyword">if</span> (it-&gt;second &gt; <span class="number">0</span> &amp;&amp; h[v] == h[u] + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> a = dfs(v, t, <span class="built_in">std</span>::<span class="built_in">min</span>(r, it-&gt;second));</span><br><span class="line">				it-&gt;second -= a;</span><br><span class="line">				g[v][u] += a;</span><br><span class="line">				r -= a;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> f - r;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Dinic(<span class="keyword">int</span> _n) : n(_n), g(n), cur(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// 注意这里一定要这样！</span></span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u][v] += c; </span><br><span class="line">		g[v][u] += <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cur[i] = g[i].<span class="built_in">begin</span>();</span><br><span class="line">			r += dfs(s, t, INT_MAX);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="有向图-S-T-最大流-ISAP-算法-弃用"><a href="#有向图-S-T-最大流-ISAP-算法-弃用" class="headerlink" title="有向图 S-T 最大流 ISAP 算法 (弃用)"></a>有向图 S-T 最大流 ISAP 算法 (弃用)</h3><p>核心就是一句话，Dinic 算法中，每一轮需要进行一次 BFS，可以被优化，并且还有许多细节上的优化。</p>
<blockquote>
<p>折腾了半天发现并没有比 Dinic 快，本质原因是计算 dfs 完之后更新 <code>d</code>，按照上面的做法会极大的增加 <code>aug(s, INT_MAX)</code> 次数。但是确实比 <a href="https://codeforces.com/contest/1473/submission/104862713" target="_blank" rel="noopener">直接更新 d</a> 更快（可能时因为直接更新高度代码会写的很绕，因为可能变换的高度不止自己一个，父节点的高度也可能要更新），而在下面 HLPP 中用这这技巧又会特别慢，可惜~</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结合 https://www.cnblogs.com/owenyu/p/6852664.html 在实现上进行了相应的修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ISAP</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n, s, t;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="comment">// cur[u] 表示以 u 为起点当前没被增广过的边</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cur, d, gap;</span><br><span class="line">	<span class="comment">// d[u] 表示残余网络中 从 u 到 t 的最短距离，注意到可以把 d[u] 理解成连续变化的（否则很难正确的更新 d)。</span></span><br><span class="line">	<span class="comment">// gap[x] 表示 d[u] = x 的节点个数, 用于优化</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> _s, <span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">		s = _s;</span><br><span class="line">		t = <span class="keyword">_t</span>;</span><br><span class="line">		d.assign(n, n);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		d[t] = <span class="number">0</span>;</span><br><span class="line">		Q.push(t); </span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">int</span> v = e[i].first, c = e[i ^ <span class="number">1</span>].second;</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; d[v] == n) &#123;</span><br><span class="line">					d[v] = d[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		gap.assign(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : d) ++gap[x];</span><br><span class="line">		cur.assign(n, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 从 u 开始到汇点 t 不超过 f 的最大流，如果取到了 f 说明后面还有增广的可能</span></span><br><span class="line">	<span class="function">LL <span class="title">aug</span><span class="params">(<span class="keyword">int</span> u, LL f)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == t) <span class="keyword">return</span> f;</span><br><span class="line">		LL r = f;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> &amp;i = cur[u]; i &lt; <span class="keyword">int</span>(g[u].<span class="built_in">size</span>()); ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> j = g[u][i];</span><br><span class="line">			<span class="keyword">auto</span> [v, c] = e[j];</span><br><span class="line">			<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; d[u] == d[v] + <span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">int</span> a = aug(v, <span class="built_in">std</span>::<span class="built_in">min</span>(r, LL(c)));</span><br><span class="line">				e[j].second -= a;</span><br><span class="line">				e[j ^ <span class="number">1</span>].second += a;</span><br><span class="line">				r -= a;</span><br><span class="line">				<span class="keyword">if</span> (r == <span class="number">0</span>) <span class="keyword">return</span> f;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cur[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (--gap[d[u]] == <span class="number">0</span>) d[s] = n;</span><br><span class="line">		++gap[++d[u]];</span><br><span class="line">		<span class="keyword">return</span> f - r;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	ISAP(<span class="keyword">int</span> _n) : n(_n), g(_n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> _s, <span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123;</span><br><span class="line">		init(_s, <span class="keyword">_t</span>);</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (d[s] &lt; n) r += aug(s, INT64_MAX);</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="有向图-S-T-最大流的最高标号预流推进算法（HLPP）-O-n-2-sqrt-m-算法"><a href="#有向图-S-T-最大流的最高标号预流推进算法（HLPP）-O-n-2-sqrt-m-算法" class="headerlink" title="有向图 S-T 最大流的最高标号预流推进算法（HLPP） $O(n^2 \sqrt{m})$ 算法"></a>有向图 S-T 最大流的最高标号预流推进算法（HLPP） $O(n^2 \sqrt{m})$ 算法</h3><p>1988 年 <a href="https://www.cs.princeton.edu/courses/archive/fall07/cos521/handouts/p921-goldberg.pdf" target="_blank" rel="noopener">Tarjan, Goldberg</a> 提出次方法，1989 年 <a href="https://www.sciencedirect.com/science/article/pii/S0020019099000198" target="_blank" rel="noopener">Joseph Cheriyan, Kurt Mehlhorn</a> 证明了该方法时间复杂度为 $O(n^2 \sqrt{m})$，直接看 <a href="https://oi-wiki.org/graph/flow/max-flow/" target="_blank" rel="noopener">OI-wiki</a> 最后一张图（下载下来放大）还是很好理解的，Push-Relabel 那段没讲清楚，跳过的看就行，再结合 <a href="(https://www.cnblogs.com/owenyu/p/6858123.html">cnblog</a>) 理解一下优化（不要看代码）就掌握了。然后自己写代码即可。</p>
<p>个人理解其实此算法 ISAP 的优化，Dinic 和 ISAP 都要递归找可行流，但是此算法，先给了再说，多了的再取出来即可，这样不用递归了。</p>
<p>模板例题：<a href="https://vjudge.net/problem/LibreOJ-127" target="_blank" rel="noopener">LibreOJ-127</a>，跑的太慢，有待提升。</p>
<p>注意到每次推流的时候，当前节点时有水的（且高度小于 n 的，高度为 n 说明水是积水）里面高度最高的，因此更新高度的时候就不会出现问题！</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HLPP</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; ex;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addFlow</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">		ex[e[i ^ <span class="number">1</span>].first] -= a;</span><br><span class="line">		ex[e[i].first] += a;</span><br><span class="line">		e[i].second -= a;</span><br><span class="line">		e[i ^ <span class="number">1</span>].second += a;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 首先初始化 u 到 t 的距离得到 d[u]</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">		Q.push(t);</span><br><span class="line">		h[t] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = Q.front();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">int</span> v = e[i].first;</span><br><span class="line">				<span class="keyword">if</span> (e[i ^ <span class="number">1</span>].second &gt; <span class="number">0</span> &amp;&amp; h[v] == n) &#123;</span><br><span class="line">					h[v] = h[u] + <span class="number">1</span>;</span><br><span class="line">					Q.push(v);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> h[t] == n;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	HLPP(<span class="keyword">int</span> _n) : n(_n), ex(n), h(n, n), g(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">maxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (init(s, t)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		std::vector&lt;int&gt; gap(n + 1, 0), vis(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : h) ++gap[x];</span><br><span class="line">		<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line">		<span class="comment">// push 之后 ex[u] 还大于 0 就说明当前超载了，需要提升高度</span></span><br><span class="line">		<span class="keyword">auto</span> push = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (ex[u] == <span class="number">0</span> || h[u] == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">				<span class="comment">// 注意 push(s) 的时候不用管高度的问题</span></span><br><span class="line">				<span class="keyword">if</span> (c == <span class="number">0</span> || (h[u] != h[v] + <span class="number">1</span> &amp;&amp; u != s)) <span class="keyword">continue</span>;</span><br><span class="line">				<span class="keyword">int</span> a = <span class="built_in">std</span>::<span class="built_in">min</span>(ex[u], LL(c));</span><br><span class="line">				addFlow(i, a);</span><br><span class="line">				<span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">					pq.push(&#123;h[v], v&#125;);</span><br><span class="line">					vis[v] = <span class="number">1</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (ex[u] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">		ex[s] = INT64_MAX;</span><br><span class="line">		push(s);</span><br><span class="line">		h[s] = n;</span><br><span class="line">		vis[s] = vis[t] = <span class="number">1</span>; <span class="comment">// 起点和终点不会丢进队列中</span></span><br><span class="line">		<span class="keyword">while</span> (!pq.empty()) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = pq.top().second;</span><br><span class="line">			pq.pop();</span><br><span class="line">			vis[u] = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (push(u)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (--gap[h[u]] == <span class="number">0</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (h[i] &gt; h[u]) h[i] = n;</span><br><span class="line">				&#125;</span><br><span class="line">				h[u] = n - <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">					<span class="keyword">auto</span> [v, c] = e[i];</span><br><span class="line">					<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; h[u] &gt; h[v]) h[u] = h[v];</span><br><span class="line">				&#125;</span><br><span class="line">				++gap[++h[u]];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ex[t];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="无向图全局最小割-Stoer-Wagner-算法"><a href="#无向图全局最小割-Stoer-Wagner-算法" class="headerlink" title="无向图全局最小割 Stoer-Wagner 算法"></a><a href="https://www.cs.dartmouth.edu/~ac/Teach/CS105-Winter05/Handouts/stoerwagner-mincut.pdf" target="_blank" rel="noopener">无向图全局最小割 Stoer-Wagner 算法</a></h3><p>无向图的 S-T 最小割可以通过 S-T 最大流来做（在 addEdge(u, v, c) 中两个边的权值都是 c 即可！）。<br>对任意给定的 S 和 T，全局最小割必然是 S-T 最小割或者 S-T 结合成一个节点后得到新图的最小割。Stoer-Wagner 的论文给了一种简单的方式给出某两个点的 S-T 最小割的办法，那么这个最小割的答案存下来，之后再合并这两个点再继续搞即可。而这个方式叫做 cut-of-the-phase，具体说就是，任取一个点，然后每次往这个点中丢 most tightly connected 点，论文中证明了这种方式得到的图，每一步都是最后两个节点的当前图最小割，所以所有点丢进来之后，最后两个节点的割就是原图的这个两个点的最小割。（直接图原论文很好理解，而且有例子说明）</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P5632" target="_blank" rel="noopener">LOJ5632</a></p>
<h3 id="无向图全局最小割-Stoer-Wagner-算法，邻接矩阵-O-n-3-实现"><a href="#无向图全局最小割-Stoer-Wagner-算法，邻接矩阵-O-n-3-实现" class="headerlink" title="无向图全局最小割 Stoer-Wagner 算法，邻接矩阵 $O(n^3)$ 实现"></a>无向图全局最小割 Stoer-Wagner 算法，邻接矩阵 $O(n^3)$ 实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 做完 minCut 之后原图就毁了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoerWagner</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; del;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		del[s] = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			g[i][t] = (g[t][i] += g[s][i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	StoerWagner(<span class="keyword">int</span> _n) : n(_n), del(n), g(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n)) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u][v] += c;</span><br><span class="line">		g[v][u] += c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">minCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> cnt, <span class="keyword">int</span> &amp;s, <span class="keyword">int</span> &amp;t) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vis(n), d(n);</span><br><span class="line">			<span class="keyword">auto</span> push = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">				vis[x] = <span class="number">1</span>;</span><br><span class="line">				d[x] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!del[i] &amp;&amp; !vis[i]) d[i] += g[x][i];</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; ++i) &#123;</span><br><span class="line">				push(t);</span><br><span class="line">				s = t;</span><br><span class="line">				t = <span class="built_in">std</span>::max_element(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>()) - d.<span class="built_in">begin</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> d[t];</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">0</span>, t = <span class="number">0</span>, r = INT_MAX;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">			r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, f(i, s, t));</span><br><span class="line">			merge(s, t);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r == INT_MAX ? <span class="number">0</span> : r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="无向图全局最小割-Stoer-Wagner-算法，邻接-unorded-map-优先队列-O-nm-n-2-log-n-实现（仅稀疏图跑的快-稠密图还不如-O-n-3-的算法）"><a href="#无向图全局最小割-Stoer-Wagner-算法，邻接-unorded-map-优先队列-O-nm-n-2-log-n-实现（仅稀疏图跑的快-稠密图还不如-O-n-3-的算法）" class="headerlink" title="无向图全局最小割 Stoer-Wagner 算法，邻接 unorded_map + 优先队列 $O(nm + n^2 log n)$ 实现（仅稀疏图跑的快, 稠密图还不如 $O(n^3)$ 的算法）"></a>无向图全局最小割 Stoer-Wagner 算法，邻接 unorded_map + 优先队列 $O(nm + n^2 log n)$ 实现（仅稀疏图跑的快, 稠密图还不如 $O(n^3)$ 的算法）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 做完 minCut 之后原图就毁了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoerWagner</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d, del;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> &amp;s, <span class="keyword">int</span> &amp;t)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (g[s].<span class="built_in">size</span>() &gt; g[t].<span class="built_in">size</span>()) <span class="built_in">std</span>::swap(s, t);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [x, c] : g[s]) &#123;</span><br><span class="line">			g[x][t] = (g[t][x] += c);</span><br><span class="line">			g[x].erase(s);</span><br><span class="line">		&#125;</span><br><span class="line">		g.erase(s);</span><br><span class="line">		g[t].erase(t);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	StoerWagner(<span class="keyword">int</span> _n) : n(_n), d(n), del(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u][v] += c;</span><br><span class="line">		g[v][u] += c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">minCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">auto</span> f = [&amp;](<span class="keyword">int</span> &amp;s, <span class="keyword">int</span> &amp;t) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">			<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">fill</span>(d.<span class="built_in">begin</span>(), d.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">fill</span>(del.<span class="built_in">begin</span>(), del.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">auto</span> push = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">auto</span> [i, c] : g[x]) <span class="keyword">if</span> (!del[i]) &#123;</span><br><span class="line">					Q.push(&#123;d[i] += c, i&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">				del[x] = <span class="number">1</span>;</span><br><span class="line">			&#125;;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">				push(t);</span><br><span class="line">				s = t;</span><br><span class="line">				<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">					t = Q.top().second;</span><br><span class="line">					<span class="keyword">if</span> (!del[t]) <span class="keyword">break</span>;</span><br><span class="line">					Q.pop();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> d[t];</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> s = <span class="number">0</span>, t = <span class="number">0</span>, r = INT_MAX;</span><br><span class="line">		<span class="keyword">while</span>(--n) &#123;</span><br><span class="line">			r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, f(s, t));</span><br><span class="line">			merge(s, t);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r == INT_MAX ? <span class="number">0</span> : r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="无向图全局最小割-Stoer-Wagner-算法，邻接表-优先队列-O-nm-n-2-log-n-实现（仅稀疏图跑的快-稠密图还不如-O-n-3-的算法还是-TLE-属实可惜）"><a href="#无向图全局最小割-Stoer-Wagner-算法，邻接表-优先队列-O-nm-n-2-log-n-实现（仅稀疏图跑的快-稠密图还不如-O-n-3-的算法还是-TLE-属实可惜）" class="headerlink" title="无向图全局最小割 Stoer-Wagner 算法，邻接表 + 优先队列 $O(nm + n^2 log n)$ 实现（仅稀疏图跑的快, 稠密图还不如 $O(n^3)$ 的算法还是 TLE 属实可惜）"></a>无向图全局最小割 Stoer-Wagner 算法，邻接表 + 优先队列 $O(nm + n^2 log n)$ 实现（仅稀疏图跑的快, 稠密图还不如 $O(n^3)$ 的算法还是 TLE 属实可惜）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Edge = <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="function">LL <span class="title">StoerWagner</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Edge&gt; e, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> f = [&amp;]() -&gt; <span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; &#123;</span><br><span class="line">		<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">		std::vector&lt;std::vector&lt;std::pair&lt;int, int&gt;&gt;&gt; in(n);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> [u, v, w] : e) <span class="keyword">if</span> (u != v) in[v].emplace_back(u, w);</span><br><span class="line">		std::vector&lt;int&gt; del(n), d(n);</span><br><span class="line">		<span class="keyword">auto</span> push = [&amp;](<span class="keyword">int</span> x)&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [i, c] : in[x]) <span class="keyword">if</span> (!del[i]) &#123;</span><br><span class="line">				Q.push(&#123;d[i] += c, i&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">			del[x] = <span class="number">1</span>;</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="keyword">int</span> s, t = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			push(t);</span><br><span class="line">			s = t;</span><br><span class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">				<span class="keyword">if</span> (Q.empty()) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (!del[i]) Q.push(&#123;d[i], i&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">				t = Q.top().second;</span><br><span class="line">				Q.pop();</span><br><span class="line">				<span class="keyword">if</span> (!del[t]) <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> &#123;d[t], s, t&#125;;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, t = <span class="number">0</span>, r = INT_MAX;</span><br><span class="line">	<span class="keyword">while</span>(n &gt; <span class="number">1</span> &amp;&amp; r &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [dt, s, t] = f();</span><br><span class="line">		r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, dt);</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">id</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (i != s &amp;&amp; i != t) id[i] = ++cnt;</span><br><span class="line">		id[s] = id[t] = ++cnt;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[u, v, w] : e) &#123;</span><br><span class="line">			u = id[u];</span><br><span class="line">			v = id[v];</span><br><span class="line">		&#125;</span><br><span class="line">		--n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r == INT_MAX ? <span class="number">0</span> : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最小费用最大流"><a href="#最小费用最大流" class="headerlink" title="最小费用最大流"></a>最小费用最大流</h3><p>在最大流的前提下，追求费用最小。一般通用的做法：每次找一条费用最小的可行流。<br>反向边的费用是原边的相反数，这样就会出现负边，但是因此初始反向边容量为 0，所以初始情况可以理解为图中没有负边。从源点到汇点的费用必然是非负的（因为我们每次走最小费用，所以每次的费用都是非降的，而初始没有负边。）当然这并不代表途中没有经过负边。至于为什么可以用 Dijkstra，很多博客都有介绍。下面代码中 h 为真实的距离，注意到 <code>h[s]</code>始终为 0，对于同一个点，每次的真实距离不减，它将作为下一次求最短路的势。这种思想也称为 Johnson 最短路径算法算法。可以 $O(n m \log m)$ 解决全源最短路问题。</p>
<p>我们这样再看一次：每次我们找一条最短路径，取流了之后，相当于给这条路径加了反向边，其它的都没有变化，如果我们把当前距离当作势，那么加的这些反向边，其实都可以看作加入了长度为 0 的边。那么我们一直这样搞，就相当于一直没有加入负边！搞定。</p>
<p>由于一般费用最小的路径只有一条，所以我们不妨在求最小费用的时候把前缀边找到，这样就可以直接求路径的最大流了。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flow</span> &#123;</span></span><br><span class="line">	<span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// e[i] 表示第 i 条边的终点和容量，注意存边的时候 e[i ^ 1] 是 e[i] 的反向边。</span></span><br><span class="line">	<span class="comment">// g[u] 存的是所有以 u 为起点的边，这就很像链式前向星的做法</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; e;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; h, path;</span><br><span class="line">	<span class="comment">// h[i] 表示 从 s 到 i 的距离，如果找到了 t，那么就说明找到了增广路，作为下一次求距离的势。</span></span><br><span class="line">	<span class="comment">// path[v] 表示从 s 到 v 的最短路中，path[v] 的终点指向 v</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">std</span>::priority_queue&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; Q;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">fill</span>(path.<span class="built_in">begin</span>(), path.<span class="built_in">end</span>(), <span class="number">-1</span>);</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">d</span><span class="params">(n, INF)</span></span>;</span><br><span class="line">		d[s] = <span class="number">0</span>;</span><br><span class="line">		Q.push(&#123;<span class="number">0</span>, s&#125;);</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">			<span class="keyword">auto</span> [du, u] = Q.top();</span><br><span class="line">			Q.pop();</span><br><span class="line">			<span class="keyword">if</span> (d[u] != -du) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : g[u]) &#123;</span><br><span class="line">				<span class="keyword">auto</span> [v, c, w] = e[i];</span><br><span class="line">				w += h[u] - h[v];</span><br><span class="line">				<span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; d[v] &gt; d[u] + w) &#123;</span><br><span class="line">					d[v] = d[u] + w;</span><br><span class="line">					path[v] = i;</span><br><span class="line">					Q.push(&#123;-d[v], v&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">if</span> ((h[i] += d[i]) &gt; INF) h[i] = INF;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> h[t] != INF;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Flow(<span class="keyword">int</span> _n) : n(_n), h(n), path(n), g(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line">		g[u].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(v, c, w);</span><br><span class="line">		g[v].emplace_back(e.<span class="built_in">size</span>());</span><br><span class="line">		e.emplace_back(u, <span class="number">0</span>, -w);</span><br><span class="line">	&#125;</span><br><span class="line">	std::pair&lt;LL, LL&gt; maxFlow(int s, int t) &#123;</span><br><span class="line">		LL flow = <span class="number">0</span>, cost = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (Dijkstra(s, t)) &#123;</span><br><span class="line">			<span class="keyword">int</span> f = INT_MAX, now = t;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">			<span class="keyword">while</span> (now != s) &#123;</span><br><span class="line">				r.emplace_back(path[now]);</span><br><span class="line">				f = <span class="built_in">std</span>::<span class="built_in">min</span>(f, <span class="built_in">std</span>::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(e[path[now]]));</span><br><span class="line">				now = <span class="built_in">std</span>::<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(e[path[now] ^ <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> i : r) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(e[i]) -= f;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(e[i ^ <span class="number">1</span>]) += f;</span><br><span class="line">			&#125;</span><br><span class="line">			flow += f;</span><br><span class="line">			cost += LL(f) * h[t];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> &#123;flow, cost&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="上下界网络流"><a href="#上下界网络流" class="headerlink" title="上下界网络流"></a><a href="https://zhuanlan.zhihu.com/p/324507636" target="_blank" rel="noopener">上下界网络流</a></h3><h4 id="无源汇上下界可行流"><a href="#无源汇上下界可行流" class="headerlink" title="无源汇上下界可行流"></a>无源汇上下界可行流</h4><p>首先每条边先满足下界，那么对应两个节点的入流都要改变，那么为了让每个节点平衡，我们可以起源点和汇点。比如入流多了，那我们可以把它从源点给它连这么多流的边，求最大流的时候，自然就会有出的跟他中和。</p>
<p>这样只需在差网络中求一下最大流得到的必然是可行流</p>
<h4 id="有源汇上下界可行流"><a href="#有源汇上下界可行流" class="headerlink" title="有源汇上下界可行流"></a>有源汇上下界可行流</h4><p>从汇点到源点建一个 下界为 0，上界无穷大的边，就变成了无源汇情形</p>
<h4 id="有源汇上下界最大流"><a href="#有源汇上下界最大流" class="headerlink" title="有源汇上下界最大流"></a>有源汇上下界最大流</h4><p>求完可行流之后，再根据原始的源汇求一次最大流即可。</p>
<h4 id="有源汇上下界最小流"><a href="#有源汇上下界最小流" class="headerlink" title="有源汇上下界最小流"></a>有源汇上下界最小流</h4><p>求完可行流之后，再根据原始的源汇（源汇互换）求一次最大流即可。</p>
<h4 id="（有-无）源汇上下界最小费流"><a href="#（有-无）源汇上下界最小费流" class="headerlink" title="（有/无）源汇上下界最小费流"></a>（有/无）源汇上下界最小费流</h4><p>附加边费用为 0，然后按照最小费用最大流跑一次就可以了。</p>
<h4 id="（有-无）源汇上下界最小费用最大流"><a href="#（有-无）源汇上下界最小费用最大流" class="headerlink" title="（有/无）源汇上下界最小费用最大流"></a>（有/无）源汇上下界最小费用最大流</h4><p>附加边费用为 0，然后按照最小费用最大流跑一次就可以了。然后再根据原始的源汇跑一次最大流即可。</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>线性规划的单纯形法</title>
    <url>/simplex/</url>
    <content><![CDATA[<p>在 Codeforces 有人问了我两个优化问题，一个是非线性规划（具体说是凸优化问题）。一般来说非线性规划没有什么具体的算法，但是凸优化，可以转化成凸包，然后转换成线段（如果是二维的）上的最值问题就搞定了。另一个是线性规划（所有线性规划其实也是特殊的凸优化），线性规划有著名的单纯形算法，7 年前就学过，但一直没写过代码。趁这次机会重新学习一下单纯形算法，并给出代码。参考教材：<a href="运筹学.pdf">运筹学 第三版 清华大学出版社</a>，另外 <a href="https://oi-wiki.org/math/simplex/" target="_blank" rel="noopener">OI-wiki</a> 上讲的简洁清晰但是不够全面。</p>
<h2 id="Gauss-消元法"><a href="#Gauss-消元法" class="headerlink" title="Gauss 消元法"></a>Gauss 消元法</h2><blockquote>
<p>之前一直不写这个模板的原因：可能无解，可能唯一解，可能无穷多个解，double 有判断，很烦。</p>
</blockquote>
<p>求解 $Ax = b$，如果无解就输出空向量，否则输出（某一个）答案向量，无穷解的话随便输出一个。</p>
<h3 id="浮点数版"><a href="#浮点数版" class="headerlink" title="浮点数版"></a>浮点数版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">Gauss</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; A, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = A[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line">	<span class="keyword">auto</span> findNonZero = [&amp;](<span class="keyword">int</span> i) &#123; <span class="comment">// 实际上找最大的比较好</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i; row &lt; n; ++row) <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[row][i]) &gt; eps) <span class="keyword">return</span> row;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> triangleGauss = [&amp;](<span class="keyword">int</span> sz) &#123; <span class="comment">// A[i][i] = 1</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; x(sz);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = sz - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">			x[i] = b[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; i; ++row) b[row] -= A[row][i] * x[i];</span><br><span class="line">		&#125;</span><br><span class="line">		x.resize(A[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> sz = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, row; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">			row = findNonZero(i);</span><br><span class="line">			<span class="keyword">if</span> (row != n) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) A[j][i] = A[j][m - <span class="number">1</span>];</span><br><span class="line">			<span class="built_in">std</span>::swap(p[i], p[--m]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = m; row &lt; n; ++row) <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[row])) &#123;</span><br><span class="line">				<span class="comment">// std::cout &lt;&lt; "\nNo answer\n";</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			sz = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (row != i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::swap(A[row], A[i]);</span><br><span class="line">			<span class="built_in">std</span>::swap(b[row], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		b[i] /= A[i][i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) A[i][j] /= A[i][i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i + <span class="number">1</span>; row &lt; n; ++row) &#123;</span><br><span class="line">			b[row] -= A[row][i] * b[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">				A[row][j] -= A[row][i] * A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// if (sz != A[0].size()) std::cout &lt;&lt; "\nInfinite answer\n";</span></span><br><span class="line">	<span class="keyword">auto</span> xt = triangleGauss(sz);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; A[<span class="number">0</span>].<span class="built_in">size</span>(); ++t) x[p[t]] = xt[t];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; <span class="title">a</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(m, <span class="number">0</span>))</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : x) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">auto</span> x = Gauss(a, b);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> t : x) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="有限域版"><a href="#有限域版" class="headerlink" title="有限域版"></a>有限域版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">Gauss</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&gt; A, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = A[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;LL(LL)&gt; inv = [&amp;](LL a) -&gt; LL &#123;</span><br><span class="line">		<span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">1</span> : (M - M / a) * inv(M % a) % M; </span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> sub = [](LL &amp;x, LL y) &#123;</span><br><span class="line">		(x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += M);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> triangleGauss = [&amp;](<span class="keyword">int</span> sz) &#123; <span class="comment">// A[i][i] = 1</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; x(sz);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = sz - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">			x[i] = (b[i] + M) % M;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; i; ++row) sub(b[row], A[row][i] * x[i] % M);</span><br><span class="line">		&#125;</span><br><span class="line">		x.resize(A[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> findNonZero = [&amp;](<span class="keyword">int</span> i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i; row &lt; n; ++row) <span class="keyword">if</span> (A[row][i]) <span class="keyword">return</span> row;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> sz = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, row; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">			row = findNonZero(i);</span><br><span class="line">			<span class="keyword">if</span> (row != n) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) A[j][i] = A[j][m - <span class="number">1</span>];</span><br><span class="line">			<span class="built_in">std</span>::swap(p[i], p[--m]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = m; row &lt; n; ++row) <span class="keyword">if</span> (b[row]) &#123;</span><br><span class="line">				<span class="comment">// std::cout &lt;&lt; "\nNo answer\n";</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			sz = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (row != i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::swap(A[i], A[row]);</span><br><span class="line">			<span class="built_in">std</span>::swap(b[i], b[row]);</span><br><span class="line">		&#125;</span><br><span class="line">		LL inva = inv(A[i][i]);</span><br><span class="line">		(b[i] *= inva) %= M;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) (A[i][j] *= inva) %= M;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i + <span class="number">1</span>; row &lt; n; ++row) &#123;</span><br><span class="line">			sub(b[row], A[row][i] * b[i] % M);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">				sub(A[row][j], A[row][i] * A[i][j] % M);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// if (sz != A[0].size()) std::cout &lt;&lt; "\nInfinite answer\n";</span></span><br><span class="line">	<span class="keyword">auto</span> xt = triangleGauss(sz);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; A[<span class="number">0</span>].<span class="built_in">size</span>(); ++t) x[p[t]] = xt[t];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> n, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&gt; <span class="title">a</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;(m, <span class="number">0</span>))</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : x) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">b</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">auto</span> x = Gauss(a, b);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> t : x) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上面做法是先化成上三角再求，其实也可以先直接化成对角的，两种都挺好，就不过不改了。</p>
</blockquote>
<h2 id="单纯形法"><a href="#单纯形法" class="headerlink" title="单纯形法"></a>单纯形法</h2><p>首先无论是什么样的线性规划问题，都先化成标准形式：$\max z = \sum c_i x_i$，其中 $Ax = b, x_i \geq 0$（这里输入的 $b$ 必然都是非负，否则显然无可行解），并且保证 $A$ 的左边是一个单位阵。简单的说通过 “大 M 法” 使得 ($b_1, \cdots, b_n, 0, \cdots, 0$) 是可以可行解。</p>
<ul>
<li>求极小值通过 $c$ 取负号解决</li>
<li>$\geq b$ 通过加一个变量变成等号</li>
<li>$\leq b$ 通过减一个变量变成等号</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> VD = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e10</span>;</span><br><span class="line"><span class="comment">// make sure that A = (I, A') and b &gt;= 0, compute max cx</span></span><br><span class="line"><span class="function">VD <span class="title">simplexCore</span><span class="params">(VD c, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; A, VD b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) A[i].emplace_back(b[i]);</span><br><span class="line">	c.emplace_back(<span class="number">0</span>);</span><br><span class="line">	A.emplace_back(c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			A[n][j] -= A[n][i] * A[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;]() -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt; m; ++j) <span class="keyword">if</span> (A[n][j] &gt; eps) &#123;</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (A[i][j] &gt; eps) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> ch = <span class="built_in">std</span>::max_element(A[n].<span class="built_in">begin</span>() + n, A[n].<span class="built_in">begin</span>() + m) - A[n].<span class="built_in">begin</span>(), hc;</span><br><span class="line">		<span class="keyword">if</span> (A[n][ch] &lt; eps) <span class="keyword">break</span>;</span><br><span class="line">		assert(check()); <span class="comment">// otherwise unbounded, no max solution </span></span><br><span class="line">		<span class="keyword">double</span> theta = DBL_MAX;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (A[i][ch] &gt; eps &amp;&amp; A[i].back() / A[i][ch] &lt; theta) &#123;</span><br><span class="line">			theta = A[i].back() / A[i][ch];</span><br><span class="line">			hc = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::swap(p[ch], p[hc]);</span><br><span class="line">		<span class="keyword">double</span> tmp = <span class="number">1</span> / A[hc][ch];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) A[hc][j] *= tmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="keyword">if</span> (i != hc) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) <span class="keyword">if</span> (j != ch) &#123;</span><br><span class="line">				A[i][j] -= A[i][ch] * A[hc][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) A[i][ch] *= -tmp;</span><br><span class="line">		A[hc][ch] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">VD <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) x[p[i]] = A[i].back();</span><br><span class="line">	watch(-A.back().back()); <span class="comment">// max_val</span></span><br><span class="line">	<span class="keyword">return</span> x; <span class="comment">// point Corresponds to max_val</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compute max cx, with Aqx = bq and Alq x &lt;= blq, end of 0 can be ommit in A and Aq</span></span><br><span class="line"><span class="function">VD <span class="title">simplex</span><span class="params">(VD c, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; Aq, VD bq, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; Alq, VD blq)</span> </span>&#123;</span><br><span class="line">	assert(Aq.<span class="built_in">size</span>() == bq.<span class="built_in">size</span>());</span><br><span class="line">	assert(Alq.<span class="built_in">size</span>() == blq.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">int</span> n = Aq.<span class="built_in">size</span>() + Alq.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> m = c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bq.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (bq[i] &lt; -eps) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Aq[i]) x = -x;</span><br><span class="line">		bq[i] = -bq[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blq.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (blq[i] &lt; -eps) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Alq[i]) x = -x;</span><br><span class="line">		++m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; <span class="title">A</span><span class="params">(n, VD(n + m))</span></span>;</span><br><span class="line">	VD f(n + m), b(n);</span><br><span class="line">	<span class="keyword">int</span> now = n + c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) A[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Aq.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Aq[i].<span class="built_in">size</span>(); ++j) A[i][n + j] = Aq[i][j];</span><br><span class="line">		b[i] = bq[i];</span><br><span class="line">		f[i] = -inf;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Alq.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Alq[i].<span class="built_in">size</span>(); ++j) A[i + Aq.<span class="built_in">size</span>()][n + j] = Alq[i][j];</span><br><span class="line">		<span class="keyword">if</span> (blq[i] &lt; -eps) &#123;</span><br><span class="line">			A[i + Aq.<span class="built_in">size</span>()][now++] = <span class="number">-1</span>;</span><br><span class="line">			f[i + Aq.<span class="built_in">size</span>()] = -inf;</span><br><span class="line">		&#125;</span><br><span class="line">		b[i + Aq.<span class="built_in">size</span>()] = <span class="built_in">fabs</span>(blq[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); ++i) f[n + i] = c[i];</span><br><span class="line">	<span class="keyword">auto</span> x = simplexCore(f, A, b);</span><br><span class="line">	<span class="keyword">return</span> VD(x.<span class="built_in">begin</span>() + n, x.<span class="built_in">begin</span>() + n + c.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		<span class="keyword">int</span> nlq, nq, m;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nlq &gt;&gt; nq &gt;&gt; m;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; <span class="title">Alq</span><span class="params">(nlq, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(m, <span class="number">0</span>))</span></span>;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; <span class="title">Aq</span><span class="params">(nq, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;(m, <span class="number">0</span>))</span></span>;</span><br><span class="line">		std::vector&lt;double&gt; blq(nlq), bq(nq), c(m);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : c) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Alq) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : x) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : blq) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Aq) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i : x) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : bq) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		<span class="keyword">auto</span> x = simplex(c, Aq, bq, Alq, blq);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> t : x) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输入样例：（和 matlab linprog 样例一致）</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">6 1 2</span></span><br><span class="line"><span class="comment">1 0.33333333</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 1</span></span><br><span class="line"><span class="comment">1 0.25</span></span><br><span class="line"><span class="comment">1 -1</span></span><br><span class="line"><span class="comment">-0.25 -1</span></span><br><span class="line"><span class="comment">-1 -1</span></span><br><span class="line"><span class="comment">-1 1 </span></span><br><span class="line"><span class="comment">2 1 2 1 -1 2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1 0.25</span></span><br><span class="line"><span class="comment">0.5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://doc.sagemath.org/html/en/reference/numerical/sage/numerical/mip.html#sage.numerical.mip.MixedIntegerLinearProgram" target="_blank" rel="noopener">SagMath 线性规划文档</a> 以及 <a href="https://ww2.mathworks.cn/help/optim/ug/linprog.html?s_tid=srchtitle" target="_blank" rel="noopener">Matlab linprog 文档</a></p>
</blockquote>
<h3 id="对偶理论"><a href="#对偶理论" class="headerlink" title="对偶理论"></a>对偶理论</h3><p><img src= "/img/loading.gif" data-lazy-src="dual.jpg" alt="对偶理论"></p>
<p>例题：<a href="https://codeforces.com/problemset/problem/605/C" target="_blank" rel="noopener">605C</a>，利用对偶理论之后，此题两种做法，一种是利用三分法搞定，当然了要特别注意精度问题，另一种利用半平面的交（可以查看 HDU 模板）。</p>
<blockquote>
<p>以下内容以后有空再补吧</p>
</blockquote>
<h2 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h2><h2 id="混合型规划"><a href="#混合型规划" class="headerlink" title="混合型规划"></a>混合型规划</h2>]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>$R, R[x; \delta]$ 的素理想关系及 Baire 空间</title>
    <url>/primeInOperatorRing/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">math</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="21d93c5e768aa6b6c93282774db7c39621a5c1bb3f88678f92b889da4a4d5219"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>$R, R[x; \sigma], R[x^{\pm}; \sigma]$ 的素理想关系</title>
    <url>/primeInPolyRing/</url>
    <content><![CDATA[<blockquote>
<p>该内容来自 《Noncommutative Noetherian Ring》 P392 - P400</p>
</blockquote>
<p>约定记号，$\sigma$ 是环 $R$ 的一个自同构，$S = R[x; \sigma], T = R[x, x^{-1}; \sigma]$，注意 $\sigma$ 可以拓展到 $S, T$ 上。本篇考虑这三个环之间的素理想的关系。用 $\triangleleft$ 表示理想， $\triangleleft_l, \triangleleft_r$ 分别表示左理想，右理想。</p>
<h2 id="lemma-1"><a href="#lemma-1" class="headerlink" title="lemma 1"></a>lemma 1</h2><ol>
<li><p>若 $A \triangleleft T$，则 $A$ 是 $\sigma$-不变的，$A = (A \cap S) T$ 且 $A \cap S$ 是 $S$ 中的 $\sigma$-不变理想。</p>
<p><strong>Proof</strong>：$\sigma(a) = x a x^{-1} \in A$，$A$ 中任意元都可以通分一下就有 $A = (A \cap S) T$，显然 $A \cap S$ 是 $S$ 中 $\sigma$-不变理想。</p>
</li>
<li><p>若 $B$ 是 $S$ 的一个 $\sigma$-不变理想，那么 $BT \triangleleft T$，且 $B \cap R$ 是 $R$ 的一个 $\sigma$-不变理想。（注意到 $BT = TB$，证明显然）</p>
</li>
<li><p>若 $C$ 是 $R$ 的一个 $\sigma$-不变理想，那么 $CS, CT$ 分别是 $S, T$ 的 $\sigma$-不变理想。并且 $S/CS \simeq (R/C)[x; \sigma]$, $T/CT \simeq (R/C)[x, x^{-1}; \sigma]$</p>
<p><strong>Proof</strong>：注意到 $SC = CS$，从而知道 $TC = CT$。同构根据 $S \to (R/C)[x; \sigma]$ 和 $T \to (R/C)[x; \sigma]$ 的 kernel 也是显然的。</p>
</li>
</ol>
<h2 id="lemma-2"><a href="#lemma-2" class="headerlink" title="lemma 2"></a>lemma 2</h2><ol>
<li><p>$\sigma-Spec(T) = Spec(T)$（其中 $\sigma-Spec(T)$ 为在所有 $\sigma$ 理想意义下素的 $\sigma$ 理想），若 $A \in Spec(T)$，则 $A \cap S \in \sigma-Spec(S)$，且 $x \in A \cap S$.</p>
<p> <strong>Proof</strong>：首先 $\sigma-Spec(T) = Spec(T)$ 是上一个引理的结论，$x \notin A \cap S$ 是显然的，否则 $A = T$，$A \cap S \triangleleft S$ 是 $\sigma$-不变的。 若 $I, J$ 是 $S$ 中 $\sigma$-不变的理想满足 $I J \subseteq A \cap S$，那么 $(IT)(JT) = IJ T \subseteq (A \cap S) T \subseteq A$，从而 $IT \subseteq A$ 或 $JT \subseteq A$，从而 $I \subseteq A \cap S$，或者 $J \subseteq A$。</p>
</li>
<li><p>若 $x \notin B \in Spec(S)$，则 $B \in \sigma-Spec(S)$</p>
<p><strong>Proof</strong>：$B \supseteq Bx = x \sigma(B) = x S \sigma B$, 从而 $\sigma(B) \subseteq B$，从而证毕。</p>
</li>
<li><p>若 $x \neq B \in \sigma-Spec(S)$，则 $BT \in Spec(T)$，$B = BT \cap S \not \subseteq x S$ 且 $B \cap R \in \sigma-Spec(R)$.</p>
<p><strong>Proof</strong>：首先注意到 $x \notin S$，则 $x^n \notin S$（这是因为 $(SxS)(Sx^{n-1}S) = S x^n$，并且这两个理想都是 $\sigma$-不变的定义 $B’ = \{ b \in S \mid x S b \in B \}$，显然是 $S$ 的一个理想，所以 $B’ \subseteq B$，若 $B \subseteq xS$，则 $B’ = B$，$B = xSB$，比较 $B$ 中最低次数可知矛盾，因此 $B \notin xS$。因此对任意 $c \in BT$，存在 $n \in \mathbb{N}$ 使得 $c x^{n} \in B$，所以 $\sigma^m(c) \in BT$，若 $c \in BT \cap S$，则 $\sum (S \sigma^m(c) S) S x^n S \subseteq B$。这两个理想都是 $\sigma$ 不变的，所以 $c \in B$，所以 $B = BT \cap S$。从而后面 $BT \in Spec(T)$ 也是显然的。</p>
</li>
<li><p>若 $C \in \sigma-Spec(R)$，那么 $CS \in \sigma-Spec(S)$，$x \notin CS$, 且 $CT \in Spec(T)$。</p>
<p> <strong>Proof</strong>：根据上个引理的 3，只需考虑 $C = 0$ 的情况，若 $IJ = 0, I, J \triangleleft T$，考虑它们的首项系数构成的理想$I’, J’$，从而 $I’ J’ = 0$，从而 $I’ = 0$ 或 $J’ = 0$。所以 $I = 0$ 或 $J = 0$。从而 $T$ 是 $\sigma$-素环。考虑 $S$ 的理想 $I$ 对应的 $T$ 中的理想 $IT$ 则容易看出 $S$ 也是 $\sigma$-素环。 </p>
</li>
<li>若 $A \in Spec(T)$，那么 $A \cap R \in \sigma-Spec(R)$ 且 $(A \cap R) T \in Spec(T)$。（前面的结论自然可推出）</li>
</ol>
<h2 id="lemma-3"><a href="#lemma-3" class="headerlink" title="lemma 3"></a>lemma 3</h2><p>若 $R$ 是（单边） Noetherian 环 且 $\sigma$-素环，那么它是半素的。（不要 Noetherian 条件不对）</p>
<p><strong>Proof</strong>：$N(R)$ 是 $\sigma$-不变且幂零的，所以 $N(R)T$ 是幂零的，但是 $T$ 是素环，从而 $N(R) = 0$，证毕。</p>
<h2 id="定理-4"><a href="#定理-4" class="headerlink" title="定理 4"></a>定理 4</h2><p>设 $R$ 是 Noetherian 环，若 $P_0 \subseteq P_1 \subseteq P_2 \triangleleft T$ 满足 $P_0 \cap R = P_2 \cap R$，那么 $P_1 = P_2$。<br>首先不妨设 $P_0 = 0$，假设 $P_2 \cap R = 0$，所以 $R$ 是 $\sigma$-素的，因此是半素的。所以 $R$ 有商环 $Q$ 是 Artinian 半单环，将 $\sigma$ 拓展到 $Q$ 上，则 $T \subseteq Q[x, x^{-1}; \sigma] = T’$，从而 $P_1 T’ = P_2 T’$ 是 $T’$ 的素理想，且（$P_i \cap R = 0$） $P_i T’ \cap T = P’$，但由于 Krull $\dim T’ = \dim Q + 1 = 1$，所以 $P_1 T’ = P_2 T’$，所以 $P_1 = P_2$</p>
<blockquote>
<p>下面证明定理 4 不需要 Noetherian 条件。</p>
</blockquote>
<h2 id="引理-5"><a href="#引理-5" class="headerlink" title="引理 5"></a>引理 5</h2><p>对任意 $t \in T$，我们定义 $\hat{t}$ 为它的最高次数项，$length(t)$ 定义为它最高次数和最低次数的差，特别地，齐次项的长度为 0。</p>
<p>设 $0 \neq I \triangleleft T$ 且 $a \in I$ 是 $I$ 长度最小的非零元素，$0 \neq b \in I$. 则</p>
<ul>
<li>对任意齐次元 $t_o \in T$, $length(\hat{a} t_0 b - at_0\hat{b} &lt; length(b)$ （这是由于这两项最高次数相同且系数一致）</li>
<li>对任意 $t \in T$，$\hat{a} t a = a t \hat{a}$ （由上一个结论可知）</li>
<li>对任意 $t_1, \cdots, t_{n-m} \in T$, 则存在 $c \in T$ 使得，对任意 $t \in T$，<script type="math/tex; mode=display">\hat{a} t \hat{a} t_{n-m} \cdots \hat{a} t_1 b = atc</script>  <strong>Proof</strong>：对$n$用数学归纳法，当 $n = m$ 时，$b$ 也是次数最小的，因此，次数类似上一个结论，我们也有 $\hat{a} t b = a t \hat{b}$，考虑 $b’ = \hat{a} t b - a t_1 \hat{b}$，应用归纳法显然。</li>
</ul>
<h2 id="定理-6"><a href="#定理-6" class="headerlink" title="定理 6"></a>定理 6</h2><ul>
<li><p>若 $P_0 \subseteq P_1 \subseteq P_2$ 是 $T$ 的素理想，且 $P_0 \cap R = P_2 \cap R$，那么 $P_1 = P_2$.</p>
<p>  <strong>Proof</strong>：显然将 $R, T$ 分别替换成 $R /(P_0 \cap R), T / ((R_0 \cap R) T)$，我们不妨设 $T$ 是素的且 $P_0 = 0$， 设 $a \in P_2, b \in P_1$ 的长度 $m, n$ 分别是 $P_1, P_2$ 中的最小长度。显然 $n \geq m \geq 1$，由于 $T$ 是素的，因此存在 $t \in T$ 使得 $\hat{a} t b \neq 0$，从而存在齐次元 $t_1$ 使得 $\hat{a} t_1 b \neq 0$，由归纳法，我们可以找到 $t_2, \cdots, t_{n - m}$ 使得 $d = \hat{a} t_{n - m} \cdots \hat{a} t_1 b \neq 0$，由 <strong>引理 5</strong> 知，存在 $c \in T$ 使得 $\hat{a}td = atc$ 对任意 $t \in T$，我们可以选择两对齐次元 $t_1, t_2$ 使得分别使得 $\hat{a} t_1 d$ 的最高项和 $\hat{a} t_2$ 的最低项不为 0，我们可以将 $t_1$ 乘以 $x$ 的一个幂次使得 $t_1$ 的次数等于 $t_2$ 的次数，从而 </p>
<script type="math/tex; mode=display">
  length(d) = length(\hat{a} (t_1 + t_2) d  = length(a (t_1 + t_2) c) \leq length(a) + length(c)</script><p>  另一个方向同理，即</p>
<script type="math/tex; mode=display">
  length(\hat{a}) + length(d) = length(a) + length(c)</script><p>  从而 $length(c) &lt; n$，即 $c \notin P$，然而 $a T c \subseteq Tb \subseteq P_1$，所以 $a \in P_1$. 然后用归纳法证明，$P_2$ 中每一个元素都属于 $P_1$，注意到对于任意齐次元 $t_0 \in T$</p>
<script type="math/tex; mode=display">
  length(\hat{a} t_0 e - at_0 \hat{e}) < length(e)</script><p>  其中 $\hat{a} t_0 e - at_0 \hat{e} \in P_2$，由归纳法 $\hat{a} t_0 e - at_0 \hat{e} \in P_1$，并且 $at_0 \hat{e} \in P_1$，从而 $\hat{a} t_0 e \in P_1$，即 $\hat{a} T e \subseteq P_1$，但是 $\hat{a} \notin P$，从而 $e \in P_1$，从而 $P_1 = P_2$.</p>
</li>
<li><p>若 $P_0 \subseteq P_1 \subseteq P_2$ 是 $S$ 的 $\sigma$-素理想，且满足 $P_0 \cap R = P_2 \cap R$，那么 $P_1 = P_2$</p>
<p>  <strong>Proof</strong>：同样的我们不妨设 $T$ 是素的，$P_2 \cap R = 0$，若 $x \in P_2$, 那么 $P_2 = (x)$，这是由于 $P_2 \cap R = 0$（所以无常数项），若 $x \notin P_1$，则由 <strong>引理 2</strong> $P_1 = P_1T \cap S \not \subseteq (x)S = P_2$，矛盾，所以 $x \in P_1$，所以 $P_1 = (x) = P_2$，所以不妨设 $x \notin P_2$，那么 同样由 <strong>引理 2</strong> 知 $0 \subseteq P_1T \subseteq P_2T$ 是 $T$ 的素理想，根据 1 知 $P_1 T = P_2 T$，所以 $P_1 = P_1 T \cap S = P_2 T \cap S = P_2$</p>
</li>
</ul>
<blockquote>
<p>这个定理可以推广到群代数上吗？</p>
</blockquote>
<h2 id="引理-7"><a href="#引理-7" class="headerlink" title="引理 7"></a>引理 7</h2><p>若 $B \triangleleft S$ 且 $A = lann B$，那么 $\sigma(A) \subseteq A$，更进一步，若 $B$ 是 $\sigma$-稳定（即$\sigma(B) = B$ 的，那么 $A$ 也是。</p>
<p><strong>Proof</strong>：由于 $x \sigma(A) B = A x B \subseteq AB = 0$，因此 $\sigma(A) B = 0$，因此 $\sigma(A) \subseteq A$，若 $B$ 是 $\sigma$-稳定的，那么 $AB = 0$ 当且仅当 $\sigma(A) \sigma(B) = 0$ 当且仅当 $\sigma(A) B = 0$。</p>
<blockquote>
<p>注意 $\sigma(I) \subseteq I$，并不能推出 $\sigma(I) = I$，即使 $\sigma$ 是 $R$ 上的自同构。例如 $R = \sum_{i \geq 0} k_i$, 其中 $k_i = k$ 为域，并且 $R$ 上的乘法满足对任意 $i, j &gt; 0$, $R_i R_j = 0$，$1_R = 1_{k_0}$，我们定义 $\sigma R \to R$ 为 $k_0 \to k_0$，$k_{2n} \to k_{2n + 2}, k_{2n + 1} \to k_{2n - 1}, k_1 \to k_2$，然后取 $I$ 为 $\sum_{i = 1} k_{2i}$。</p>
</blockquote>
<h2 id="引理-8"><a href="#引理-8" class="headerlink" title="引理 8"></a>引理 8</h2><p>我们称 $P \in Spec(R)$ 是 $\sigma$-半稳定的，若存在 $n$ 使得 $\sigma^n(P) = P$，对任意素理想，显然 $P^0 \doteq \cap \sigma^k(P)$ 是 $P$ 中最大的 $\sigma$-稳定的理想，被称为 $\sigma$-cyclic 的。</p>
<p>每一个 $\sigma$-cyclic 的理想都是 $\sigma$-素的。</p>
<p><strong>Proof</strong>：若 $I, J$ 是 $\sigma$-不变的理想满足 $I J \subseteq P^0$， 则 $I J \subseteq P$，从而 $I \subseteq P$ or $J \subseteq P$，从而 $I \subseteq P^0$ or $J \subseteq P^0$。</p>
<p>对于 Noetherian 情况，反过来也对。</p>
<h2 id="命题-9"><a href="#命题-9" class="headerlink" title="命题 9"></a>命题 9</h2><p>若 $R$ 是（单边）Noetherian 的，且 $A \in \sigma-Spec(R)$，那么 $A \in \sigma-Spec(R)$，那么 $A$ 是 $\sigma$-cyclic 且 $AS \in Spec(S), AT \in Spec(T)$</p>
<blockquote>
<p>首先仅需证明 $A = 0$ 的情形</p>
</blockquote>
<p>由 <strong>引理 3</strong>，$R$ 是半素的，设 $P_1, \cdots, P_n$ 是 $R$ 的全部极小素理想，$P_1 \cap \cdot \cap P_n = 0$， 且显然 $\sigma(P_i)$ 也是极小素理想，因此 $\sigma$ 是 $\{P_1, \cdots, P_n\}$ 上的一个置换， 设 $P_1, \cdots, P_r$ 是一个置换圈，记 $C = P_1 \cdots, P_r$，$D = P_{r+1}, \cdots, P_n$，那么 $CD = 0$，由 <strong>引理 7</strong> 知 $D$ 也是 $\sigma$-不变的，从而 $C = 0$ 即 $0$ 是 $\sigma$-cyclic 的。</p>
<p>假设 $B,C \triangleleft S$ 满足 $BC = 0$，不妨设 $B = lann_S(C), C = rann_S(B)$，那么 $\sigma(B) \subseteq B$，从而等到一个上升链， $B \subseteq \sigma^{-1} (B) \subseteq \cdots \subseteq \sigma^{-n}(B) \subseteq \cdots$，从而 $B = \sigma(B)$, 同理 $C = \sigma(C)$，同样它们的首项系数 $B’, C’$ 也是 $\sigma$-稳定的，从而其中有一个为 0，因此 $S$ 是素的。</p>
<h2 id="定理-10"><a href="#定理-10" class="headerlink" title="定理 10"></a>定理 10</h2><p>下列等价（证明略）</p>
<ul>
<li>存在 $m \in \mathbb{Z}$ 使得 $\sigma^m$ 是 $R$ 的某个 $\sigma$-不变的商上的内自同构</li>
<li>存在 $P_0, P_1 \in \sigma-Spec(S)$ 满足 $P_0 \subseteq P_1$ 且 $x \notin P_1$</li>
<li>存在 $I_0, I_1 \in Spec(T)$ 满足 $I_0 \subseteq I_1$ 且 $I_0 \cap R = I_1 \cap R$</li>
</ul>
<h2 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h2><p>If $P$ is $\sigma$-prime ideal of $R$, then $P$ is a semiprime ideal, and $P = Q \cap \sigma(Q) \cap \cdots \sigma^{n-1}(Q)$ and $\sigma^n(Q) = Q$.</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>The Dixmier-Moeglin Equivalence</title>
    <url>/DixmierMoeglinEquivalence/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">math</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7533349d55f7662c45206a3ddc1bbda6293a305d68598be756092d96e5e41802"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly 主题</title>
    <url>/butterfly/</url>
    <content><![CDATA[<p>再次换主题，一个月前（2020/7/20）看到了 Butterfly 主题，十分心动，知道前两天才开始换从 next 换到 Butterfly。Butterfly 主题真的太美了，现在看唯一的缺点就是不支持 <code>&lt;!-- more --&gt;</code> 标签。</p>
<p>一不小心又把 blog 文件夹删了，我吐了，正好写一下重新步骤</p>
<ol>
<li>安装 Hexo 并上传到 git 上 <a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">这里超详细</a></li>
<li>拉取源代码</li>
<li><code>npm install</code> 更新依赖（配置国内镜像：<code>npm config set registry https://registry.npm.taobao.org</code>）</li>
<li>使用<a href="https://www.dazhuanlan.com/2020/01/30/5e322259a87e5/" target="_blank" rel="noopener">方案 2</a> 修改 <code>node_modules/nunjucks</code>，并且 搜索、RSS 插件，hexo-generator-random 插件同步修改, <code>scaffolds/</code> 也要修改！。</li>
<li><a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">mathjax 和 Hexo 的完美冲突解决方案</a> (目前任然不建议使用 Katex)</li>
<li>拉取自己 fork 的主题 <a href="https://github.com/chachabai/hexo-theme-butterfly" target="_blank" rel="noopener">Butterfly</a>，并复制 <code>_config.yml</code> 到 <code>source/_data/</code> 进行主题配置：<a href="https://demo.jerryc.me/posts/ceeb73f/" target="_blank" rel="noopener">官方配置方法</a></li>
</ol>
<p>以下内容仅需配置一次（与主题无关，最多是在主题配置文件中填写一点数值）：</p>
<ol>
<li><a href="https://tab.leancloud.cn/data.html?appid=TkSRiW6UjDGmsxqmjPiPRjHV-9Nh9j0Va#/" target="_blank" rel="noopener">LeanCloud 管理数据</a> 并配置 Valine（已关闭） 和 Utterances（也是基于 Github Issue 的，但是很好用，虽然不能在回复下回复，但是可以 <code>@</code>） <del>Gitalk 双评论系统，<a href="https://blog.csdn.net/qq_33384402/article/details/107200465" target="_blank" rel="noopener">Gitalk 配置</a>， <a href="https://www.louxiaohui.com/2018/05/15/get-file-from-git-server-automatically/" target="_blank" rel="noopener">注意事项</a>，每一篇都要初始化一次</del>。</li>
<li>添加文章加密功能，增加 <a href="https://tding.top/archives/567debe0.html" target="_blank" rel="noopener">RSS 功能</a>，<a href="https://zhuanlan.zhihu.com/p/64457116" target="_blank" rel="noopener">RSS 使用说明</a>，文章置顶功能，<a href="https://cndrew.cn/2019/10/19/plugin/" target="_blank" rel="noopener">随机文章</a></li>
<li><a href="https://blog.csdn.net/u010820857/article/details/82356974" target="_blank" rel="noopener">支持 pdf</a>，<a href="https://www.paddylin.top/post/f609.html" target="_blank" rel="noopener">支持 B 站视频</a></li>
</ol>
<h2 id="Butterfly-主题修改记录"><a href="#Butterfly-主题修改记录" class="headerlink" title="Butterfly 主题修改记录"></a>Butterfly 主题修改记录</h2><blockquote>
<p>其实直接去 <a href="https://github.com/jerryc127/hexo-theme-butterfly/compare/master...chachabai:master" target="_blank" rel="noopener">github</a> 看就行了</p>
</blockquote>
<h3 id="添加首页加载-mathjax"><a href="#添加首页加载-mathjax" class="headerlink" title="添加首页加载 mathjax"></a>添加首页加载 mathjax</h3><p>修改 <code>themes/butterfly/layout/includes/third-party/math/index.pug</code>，进去了就知道该怎么改啦。</p>
<h3 id="增加了底部小鱼游泳"><a href="#增加了底部小鱼游泳" class="headerlink" title="增加了底部小鱼游泳"></a>增加了底部小鱼游泳</h3><p>在 <code>themes/butterfly/layout/includes/footer.pug</code> 下面添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">style</span>.</span><br><span class="line">  <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>)&#123;</span><br><span class="line">    <span class="selector-id">#sidebar_search_box</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123;<span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">24px</span>)&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>并且在 <code>themes/butterfly/source/css/_layout/footer.styl</code> 中修改对应的 <code>footer-warp</code><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#footer-wrap</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line">  <span class="selector-tag">padding</span>: 1<span class="selector-class">.2rem</span> 1<span class="selector-tag">rem</span> 1<span class="selector-class">.4rem</span></span><br><span class="line">  color: $light-grey</span><br><span class="line">  <span class="selector-tag">text-align</span>: <span class="selector-tag">center</span></span><br><span class="line">  <span class="selector-tag">left</span>: 0</span><br><span class="line">  <span class="selector-tag">right</span>: 0</span><br><span class="line">  <span class="selector-tag">top</span><span class="selector-pseudo">:0</span></span><br><span class="line">  <span class="selector-tag">bottom</span>: 0</span><br></pre></td></tr></table></figure></p>
<h3 id="添加透明度功能"><a href="#添加透明度功能" class="headerlink" title="添加透明度功能"></a>添加透明度功能</h3><ul>
<li>在 <code>source/css/_layout/post.styl</code> 的 <code>.layout_post</code> 下添加一行 <code>opacity: hexo-config(&#39;content_opacity.post&#39;)</code></li>
<li>在 <code>source/css/_layout/page.styl</code> 的 <code>.layout_page</code> 下添加一行 <code>opacity: hexo-config(&#39;content_opacity.page&#39;)</code></li>
<li>在 <code>source/css/_layout/footer.styl</code> 的 <code>footer</code> 下添加一行 <code>background-color: rgba(73,177,245,hexo-config(&#39;footer_transparent&#39;))</code></li>
<li>在 <code>source/css/_mode/darkmode.styl</code> 的 <code>#footer[data-type=color]</code> 下的内容替换为 <code>background: rgba(13,13,13,hexo-config(&#39;footer_transparent&#39;))</code></li>
</ul>
<p>然后设置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 透明度</span></span><br><span class="line"><span class="attr">content_opacity:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="number">0.66</span></span><br><span class="line">  <span class="attr">page:</span> <span class="number">0.77</span></span><br><span class="line"><span class="attr">footer_transparent:</span> <span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<h3 id="将横幅-banner-设为透明"><a href="#将横幅-banner-设为透明" class="headerlink" title="将横幅 banner 设为透明"></a>将横幅 banner 设为透明</h3><p><code>source/css/_layout/head.styl</code> 中 <code>#page-header</code> 下的 <code>background-color:</code> 改成 <code>transparent</code></p>
<h3 id="修改-footer"><a href="#修改-footer" class="headerlink" title="修改 footer"></a>修改 footer</h3><p><code>source/css/_layout/head.styl</code> 中 <code>background-color:</code> 改成 <code>transparent</code><br>直接看<a href="https://www.paddylin.top/post/708f.html" target="_blank" rel="noopener">这里</a></p>
<blockquote>
<p>主要参考 <a href="https://yunist.cn/hexo/butterfly_modify/" target="_blank" rel="noopener">云玩家</a> 和 <a href="https://www.paddylin.top/" target="_blank" rel="noopener">Paddy</a></p>
</blockquote>
<h2 id="git-回档操作"><a href="#git-回档操作" class="headerlink" title="git 回档操作"></a>git 回档操作</h2><p>查看 github 上需要回档的版本号，三种方式</p>
<ol>
<li>直接记录下版本号，然后执行 <code>git reset --hard &lt;版本号&gt;</code></li>
<li><code>git reflog</code> 查看回档编号，<code>git reflog git reset --hard HEAD@{编号}</code></li>
<li><code>git reset –-hard HEAD ^</code> ( <code>^</code> 表示回到上一个版本，<code>^^</code> 表示回到上上个版本）</li>
</ol>
<p>最后要 <code>git push -f -u origin master</code> 提交。</p>
<p>VSCode 规范化提交插件：<a href="https://github.com/RedJue/git-commit-plugin" target="_blank" rel="noopener">git-commit-plugin</a></p>
<h2 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h2><p>登录 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，创建 yourname/yourname.github.io 仓库， 进入该仓库 setting，下拉到 Github Page</p>
<p>设置 master branch，Custom domain（可选），Enforce HTTPS</p>
<p>git 命令行进入 blog 目录，执行下面操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C yourmail@example.com <span class="comment">#建议不设置密码，按回车</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub <span class="comment"># 复制公钥到系统粘贴板</span></span><br></pre></td></tr></table></figure>
<p>去 github 账号的 setting 中添加 ssh key（复制到 key 就可以了）</p>
<p>检测是否成功： <code>ssh -T git@github.com</code></p>
<p>设置全局用户信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name yourname</span><br><span class="line">git config --<span class="keyword">global</span> user.email  yourmail@example.com</span><br></pre></td></tr></table></figure>
<p>在 <code>_config.yml</code> （最后一行）设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure>
<p>执行：<code>npm install hexo-deployer-git --save</code></p>
<p>然后执行： <code>hexo g -d</code> 就可以去 <code>http(s)://yourname.github.io</code> 看到自己的博客了。</p>
<h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 <code>_config.yml</code></h3><p>填写 site 信息， 设置 url ， 建议 permalink 改为 ：<code>title/</code>，设置 <code># Pagination</code> 下的 <code>per_page: 0</code>。</p>
<h3 id="配置主题，配好了修改-config-yml-的-theme-为当前主题"><a href="#配置主题，配好了修改-config-yml-的-theme-为当前主题" class="headerlink" title="配置主题，配好了修改 _config.yml 的 theme 为当前主题"></a>配置主题，配好了修改 <code>_config.yml</code> 的 theme 为当前主题</h3><h2 id="以下内容被作为源代码保存"><a href="#以下内容被作为源代码保存" class="headerlink" title="以下内容被作为源代码保存"></a>以下内容被作为源代码保存</h2><ul>
<li>源码：<code>./source</code></li>
<li>环境配置文件：<code>_config.yml</code>, <code>.gitignore</code>, <code>package.json</code>, <code>package-lock.json</code>, <code>README.md</code></li>
<li>更新源码脚本：<code>updateSourceCode.py</code></li>
</ul>
<h2 id="云盘白嫖优雅解决方案"><a href="#云盘白嫖优雅解决方案" class="headerlink" title="云盘白嫖优雅解决方案"></a>云盘白嫖优雅解决方案</h2><ul>
<li>iCloud 放 pdf 和 goodnote 和一些杂七杂八但不占空间的东西</li>
<li>坚果云配分 ipad 的照片</li>
<li>各种途径的照片分类整理到 OneDrive</li>
<li>OneDrive 存照片和 Windows 默认的设置</li>
<li>用 Coding 存个人文档（2000 文件，300G）</li>
<li>百度网盘其实是最强的</li>
</ul>
<blockquote>
<p>白嫖取之有道，一定要嫖大厂的！有信誉的！<br>二级域名和虚拟主机（虚拟服务器不可能）就别想着一直白嫖了！</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>考虑代码的可迁移性，代码规范，多平台是一个好习惯。自己 fork 主题自己用，不把主题当作源码保存也是个好习惯。</p>
]]></content>
      <tags>
        <tag>Theme</tag>
      </tags>
  </entry>
  <entry>
    <title>从数列极限到点集拓扑学(from array limit to point set topology)</title>
    <url>/pointSetTopology/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">某大公司的名字(全小写)</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="968cafd8e28d0282ed8643d62431103ed9842b1303b12e309b8a50d9b379425f"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Encrypt</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 代码规范</title>
    <url>/codeStyle/</url>
    <content><![CDATA[<p>此规范参考：Codeforces 上 <a href="http://codeforces.com/profile/jiangly" target="_blank" rel="noopener">Jiangly</a> 的码风，<a href="https://oi.men.ci/code-style-oi/" target="_blank" rel="noopener">Menci</a> 代码规范，知乎 <a href="https://www.zhihu.com/question/398008181/answer/1259561408" target="_blank" rel="noopener">pansz</a> 的回答<br>VSCode 的 C_Cpp: <code>Clang_format_style</code> 和 <code>Clang_format_fallback style</code> 设置为：<code>{ BasedOnStyle: google, IndentWidth: 4,TabWidth: 4, UseTab: Always, BreakBeforeBraces: Custom, AllowShortIfStatementsOnASingleLine: true, IndentCaseLabels: false }</code></p>
<blockquote>
<p>设置可参考：<a href="https://clang.llvm.org/docs/ClangFormatStyleOptions.html" target="_blank" rel="noopener">官方代码风格配置</a></p>
</blockquote>
<h3 id="总纲"><a href="#总纲" class="headerlink" title="总纲"></a>总纲</h3><ul>
<li>不再使用 <code>using namespace std</code></li>
<li>不建议使用 <code>#include &lt;bits/stdc++.h&gt;</code></li>
<li>Tab 用于缩进，空格用于对齐（可不对齐）</li>
<li>左大括号不换行（左大括号前有且仅有一个空格）</li>
<li>头文件必须全部写在开头，C 的头文件必须以 c 开头而非<code>.h</code> 结尾</li>
<li><code>main</code> 函数必须在整个程序末尾</li>
<li>常用函数尽量写成类和模板形式</li>
<li>尽量使用 STL 减少代码量</li>
<li>尽量不要用 <code>C-type</code> 代码</li>
<li>善用 <code>namespace</code> 写一些通用函数（或者类似单例的东西）。不要把 <code>Class/Struct</code> 和 <code>namespace</code> 搞混淆了。</li>
</ul>
<h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul>
<li>不能有两个连续空行</li>
<li>独立的代码块之间要有空行</li>
<li>头文件块、函数、成员函数、结构体、类，全局变量块之间必须用空行隔开</li>
</ul>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>空格的作用：识别族群的位置</p>
<ul>
<li>前后必须都有空格：冒号、双目运算符、三目运算符</li>
<li>前加后不加：<code>* &amp;</code></li>
<li>后加前不加：关键字，逗号</li>
<li>前后都不加：<code>. -&gt; ::</code></li>
</ul>
<h3 id="函数和变量"><a href="#函数和变量" class="headerlink" title="函数和变量"></a>函数和变量</h3><ul>
<li>传参时按照实际需要传 引用、const 引用、值</li>
<li>尽量不使用全局变量</li>
<li>局部变量在用时定义</li>
<li>在合适的时间使用 <code>static</code> 变量</li>
</ul>
<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><ul>
<li>统一使用驼峰命名法</li>
<li>常量，<code>typedef</code> 定义的类型 全部大写</li>
<li>类私有变量以 <code>_</code> 开头</li>
<li>函数和变量统一使用小驼峰</li>
<li>结构和类统一使用大驼峰</li>
<li>以 Core 结尾的核心代码是在约束条件下的高效代码，可以用 Lambda 函数写在原函数内部</li>
<li>以 S 结尾的是简单且效率较低的代码，当作对拍的测试代码</li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>代码尽量自注释</li>
<li>在函数最开始注释，解释输入输出变量</li>
</ul>
<h3 id="代码优先级"><a href="#代码优先级" class="headerlink" title="代码优先级"></a>代码优先级</h3><ul>
<li>普通代码：正确，可行，可读，通用</li>
<li>Core 代码：正确，高效，通用，可读</li>
</ul>
<h3 id="STL-的使用"><a href="#STL-的使用" class="headerlink" title="STL 的使用"></a>STL 的使用</h3><ul>
<li><code>vector&lt;bool&gt;</code> 不是 <code>vector</code> 类型，谨慎使用</li>
<li>尽量用 <code>vector</code> 取代用户输入的数组，而非开足够大的数组</li>
<li>尽量使用 <code>emplace_back</code> 取代 <code>push_back</code>，有些取代不了，就不取代了</li>
<li>多使用 <code>pair, tuple, sort, stable_sort, iota, accumulate, for_each, lambda函数</code> 使得代码更加优雅</li>
</ul>
<h3 id="代码规范的说明"><a href="#代码规范的说明" class="headerlink" title="代码规范的说明"></a>代码规范的说明</h3><p>空格的作用是区分，空格缩进理论上是不合理的，<strong>强烈抵制四个空格代替 Tab</strong> </p>
<p>双目运算符两边加空格是为了 区分运算符 和 变量，虽然 <code>a+b</code>（这种代码不必加空格，但是为了养成好习惯，还是加上较好），关键字后面加空格是为了避免像 函数调用</p>
<p>工程中不推荐使用 <code>using namespace std</code> ，而且不用的时候你就会知道一些陌生的函数原来是 <code>std</code> 中的，并且以后修改起来很麻烦</p>
<p>不建议使用万能头文件，但是本人用了是因为，打 CF 等比赛的时候你一个个的敲头文件或者写一大堆头文件，还不如就写这一个，并且以后修改成不用万能头文件也很容易</p>
<p>左空格不换行完全是个人喜好，换不换都可以，固定就好</p>
<p>其它总纲的代码规范完全是为了代码通用美感，大道至简</p>
<p>尽量避免全局变量是因为防止程序不可控，降低代码耦合性，局部变量用的时候定义是为了增加代码可读性，<code>static</code> 变量也是为了避免全局变量</p>
<p>驼峰命名的好处在于 “顾名思义，望文生义”（贬义褒用）<br>遵守代码规范，养成编程好习惯~</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>dna049 的 C++ 模板</title>
    <url>/templateOfCpp/</url>
    <content><![CDATA[<p>此处只包含通用代码块，以下为其它内容：</p>
<ul>
<li><a href="/codeStyle/" title="C++ 代码规范">C++ 代码规范</a></li>
<li><a href="/allTemplate/" title="C++ 万能模板">C++ 万能模板</a></li>
<li><a href="/graph/" title="C++ 图论模板">C++ 图论模板</a>（因为图论内容实在太多）</li>
<li><a href="/string/" title="C++ 字符串模板">C++ 字符串模板</a>（内容相对独立）</li>
<li><a href="/stl/" title="STL 和 C++17 学习记录">STL 和 C++17 学习记录</a>
</li>
</ul>
<p><strong>欢迎使用或转载代码块，唯一要求添加一行注释</strong>: <code>https://dna049.com</code></p>
<blockquote>
<p>编译器比你想象中的聪明，所以尽量写 <strong>编译器好优化</strong> 并且 <strong>易读</strong> 的代码，很多位运算，除法都是可以被优化的！<br>优质的代码本身就是一种解释，添加完全不必要的注释只会让人恶心<br>以后尽量使用 <code>vector</code> 而非数组，结合 <code>C++17</code> 特征，可以简化代码且便于编译器优化！<br>以前觉得 <code>main</code> 函数 <code>return 0</code> 只是标准写法，现在(2020/5/22)才知道能返回就能提前优雅的结束，并且可以判断是否正常结束！<br>全局变量数组元素自动默认初始化为 0，局部变量要加 <code>= {}</code> 才会初始化为 0</p>
</blockquote>
<a id="more"></a>
<h2 id="通用代码块"><a href="#通用代码块" class="headerlink" title="通用代码块"></a>通用代码块</h2><h3 id="佛祖保佑，永无-bug"><a href="#佛祖保佑，永无-bug" class="headerlink" title="佛祖保佑，永无 bug"></a>佛祖保佑，永无 bug</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="comment">// #define print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl </span></span><br><span class="line"><span class="comment">// #define println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> start = <span class="built_in">std</span>::clock();</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Time used: "</span> &lt;&lt; (<span class="built_in">std</span>::clock() - start) &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">------ Welcome to my blog: http://dna049.com ------</span></span><br><span class="line"><span class="comment">                   _ooOoo_</span></span><br><span class="line"><span class="comment">                  o8888888o</span></span><br><span class="line"><span class="comment">                  88" . "88</span></span><br><span class="line"><span class="comment">                  (| -_- |)</span></span><br><span class="line"><span class="comment">                  O\  =  /O</span></span><br><span class="line"><span class="comment">               ____/`---'\____</span></span><br><span class="line"><span class="comment">             .'  \\|     |//  `.</span></span><br><span class="line"><span class="comment">            /  \\|||  :  |||//  \</span></span><br><span class="line"><span class="comment">           /  _||||| -:- |||||-  \</span></span><br><span class="line"><span class="comment">           |   | \\\  -  /// |   |</span></span><br><span class="line"><span class="comment">           | \_|  ''\---/''  |   |</span></span><br><span class="line"><span class="comment">           \  .-\__  `-`  ___/-. /</span></span><br><span class="line"><span class="comment">         ___`. .'  /--.--\  `. . __</span></span><br><span class="line"><span class="comment">      ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".</span></span><br><span class="line"><span class="comment">     | | :  `- \`.;`\ _ /`;.`/ - ` : | |</span></span><br><span class="line"><span class="comment">     \  \ `-.   \_ __\ /__ _/   .-` /  /</span></span><br><span class="line"><span class="comment">======`-.____`-.___\_____/___.-`____.-'======</span></span><br><span class="line"><span class="comment">                   `=---='</span></span><br><span class="line"><span class="comment">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span></span><br><span class="line"><span class="comment">            佛祖保佑       永无BUG</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span></span><br><span class="line"><span class="comment"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│  ┌┐    ┌┐    ┌┐</span></span><br><span class="line"><span class="comment"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span></span><br><span class="line"><span class="comment"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span></span><br><span class="line"><span class="comment"> * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │</span></span><br><span class="line"><span class="comment"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span></span><br><span class="line"><span class="comment"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span></span><br><span class="line"><span class="comment"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │</span></span><br><span class="line"><span class="comment"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span></span><br><span class="line"><span class="comment"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span></span><br><span class="line"><span class="comment"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span></span><br><span class="line"><span class="comment"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span></span><br><span class="line"><span class="comment"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="VScode-下-debeg"><a href="#VScode-下-debeg" class="headerlink" title="VScode 下 debeg"></a>VScode 下 debeg</h3><p>需要在默认生成的 task.json 中在 <code>&quot;args&quot;:</code> 下添加一行 <code>&quot;-std=c++17&quot;,</code> 不然要报 warning 很烦。另外要使用绝对路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不能使用相对路径 debug，也可能是设置问题</span></span><br><span class="line">freopen(<span class="string">"C:/Users/dna049/cf/in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br></pre></td></tr></table></figure>
<h3 id="递归程序防止爆栈"><a href="#递归程序防止爆栈" class="headerlink" title="递归程序防止爆栈"></a>递归程序防止爆栈</h3><p>在 Windows 上，通常的方法是在 <strong>编译选项</strong> 中加入 <code>-Wl,--stack=1000000000</code><br>命令行中可以使用：<code>g++ -static -Wl,--stack=268435456 -O2 -std=c++17 -o main main.cpp</code><br>powerShell 中可以使用：<code>g++ -static (Tab 上的那个键)-Wl,--stack=268435456 -O2 -std=c++17 -o main main.cpp</code><br>在 Linux 上，通常的方法是在运行程序前 <strong>在终端内</strong> 执行 <code>ulimit -s unlimited</code> （WSL 下无法设置可惜）</p>
<h3 id="Python-输入样例（以备不时之需，用-PyPy3-提交）"><a href="#Python-输入样例（以备不时之需，用-PyPy3-提交）" class="headerlink" title="Python 输入样例（以备不时之需，用 PyPy3 提交）"></a>Python 输入样例（以备不时之需，用 PyPy3 提交）</h3><p>用 Python 过的一次大数题：<a href="https://codeforces.com/contest/490/submission/105550245" target="_blank" rel="noopener">490C</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多 case 输入</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(int(input())):</span><br><span class="line"><span class="comment"># 单行输入</span></span><br><span class="line">    n = int(input())</span><br><span class="line"><span class="comment"># 两个元素一行输入</span></span><br><span class="line">	a, b = map(int, input().split())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提前结束	</span></span><br><span class="line">exit()</span><br></pre></td></tr></table></figure>
<h3 id="产生-log-的几个原因"><a href="#产生-log-的几个原因" class="headerlink" title="产生 log 的几个原因"></a>产生 log 的几个原因</h3><ol>
<li>二分，三分</li>
<li>$1 + \frac{1}{2} + \cdots \frac{1}{n} \sim \log n$</li>
<li>树状数组，线段树</li>
<li>重链剖分</li>
<li>倍增</li>
</ol>
<h3 id="产生根号的几个原因"><a href="#产生根号的几个原因" class="headerlink" title="产生根号的几个原因"></a>产生根号的几个原因</h3><ol>
<li>朴素判断素数</li>
<li>$\lfloor \frac{n}{i} \rfloor$ 的值域是 $O(\sqrt{n})$ 的</li>
<li>网络流中 HLPP（没读过这篇复杂度分析的论文，不懂）</li>
<li>分块处理</li>
</ol>
<h3 id="类中静态成员定义时初始化"><a href="#类中静态成员定义时初始化" class="headerlink" title="类中静态成员定义时初始化"></a>类中静态成员定义时初始化</h3><p>在前面加 inline 即可，最后都加，否则在配合 STL 的时候就会链接出错，从而无法编译通过例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Flow</span> &#123;</span></span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d;</span><br><span class="line">	Flow(<span class="keyword">int</span> _n) : n(_n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		d.assign(n, INF);</span><br><span class="line">		<span class="keyword">return</span> INF;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function">Flow <span class="title">g</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; g.test() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bitset-高端压位卡常"><a href="#bitset-高端压位卡常" class="headerlink" title="bitset 高端压位卡常"></a><a href="https://www.cnblogs.com/RabbitHu/p/bitset.html" target="_blank" rel="noopener">bitset 高端压位卡常</a></h3><p>典型应用，求传递闭包。</p>
<h3 id="位运算的关系"><a href="#位运算的关系" class="headerlink" title="位运算的关系"></a>位运算的关系</h3><ul>
<li>异或 <code>1</code> 改变，异或 <code>0</code> 不变</li>
<li>某位异或位 0，表示此位相等，反之不等。</li>
<li>$a \oplus b = (a \mid b) \oplus (a \And b)$</li>
<li>$a \oplus b = (a \mid b) - (a \And b)$</li>
<li>$a + b = (a \mid b) + (a \And b)$</li>
<li>$a + b = (a \oplus b) + 2 (a \And b)$</li>
<li><code>(a &amp; b) | c = (a | b) &amp; (a | c)</code></li>
<li><code>(a | b) &amp; c = (a &amp; b) | (a &amp; c)</code></li>
<li><code>(a | b) ^ 1 = (a ^ 1) &amp; (b ^ 1)</code></li>
<li><code>(a &amp; b) ^ 1 = (a ^ 1) | (b ^ 1)</code></li>
<li><code>(a | b) ^ c</code> 和 <code>(a &amp; b) ^ c</code> 可以逐位转化，因此任何一个数 x 经过任意多次的<code>&amp;, |, ^</code> 运算最终都可以写成 <code>((x ^ a) &amp; b) | c</code>。</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a><a href="/dynamicProgramming/" title="动态规划">动态规划</a></h3><h3 id="Meet-in-Middle-拆半搜索法"><a href="#Meet-in-Middle-拆半搜索法" class="headerlink" title="Meet in Middle(拆半搜索法)"></a>Meet in Middle(拆半搜索法)</h3><blockquote>
<p>类似于动态规划，是一种思想。特别适合处理指数复杂度。</p>
</blockquote>
<p>例题：<a href="https://atcoder.jp/contests/abc184/tasks/abc184_f" target="_blank" rel="noopener">AtCoder abc184F</a>，当然针对此题可以深搜剪枝法。</p>
<h3 id="Small-to-large（把小的合并到大的里面去）"><a href="#Small-to-large（把小的合并到大的里面去）" class="headerlink" title="Small to large（把小的合并到大的里面去）"></a>Small to large（把小的合并到大的里面去）</h3><p>例子：并查集（dus），map 的合并，树上启发式合并（dus on tree)，重链剖分。</p>
<p>例题：<a href="https://codeforces.com/contest/600/problem/E" target="_blank" rel="noopener">600E</a> 的 <a href="https://codeforces.com/blog/entry/21827" target="_blank" rel="noopener">题解</a></p>
<h3 id="倍增思想"><a href="#倍增思想" class="headerlink" title="倍增思想"></a>倍增思想</h3><p>例子：RMQ，LCA。</p>
<h3 id="int128-的使用"><a href="#int128-的使用" class="headerlink" title="int128 的使用"></a>int128 的使用</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">__int128 <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">	__int128 x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> ch = getchar();</span><br><span class="line">	<span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>)</span><br><span class="line">			f = <span class="number">-1</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">		x = x * <span class="number">10</span> + ch - <span class="string">'0'</span>;</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printS</span><span class="params">(__int128 x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt; <span class="number">9</span>) printS(x / <span class="number">10</span>);</span><br><span class="line">	<span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__int128 x)</span></span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">'-'</span>);</span><br><span class="line">		x = -x;</span><br><span class="line">	&#125;</span><br><span class="line">	printS(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	__int128 a = <span class="built_in">read</span>();</span><br><span class="line">	<span class="built_in">print</span>(a * a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="交互式题目模板"><a href="#交互式题目模板" class="headerlink" title="交互式题目模板"></a><a href="https://codeforces.com/blog/entry/45307" target="_blank" rel="noopener">交互式题目模板</a></h3><p><a href="https://codeforces.com/gym/101021/problem/1" target="_blank" rel="noopener">gym101021: Guess the Number</a><br>需要 <code>fflush(stdout);</code>（对于 <code>scanf/printf</code>） 或 <code>std:::cout &lt;&lt; std::flush</code> （对于 <code>std::cin/std::cout</code>） 来刷新缓冲区，不过 <code>std::endl</code> 会自动刷新一次缓冲区，所以此时可以省略。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1e6</span>;</span><br><span class="line">	<span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; m &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'&lt;'</span>) r = m - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> l = m + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>交互题测试例子：先假设一组答案，按照自己的程序计算出每次 query 的答案，最好用文件输入输出测试。</p>
</blockquote>
<h3 id="负数下标技巧"><a href="#负数下标技巧" class="headerlink" title="负数下标技巧"></a>负数下标技巧</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> aa[N];</span><br><span class="line"><span class="keyword">int</span> *a = (aa + N / <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可用于 $O(1)$ 首尾插入或删除元素，访问第 $i$ 个元素。<br>当然也可以用 <code>std::deque</code> 加一个标号，实现上述操作</p>
</blockquote>
<h3 id="优雅的输出技巧"><a href="#优雅的输出技巧" class="headerlink" title="优雅的输出技巧"></a>优雅的输出技巧</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" \n"</span>[i == n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模正数向下取整：-lfloor-frac-a-n-rfloor-和-模正数向下取整：-lceil-frac-a-n-rceil"><a href="#模正数向下取整：-lfloor-frac-a-n-rfloor-和-模正数向下取整：-lceil-frac-a-n-rceil" class="headerlink" title="模正数向下取整：$\lfloor \frac{a}{n} \rfloor$ 和 模正数向下取整：$\lceil \frac{a}{n} \rceil$"></a>模正数向下取整：$\lfloor \frac{a}{n} \rfloor$ 和 模正数向下取整：$\lceil \frac{a}{n} \rceil$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">floor</span><span class="params">(LL a, LL n)</span> </span>&#123; <span class="comment">// n &gt; 0</span></span><br><span class="line">	<span class="keyword">return</span> a &lt; <span class="number">0</span> ? (a - n + <span class="number">1</span>) / n : a / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ceil</span><span class="params">(LL a, LL n)</span> </span>&#123; <span class="comment">// n &gt; 0</span></span><br><span class="line">	<span class="keyword">return</span> a &lt; <span class="number">0</span> ? a / n : (a + n - <span class="number">1</span>) / n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意到 C/C++ 中 ，整数除法 <code>/</code> 是向 <code>0</code> 取整(<code>int(x)</code>也是向 0 取整)，但是 Python（Sagemath） 整数除法 <code>//</code> 是向下取整。在 C++ 中一定不要用 <code>(x - 1) / n + 1</code> 的姿势向上取整！！！</p>
</blockquote>
<h3 id="Floor-sum-displaystyle-sum-i-0-n-1-lfloor-frac-a-cdot-i-b-m-rfloor"><a href="#Floor-sum-displaystyle-sum-i-0-n-1-lfloor-frac-a-cdot-i-b-m-rfloor" class="headerlink" title="Floor_sum : $\displaystyle \sum_{i = 0}^{n - 1} \lfloor \frac{a \cdot i + b}{m} \rfloor$"></a>Floor_sum : $\displaystyle \sum_{i = 0}^{n - 1} \lfloor \frac{a \cdot i + b}{m} \rfloor$</h3><blockquote>
<p>注意到这个求和式表示由直线 $x = 0, x = n, y = 0, y = \frac{a}{m}x + \frac{b}{m}$ 构成的梯形内部（仅包含上边界）的整点个数。</p>
</blockquote>
<p>显然我们可以先预处理，使得 $a &lt; m$ 且 $b &lt; m$，此时我们考虑 $y_{\max} = \lfloor \frac{a \cdot n + b}{m} \rfloor$，定义 $x_{\max} = y_{\max} \cdot m - b$，那么 $[\lceil \frac{x_{\max}}{a} \rceil, n)$ 的纵坐标取整值都相等为 $y_{\max}$，然后我们横纵坐标互换（在一张相对透明的纸上画图，然后在另一面看就是）由直线 $x = 0, x = y_{\max}, y = 0, y = \frac{m}{a}x + \frac{b’}{a}$ 构成的梯形内部（不包含边界）的整点个数。其中 $b’ = \lceil \frac{x_{\max}}{a} \rceil \cdot a - x_{\max}$（表示直线 $y = y_{\max}$ 与 $y = \frac{a}{m}x + \frac{b}{m}$ 以及 $x = \lceil \frac{x_{\max}}{a} \rceil$ 相交的长度）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">floorSum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= m) &#123;</span><br><span class="line">		r += LL(a / m) * (n - <span class="number">1</span>) * n / <span class="number">2</span>;</span><br><span class="line">		a %= m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &gt;= m) &#123;</span><br><span class="line">		r += LL(b / m) * n;</span><br><span class="line">		b %= m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> yMax = (LL(a) * n + b) / m;</span><br><span class="line">	<span class="keyword">if</span> (yMax == <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">	LL xMax = LL(yMax) * m - b;</span><br><span class="line">	r += (n - (xMax + a - <span class="number">1</span>) / a) * yMax;</span><br><span class="line">	r += floorSum(yMax, a, m, (a - (xMax % a)) % a);</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然我们可以考虑用长方形整点数减去上部分的整点数（要往上平移一个单位）<strong>这样搞更快</strong>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">floorSum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (a &gt;= m) &#123;</span><br><span class="line">		r += LL(a / m) * (n - <span class="number">1</span>) * n / <span class="number">2</span>;</span><br><span class="line">		a %= m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (b &gt;= m) &#123;</span><br><span class="line">		r += LL(b / m) * n;</span><br><span class="line">		b %= m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> yMax = (LL(a) * n + b) / m;</span><br><span class="line">	<span class="keyword">if</span> (yMax == <span class="number">0</span>) <span class="keyword">return</span> r;</span><br><span class="line">	r += LL(n - <span class="number">1</span>) * yMax;</span><br><span class="line">	r -= floorSum(yMax, a, m, m - b - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://atcoder.jp/contests/practice2/tasks/practice2_c" target="_blank" rel="noopener">模板例题</a> 和 <a href="https://atcoder.jp/contests/arc111/tasks/arc111_e" target="_blank" rel="noopener">应用例题</a></p>
<h3 id="带取整的函数取最值的技巧"><a href="#带取整的函数取最值的技巧" class="headerlink" title="带取整的函数取最值的技巧"></a>带取整的函数取最值的技巧</h3><ul>
<li>先考虑不取整的情况，然后一般这个值是可能的最小值或者最大值</li>
<li>然后通过循环看是否满足取整的情况</li>
</ul>
<h3 id="Barrent-reduction-快速模，弃用，因为并不会变快…-：wiki-镜像解释"><a href="#Barrent-reduction-快速模，弃用，因为并不会变快…-：wiki-镜像解释" class="headerlink" title="Barrent reduction 快速模，弃用，因为并不会变快… ：wiki 镜像解释"></a><a href="https://en.wikipedia.org/wiki/Barrett_reduction" target="_blank" rel="noopener"><del>Barrent reduction 快速模</del>，弃用，因为并不会变快…</a> ：<a href="https://en.jinzhao.wiki/wiki/Barrett_reduction" target="_blank" rel="noopener">wiki 镜像解释</a></h3><blockquote>
<p>对于给定常数 $M$ 求 <code>a % M</code>，并要求 $ 0 \leq a &lt; M^2$，并且 $a &lt; 2^k$。因此下面 $k$ 的取值还是需要注意的。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constexpr</span> LL M  = <span class="number">1e9</span> + <span class="number">7</span>; <span class="comment">// too big, M should satisfy M * M &lt; int</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span>  k = <span class="built_in">std</span>::__lg(M) + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">constexpr</span> LL m = (<span class="number">1L</span>L &lt;&lt; k) / M;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> mod = [&amp;](<span class="keyword">int</span> a) &#123;</span><br><span class="line">	LL r = a - ((a * m) &gt;&gt; k) * M;</span><br><span class="line">	<span class="keyword">return</span> r &gt;= M ? r - M : r;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="输出全排列"><a href="#输出全排列" class="headerlink" title="输出全排列"></a>输出全排列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">x</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		<span class="built_in">std</span>::for_each(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(),[](<span class="keyword">int</span> i)&#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125; <span class="keyword">while</span> (<span class="built_in">std</span>::next_permutation(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="输出全排列的原理"><a href="#输出全排列的原理" class="headerlink" title="输出全排列的原理"></a>输出全排列的原理</h3><p>首先初始状态从小到大排列，然后对每一个状态考虑它的后缀，如果后缀是从大到小排列，再考虑向前一位的后缀，直到不是从大到小排列，然后找比第一个位置大的最小值放在开头，其它位置排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permutation</span><span class="params">(n)</span>:</span></span><br><span class="line">	ans = []</span><br><span class="line">	cnt = math.factorial(n);</span><br><span class="line">	r = list(range(<span class="number">1</span>, n + <span class="number">1</span>))</span><br><span class="line">	ans.append(r.copy())</span><br><span class="line">	cnt -= <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> cnt &gt; <span class="number">0</span>:</span><br><span class="line">		i = n - <span class="number">1</span></span><br><span class="line">		<span class="keyword">while</span> r[i - <span class="number">1</span>] &gt; r[i]: i -= <span class="number">1</span></span><br><span class="line">		r[i:] = r[i:][::<span class="number">-1</span>]</span><br><span class="line">		j = i</span><br><span class="line">		<span class="keyword">while</span> r[j] &lt; r[i - <span class="number">1</span>]: j += <span class="number">1</span></span><br><span class="line">		r[i - <span class="number">1</span>], r[j] = r[j], r[i - <span class="number">1</span>]</span><br><span class="line">		ans.append(r.copy())</span><br><span class="line">		cnt -= <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> ans	</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">	print(permutation(i))</span><br></pre></td></tr></table></figure>
<h2 id="初等数论"><a href="#初等数论" class="headerlink" title="初等数论"></a>初等数论</h2><h3 id="Greatest-Common-divisor"><a href="#Greatest-Common-divisor" class="headerlink" title="Greatest Common divisor"></a>Greatest Common divisor</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简洁写法，不推荐，推荐使用内建 __gcd</span></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lambda 表达式写法，开头不能是auto因为递归</span></span><br><span class="line"><span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; gcd = [&amp;](<span class="keyword">int</span> a, <span class="keyword">int</span> b)-&gt;<span class="keyword">int</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b == <span class="number">0</span> ? a : gcd(b, a % b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 快速版本 https://cp-algorithms.com/algebra/euclid-algorithm.html</span></span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!a || !b) <span class="keyword">return</span> a | b;</span><br><span class="line">	<span class="keyword">unsigned</span> shift = __builtin_ctzll(a | b);</span><br><span class="line">	a &gt;&gt;= __builtin_ctzll(a);</span><br><span class="line">	<span class="keyword">do</span> &#123;</span><br><span class="line">		b &gt;&gt;= __builtin_ctzll(b);</span><br><span class="line">		<span class="keyword">if</span> (a &gt; b) <span class="built_in">std</span>::swap(a, b);</span><br><span class="line">		b -= a;</span><br><span class="line">	&#125; <span class="keyword">while</span> (b);</span><br><span class="line">	<span class="keyword">return</span> a &lt;&lt; shift;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 普通版拓展GCD</span></span><br><span class="line"><span class="function">LL <span class="title">exGcd</span><span class="params">(LL a, LL b, LL&amp; x, LL&amp; y)</span></span>&#123;  <span class="comment">// ax + by = gcd(a,b)</span></span><br><span class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">		x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	LL d = exgcd(b, a % b, y, x);</span><br><span class="line">	y -= a / b * x;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C++17版拓展GCD，优雅了不少!</span></span><br><span class="line">std::tuple&lt;LL, LL, LL&gt; exGcd(LL a, LL b) &#123;  // ax + by = gcd(a,b)</span><br><span class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> &#123;a, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">auto</span> [d, y, x] = exGcd(b, a % b);</span><br><span class="line">	<span class="keyword">return</span> &#123;d, x, y - a / b * x&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Sum-of-least-common-multiple-s-n-sum-i-1-n-lcm-i-n"><a href="#Sum-of-least-common-multiple-s-n-sum-i-1-n-lcm-i-n" class="headerlink" title="Sum of least common multiple  $s_n =  \sum_{i=1} ^n lcm(i,n)$"></a>Sum of least common multiple  $s_n =  \sum_{i=1} ^n lcm(i,n)$</h3><script type="math/tex; mode=display">
\begin{aligned}
\sum_{i=1} ^n lcm(i,n) 
&= \sum_{i=1} ^n \frac{i \cdot n}{\gcd(i,n)} \\
&= n \sum_{d|n} \sum_{\gcd(i,\frac{n}{d})= 1} i \\
&= \frac{n}{2} \sum_{d|n} \frac{n}{d} \psi(\frac{n}{d}) \\
&= \frac{n}{2} \sum_{d|n} d \psi(d)
\end{aligned}</script><p>所以，我们可以在 $O(n \log n)$ 处理好 $s_n$ 的前 $n$ 项。</p>
<h3 id="Double-sum-of-least-common-multiple-ds-n-sum-1-leq-i-leq-j-leq-n-lcm-i-j"><a href="#Double-sum-of-least-common-multiple-ds-n-sum-1-leq-i-leq-j-leq-n-lcm-i-j" class="headerlink" title="Double sum of least common multiple $ds_n = \sum_{1 \leq i \leq j \leq n} lcm(i,j)$"></a>Double sum of least common multiple $ds_n = \sum_{1 \leq i \leq j \leq n} lcm(i,j)$</h3><p>本来这个也挺麻烦，但是可以借助 $s_n$ 计算：$ds_n =  \sum_{j=1} ^n s_j$，所以复杂度就一致了。当然也可以直接化简成：</p>
<script type="math/tex; mode=display">
\sum_{1 \leq i \leq j \leq n} lcm(i,j) = \sum_{i = 1} ^ n \frac{i}{4} \psi(i) \lfloor \frac{n}{i} \rfloor (\lfloor \frac{n}{i} \rfloor + 1)</script><blockquote>
<p>不借助 $s_n$ 其实也能暴力搞出来的。</p>
</blockquote>
<h3 id="模乘法逆元"><a href="#模乘法逆元" class="headerlink" title="模乘法逆元"></a>模乘法逆元</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a, LL p)</span></span>&#123; <span class="comment">// 0 &lt; a &lt; p and gcd(a,p) = 1</span></span><br><span class="line">	<span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">1</span> : (p - p / a) * inv(p % a, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述代码主要用于线性时间预处理所有$p$以内的逆元，对于较小的常数$a$, 可以直接试除 <code>b p mod a == 1</code><br>用下面快速幂也可以求逆，<code>inv</code> 的步数平均下面显著的比快速幂小，但是由于用到了递归，因此最终它们的平均效率是一致的。<br>可以通过预处理小部分值达到快速的效果。</p>
</blockquote>
<h3 id="快速模乘法"><a href="#快速模乘法" class="headerlink" title="快速模乘法"></a>快速模乘法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 &lt;= x &lt; p &lt; INT_MAX</span></span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n, LL p)</span></span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n&amp;<span class="number">1</span>) r = r * x % p;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>; x = x * x % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以用 for 循环写的更短一点，但没必要，若 <code>p &lt; INT64_MAX</code> 就需要使用 <code>__int128</code> 了。现代计算机都是 64 位的，因此处理 int 跟 long long 基本没有时间差异，直接用 LL 避免了强制类型转化，因此效率反而更高。但是 <code>__int128</code> 就不同了。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 &lt;= x &lt; p &lt; INT64_MAX</span></span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n, LL p)</span></span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n&amp;<span class="number">1</span>) r = __int128(r) * x % p;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>; x = __int128(x) * x % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="阶乘、组合数、Lucas-定理"><a href="#阶乘、组合数、Lucas-定理" class="headerlink" title="阶乘、组合数、Lucas 定理"></a>阶乘、组合数、Lucas 定理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3e5</span> + <span class="number">2</span>;</span><br><span class="line">LL fac[N], ifac[N];</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">1</span> : (M - M / a) * inv(M % a) % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) fac[i] = fac[i - <span class="number">1</span>] * i % M;</span><br><span class="line">	ifac[N - <span class="number">1</span>] = inv(fac[N - <span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i; --i) ifac[i - <span class="number">1</span>] = ifac[i] * i % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">binom</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//if (n &lt; k || n &lt; 0) return 0;</span></span><br><span class="line">	<span class="keyword">return</span> fac[n] * ifac[k] % M * ifac[n - k] % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(LL n, LL m, LL p)</span> </span>&#123; <span class="comment">// C(n,m)%p, 仅在p较少时发挥作用</span></span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n &amp;&amp; m) &#123;</span><br><span class="line">		LL np = n % p, mp = m % p;</span><br><span class="line">		<span class="keyword">if</span> (np &lt; mp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		r = binom(np, mp);</span><br><span class="line">		n /= p, m /= p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用组合数公式"><a href="#常用组合数公式" class="headerlink" title="常用组合数公式"></a>常用组合数公式</h3><p>对任意实数，定义：$\binom{\alpha}{k} = \frac{\alpha(\alpha - 1) \cdots (\alpha - k + 1)}{k !}$ 所以我们有：</p>
<script type="math/tex; mode=display">
\binom{-n}{k} = (-1)^{k} \binom{n + k - 1}{k}</script><script type="math/tex; mode=display">
\binom{n + 1}{k + 1} = \binom{n}{k} + \binom{n}{k + 1}</script><blockquote>
<p>最后一个数，先还是不选，这是一个问题。</p>
</blockquote>
<script type="math/tex; mode=display">
{n \choose k}{k \choose i}  = {n \choose i} {n - i \choose k - i}</script><blockquote>
<p>组合意义理解：$n$ 个人中选出 $i$ 个一流人才， $k - i$ 个二流人才。</p>
</blockquote>
<script type="math/tex; mode=display">{n + m \choose k} = \sum_{i + j = k} {n \choose i} {m \choose j}</script><blockquote>
<p>组合意义理解：$n, m$ 两个堆选出 $k$ 个人。</p>
</blockquote>
<h3 id="乞丐版素数判断"><a href="#乞丐版素数判断" class="headerlink" title="乞丐版素数判断"></a>乞丐版素数判断</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span> || n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O-n-log-n-素数筛"><a href="#O-n-log-n-素数筛" class="headerlink" title="$O(n \log n)$ 素数筛"></a>$O(n \log n)$ 素数筛</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =  <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> isP[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPrime</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(isP[<span class="number">2</span>]) <span class="keyword">return</span>;</span><br><span class="line">	isP[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isP[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) <span class="keyword">if</span> (isP[i]) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span> * i; j &lt; N; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">			isP[j] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="欧拉线性素数筛（正式使用版）"><a href="#欧拉线性素数筛（正式使用版）" class="headerlink" title="欧拉线性素数筛（正式使用版）"></a>欧拉线性素数筛（正式使用版）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initPrimeP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	p.emplace_back(<span class="number">2</span>);</span><br><span class="line">	isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isp[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">int</span> sq = <span class="keyword">int</span>(<span class="built_in">std</span>::<span class="built_in">sqrt</span>(N + <span class="number">0.1</span>))|<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= sq; i += <span class="number">2</span>) <span class="keyword">if</span> (isp[i]) &#123;</span><br><span class="line">		p.emplace_back(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt; N; j += i &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line">			isp[j] = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = sq + <span class="number">2</span>; i &lt; N; i += <span class="number">2</span>) <span class="keyword">if</span> (isp[i]) p.emplace_back(i);</span><br><span class="line">	<span class="keyword">return</span> p.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="欧拉线性素数筛（弃用）"><a href="#欧拉线性素数筛（弃用）" class="headerlink" title="欧拉线性素数筛（弃用）"></a>欧拉线性素数筛（弃用）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e9</span> + <span class="number">9</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPrimeP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	p.emplace_back(<span class="number">2</span>);</span><br><span class="line">	isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isp[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isp[i]) p.emplace_back(i);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, t = (N - <span class="number">1</span>) / i + <span class="number">1</span>; j != p.<span class="built_in">size</span>() &amp;&amp; p[j] &lt; t; ++j) &#123; <span class="comment">// 用除号是防止溢出</span></span><br><span class="line">			isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">			<span class="comment">// 不要下面的一步的话，复杂度 O(nloglogn), 但是不用除法，常数小</span></span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="O-1-（执行）时间复杂度判断一个数是否为素数"><a href="#O-1-（执行）时间复杂度判断一个数是否为素数" class="headerlink" title="$O(1)$ （执行）时间复杂度判断一个数是否为素数"></a>$O(1)$ （执行）时间复杂度判断一个数是否为素数</h3><blockquote>
<p>奇技淫巧来源：<a href="https://codeforces.com/blog/entry/79941#comment-659202" target="_blank" rel="noopener">https://codeforces.com/blog/entry/79941#comment-659202</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Sieve</span> &#123;</span></span><br><span class="line">	<span class="keyword">bool</span> isP[N];</span><br><span class="line">	<span class="function"><span class="keyword">constexpr</span> <span class="title">Sieve</span><span class="params">()</span>: <span class="title">isP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		isP[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isP[i] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) <span class="keyword">if</span> (isP[i]) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span> * i; j &lt; N; j += i * <span class="number">2</span>) &#123;</span><br><span class="line">					isP[j] = <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// MAXN 默认最大值为1&lt;&lt;18=262144, 调节参数 -fconstexpr-loop-limit= 例如：</span></span><br><span class="line"><span class="comment">// g++ main.cpp -std=c++17 -fconstexpr-loop-limit=12345678 -fconstexpr-ops-limit=1234567890</span></span><br><span class="line"><span class="comment">// 使得 MAXN = 1e7+2</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span>+<span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">fast_is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">constexpr</span> Sieve&lt;MAXN&gt; s;</span><br><span class="line">	<span class="keyword">return</span> s.isP[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="大素数-Miller-Rabin-概率判别法-和-大整数的最-大-小-因子分解"><a href="#大素数-Miller-Rabin-概率判别法-和-大整数的最-大-小-因子分解" class="headerlink" title="大素数 Miller-Rabin 概率判别法 和 大整数的最 大/小 因子分解"></a>大素数 Miller-Rabin 概率判别法 和 大整数的最 大/小 因子分解</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> PollardRho &#123;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::mt19937 <span class="title">rnd</span><span class="params">(<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n, LL p)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = __int128(r) * x % p;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;   x = __int128(x) * x % p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 &lt; a &lt; n，若 n 是素数，那么 a^(n - 1) = 1 mod n</span></span><br><span class="line"><span class="comment">// m - 1 = m * 2 ^ t，返回 false 表示判断失败</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">witness</span><span class="params">(LL a, LL n, LL m, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">	LL x = powMod(a, m, n);</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">1</span> || x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">while</span> (t--) &#123;</span><br><span class="line">		x = __int128(x) * x %  n;</span><br><span class="line">		<span class="keyword">if</span> (x == n - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TIMES = <span class="number">52</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">rabin</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	LL m = n - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> t = __builtin_ctzll(m);</span><br><span class="line">	m &gt;&gt;= t;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> cnt = <span class="number">0</span>; cnt &lt; TIMES; ++cnt) &#123;</span><br><span class="line">		LL a = rnd() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (witness(a, n, m, t)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pollardrho</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">	LL x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">1</span>, i = <span class="number">1</span>, k = <span class="number">2</span>, c = rnd() % (n - <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		x = (__int128(x) * x + c) % n;</span><br><span class="line">		z = __int128(y - x + n) * z % n;</span><br><span class="line">		<span class="comment">// 累计 gcd 一次计算！太猛了啊 茶茶白</span></span><br><span class="line">		<span class="keyword">if</span> (++i == k) &#123;</span><br><span class="line">			LL d = <span class="built_in">std</span>::__gcd(z, n);</span><br><span class="line">			<span class="keyword">if</span> (d &gt; <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">			y = x;</span><br><span class="line">			<span class="keyword">if</span> (k &gt; n) <span class="keyword">return</span> n;</span><br><span class="line">			k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">spf</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (rabin(n) || n == <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">	LL d = n;</span><br><span class="line">	<span class="keyword">while</span> (d == n) d = pollardrho(n);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">min</span>(spf(d), spf(n / d));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gpf</span><span class="params">(LL n, LL mxf = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (rabin(n)) <span class="keyword">return</span> n;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= mxf) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	LL d = n;</span><br><span class="line">	<span class="keyword">while</span> (d == n) d = pollardrho(n);</span><br><span class="line">	LL res = gpf(d, mxf);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">max</span>(res, gpf(n / d, <span class="built_in">std</span>::<span class="built_in">max</span>(res, mxf)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="O-n-最小素因子预处理"><a href="#O-n-最小素因子预处理" class="headerlink" title="$O(n)$ 最小素因子预处理"></a>$O(n)$ 最小素因子预处理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e8</span>; <span class="comment">// 再大内存吃不消了 </span></span><br><span class="line"><span class="keyword">int</span> sp[N], p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] &lt;= sp[i] &amp;&amp; i * p[j] &lt; N; ++j) &#123; <span class="comment">//防止乘法溢出</span></span><br><span class="line">			sp[i * p[j]] = p[j]; <span class="comment">// 注意到sp只被赋值一次</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mobius-function"><a href="#Mobius-function" class="headerlink" title="Mobius function"></a>Mobius function</h3><blockquote>
<p>另类递推公式： $ \mu(i) = - \sum_{d \mid i, d &lt; i} \mu(d) $。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 乞丐版</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMu</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span> )&#123;</span><br><span class="line">		n /= <span class="number">2</span>;</span><br><span class="line">		r = -r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">			n /= i;</span><br><span class="line">			<span class="keyword">if</span>(n % i  == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			r = -r;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> n &gt; <span class="number">1</span> ? -r : r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// O(n log n) 预处理版本</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N  = <span class="number">1e6</span> +<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> mu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initmu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i * <span class="number">2</span>; j &lt; N; j += i) &#123;</span><br><span class="line">			mu[j] -= mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n) 预处理版</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N  = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="keyword">int</span> p[N], mu[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initmu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(mu[<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isp[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isp[i]) mu[i] = <span class="number">-1</span>, p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, t = (N - <span class="number">1</span>) / i + <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j) &#123;</span><br><span class="line">			isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">			mu[i * p[j]] = -mu[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i += <span class="number">4</span>) mu[i] = -mu[i &gt;&gt; <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mobius-function-前缀和"><a href="#Mobius-function-前缀和" class="headerlink" title="Mobius function 前缀和"></a>Mobius function 前缀和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sumMu[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSumMu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (mu[<span class="number">1</span>] != <span class="number">1</span>) initmu();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) sumMu[i] = sumMu[i - <span class="number">1</span>] + mu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSumMu</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// M(n) = M(n-1) + mu(n)</span></span><br><span class="line">	<span class="keyword">if</span> (n &lt; N) <span class="keyword">return</span> sumMu[n];</span><br><span class="line">	<span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(n);</span><br><span class="line">	<span class="keyword">if</span> (it != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j; i &lt;= n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line">		j = n / (n / i);</span><br><span class="line">		r -= (j - i + <span class="number">1</span>) * sumMu(n / i);</span><br><span class="line">	&#125;</span><br><span class="line">	mp.insert(<span class="built_in">std</span>::make_pair(n, r));</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  Mobius function 绝对值前缀和</span></span><br><span class="line"><span class="function">LL <span class="title">getSumAbsMu</span><span class="params">(LL n)</span> </span>&#123; <span class="comment">// Q(n) = Q(n-1) + |mu(n)|</span></span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (LL i = <span class="number">1</span>, t; (t = i * i) &lt; n; ++i) &#123;</span><br><span class="line">		r += mu[i] * (n / t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Euler’s-totient-function"><a href="#Euler’s-totient-function" class="headerlink" title="Euler’s totient function"></a>Euler’s totient function</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> phi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initPhi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (phi[<span class="number">2</span>] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i += <span class="number">2</span>) phi[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i += <span class="number">2</span>) phi[i] = i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (phi[i] != i) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; N; j += i) phi[j] = phi[j] / i * (i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getPhi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> r = (n % <span class="number">2</span> == <span class="number">0</span> ? n/<span class="number">2</span> : n);</span><br><span class="line">	<span class="keyword">while</span> (n % <span class="number">2</span> == <span class="number">0</span>) n/=<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i * i &lt;= n; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i  == <span class="number">0</span>) &#123;</span><br><span class="line">			r = r / i *(i<span class="number">-1</span>);</span><br><span class="line">			<span class="keyword">while</span> (n % i == <span class="number">0</span>) n/=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">1</span>) r = r / n * (n - <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">LL sumPhi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initSumphi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (phi[<span class="number">2</span>] != <span class="number">1</span>) initPhi();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) sumPhi[i] = sumPhi[i - <span class="number">1</span>] + phi[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, LL&gt; mp;</span><br><span class="line"><span class="function">LL <span class="title">getSumphi</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; N) <span class="keyword">return</span> (LL) sumPhi[n];</span><br><span class="line">	<span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(n);</span><br><span class="line">	<span class="keyword">if</span> (it != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">	LL r = LL(n + <span class="number">1</span>) * n / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j; i &lt;= n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line">		j = n / (n / i);</span><br><span class="line">		r -= (j - i + <span class="number">1</span>) * getSumphi(n / i);</span><br><span class="line">	&#125;</span><br><span class="line">	mp.insert(<span class="built_in">std</span>::make_pair(n, r));</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="拓展-Euler-定理"><a href="#拓展-Euler-定理" class="headerlink" title="拓展 Euler 定理"></a>拓展 Euler 定理</h3><p>数论中欧拉定义说：若 $\gcd(a, m) = 1$ 则 $a^{\phi(m)} \equiv 1 \mod m$。</p>
<p>类似于拓展的 Fermat 小定理：$a^p \equiv a \mod p$，我们有拓展 Euler 定理：</p>
<script type="math/tex; mode=display">
a^n \equiv a^{n \mod \phi(m) + phi(m)} \mod m</script><p>证明对 m 素因子分解，再利用 Euler 函数是可乘函数，显然。</p>
<h3 id="pi-x-函数"><a href="#pi-x-函数" class="headerlink" title="$\pi(x)$ 函数"></a>$\pi(x)$ 函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span> * <span class="number">3</span> * <span class="number">5</span> * <span class="number">7</span> * <span class="number">11</span> * <span class="number">13</span> * <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM + <span class="number">1</span>][M + <span class="number">1</span>], sz[M + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	initprime();</span><br><span class="line">	pi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		pi[i] = pi[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (isp[i]) ++pi[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sz[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= PM; ++i) phi[i][<span class="number">0</span>] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">		sz[i] = p[i] * sz[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= PM; ++j) &#123;</span><br><span class="line">			phi[j][i] = phi[j][i - <span class="number">1</span>] - phi[j / p[i]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">primephi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s &lt;= M) <span class="keyword">return</span> phi[x % sz[s]][s] + (x / sz[s]) * phi[sz[s]][s];</span><br><span class="line">	<span class="keyword">if</span> (x / p[s] &lt;= p[s]) <span class="keyword">return</span> primepi(x) - s + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x / p[s] / p[s] &lt;= p[s] &amp;&amp; x &lt; N) &#123;</span><br><span class="line">		<span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x + <span class="number">0.2</span>))];</span><br><span class="line">		LL ans = pi[x] - (s2x + s - <span class="number">2</span>) * (s2x - s + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = s + <span class="number">1</span>; i &lt;= s2x; ++i) &#123;</span><br><span class="line">			ans += pi[x / p[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> primephi(x, s - <span class="number">1</span>) - primephi(x / p[s], s - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; N) <span class="keyword">return</span> pi[x];</span><br><span class="line">	<span class="keyword">int</span> ps2x = primepi(<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x + <span class="number">0.2</span>)));</span><br><span class="line">	<span class="keyword">int</span> ps3x = primepi(<span class="keyword">int</span>(cbrt(x + <span class="number">0.2</span>)));</span><br><span class="line">	LL ans = primephi(x, ps3x) + LL(ps2x + ps3x - <span class="number">2</span>) * (ps2x - ps3x + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = ps3x + <span class="number">1</span>, ed = ps2x; i &lt;= ed; ++i) &#123;</span><br><span class="line">		ans -= primepi(x / p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="pi-x-函数计算的另一种做法"><a href="#pi-x-函数计算的另一种做法" class="headerlink" title="$\pi(x)$ 函数计算的另一种做法"></a>$\pi(x)$ 函数计算的另一种做法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">2</span>;</span><br><span class="line">LL L[N], R[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL n)</span> </span>&#123;</span><br><span class="line">	LL rn = (LL) <span class="built_in">sqrt</span>(n + <span class="number">0.2</span>);</span><br><span class="line">	<span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= rn; ++i) R[i] = n / i - <span class="number">1</span>;</span><br><span class="line">	LL ln = n / (rn + <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= ln; ++i) L[i] = i - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (LL p = <span class="number">2</span>; p &lt;= rn; ++p) &#123;</span><br><span class="line">		<span class="keyword">if</span> (L[p] == L[p - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">for</span> (LL i = <span class="number">1</span>, tn = <span class="built_in">std</span>::<span class="built_in">min</span>(n / (p * p), rn); i &lt;= tn; ++i) &#123;</span><br><span class="line">			R[i] -= (i * p &lt;= rn ? R[i * p] : L[n / (i * p)]) - L[p - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (LL i = ln; i &gt;= p * p; --i) &#123;</span><br><span class="line">			L[i] -= L[i / p] - L[p - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求奇素数的一个原根"><a href="#求奇素数的一个原根" class="headerlink" title="求奇素数的一个原根"></a>求奇素数的一个原根</h3><blockquote>
<p>代码懒得贴，实际上暴力就可以了</p>
</blockquote>
<p>首先，模 $m$ 有原根的充要条件是：$m=2,4,p^a,2p^a$，其中 $p$ 为奇素数。</p>
<p>对于求模 $p$ 的原根方法：对 $p-1$ 素因子分解：$p-1 = p_1^{a_1} \cdots p_s^{a_s}$ 若恒有 </p>
<script type="math/tex; mode=display">
g^{\frac{p-1}{p_i}} \neq 1(\mod \; p)</script><p>则 $g$ 是 模 $p$ 的原根。对于 $p^a$ 可以用 $p$ 的原根简单构造，而 $2p^a$ 的原根为 $p^a$ 的原根与 $p^a$ 的原根和 $p^a$的和中奇数者。(证明见 P150《数论基础》潘承洞)</p>
<blockquote>
<p>求所有原根见 </p>
</blockquote>
<h3 id="数论函数的-Dirichlet-乘积"><a href="#数论函数的-Dirichlet-乘积" class="headerlink" title="数论函数的 Dirichlet 乘积"></a>数论函数的 Dirichlet 乘积</h3><p>以前的代码不想贴了，不优雅，下次有题做的时候补上。</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="/chineseRemainTheorem/" title="中国剩余定理">中国剩余定理</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;LL,LL&gt; crt2(LL a1,LL m1,LL a2,LL m2)&#123; // x = ai mod mi, m_i &gt;0</span><br><span class="line">	LL t1,t2,ans = a2-a1;</span><br><span class="line">	LL d = exgcd(m1,m2,t1,t2);</span><br><span class="line">	assert(ans%d == <span class="number">0</span>);</span><br><span class="line">	LL m = m1/d*m2;</span><br><span class="line">	ans = (a1+ans/d*t1%m2*m1)%m; <span class="comment">// %m2 是避免溢出</span></span><br><span class="line">	<span class="keyword">return</span> make_pair(ans&gt;<span class="number">0</span>?ans:ans+m,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">22</span>;</span><br><span class="line">LL a[N],m[N];</span><br><span class="line">pair&lt;LL,LL&gt; crt(int n)&#123; // x = a[i] mod m[i], m[i] &gt;0</span><br><span class="line">	pair&lt;LL,LL&gt; ans = make_pair(a[<span class="number">0</span>]%m[<span class="number">0</span>],m[<span class="number">0</span>]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">		ans = crt2(ans.first,ans.second,a[i],m[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="离散对数"><a href="#离散对数" class="headerlink" title="离散对数"></a><a href="http: //blog.miskcoo.com/2015/05/discrete-logarithm-problem">离散对数</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">baby_step_giant_step</span><span class="params">(LL a, LL b, LL p)</span> </span>&#123; <span class="comment">// a^x = b mod p</span></span><br><span class="line">	a %= p, b %= p;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> b % p ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (b == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	LL cnt = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (LL g = <span class="built_in">std</span>::__gcd(a, p); g != <span class="number">1</span>; g = <span class="built_in">std</span>::__gcd(a, p)) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b % g) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		p /= g, b /= g, t = t * (a / g) % p;</span><br><span class="line">		++cnt;</span><br><span class="line">		<span class="keyword">if</span> (b == t) <span class="keyword">return</span> cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">map</span>&lt;LL, LL&gt; mp;</span><br><span class="line">	LL m = LL(<span class="built_in">std</span>::<span class="built_in">sqrt</span>(p + <span class="number">0.1</span>) + <span class="number">1</span>);</span><br><span class="line">	LL base = b;</span><br><span class="line">	<span class="keyword">for</span> (LL i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line">		mp[base] = i;</span><br><span class="line">		base = base * a % p;</span><br><span class="line">	&#125;</span><br><span class="line">	base = powMod(a, m, p);</span><br><span class="line">	<span class="keyword">for</span> (LL i = <span class="number">1</span>; i &lt;= m + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		t = t * base % p;</span><br><span class="line">		<span class="keyword">if</span> (mp.count(t)) <span class="keyword">return</span> i * m - mp[t] + cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模素数开根号"><a href="#模素数开根号" class="headerlink" title="模素数开根号"></a>模素数开根号</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">modsqrt</span><span class="params">(LL a, LL p)</span> </span>&#123; <span class="comment">// find x s.t x*x=a mod p;</span></span><br><span class="line">	a = (p + a % p) % p;</span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="number">2</span>) <span class="keyword">return</span> (a &amp; <span class="number">1</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">	LL q = (p - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (powMod(a, q, p) != <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (q &amp; <span class="number">1</span>) <span class="keyword">return</span> powMod(a, (q + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, p);</span><br><span class="line">	LL b, cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (powMod(b = rand() % p, q, p) == <span class="number">1</span>); <span class="comment">//find a non quadratic residue</span></span><br><span class="line">	<span class="keyword">while</span> (!(q &amp; <span class="number">1</span>)) ++cnt, q &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	b = powMod(b, q, p);</span><br><span class="line">	LL x = powMod(a, (q + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>, p);</span><br><span class="line">	<span class="keyword">for</span> (LL s = <span class="number">1</span>, t = powMod(a, q, p); t != <span class="number">1</span>; s = <span class="number">1</span>) &#123; <span class="comment">//keep x*x=t*a;t^&#123;2^&#123;cnt-1&#125;&#125;=1</span></span><br><span class="line">		<span class="keyword">for</span> (LL tt = t * t % p; s &lt; cnt &amp;&amp; tt != <span class="number">1</span>; ++s) tt = tt * tt % p;</span><br><span class="line">		LL d = powMod(b, <span class="number">1</span> &lt;&lt; (cnt - s - <span class="number">1</span>), p);</span><br><span class="line">		x = (x * d) % p;</span><br><span class="line">		b = d * d % p;</span><br><span class="line">		t = t * b % p;</span><br><span class="line">		cnt = s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">mod_sqrt</span><span class="params">(LL a, LL p, <span class="keyword">int</span> k = <span class="number">1</span>)</span> </span>&#123; <span class="comment">//find smallest x&gt;=0 s.t x*x=a mod p^k</span></span><br><span class="line">	<span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> ka = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (a % p == <span class="number">0</span>) a /= p, ++ka, --k;</span><br><span class="line">	<span class="keyword">if</span> (k &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (ka &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">auto</span> <span class="built_in">pow</span> = [](LL x, <span class="keyword">int</span> n) &#123;</span><br><span class="line">		LL r=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (; n; n &gt;&gt;= <span class="number">1</span>, x *= x)  <span class="keyword">if</span> (n&amp;<span class="number">1</span>) r *= x;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL n = <span class="built_in">pow</span>(p, k), x;</span><br><span class="line">	<span class="keyword">if</span> (p == <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (k == <span class="number">1</span> || k == <span class="number">2</span>) x = a == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a % <span class="number">8</span> != <span class="number">1</span>) x = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			x = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= k; ++i) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((x * x) % (<span class="number">1</span> &lt;&lt; i) == a % (<span class="number">1</span> &lt;&lt; i)) <span class="keyword">continue</span>;</span><br><span class="line">				x += <span class="number">1</span> &lt;&lt; (i - <span class="number">2</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> x = mod_sqrt_p(a, n, p, k);</span><br><span class="line">	<span class="keyword">return</span> x == <span class="number">-1</span> ? <span class="number">-1</span> : <span class="built_in">pow</span>(p, ka &gt;&gt; <span class="number">1</span>) * (x &lt; n - x ? x : n - x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对于模一般的 $n$，先素因子分解分别求出答案，然后用中国剩余定理求最终解。</p>
</blockquote>
<h3 id="自然数方幂和-O-k-算法"><a href="#自然数方幂和-O-k-算法" class="headerlink" title="自然数方幂和 $O(k)$ 算法"></a>自然数方幂和 $O(k)$ 算法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> sp[N], p[N];</span><br><span class="line">LL inv[N], AP[N], AS[N], f[N];</span><br><span class="line"><span class="function">LL <span class="title">getPowSum</span><span class="params">(LL n, <span class="keyword">int</span> k, LL mod)</span> </span>&#123; <span class="comment">// mod &gt; k</span></span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> n % mod;</span><br><span class="line">	<span class="keyword">if</span> (p[<span class="number">0</span>] != <span class="number">2</span>) spf();</span><br><span class="line">	<span class="keyword">int</span> nk = k + <span class="number">1</span>;</span><br><span class="line">	LL tmp = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nk; ++i) tmp = tmp * i % mod;</span><br><span class="line">	inv[nk] = powMod(tmp, mod - <span class="number">2</span>, mod);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = nk - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) inv[i] = inv[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nk; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) f[i] = powMod(i, k, mod);</span><br><span class="line">		<span class="keyword">else</span> f[i] = f[sp[i]] * f[i / sp[i]] % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nk; ++i) &#123;</span><br><span class="line">		f[i] += f[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span> (f[i] &gt;= mod) f[i] -= mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= nk) <span class="keyword">return</span> f[n];</span><br><span class="line">	AP[<span class="number">0</span>] = AS[nk] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nk; ++i) AP[i] = AP[i - <span class="number">1</span>] * (n + <span class="number">1</span> - i) % mod;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = nk - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) AS[i] = AS[i + <span class="number">1</span>] * (n - i - <span class="number">1</span>) % mod;</span><br><span class="line">	LL res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nk; ++i) &#123; <span class="comment">// because f(i)=0</span></span><br><span class="line">		LL x = f[i] * AP[i] % mod * AS[i] % mod * inv[i] % mod * inv[nk - i] % mod;</span><br><span class="line">		<span class="keyword">if</span> ((nk - i) &amp; <span class="number">1</span>) res -= x; <span class="comment">// be careful</span></span><br><span class="line">		<span class="keyword">else</span> res += x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> (res % mod + mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="自然数方幂和精确版"><a href="#自然数方幂和精确版" class="headerlink" title="自然数方幂和精确版"></a>自然数方幂和精确版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> BINT = boost::multiprecision::cpp_int;</span><br><span class="line"></span><br><span class="line">BINT f[N];</span><br><span class="line"><span class="function">BINT <span class="title">getPowSum</span><span class="params">(LL n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="comment">// k&lt;1000</span></span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> BINT(n);</span><br><span class="line">	<span class="keyword">if</span> (p[<span class="number">1</span>] != <span class="number">2</span>) spf();</span><br><span class="line">	<span class="keyword">int</span> nk = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">auto</span> bPow = [](BINT x, <span class="keyword">int</span> n) -&gt; BINT &#123;</span><br><span class="line">		BINT r(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (; n; x *= x, n &gt;&gt;= <span class="number">1</span>) <span class="keyword">if</span> (n&amp;<span class="number">1</span>) r *= x;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nk + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) f[i] = bPow(BINT(i), k);</span><br><span class="line">		<span class="keyword">else</span> f[i] = f[sp[i]] * f[i / sp[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nk; ++i) f[i] += f[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= nk) <span class="keyword">return</span> f[n];</span><br><span class="line">	BINT res = <span class="number">0</span>, tl = <span class="number">1</span>, tr = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = nk - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) tr = tr * (n - i - <span class="number">1</span>) / (nk - i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nk; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((nk - i) &amp; <span class="number">1</span>) res -= f[i] * tl * tr;</span><br><span class="line">		<span class="keyword">else</span> res += f[i] * tl * tr;</span><br><span class="line">		tl = tl * (n - i) / (i + <span class="number">1</span>);</span><br><span class="line">		tr = tr * (nk - i) / (n - i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>需要下载<a href="https://www.boost.org/" target="_blank" rel="noopener">boost 包</a> 类似的包还有 NTL，GMP</p>
</blockquote>
<h2 id="生成函数"><a href="#生成函数" class="headerlink" title="生成函数"></a>生成函数</h2><p>在 codeforces 上 <code>zscoder</code> 大佬给了一个 <a href="https://codeforces.com/blog/entry/77468" target="_blank" rel="noopener">入门教程</a> 和 <a href="https://codeforces.com/blog/entry/77551" target="_blank" rel="noopener">进阶教程</a> 还有 <code>MiFaFaOvO</code> 的 <a href="https://codeforces.com/blog/entry/76447" target="_blank" rel="noopener">终极教程</a></p>
<p>生成函数分两种：Original generating function，Expentional generating function，选择哪一种是看问题中是否牵扯组合数。无论哪一种都能保存原数列的全部信息，并且由于级数可以使用微积分和常微分方程的技术，所以会变得更好处理。然后大概率可以优化算法复杂度 $O(n^2) \to O(n \log n)$ </p>
<p>关于生成函数多项式的处理：<a href="https://cp-algorithms.com/algebra/polynomial.html" target="_blank" rel="noopener">https://cp-algorithms.com/algebra/polynomial.html</a></p>
<p>多项式高效运算模板：<a href="https://github.com/e-maxx-eng/e-maxx-eng-aux/blob/master/src/polynomial.cpp" target="_blank" rel="noopener">https://github.com/e-maxx-eng/e-maxx-eng-aux/blob/master/src/polynomial.cpp</a></p>
<p><strong>生成函数一般的处理思路</strong>：计算生成函数，分解成有分母不超过二次的分式之和，然后每一个二次的分母部分找一个递推数列来搞定。</p>
<p><a href="https://oi-wiki.org/math/poly/intro/" target="_blank" rel="noopener">OI-wiki 多项式运算</a></p>
<h3 id="多项式取对数和指数"><a href="#多项式取对数和指数" class="headerlink" title="多项式取对数和指数"></a>多项式取对数和指数</h3><p>$B(z) = e^{A(z)}$，即 $A(z) = \ln B(z)$ (不妨假设 $A(0) = 0$ 或等价地 $B(0) = 1$)</p>
<p>那么 $B’(z) = A’(z) \cdot B(z)$, 所以 $[z^{n - 1}] B’(z) = \sum_{k = 0}^{n - 1} [z^k] A’(z) \cdot B(z) [z^{n - 1 - k}] = \sum_{k = 1}^{n} [z^{k - 1}] A’(z) \cdot B(z) [z^{n-k}]$，从而</p>
<script type="math/tex; mode=display">
n [z^n] B(z) = \sum_{k = 1}^n k [z^k] A(z) \cdot B(z) [z^{n - k}]</script><p>上式等价于</p>
<script type="math/tex; mode=display">
n [z^n] A(z) = n [z^n] B(z) - \sum_{k = 1}^{n - 1} k [z^k] A(z) \cdot B(z) [z^{n - k}]</script><blockquote>
<p>参考：<a href="https://www.cnblogs.com/Soulist/p/13758388.html" target="_blank" rel="noopener">Soulist</a></p>
</blockquote>
<h3 id="NFT-正式可用版-last-updated-2020-7-9"><a href="#NFT-正式可用版-last-updated-2020-7-9" class="headerlink" title="NFT 正式可用版(last updated: 2020/7/9)"></a>NFT 正式可用版(last updated: 2020/7/9)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>, ROOT = <span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powMod</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>) r = r * x % M;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		x = x * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; j) <span class="built_in">std</span>::swap(a[i], a[j]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = a.<span class="built_in">size</span>() &gt;&gt; <span class="number">1</span>;</span><br><span class="line">			(j ^= l) &lt; l; l &gt;&gt;= <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; &amp;a, <span class="keyword">bool</span> isInverse = <span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">	LL g = powMod(ROOT, (M - <span class="number">1</span>) / a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span> (isInverse) &#123;</span><br><span class="line">		g = powMod(g, M - <span class="number">2</span>);</span><br><span class="line">		LL invLen = powMod(LL(a.<span class="built_in">size</span>()), M - <span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) x = x * invLen % M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(), <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != w.<span class="built_in">size</span>(); ++i) w[i] = w[i - <span class="number">1</span>] * g % M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x, LL y) &#123;</span><br><span class="line">		<span class="keyword">return</span> (x += y) &gt;= M ? x -= M : x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>, half = <span class="number">1</span>; half != a.<span class="built_in">size</span>(); <span class="built_in">step</span> &lt;&lt;= <span class="number">1</span>, half &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, wstep = a.<span class="built_in">size</span>() / <span class="built_in">step</span>; i != a.<span class="built_in">size</span>(); i += <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i; j != i + half; ++j) &#123;</span><br><span class="line">				LL t = (a[j + half] * w[wstep * (j - i)]) % M;</span><br><span class="line">				a[j + half] = addMod(a[j], M - t);</span><br><span class="line">				a[j] = addMod(a[j], t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&amp; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz = <span class="number">1</span>, tot = a.<span class="built_in">size</span>() + b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (sz &lt; tot) sz *= <span class="number">2</span>;</span><br><span class="line">	a.resize(sz);</span><br><span class="line">	b.resize(sz);</span><br><span class="line">	nft(a);</span><br><span class="line">	nft(b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != sz; ++i) a[i] = a[i] * b[i] % M;</span><br><span class="line">	nft(a, <span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="siyuan-的-FWT-模板-（弃用）"><a href="#siyuan-的-FWT-模板-（弃用）" class="headerlink" title="siyuan 的 FWT 模板 （弃用）"></a><a href="https://blog.orzsiyuan.com/archives/Fast-Walsh-Hadamard-Transform/" target="_blank" rel="noopener">siyuan 的 FWT 模板</a> （弃用）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x += y) &gt;= P &amp;&amp; (x -= P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FWT</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; N &lt; n; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j + m], a[i + j]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j + m], a[i + j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTand</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j], a[i + j + m]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j], a[i + j + m]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTxor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>(), inv2 = (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = a[i + j + m];</span><br><span class="line">                <span class="keyword">if</span> (!rev) &#123;</span><br><span class="line">                    a[i + j] = (x + y) % P;</span><br><span class="line">                    a[i + j + m] = (x - y + P) % P;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a[i + j] = <span class="number">1L</span>L * (x + y) * inv2 % P;</span><br><span class="line">                    a[i + j + m] = <span class="number">1L</span>L * (x - y + P) * inv2 % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Or</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">And</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTand(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTand(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTand(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Xor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTxor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTxor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTxor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; fwt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    std::vector&lt;int&gt; a1(n), a2(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a1[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a2[i]);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    A = fwt.Or(a1, a2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i], <span class="string">" \n"</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    A = fwt.And(a1, a2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i], <span class="string">" \n"</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    A = fwt.Xor(a1, a2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, A[i], <span class="string">" \n"</span>[i == n - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>FWT 和 FMT 本质上是一致的，只是写法姿势不同。FWT 是用递归的思想写的，FMT 是用逐位计算写的。别人的总归用起来不舒服，还是用下面自己写的 FMT 模板吧！</p>
</blockquote>
<h3 id="FMT-模板"><a href="#FMT-模板" class="headerlink" title="FMT 模板"></a>FMT 模板</h3><blockquote>
<p>考虑数论函数的 <a href="/dirichletProduct/" title="Dirichlet 积">Dirichlet 积</a> 中的 Mobius 变换（本质就是带条件的求和）这里的变换也就是的各个位上的带条件求和。<br>例题：<a href="https://www.luogu.com.cn/problem/P6097" target="_blank" rel="noopener">洛谷 P6097</a>， 参考：<a href="https://www.cnblogs.com/yijan/p/12387352.html" target="_blank" rel="noopener">yijan</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> FMT &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = (M + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [](<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">	(x += y) &gt;= M &amp;&amp; (x -= M);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> sub = [](<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y) &#123;</span><br><span class="line">	(x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += M);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> extend = [](<span class="keyword">int</span> n) &#123;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="built_in">std</span>::<span class="built_in">log</span>(n);</span><br><span class="line">	<span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; r) &lt; n) ++r;</span><br><span class="line">	<span class="keyword">return</span> r; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> FMTor = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> isRev) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = extend(a.<span class="built_in">size</span>());</span><br><span class="line">	a.resize(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); ++j) <span class="keyword">if</span> ((j &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isRev) sub(a[j], a[j ^ (<span class="number">1</span> &lt;&lt; i)]);</span><br><span class="line">			<span class="keyword">else</span> add(a[j], a[j ^ (<span class="number">1</span> &lt;&lt; i)]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> FMTand = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> isRev) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = extend(a.<span class="built_in">size</span>());</span><br><span class="line">	a.resize(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) <span class="keyword">if</span> ((j &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (isRev) sub(a[j ^ (<span class="number">1</span> &lt;&lt; i)], a[j]);</span><br><span class="line">			<span class="keyword">else</span> add(a[j ^ (<span class="number">1</span> &lt;&lt; i)], a[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> FMTxor = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> isRev) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = extend(a.<span class="built_in">size</span>());</span><br><span class="line">	a.resize(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) <span class="keyword">if</span> ((j &gt;&gt; i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> u = a[j], v = a[j ^ (<span class="number">1</span> &lt;&lt; i)];</span><br><span class="line">			a[j] = (v - u + M) % M;</span><br><span class="line">			a[j ^ (<span class="number">1</span> &lt;&lt; i)] = (u + v) % M;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (isRev) <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) x = LL(inv2) * x % M;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> fun = [](<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;, <span class="keyword">bool</span>)&gt; f, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = extend(<span class="built_in">std</span>::<span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()));</span><br><span class="line">	a.resize(<span class="number">1</span> &lt;&lt; n); b.resize(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">	f(a, <span class="number">0</span>); f(b, <span class="number">0</span>);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) c[i] = LL(a[i]) * b[i] % M;</span><br><span class="line">	f(c, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> Or = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">	<span class="keyword">return</span> fun(FMTor, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> And = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">	<span class="keyword">return</span> fun(FMTand, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> Xor = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">	<span class="keyword">return</span> fun(FMTxor, a, b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// i = j | k and j &amp; k = 0</span></span><br><span class="line"><span class="keyword">auto</span> OrAnd = [](<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b) &#123;</span><br><span class="line">	<span class="keyword">int</span> n = extend(<span class="built_in">std</span>::<span class="built_in">max</span>(a.<span class="built_in">size</span>(), b.<span class="built_in">size</span>()));</span><br><span class="line">	a.resize(<span class="number">1</span> &lt;&lt; n); b.resize(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">sa</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; n))</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> sb = sa, sc = sa;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) sa[__builtin_popcount(i)][i] = a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) sb[__builtin_popcount(i)][i] = b[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		FMTor(sa[i], <span class="number">0</span>);FMTor(sb[i], <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; n); ++k) &#123;</span><br><span class="line">				add(sc[i][k], LL(sa[j][k]) * sb[i - j][k] % M);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		FMTor(sc[i], <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) c[i] = sc[__builtin_popcount(i)][i];</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>namespace 真香！</p>
</blockquote>
<h3 id="矩阵类"><a href="#矩阵类" class="headerlink" title="矩阵类"></a>矩阵类</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">LL mod;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">102</span>;</span><br><span class="line">	LL a[N][N];</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	Matrix() &#123;&#125;</span><br><span class="line">	Matrix(<span class="keyword">int</span> _n, <span class="keyword">int</span> x = <span class="number">0</span>): n(_n) &#123; <span class="comment">// xIn</span></span><br><span class="line">		all(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			a[i][i] = x;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">all</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">				a[i][j] = x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Matrix <span class="keyword">operator</span> + (<span class="keyword">const</span> Matrix &amp; A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="function">Matrix <span class="title">R</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">				R.a[i][j] = a[i][j] + A.a[i][j];</span><br><span class="line">				<span class="keyword">if</span> (R.a[i][j] &gt;= mod) R.a[i][j] -= mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R;</span><br><span class="line">	&#125;</span><br><span class="line">	Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp; A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="function">Matrix <span class="title">R</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; ++k) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">					R.a[i][j] = (R.a[i][j] + a[i][k] * A.a[k][j]) % mod;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Matrix <span class="title">pow</span><span class="params">(Matrix A, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="function">Matrix <span class="title">R</span><span class="params">(A.n, <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (n) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n&amp;<span class="number">1</span>) R = R * A;</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>; A = A * A;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意到，矩阵乘法一定要写成上面的循环形式，这样利用高速缓存执行时间是原有的 $\frac{1}{4}$</p>
<p>另外有序数组的累和要比无序的快很多，也是因为高速缓存（这个不太懂原理）</p>
</blockquote>
<h3 id="Gauss-消元法浮点版"><a href="#Gauss-消元法浮点版" class="headerlink" title="Gauss 消元法浮点版"></a>Gauss 消元法浮点版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">Gauss</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&gt; A, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = A[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line">	<span class="keyword">auto</span> findNonZero = [&amp;](<span class="keyword">int</span> i) &#123; <span class="comment">// 实际上找最大的比较好</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i; row &lt; n; ++row) <span class="keyword">if</span> (<span class="built_in">fabs</span>(A[row][i]) &gt; eps) <span class="keyword">return</span> row;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> triangleGauss = [&amp;](<span class="keyword">int</span> sz) &#123; <span class="comment">// A[i][i] = 1</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; x(sz);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = sz - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">			x[i] = b[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; i; ++row) b[row] -= A[row][i] * x[i];</span><br><span class="line">		&#125;</span><br><span class="line">		x.resize(A[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> sz = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, row; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">			row = findNonZero(i);</span><br><span class="line">			<span class="keyword">if</span> (row != n) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) A[j][i] = A[j][m - <span class="number">1</span>];</span><br><span class="line">			<span class="built_in">std</span>::swap(p[i], p[--m]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = m; row &lt; n; ++row) <span class="keyword">if</span> (<span class="built_in">fabs</span>(b[row])) &#123;</span><br><span class="line">				<span class="comment">// std::cout &lt;&lt; "\nNo answer\n";</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			sz = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (row != i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::swap(A[row], A[i]);</span><br><span class="line">			<span class="built_in">std</span>::swap(b[row], b[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		b[i] /= A[i][i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) A[i][j] /= A[i][i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i + <span class="number">1</span>; row &lt; n; ++row) &#123;</span><br><span class="line">			b[row] -= A[row][i] * b[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">				A[row][j] -= A[row][i] * A[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// if (sz != A[0].size()) std::cout &lt;&lt; "\nInfinite answer\n";</span></span><br><span class="line">	<span class="keyword">auto</span> xt = triangleGauss(sz);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; A[<span class="number">0</span>].<span class="built_in">size</span>(); ++t) x[p[t]] = xt[t];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Gauss-消元法有限域版"><a href="#Gauss-消元法有限域版" class="headerlink" title="Gauss 消元法有限域版"></a>Gauss 消元法有限域版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// make sure 0 &lt;= A[i][j], b[i] &lt; M</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">Gauss</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;&gt; A, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = A[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;LL(LL)&gt; inv = [&amp;](LL a) -&gt; LL &#123;</span><br><span class="line">		<span class="keyword">return</span> a == <span class="number">1</span> ? <span class="number">1</span> : (M - M / a) * inv(M % a) % M; </span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> sub = [](LL &amp;x, LL y) &#123;</span><br><span class="line">		(x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += M);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> triangleGauss = [&amp;](<span class="keyword">int</span> sz) &#123; <span class="comment">// A[i][i] = 1</span></span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; x(sz);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = sz - <span class="number">1</span>; i &gt;=<span class="number">0</span>; --i) &#123;</span><br><span class="line">			x[i] = (b[i] + M) % M;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; i; ++row) sub(b[row], A[row][i] * x[i] % M);</span><br><span class="line">		&#125;</span><br><span class="line">		x.resize(A[<span class="number">0</span>].<span class="built_in">size</span>());</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> findNonZero = [&amp;](<span class="keyword">int</span> i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i; row &lt; n; ++row) <span class="keyword">if</span> (A[row][i]) <span class="keyword">return</span> row;</span><br><span class="line">		<span class="keyword">return</span> n;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> sz = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, row; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; m) &#123;</span><br><span class="line">			row = findNonZero(i);</span><br><span class="line">			<span class="keyword">if</span> (row != n) <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) A[j][i] = A[j][m - <span class="number">1</span>];</span><br><span class="line">			<span class="built_in">std</span>::swap(p[i], p[--m]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i == m) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> row = m; row &lt; n; ++row) <span class="keyword">if</span> (b[row]) &#123;</span><br><span class="line">				<span class="comment">// std::cout &lt;&lt; "\nNo answer\n";</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt;();</span><br><span class="line">			&#125;</span><br><span class="line">			sz = i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (row != i) &#123;</span><br><span class="line">			<span class="built_in">std</span>::swap(A[i], A[row]);</span><br><span class="line">			<span class="built_in">std</span>::swap(b[i], b[row]);</span><br><span class="line">		&#125;</span><br><span class="line">		LL inva = inv(A[i][i]);</span><br><span class="line">		(b[i] *= inva) %= M;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) (A[i][j] *= inva) %= M;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> row = i + <span class="number">1</span>; row &lt; n; ++row) &#123;</span><br><span class="line">			sub(b[row], A[row][i] * b[i] % M);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= i; --j) &#123;</span><br><span class="line">				sub(A[row][j], A[row][i] * A[i][j] % M);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// if (sz != A[0].size()) std::cout &lt;&lt; "\nInfinite answer\n";</span></span><br><span class="line">	<span class="keyword">auto</span> xt = triangleGauss(sz);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; A[<span class="number">0</span>].<span class="built_in">size</span>(); ++t) x[p[t]] = xt[t];</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="：例题"><a href="#：例题" class="headerlink" title="：例题"></a><a href="/simplex/" title="线性规划单纯形法">线性规划单纯形法</a>：<a href="https://vjudge.net/problem/Kattis-cheeseifyouplease" target="_blank" rel="noopener">例题</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> VD = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e10</span>;</span><br><span class="line"><span class="comment">// make sure that A = (I, A') and b &gt;= 0, compute max cx</span></span><br><span class="line"><span class="function">VD <span class="title">simplexCore</span><span class="params">(VD c, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; A, VD b)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = A.<span class="built_in">size</span>(), m = c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) A[i].emplace_back(b[i]);</span><br><span class="line">	c.emplace_back(<span class="number">0</span>);</span><br><span class="line">	A.emplace_back(c);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			A[n][j] -= A[n][i] * A[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> check = [&amp;]() -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt; m; ++j) <span class="keyword">if</span> (A[n][j] &gt; eps) &#123;</span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (A[i][j] &gt; eps) &#123;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">		<span class="keyword">int</span> ch = <span class="built_in">std</span>::max_element(A[n].<span class="built_in">begin</span>() + n, A[n].<span class="built_in">begin</span>() + m) - A[n].<span class="built_in">begin</span>(), hc;</span><br><span class="line">		<span class="keyword">if</span> (A[n][ch] &lt; eps) <span class="keyword">break</span>;	</span><br><span class="line">		assert(check()); <span class="comment">// otherwise unbounded, no max solution</span></span><br><span class="line">		<span class="keyword">double</span> theta = DBL_MAX;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (A[i][ch] &gt; eps &amp;&amp; A[i].back() / A[i][ch] &lt; theta) &#123;</span><br><span class="line">			theta = A[i].back() / A[i][ch];</span><br><span class="line">			hc = i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::swap(p[ch], p[hc]);</span><br><span class="line">		<span class="keyword">double</span> tmp = <span class="number">1</span> / A[hc][ch];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) A[hc][j] *= tmp;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="keyword">if</span> (i != hc) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt;= m; ++j) <span class="keyword">if</span> (j != ch) &#123;</span><br><span class="line">				A[i][j] -= A[i][ch] * A[hc][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) A[i][ch] *= -tmp;</span><br><span class="line">		A[hc][ch] = tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">VD <span class="title">x</span><span class="params">(m)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) x[p[i]] = A[i].back();</span><br><span class="line">	<span class="comment">// watch(-A.back().back()); // max_val</span></span><br><span class="line">	<span class="keyword">return</span> x; <span class="comment">// point Corresponds to max_val</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// compute max cx, with Aqx = bq and Alq x &lt;= blq, end of 0 can be ommit in A and Aq</span></span><br><span class="line"><span class="function">VD <span class="title">simplex</span><span class="params">(VD c, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; Aq, VD bq, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; Alq, VD blq)</span> </span>&#123;</span><br><span class="line">	assert(Aq.<span class="built_in">size</span>() == bq.<span class="built_in">size</span>());</span><br><span class="line">	assert(Alq.<span class="built_in">size</span>() == blq.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">int</span> n = Aq.<span class="built_in">size</span>() + Alq.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> m = c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bq.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (bq[i] &lt; -eps) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Aq[i]) x = -x;</span><br><span class="line">		bq[i] = -bq[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; blq.<span class="built_in">size</span>(); ++i) <span class="keyword">if</span> (blq[i] &lt; -eps) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : Alq[i]) x = -x;</span><br><span class="line">		++m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;VD&gt; <span class="title">A</span><span class="params">(n, VD(n + m))</span></span>;</span><br><span class="line">	VD f(n + m), b(n);</span><br><span class="line">	<span class="keyword">int</span> now = n + c.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) A[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Aq.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Aq[i].<span class="built_in">size</span>(); ++j) A[i][n + j] = Aq[i][j];</span><br><span class="line">		b[i] = bq[i];</span><br><span class="line">		f[i] = -inf;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Alq.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Alq[i].<span class="built_in">size</span>(); ++j) A[i + Aq.<span class="built_in">size</span>()][n + j] = Alq[i][j];</span><br><span class="line">		<span class="keyword">if</span> (blq[i] &lt; -eps) &#123;</span><br><span class="line">			A[i + Aq.<span class="built_in">size</span>()][now++] = <span class="number">-1</span>;</span><br><span class="line">			f[i + Aq.<span class="built_in">size</span>()] = -inf;</span><br><span class="line">		&#125;</span><br><span class="line">		b[i + Aq.<span class="built_in">size</span>()] = <span class="built_in">fabs</span>(blq[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.<span class="built_in">size</span>(); ++i) f[n + i] = c[i];</span><br><span class="line">	<span class="keyword">auto</span> x = simplexCore(f, A, b);</span><br><span class="line">	<span class="keyword">return</span> VD(x.<span class="built_in">begin</span>() + n, x.<span class="built_in">begin</span>() + n + c.<span class="built_in">size</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h3><p>$n$ 个变量，$m$ 个约束条件，每个约束条件都形如 $x_i - x_j \leq c_k$，此时我们从节点 j 向 i 连一条长度为 $c_k$ 的有向边，（如果有等于号，我们就连两条），设 <code>dist[0] = 0</code>，然后 0 节点向所有节点连一条长度为 0 的有向边。跑单源最短路，如果环中有负环，那么无解，否则 $x_i = dist[i]$ 为一组解。</p>
<p>可用图论中 Bellman-Ford 算法，或 spfa（随笔图跑的快），例题：<a href="https://www.luogu.com.cn/problem/P1993" target="_blank" rel="noopener">LOJ P1993</a>，<a href="https://www.luogu.com.cn/record/46227278" target="_blank" rel="noopener">spfa 做法</a>，<a href="https://www.luogu.com.cn/record/46228308" target="_blank" rel="noopener">Bellman-Ford 做法</a></p>
<blockquote>
<p>变式：$\frac{x_i}{x_j} \leq c_k$（取 log 即可）</p>
</blockquote>
<h3 id="求-m-阶线性递推关系式第-n-项：时间复杂度-O-m-2-log-n-，本质是做多项式的带模乘法"><a href="#求-m-阶线性递推关系式第-n-项：时间复杂度-O-m-2-log-n-，本质是做多项式的带模乘法" class="headerlink" title="求$m$阶线性递推关系式第$n$项：时间复杂度$O(m^2 \log n)$，本质是做多项式的带模乘法"></a>求$m$阶线性递推关系式第$n$项：时间复杂度$O(m^2 \log n)$，本质是做多项式的带模乘法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1003</span>;</span><br><span class="line">LL c[M], ans[<span class="number">2</span> * M];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecSeq</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	LL a[<span class="number">2</span> * M];</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	RecSeq(<span class="keyword">int</span> _m, LL x = <span class="number">0</span>): m(_m) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> (a));</span><br><span class="line">		a[<span class="number">0</span>] = x;</span><br><span class="line">	&#125;</span><br><span class="line">	RecSeq <span class="keyword">operator</span> * (<span class="keyword">const</span> RecSeq &amp; A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="function">RecSeq <span class="title">R</span><span class="params">(m)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">				R.a[i + j] = (R.a[i + j] + a[i] * A.a[j]) % mod;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * m - <span class="number">2</span>; i &gt;= m; --i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">				R.a[i - m + j] += (R.a[i] * c[j]) % mod;</span><br><span class="line">			&#125;</span><br><span class="line">			R.a[i] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">			R.a[i] %= mod;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt; <span class="keyword">typename</span> T &gt;</span><br><span class="line">	<span class="function">T <span class="title">tPow</span><span class="params">(T &amp; A, LL n)</span> </span>&#123;</span><br><span class="line">		<span class="function">T <span class="title">R</span><span class="params">(A.m, <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">while</span> (n) &#123;</span><br><span class="line">			<span class="keyword">if</span> (n &amp; <span class="number">1</span>) R = R * A;</span><br><span class="line">			n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">			A = A * A;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initC</span><span class="params">(<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span> (c));</span><br><span class="line">	c[<span class="number">0</span>] = c[m - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		ans[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	ans[m] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt; <span class="number">2</span> * m; ++i) &#123;</span><br><span class="line">		ans[i] = ans[i - <span class="number">1</span>] + ans[i - m];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(LL n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	initC(m);</span><br><span class="line">	<span class="function">RecSeq <span class="title">A</span><span class="params">(m)</span></span>;</span><br><span class="line">	A.a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	RecSeq R = tPow(A, n - m);</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		r += (R.a[i] * ans[i + m]) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用<a href="https://cp-algorithms.com/algebra/polynomial.html" target="_blank" rel="noopener">多项式带模除法：Division with remainder</a>的 $O(m \log m)$ 算法，可优化到 $O(m \log m \log n)$，</p>
<p>但是如果递推关系中仅有常数个不为 0，比如通常是两个，也可以不用多项式带模除法来搞，只需 NFT 就可以优化到 $O(m \log m \log n + m^2)$ （暂时不知道如何去掉 $m^2$）</p>
</blockquote>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a><a href="/nimSgFunction/" title="博弈">博弈</a></h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="并查集（Disjoint-Set-Union）"><a href="#并查集（Disjoint-Set-Union）" class="headerlink" title="并查集（Disjoint Set Union）"></a>并查集（Disjoint Set Union）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始情形: p[i] = i</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// p[find(j)] = p[find(i)];</span></span><br><span class="line">	<span class="comment">// In general we should write below, and merge small to big</span></span><br><span class="line">	<span class="comment">// int fi = find(i), fj = find(j);</span></span><br><span class="line">	<span class="comment">// if (fi != fj) p[fi] = fj;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回的是离散化之后的数组值对应的原始值</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; <span class="title">discrete</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> b = a;</span><br><span class="line">	<span class="built_in">std</span>::sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">	b.erase(<span class="built_in">std</span>::unique(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>()), b.<span class="built_in">end</span>());</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt; <span class="title">r</span><span class="params">(b.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x : a) &#123;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="built_in">std</span>::lower_bound(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), x) - b.<span class="built_in">begin</span>();</span><br><span class="line">		r[id] = x;</span><br><span class="line">		x = id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="逆序数"><a href="#逆序数" class="headerlink" title="逆序数"></a>逆序数</h3><ol>
<li>直接求 $O(n^2)$ 没啥好写的。</li>
<li>把原数组每个位置进行编号，排序，然后每次把最大的数的编号丢进树状数组中，丢进去先看这个编号前面有多少个数，累加一下就可以了，$O(n^2)$，结合下面树状数组的知识还是很简单的。</li>
<li>带离散化的树状数组（就是如果元素的数值特别大，树状数组内存就不够了，所以需要离散化一下）</li>
<li>归并的求（不会也不想搞 0.0）</li>
<li>逐位处理（代码如下）</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// all number in a are nonegetive</span></span><br><span class="line"><span class="function">LL <span class="title">inverseNumber</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">	LL r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">int</span> dn = <span class="built_in">std</span>::<span class="built_in">log</span>(*<span class="built_in">std</span>::max_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>())) + <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= dn; ++d) &#123;</span><br><span class="line">		<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">		<span class="built_in">std</span>::iota(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">		<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(),[&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">			<span class="keyword">return</span> (a[i] &gt;&gt; d) &lt; (a[j] &gt;&gt; d) || ((a[i] &gt;&gt; d) == (a[j] &gt;&gt; d) &amp;&amp; i &lt; j);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i = j) &#123;</span><br><span class="line">			<span class="keyword">int</span> x1 = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; n &amp;&amp; (a[p[i]] &gt;&gt; d) == (a[p[j]] &gt;&gt; d)) &#123;</span><br><span class="line">				<span class="keyword">if</span> ((a[p[j]] &gt;&gt; (d - <span class="number">1</span>)) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">					++x1;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					r += x1;</span><br><span class="line">				&#125;</span><br><span class="line">				++j;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="树状数组（单点更新，从-1-到某个位置的最小值）"><a href="#树状数组（单点更新，从-1-到某个位置的最小值）" class="headerlink" title="树状数组（单点更新，从 1 到某个位置的最小值）"></a>树状数组（单点更新，从 1 到某个位置的最小值）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArrayMin</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">	TreeArrayMin() &#123;&#125;</span><br><span class="line">	TreeArrayMin(<span class="keyword">int</span> n) : s(n + <span class="number">1</span>, INT_MAX) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			s[id] = <span class="built_in">std</span>::<span class="built_in">min</span>(s[id], p);</span><br><span class="line">			id += lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 计算区间 [1, id] 的最小值</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> r = INT_MAX;</span><br><span class="line">		<span class="keyword">while</span> (id) &#123;</span><br><span class="line">			r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, s[id]);</span><br><span class="line">			id -= lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="树状数组（单点更新，区间求和，编号从-1-开始）"><a href="#树状数组（单点更新，区间求和，编号从-1-开始）" class="headerlink" title="树状数组（单点更新，区间求和，编号从 1 开始）"></a>树状数组（单点更新，区间求和，编号从 1 开始）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeArray</span> &#123;</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; s;</span><br><span class="line">	TreeArray() &#123;&#125;</span><br><span class="line">	TreeArray(<span class="keyword">int</span> n) : s(n + <span class="number">1</span>) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; </span><br><span class="line">		<span class="keyword">return</span> n &amp; (-n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (id &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			s[id] += p;</span><br><span class="line">			id += lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		LL r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (id) &#123;</span><br><span class="line">			r += s[id];</span><br><span class="line">			id -= lowbit(id);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find minimal index s.t. sum(id) &gt;= x, sum must be increased</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(LL val)</span> </span>&#123;</span><br><span class="line">		LL sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">std</span>::__lg(s.<span class="built_in">size</span>()); ~i; --i) &#123;</span><br><span class="line">			<span class="keyword">if</span> (id + (<span class="number">1</span> &lt;&lt; i) &lt; s.<span class="built_in">size</span>() &amp;&amp; sum + s[id + (<span class="number">1</span> &lt;&lt; i)] &lt; val) &#123;</span><br><span class="line">				id += (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">				sum += s[id];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ++id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="树状数组（区间更新，区间求和，编号从-1-开始）"><a href="#树状数组（区间更新，区间求和，编号从-1-开始）" class="headerlink" title="树状数组（区间更新，区间求和，编号从 1 开始）"></a>树状数组（区间更新，区间求和，编号从 1 开始）</h3><p>有了单点更新的树状数组，只需简单利用差分就可以变成区间的更新了。<br>设原始数组为 <code>a[1 ~ n]</code>， 定义 <code>c[i] = a[i] - a[i - 1], (a[0] = 0)</code> 显然</p>
<script type="math/tex; mode=display">
\sum_{i = 1}^m a_i = \sum_{i = 1}^m (m - i + 1) c_i = m \sum_{i = 1}^m c_i - \sum_{i = 1}^m (i - 1) c_i</script><p>比如对区间 <code>[l, r]</code> 做更新，那么就只需更新两点：<code>r + 1, l</code> ，套用之前的类就行了。</p>
<blockquote>
<p>注意在树状数组中搜索本来应该是 $O(\log ^2 n)$，但是因为在 $2^i$ 的位置搜索时，一步到位。所以复杂度会降到 $O(\log n)$：<a href="https://codeforces.com/blog/entry/61364" target="_blank" rel="noopener">理论依据</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeArrayPlus</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="comment">// c[i] = a[i] - a[i - 1], b_i = (i - 1) * c_i</span></span><br><span class="line">	TreeArray B, C;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		C.add(id, p);</span><br><span class="line">		B.add(id, (id - <span class="number">1</span>) * p);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	TreeArrayPlus() &#123;&#125;</span><br><span class="line">	TreeArrayPlus(<span class="keyword">int</span> _n) : n(_n), B(n), C(n) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		add(l, p);</span><br><span class="line">		add(r + <span class="number">1</span>, -p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id * C.sum(id) - B.sum(id);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> sum(r) - sum(l - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find minimal index s.t. sum(id) &gt;= x, sum must be increased</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(LL val)</span> </span>&#123;</span><br><span class="line">		LL sumB = <span class="number">0</span>, sumC = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">std</span>::__lg(n); ~i; --i) <span class="keyword">if</span> (<span class="keyword">int</span> idi = id + (<span class="number">1</span> &lt;&lt; i); idi &lt;= n) &#123;</span><br><span class="line">			<span class="keyword">if</span> (idi * (sumC +  C.s[idi]) - B.s[idi] - sumB &lt; val) &#123;</span><br><span class="line">				id = idi;</span><br><span class="line">				sumB += B.s[id];</span><br><span class="line">				sumC += C.s[id];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ++id;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="线段树（正式版）"><a href="#线段树（正式版）" class="headerlink" title="线段树（正式版）"></a>线段树（正式版）</h3><p>首先显然总节点 $m$ 上界为 $4n$，并且可以证明 $\frac{m}{n}$ 的上确界为 $4$，下确界为 $2$ 注意到如果 $n = 2^k + 2^{j + 1}$ 时，则 $m = 2 ^{k + 1} + 2^k + \cdots 2^{k - j} + 1$，所以 $\frac{m}{n} = \frac{4 - 2^{-j} + 2^{-k}}{1 + 2^{j + 1 - k}}$，对任意 $\epsilon &gt; 0$ 存在 $j$ 使得 $4 - 2 ^{-j} &gt; 4 - \epsilon$， 然后让 $k$ 趋于无穷，那么显然 $\frac{m}{n}$ 上极限为 $4$.（$n = 40$ 时， $\frac{m}{n} &gt; 3$，$n = 2^20 + 2^10 = 1049600$ 时，$\frac{m}{n} &gt; 3.99$）</p>
<blockquote>
<p>和与最大值的线段树模板（如果单纯求和，可以用树状数组）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SegmentTree</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mn, tag;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; sm;</span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> lson l, m, 2 * p</span></span><br><span class="line">	<span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, 2 * p + 1</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		mn.resize(<span class="number">4</span> * n);</span><br><span class="line">		tag.resize(<span class="number">4</span> * n);</span><br><span class="line">		sm.resize(<span class="number">4</span> * n);</span><br><span class="line">	&#125;</span><br><span class="line">	SegmentTree(<span class="keyword">int</span> _n) : n(_n) &#123;</span><br><span class="line">		resize();</span><br><span class="line">	&#125;</span><br><span class="line">	SegmentTree(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a) &#123;</span><br><span class="line">		n = a.<span class="built_in">size</span>();</span><br><span class="line">		resize();</span><br><span class="line">		<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; build = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p) &#123;</span><br><span class="line">			<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">				mn[p] = sm[p] = a[l - <span class="number">1</span>];</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">			build(lson);</span><br><span class="line">			build(rson);</span><br><span class="line">			pull(p);</span><br><span class="line">		&#125;;</span><br><span class="line">		build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">pull</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		mn[p] = <span class="built_in">std</span>::<span class="built_in">min</span>(mn[<span class="number">2</span> * p], mn[<span class="number">2</span> * p + <span class="number">1</span>]);</span><br><span class="line">		sm[p] = sm[<span class="number">2</span> * p] + sm[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (tag[p]) &#123;</span><br><span class="line">			<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">			<span class="built_in">set</span>(lson, tag[p]);</span><br><span class="line">			<span class="built_in">set</span>(rson, tag[p]);</span><br><span class="line">			tag[p] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">		tag[p] = mn[p] = v;</span><br><span class="line">		sm[p] = LL(r - l + <span class="number">1</span>) * v;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rangeSet</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) &#123;</span><br><span class="line">			<span class="built_in">set</span>(l, r, p, v);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		push(l, r, p);</span><br><span class="line">		<span class="keyword">if</span> (L &lt;= m) rangeSet(L, R, v, lson);</span><br><span class="line">		<span class="keyword">if</span> (R &gt; m) rangeSet(L, R, v, rson);</span><br><span class="line">		pull(p);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 以下内容根据需要修改</span></span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>&amp; y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mn[p] &gt; y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= l &amp;&amp; sm[p] &lt;= y) &#123;</span><br><span class="line">			y -= sm[p];</span><br><span class="line">			<span class="keyword">return</span> r - l + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		push(l, r, p);</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (x &lt;= m) ans += query(x, y, lson); </span><br><span class="line">		ans += query(x, y, rson);</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">bounded</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (mn[p] &gt;= v) <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (mn[<span class="number">2</span> * p] &gt;= v) <span class="keyword">return</span> bounded(v, rson);</span><br><span class="line">		<span class="keyword">return</span> bounded(v, lson);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> l = bounded(y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (l &lt;= x) rangeSet(l, x, y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> query(x, y, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码参考了 Jiangly 的模板，他的是左闭右开的。</p>
</blockquote>
<h3 id="线段树-（弃用版）"><a href="#线段树-（弃用版）" class="headerlink" title="线段树 （弃用版）"></a>线段树 （弃用版）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lrt rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrt rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, lrt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m + 1, r, rrt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">LL sum[N * <span class="number">3</span>], col[N * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	sum[rt] = sum[lrt] + sum[rrt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (col[rt]) &#123;</span><br><span class="line">		col[lrt] += col[rt];</span><br><span class="line">		col[rrt] += col[rt];</span><br><span class="line">		sum[lrt] += (m - (m &gt;&gt; <span class="number">1</span>)) * col[rt];</span><br><span class="line">		sum[rrt] += (m &gt;&gt; <span class="number">1</span>) * col[rt];</span><br><span class="line">		col[rt] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp; sum[rt]);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	col[rt] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	build(lson);</span><br><span class="line">	build(rson);</span><br><span class="line">	pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> p, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) &#123;</span><br><span class="line">		sum[rt] += p * (r - l + <span class="number">1</span>);</span><br><span class="line">		col[rt] += p;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pushDown(rt, r - l + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= m) update(L, R, p, lson);</span><br><span class="line">	<span class="keyword">if</span> (R &gt; m) update(L, R, p, rson);</span><br><span class="line">	pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) <span class="keyword">return</span> sum[rt];</span><br><span class="line">	pushDown(rt, r - l + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (L &lt;= m) ans += query(L, R, lson);</span><br><span class="line">	<span class="keyword">if</span> (R &gt; m) ans += query(L, R, rson);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>吊打线段树的 <a href="https://blog.csdn.net/CC_dsm/article/details/98166835" target="_blank" rel="noopener">珂朵莉树（Chtholly Tree）</a></p>
</blockquote>
<h3 id="RMQ-求区间最大值（弃用，RMQ-和-spfa-已经死了）"><a href="#RMQ-求区间最大值（弃用，RMQ-和-spfa-已经死了）" class="headerlink" title="RMQ 求区间最大值（弃用，RMQ 和 spfa 已经死了）"></a>RMQ 求区间最大值（弃用，RMQ 和 spfa 已经死了）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RMQ</span> &#123;</span></span><br><span class="line">	<span class="keyword">static</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">int</span> a[N][<span class="number">20</span>]; <span class="comment">//a[i][j]=max(s[i]---s[i+2^j-1])</span></span><br><span class="line">	RMQ(<span class="keyword">int</span> * s, <span class="keyword">int</span> _n): n(_n) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) a[i][<span class="number">0</span>] = s[i];</span><br><span class="line">		<span class="keyword">int</span> len = (<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(n)) / <span class="built_in">log</span>(<span class="number">2.0</span>)) + <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != len; ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n - (<span class="number">1</span> &lt;&lt; i); ++j) &#123;</span><br><span class="line">				a[j][i] = <span class="built_in">max</span>(a[j][i - <span class="number">1</span>], a[j + (<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>))][i - <span class="number">1</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="comment">// 0 &lt;= l &lt;= r &lt; n</span></span><br><span class="line">		<span class="keyword">int</span> len = (<span class="keyword">int</span>)(<span class="built_in">log</span>(<span class="keyword">double</span>(r - l + <span class="number">1</span>)) / <span class="built_in">log</span>(<span class="number">2.0</span>));</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">max</span>(a[l][len], a[r - (<span class="number">1</span> &lt;&lt; len) + <span class="number">1</span>][len]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们经常用二分答案的思想， 但是其实二分答案是仅仅知道其单调的情况下的策略，实际上，对于具体的问题， 我们完全可以对 $m$ 的值进行不同的处理， 而非单纯的 $m = (l + r) &gt;&gt; 1 $。</p>
</blockquote>
<h3 id="三分法简单版"><a href="#三分法简单版" class="headerlink" title="三分法简单版"></a><a href="https://codeforces.com/contest/439/problem/D" target="_blank" rel="noopener">三分法简单版</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for a given covex function f: (f(a) + f(b)) / 2 &gt;= f((a + b) / 2)</span></span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">while</span> (l + <span class="number">2</span> &lt; r) &#123;</span><br><span class="line">	<span class="keyword">int</span> lm = (<span class="number">2l</span>l * l + r) / <span class="number">3</span>, rm = (l + <span class="number">2l</span>l * r + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">if</span> (f(lm) &lt; f(rm)) r = rm;</span><br><span class="line">	<span class="keyword">else</span> l = lm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">	<span class="keyword">if</span> (f(l) &lt; f(r)) --r;</span><br><span class="line">	<span class="keyword">else</span> ++l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="标准三分法用黄金分割的原因"><a href="#标准三分法用黄金分割的原因" class="headerlink" title="标准三分法用黄金分割的原因"></a>标准三分法用黄金分割的原因</h3><p>我们不妨设原始区间为 <code>[0, 1]</code>，我们在其中选两个点 <code>0 &lt; a &lt; b &lt; 1</code>，然后比较 <code>f(a)</code> 和 <code>f(b)</code>，然后再相应改变区间。然后重复上述过程。如果我们能充分利用计算过的值，也就是说假设更新后的区间为 <code>[0, b]</code> 那么我们自然想让 <code>a</code> 的计算值充分被利用，所以我们想再选的两个点的其中一个是 <code>a</code>，如果更新后区间为 <code>[a, 1]</code> 同理。也就是说我们有策略</p>
<script type="math/tex; mode=display">
\frac{a}{b} = b, \frac{b - a}{1 - a} = a</script><p>化简可得 $b(1 + b) = 1$，即 $b = \frac{\sqrt{5} - 1}{2}, a = b ^ 2 = \frac{3 - \sqrt{5}}{2} = 1 - b$。</p>
<blockquote>
<p>注意到上述 $b$ 的值正好是黄金分割 0.618…</p>
</blockquote>
<h3 id="三分法黄金分割版（可用版）"><a href="#三分法黄金分割版（可用版）" class="headerlink" title="三分法黄金分割版（可用版）)"></a><a href="(https://codeforces.com/contest/439/problem/D">三分法黄金分割版（可用版）</a>)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for a given covex function f: (f(a) + f(b)) / 2 &gt;= f((a + b) / 2)</span></span><br><span class="line"><span class="keyword">auto</span> tupleCut = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> phiL = (<span class="number">3</span> - <span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">5</span>)) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">double</span> phiR = (<span class="built_in">std</span>::<span class="built_in">sqrt</span>(<span class="number">5</span>) - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">auto</span> getLeft = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> l + (r - l) * phiL;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> getRight = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> l + (r - l) * phiR;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">int</span> lm = getLeft(l, r), rm = getRight(l, r);</span><br><span class="line">	LL fl = f(lm), fr = f(rm);</span><br><span class="line">	<span class="keyword">while</span> (r - l &gt; <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (fl &lt; fr) &#123;</span><br><span class="line">			r = rm;</span><br><span class="line">			rm = lm;</span><br><span class="line">			fr = fl;</span><br><span class="line">			fl = f(lm = getRight(l, rm));</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			l = lm;</span><br><span class="line">			lm = rm;</span><br><span class="line">			fl = fr;</span><br><span class="line">			fr = f(rm = getLeft(lm, r));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fl = f(l), fr = f(r);</span><br><span class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (fl &lt; fr) fr = f(--r);</span><br><span class="line">		<span class="keyword">else</span> fl = f(++l);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> fr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意返回的是最值而不是最值点</p>
<p>注意到一定要用上述写法，由于取整带来的误差，所以必须充分利用“左分点”是“右分点”的“右分点”，“右分点”是“左分点”的“左分点”（用来保证 $l \leq lm \leq rm \leq r$），然后如果单次求 $f$ 的复杂度特别高，两段各自最后一步也是可以优化一下，少算一次 $f$，但是会很不优雅，所以还是算了。</p>
</blockquote>
<h3 id="subarray（连续部分）-VS-subsequence（不要求连续部分）"><a href="#subarray（连续部分）-VS-subsequence（不要求连续部分）" class="headerlink" title="subarray（连续部分） VS subsequence（不要求连续部分）"></a>subarray（连续部分） VS subsequence（不要求连续部分）</h3><h3 id="最长（严格）递增子序列"><a href="#最长（严格）递增子序列" class="headerlink" title="最长（严格）递增子序列"></a>最长（严格）递增子序列</h3><blockquote>
<p>下面数组 <code>b</code> 的意义：<code>b[i]</code> 表示当前长为 <code>i</code> 的子列的末位的最小值。<br>这个子序列还能给附加限制（比如都要大于某个值）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123; <span class="comment">// length of longest increasing subsquence</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> it = <span class="built_in">std</span>::lower_bound(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), x); it == b.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			b.emplace_back(x);</span><br><span class="line">		&#125; <span class="keyword">else</span> *it = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LNDS</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123; <span class="comment">// length of longest increasing subsquence</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> it = <span class="built_in">std</span>::upper_bound(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), x); it == b.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			b.emplace_back(x);</span><br><span class="line">		&#125; <span class="keyword">else</span> *it = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> b.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">LISP</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123; <span class="comment">// longest increasing subsquence</span></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b, pb, pa(a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">std</span>::iota(pa.<span class="built_in">begin</span>(), pa.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">auto</span> it = <span class="built_in">std</span>::upper_bound(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>(), a[i]); it == b.<span class="built_in">end</span>()) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!pb.empty()) pa[i] = pb.back();</span><br><span class="line">			b.emplace_back(a[i]);</span><br><span class="line">			pb.emplace_back(i);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			*it = a[i];</span><br><span class="line">			<span class="keyword">int</span> t = it - b.<span class="built_in">begin</span>();</span><br><span class="line">			pb[t] = i;</span><br><span class="line">			<span class="keyword">if</span> (t &gt; <span class="number">0</span>) pa[i] = pb[t - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">	<span class="keyword">int</span> now = pb.back();</span><br><span class="line">	c.push(a[now]);</span><br><span class="line">	<span class="keyword">while</span> (now != pa[now]) &#123;</span><br><span class="line">		now = pa[now];</span><br><span class="line">		c.push(a[now]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lower_bound(first,end,val) 表示在单增 [frist,end) 中首次大于等于 val 的位置</span></span><br><span class="line"><span class="comment">// upper_bound(first,end,val) 表示在单增 [frist,end) 中首次大于 val 的位置</span></span><br></pre></td></tr></table></figure>
<h3 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> r[MAX];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pack</span><span class="params">(<span class="keyword">int</span> cash, <span class="keyword">int</span> num, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">0</span> || w == <span class="number">0</span> || v == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">1</span>) &#123; <span class="comment">//  0-1背包</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = cash; i &gt;= v; --i)</span><br><span class="line">			r[i] = <span class="built_in">max</span>(r[i], r[i - v] + w);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (num * v &gt;= cash - v + <span class="number">1</span>) &#123; <span class="comment">//完全背包</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = v; i &lt;= cash; ++i)</span><br><span class="line">			r[i] = <span class="built_in">max</span>(r[i], r[i - v] + w);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> q[MAX], s[MAX], head, tail;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; v; ++j) &#123; <span class="comment">//多重背包</span></span><br><span class="line">		q[<span class="number">0</span>] = r[j];</span><br><span class="line">		s[<span class="number">0</span>] = head = tail = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = j + v; k &lt;= cash; ++i, k += v) &#123;</span><br><span class="line">			q[i] = r[k] - i * w;</span><br><span class="line">			<span class="keyword">while</span> (s[head] &lt; i - num) ++head;</span><br><span class="line">			<span class="keyword">while</span> (head &lt;= tail &amp;&amp; q[tail] &lt; q[i]) --tail;</span><br><span class="line">			s[++tail] = i;</span><br><span class="line">			q[tail] = q[i];</span><br><span class="line">			r[k] = q[head] + i * w;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="堆与-STL-优先队列"><a href="#堆与-STL-优先队列" class="headerlink" title="堆与 STL 优先队列"></a>堆与 STL 优先队列</h3><p>可以使用 <a href="http: //www.cplusplus.com/reference/">C++STL</a> 的 priority_queue，查找可用 lower_bound 和 upper_bound。C++ STL 中优先队列是用堆来实现的。用途十分广泛，例如加速最小生成树，拓扑排序，等等。<br>堆的实现一般是用数组。 我们可以用 1 作为树的根， 对每一个节点 $x$， 它的两个节点分别就是 $2x$ 和 $2x + 1$ 平时都用 <code>x &lt;&lt; 1, x &lt;&lt; 1 | 1</code> 表示。 堆只支持三个操作:</p>
<ol>
<li>插入一个节点(我们实现时是插入最尾部， 这样保证了是一个完全二叉树) $O(\log n)$ </li>
<li>删除最大键值节点（ 删除根元素的值） $O(\log n)$ </li>
<li>输出最大键值节点（ 查看根元素的值） $O(1)$</li>
</ol>
<blockquote>
<p>我掌握的也很喜欢的几个数据结构：<code>单调队列，单调栈，树状数组，堆，线段树，红黑树</code></p>
</blockquote>
<h3 id="单调队列：解决滑动窗口问题（固定长度内的最值问题）"><a href="#单调队列：解决滑动窗口问题（固定长度内的最值问题）" class="headerlink" title="单调队列：解决滑动窗口问题（固定长度内的最值问题）"></a>单调队列：解决滑动窗口问题（固定长度内的最值问题）</h3><p><a href="https://zhuanlan.zhihu.com/p/346354943" target="_blank" rel="noopener">知乎 Pecco</a> 讲的很好（建议直接去看它的讲解）：</p>
<blockquote>
<p>如果一个选手比你小还比你强，你就可以退役了。——单调队列的原理</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求每个长度为 m 的区间的区间最大值的编号</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">monicDequeMax</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!Q.empty() &amp;&amp; i - Q.front() &gt;= m) Q.pop_front();</span><br><span class="line">		<span class="comment">// 如果求最小值，大于号改成小于号即可</span></span><br><span class="line">		<span class="keyword">while</span> (!Q.empty() &amp;&amp; a[i] &gt; a[Q.back()]) Q.pop_back();</span><br><span class="line">		Q.push_back(i);</span><br><span class="line">		<span class="comment">// 如果需要返回值，就在下面加入 a[Q.front()]</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= m - <span class="number">1</span>) r.emplace_back(Q.front());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2216" target="_blank" rel="noopener">LOJ P2216</a>：这个是二维的，我们可以一维一维的处理</p>
<h3 id="单调队列优化-DP"><a href="#单调队列优化-DP" class="headerlink" title="单调队列优化 DP"></a>单调队列优化 DP</h3><p>例题：<a href="https://www.luogu.com.cn/problem/P2034" target="_blank" rel="noopener">LOJ P2034</a>：取数字使得和最大，但是不能取连续 k 个数</p>
<p>肯定是 dp 问题，如果把 dp[i] 定义成取第 i 个，前 i 个结果的最值，会发现很搞。<br>因此我们反过来考虑。考虑删除若干个数，且删除的间隔不超过 k，求删除的最小和。最终答案就是总和减去最小和。设 <code>dp[i]</code> 表示删除 i，且满足性质的前 i 个数的答案。那么显然     $dp[i] = a[i] i \leq k$，$dp[i] = a[i] + \min_{i - k \leq j \leq i - 1} dp[j]$。注意最终答案不是总和减去 dp 的 最小值，而是 $dp[n - k - 2, \cdots, n - 1]$ 的最小值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, k;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	std::vector&lt;int&gt; a(n), dp(n);</span><br><span class="line">	LL s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">		s += x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		dp[i] = a[i];</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k + <span class="number">1</span>) dp[i] += dp[Q.front()];</span><br><span class="line">		<span class="keyword">if</span> (!Q.empty() &amp;&amp; i - Q.front() &gt;= k + <span class="number">1</span>) Q.pop_front();</span><br><span class="line">		<span class="keyword">while</span> (!Q.empty() &amp;&amp; dp[i] &lt;= dp[Q.back()]) Q.pop_back();</span><br><span class="line">		Q.push_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s - *<span class="built_in">std</span>::min_element(dp.<span class="built_in">end</span>() - k - <span class="number">1</span>, dp.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="单调栈：形式更简单应用更广"><a href="#单调栈：形式更简单应用更广" class="headerlink" title="单调栈：形式更简单应用更广"></a>单调栈：形式更简单应用更广</h3><p><a href="https://zhuanlan.zhihu.com/p/346536592" target="_blank" rel="noopener">知乎 Pecco</a> 的精彩讲解：维护一个栈，当我们碰上一个新元素，我们知道，越靠近栈顶的元素离新元素位置越近。所以不断比较新元素与栈顶，如果新元素比栈顶大，则可断定新元素就是栈顶的下一个更大元素，于是弹出栈顶并继续比较。直到新元素不比栈顶大，再将新元素压入栈。显然，这样形成的栈是单调递减的。</p>
<p>应用一：求下一个比自身大的元素位置（下可以改成上，大可以改成小）</p>
<p>洛谷模板题：<a href="https://www.luogu.com.cn/problem/P5788" target="_blank" rel="noopener">LOJ P5788</a></p>
<p>应用二：两个元素间所有元素均（不）大/小于这二者。</p>
<p>洛谷进阶题：<a href="https://www.luogu.com.cn/problem/P1823" target="_blank" rel="noopener">LOJ P1823</a>，问有多少对元素，它们之间没有比它们都大的元素。<br>代码放在 <a href="/codeforces/" title="这里了">这里了</a></p>
<h3 id="单调栈优化-DP"><a href="#单调栈优化-DP" class="headerlink" title="单调栈优化 DP"></a>单调栈优化 DP</h3><p>应用一优化 DP 例题：<a href="https://codeforces.com/contest/1313/problem/C2" target="_blank" rel="noopener">1313C2</a>，首先最优答案肯定时先递增后递减的。相当于有一个制高点，枚举制高点，自然有 $O(n^2)$ 的算法。但是可以优化到 $O(n)$<br>代码放在 <a href="/codeforces/" title="这里了">这里了</a></p>
<p>应用二优化 DP 例题：<a href="https://codeforces.com/contest/1407/problem/D" target="_blank" rel="noopener">1407D</a>，每次跳跃，它们之间的元素都严格大于它们或者严格小于它们。首先设 <code>dp[i]</code> 为到达 i 最小跳跃数，那么显然 $\displaystyle dp[i] = \min{j \to i} dp[j] + 1$。我们可以用两个单调栈来看那些 j 能跳到 i。 <a href="/codeforces/" title="这里了">这里了</a></p>
<h3 id="红黑树-red-black-tree"><a href="#红黑树-red-black-tree" class="headerlink" title="红黑树 red-black tree"></a>红黑树 red-black tree</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBT</span> &#123;</span></span><br><span class="line">	<span class="keyword">typedef</span> <span class="keyword">int</span> elemType;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">bool</span> RED = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">bool</span> BLACK = <span class="number">1</span>;</span><br><span class="line">		Node * ch[<span class="number">2</span>], * fa; <span class="comment">// x-&gt;fa-&gt;ch[x-&gt;rs] = x</span></span><br><span class="line">		<span class="keyword">int</span> sz;</span><br><span class="line">		elemType key;</span><br><span class="line">		<span class="keyword">bool</span> color, rs; <span class="comment">// is rightson</span></span><br><span class="line">	&#125;;</span><br><span class="line">	Node * root; <span class="comment">// root has no father</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">faSon</span><span class="params">(Node * x, Node * y, <span class="keyword">bool</span> rs)</span> </span>&#123;</span><br><span class="line">		y-&gt;fa = x;</span><br><span class="line">		y-&gt;rs = rs;</span><br><span class="line">		x-&gt;ch[rs] = y;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">newNode</span><span class="params">(Node * x, elemType val, <span class="keyword">bool</span> rs)</span> </span>&#123; <span class="comment">// x-&gt;ch[rs]=null</span></span><br><span class="line">		Node * p = <span class="keyword">new</span> Node;</span><br><span class="line">		p-&gt;ch[<span class="number">0</span>] = p-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">		p-&gt;sz = <span class="number">1</span>;</span><br><span class="line">		p-&gt;key = val;</span><br><span class="line">		p-&gt;color = Node::RED;</span><br><span class="line">		faSon(x, p, rs);</span><br><span class="line">		++x-&gt;sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Node * x, <span class="keyword">bool</span> rs)</span> </span>&#123; <span class="comment">// x must not null</span></span><br><span class="line">		Node * y = x-&gt;ch[!rs];</span><br><span class="line">		<span class="keyword">if</span> (y == null) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (x == root) root = y;</span><br><span class="line">		<span class="keyword">else</span> faSon(x-&gt;fa, y, x-&gt;rs);</span><br><span class="line">		faSon(x, y-&gt;ch[rs], !rs);</span><br><span class="line">		faSon(y, x, rs);</span><br><span class="line">		y-&gt;sz = x-&gt;sz;</span><br><span class="line">		x-&gt;sz = x-&gt;ch[<span class="number">0</span>]-&gt;sz + x-&gt;ch[<span class="number">1</span>]-&gt;sz + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insMaintain</span><span class="params">(Node * x)</span> </span>&#123; <span class="comment">// x-&gt;color is RED</span></span><br><span class="line">		<span class="keyword">if</span> (x == root || x-&gt;fa-&gt;color == Node::BLACK) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;fa-&gt;fa-&gt;ch[!x-&gt;fa-&gt;rs]-&gt;color == Node::BLACK) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x-&gt;rs ^ x-&gt;fa-&gt;rs) rotate(x-&gt;fa, x-&gt;fa-&gt;rs);</span><br><span class="line">			<span class="keyword">else</span> x = x-&gt;fa;</span><br><span class="line">			x-&gt;color = Node::BLACK;</span><br><span class="line">			x-&gt;fa-&gt;color = Node::RED;</span><br><span class="line">			rotate(x-&gt;fa, !x-&gt;rs);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			x = x-&gt;fa-&gt;fa;</span><br><span class="line">			x-&gt;color = Node::RED;</span><br><span class="line">			x-&gt;ch[<span class="number">0</span>]-&gt;color = x-&gt;ch[<span class="number">1</span>]-&gt;color = Node::BLACK;</span><br><span class="line">			insMaintain(x);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delCase1</span><span class="params">(Node * x, Node * y)</span> </span>&#123;</span><br><span class="line">		y-&gt;color = Node::BLACK;</span><br><span class="line">		y-&gt;fa-&gt;color = Node::RED;</span><br><span class="line">		y = y-&gt;ch[!y-&gt;rs];</span><br><span class="line">		rotate(x-&gt;fa, x-&gt;rs);</span><br><span class="line">		delCase2(x, y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delCase2</span><span class="params">(Node * x, Node * y)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (y-&gt;ch[y-&gt;rs]-&gt;color == Node::BLACK) &#123;</span><br><span class="line">			<span class="keyword">if</span> (y-&gt;ch[!y-&gt;rs]-&gt;color == Node::BLACK) &#123;</span><br><span class="line">				y-&gt;color = Node::RED;</span><br><span class="line">				delMaintain(y-&gt;fa);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				y-&gt;color = Node::RED;</span><br><span class="line">				y-&gt;ch[!y-&gt;rs]-&gt;color = Node::BLACK;</span><br><span class="line">				rotate(y, y-&gt;rs);</span><br><span class="line">				delCase3(y-&gt;fa);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> delCase3(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delCase3</span><span class="params">(Node * y)</span> </span>&#123;</span><br><span class="line">		y-&gt;color = y-&gt;fa-&gt;color;</span><br><span class="line">		y-&gt;ch[y-&gt;rs]-&gt;color = y-&gt;fa-&gt;color = Node::BLACK;</span><br><span class="line">		rotate(y-&gt;fa, !y-&gt;rs);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">delMaintain</span><span class="params">(Node * x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x == root || x == null) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;color == Node::RED) &#123;</span><br><span class="line">			x-&gt;color = Node::BLACK;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Node * y = x-&gt;fa-&gt;ch[!x-&gt;rs];</span><br><span class="line">		<span class="keyword">if</span> (y-&gt;color == Node::RED) delCase1(x, y);</span><br><span class="line">		<span class="keyword">else</span> delCase2(x, y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node * <span class="title">pred</span><span class="params">(Node * x, elemType val)</span> </span>&#123; <span class="comment">// max elem &lt;= val</span></span><br><span class="line">		<span class="keyword">if</span> (x == null) <span class="keyword">return</span> null;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;key &gt; val) <span class="keyword">return</span> pred(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;ch[<span class="number">1</span>] == null) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">return</span> pred(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node * <span class="title">succ</span><span class="params">(Node * x, elemType val)</span> </span>&#123; <span class="comment">// min elem &gt;= val</span></span><br><span class="line">		<span class="keyword">if</span> (x == null) <span class="keyword">return</span> null;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;key &lt; val) <span class="keyword">return</span> succ(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;ch[<span class="number">0</span>] == null) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">return</span> succ(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node * x, elemType val)</span> </span>&#123; <span class="comment">// count elem &lt;= val</span></span><br><span class="line">		<span class="keyword">if</span> (x == null) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;key &gt; val) <span class="keyword">return</span> rank(x-&gt;ch[<span class="number">0</span>], val);</span><br><span class="line">		<span class="keyword">return</span> x-&gt;ch[<span class="number">0</span>]-&gt;sz + <span class="number">1</span> + rank(x-&gt;ch[<span class="number">1</span>], val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node * <span class="title">select</span><span class="params">(Node * x, <span class="keyword">int</span> k)</span> </span>&#123; <span class="comment">// k-th smallest elem</span></span><br><span class="line">		<span class="keyword">if</span> (x == null || x-&gt;sz &lt; k) <span class="keyword">return</span> null;</span><br><span class="line">		<span class="keyword">int</span> sz = x-&gt;ch[<span class="number">0</span>]-&gt;sz + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (sz == k) <span class="keyword">return</span> x;</span><br><span class="line">		<span class="keyword">if</span> (sz &lt; k) <span class="keyword">return</span> select(x-&gt;ch[<span class="number">1</span>], k - sz);</span><br><span class="line">		<span class="keyword">return</span> select(x-&gt;ch[<span class="number">0</span>], k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(Node * x)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;ch[<span class="number">0</span>] != null) <span class="built_in">clear</span>(x-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;ch[<span class="number">1</span>] != null) <span class="built_in">clear</span>(x-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span> (x != null) <span class="keyword">delete</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Node * x)</span> </span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"key = %d, sz = %d "</span>, x-&gt;key, x-&gt;sz);</span><br><span class="line">		<span class="built_in">puts</span>(x-&gt;color == Node::RED ? <span class="string">"RED"</span> : <span class="string">"BLACK"</span>);</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;ch[<span class="number">0</span>] != null) <span class="built_in">print</span>(x-&gt;ch[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">if</span> (x-&gt;ch[<span class="number">1</span>] != null) <span class="built_in">print</span>(x-&gt;ch[<span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">	Node * null;</span><br><span class="line">	RBT() &#123;</span><br><span class="line">		null = <span class="keyword">new</span> Node; <span class="comment">// no key, rs, father</span></span><br><span class="line">		null-&gt;ch[<span class="number">0</span>] = null-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">		null-&gt;sz = <span class="number">0</span>;</span><br><span class="line">		null-&gt;color = Node::BLACK;</span><br><span class="line">		root = null;</span><br><span class="line">		null-&gt;key = INF; <span class="comment">// for convenient</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">Node * <span class="title">search</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		Node * x = root;</span><br><span class="line">		<span class="keyword">while</span> (x != null) &#123;</span><br><span class="line">			<span class="keyword">if</span> (val == x-&gt;key) <span class="keyword">return</span> x;</span><br><span class="line">			x = x-&gt;ch[val &gt;= x-&gt;key];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> null;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (root == null) &#123;</span><br><span class="line">			root = <span class="keyword">new</span> Node; <span class="comment">// no father, rs</span></span><br><span class="line">			root-&gt;ch[<span class="number">0</span>] = root-&gt;ch[<span class="number">1</span>] = null;</span><br><span class="line">			root-&gt;sz = <span class="number">1</span>;</span><br><span class="line">			root-&gt;color = Node::BLACK;</span><br><span class="line">			root-&gt;key = val;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		Node * x = root;</span><br><span class="line">		<span class="keyword">while</span> (x-&gt;ch[val &gt;= x-&gt;key] != null) &#123;</span><br><span class="line">			++x-&gt;sz;</span><br><span class="line">			x = x-&gt;ch[val &gt;= x-&gt;key];</span><br><span class="line">		&#125;</span><br><span class="line">		newNode(x, val, val &gt;= x-&gt;key);</span><br><span class="line">		insMaintain(x-&gt;ch[val &gt;= x-&gt;key]);</span><br><span class="line">		root-&gt;color = Node::BLACK;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		Node * x = search(val), * y;</span><br><span class="line">		<span class="keyword">if</span> (x == null) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">while</span> (x-&gt;ch[<span class="number">0</span>] != null || x-&gt;ch[<span class="number">1</span>] != null) &#123;</span><br><span class="line">			<span class="keyword">bool</span> rs = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (x-&gt;ch[rs] == null) rs = !rs;</span><br><span class="line">			y = x-&gt;ch[rs];</span><br><span class="line">			<span class="keyword">while</span> (y-&gt;ch[!rs] != null) y = y-&gt;ch[!rs];</span><br><span class="line">			<span class="built_in">std</span>::swap(x-&gt;key, y-&gt;key);</span><br><span class="line">			x = y;</span><br><span class="line">			<span class="keyword">if</span> (x-&gt;color == Node::RED) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		delMaintain(x);</span><br><span class="line">		root-&gt;color = Node::BLACK;</span><br><span class="line">		y = x;</span><br><span class="line">		<span class="keyword">while</span> (y != root) &#123;</span><br><span class="line">			y = y-&gt;fa;</span><br><span class="line">			--y-&gt;sz;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x == root) root = null;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;ch[<span class="number">0</span>] != null) faSon(x-&gt;fa, x-&gt;ch[<span class="number">0</span>], x-&gt;rs);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (x-&gt;ch[<span class="number">1</span>] != null) faSon(x-&gt;fa, x-&gt;ch[<span class="number">1</span>], x-&gt;rs);</span><br><span class="line">		<span class="keyword">else</span> x-&gt;fa-&gt;ch[x-&gt;rs] = null;</span><br><span class="line">		<span class="keyword">delete</span> x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">elemType <span class="title">pred</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> pred(root, val)-&gt;key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">elemType <span class="title">succ</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> succ(root, val)-&gt;key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">rank</span><span class="params">(elemType val)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> rank(root, val);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">elemType <span class="title">select</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> select(root, k)-&gt;key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">clear</span>(root);</span><br><span class="line">		root = null;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> root-&gt;sz;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (root != null) <span class="built_in">print</span>(root);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span> </span>&#123; <span class="comment">// for particular use</span></span><br><span class="line">		<span class="keyword">return</span> select(root, rank(root, a) + k)-&gt;key;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><h3 id="二维凸包正式版"><a href="#二维凸包正式版" class="headerlink" title="二维凸包正式版"></a>二维凸包正式版</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = <span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">crossLeft</span><span class="params">(<span class="keyword">const</span> Point &amp;op, <span class="keyword">const</span> Point &amp;sp, <span class="keyword">const</span> Point &amp;ep)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (sp.first - op.first) * (ep.second - op.second) </span><br><span class="line">	&lt;= (sp.second - op.second) * (ep.first - op.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; <span class="title">convexHull</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">	p.erase(<span class="built_in">std</span>::unique(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>()), p.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> n = p.<span class="built_in">size</span>();</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; <span class="title">q</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (top &gt; <span class="number">1</span> &amp;&amp; crossLeft(q[top - <span class="number">1</span>], p[i], q[top - <span class="number">2</span>])) --top;</span><br><span class="line">		q[top++] = p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> len = top;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (top &gt; len &amp;&amp; crossLeft(q[top - <span class="number">1</span>], p[i], q[top - <span class="number">2</span>])) --top;</span><br><span class="line">		q[top++] = p[i];</span><br><span class="line">	&#125;</span><br><span class="line">	top -= n &gt; <span class="number">1</span>;</span><br><span class="line">	q.resize(top);</span><br><span class="line">	<span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>三维凸包模板可以参考 上交模板</p>
</blockquote>
<h3 id="旋转卡壳求凸包直径（即平面上点的最远欧式距离）"><a href="#旋转卡壳求凸包直径（即平面上点的最远欧式距离）" class="headerlink" title="旋转卡壳求凸包直径（即平面上点的最远欧式距离）"></a>旋转卡壳求凸包直径（即平面上点的最远欧式距离）</h3><ul>
<li>整数版模板例题：<a href="https://www.luogu.com.cn/problem/P1452" target="_blank" rel="noopener">LOJ P1452</a></li>
<li>实数版模板例题：<a href="https://www.luogu.com.cn/problem/P6247" target="_blank" rel="noopener">LOJ P6247</a></li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = <span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(<span class="keyword">const</span> Point &amp;op, <span class="keyword">const</span> Point &amp;sp, <span class="keyword">const</span> Point &amp;ep)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (sp.first - op.first) * (ep.second - op.second) </span><br><span class="line">	- (sp.second - op.second) * (ep.first - op.first);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist2</span><span class="params">(<span class="keyword">const</span> Point &amp;p, <span class="keyword">const</span> Point &amp;q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x = q.first - p.first, y = q.second - p.second;</span><br><span class="line">	<span class="keyword">return</span> x * x + y * y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">diameter</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; p)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> q = convexHull(p);</span><br><span class="line">	<span class="keyword">if</span> (q.<span class="built_in">size</span>() &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (q.<span class="built_in">size</span>() == <span class="number">2</span>) <span class="keyword">return</span> dist2(q[<span class="number">0</span>], q[<span class="number">1</span>]);</span><br><span class="line">	<span class="keyword">int</span> n = q.<span class="built_in">size</span>();</span><br><span class="line">	q.emplace_back(q[<span class="number">0</span>]);</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (cross(q[i], q[i + <span class="number">1</span>], q[j]) &lt; cross(q[i], q[i + <span class="number">1</span>], q[j + <span class="number">1</span>])) j = (j + <span class="number">1</span>) % n;</span><br><span class="line">		ans = <span class="built_in">std</span>::<span class="built_in">max</span>(&#123;ans, dist2(q[i], q[j]), dist2(q[i + <span class="number">1</span>], q[j])&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">sqrt</span>(ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Manhattan 距离的话仅需考虑 $x_i + y_i$ 的最大最小值之差 与 $x_i - y_i$ 的最大最小值之差的最大值即可。</p>
</blockquote>
<h3 id="分治法求平面最短距离（任何距离都适用）"><a href="#分治法求平面最短距离（任何距离都适用）" class="headerlink" title="分治法求平面最短距离（任何距离都适用）"></a>分治法求平面最短距离（任何距离都适用）</h3><p>首先根据横坐标排序，然后取中位数假设处理好了左右两边的值，然后合并中间的值，首先距离中心点的横坐标不能超过已知的最小值，然后把筛出来的点按照纵坐标排序，然后 $O(n)$ 更新答案。总题复杂度 $O(n \log^2 n)$，如果使用归并排序理论复杂度为 $O(n \log n)$，但是实际效果并不如直接排序。</p>
<p>例题：[<a href="https://www.luogu.com.cn/problem/P1429" target="_blank" rel="noopener">https://www.luogu.com.cn/problem/P1429</a>] 和 <a href="https://www.luogu.com.cn/problem/P6247" target="_blank" rel="noopener">LOJ P6247</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> Point = <span class="built_in">std</span>::pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;;</span><br><span class="line"><span class="comment">// 这里不要用 dist2，否则很多比较的地方都要平方，反而不优雅了。</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span> <span class="params">(<span class="keyword">const</span> Point&amp; p, <span class="keyword">const</span> Point &amp;q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x = q.first - p.first, y = q.second - p.second;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">sqrt</span>(x * x + y * y);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">minDist</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; a)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> d = DBL_MAX;</span><br><span class="line">	<span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> d;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; merge = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (r - l &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">if</span> (r - l == <span class="number">2</span>) &#123;</span><br><span class="line">			d = <span class="built_in">std</span>::<span class="built_in">min</span>(d, dist(a[l], a[l + <span class="number">1</span>]));</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		merge(l, m);</span><br><span class="line">		merge(m + <span class="number">1</span>, r);</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Point&gt; p;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">1</span>; i &gt;= l &amp;&amp; a[m].first - a[i].first &lt; d; --i) &#123;</span><br><span class="line">			p.emplace_back(a[i].second, a[i].first);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; r &amp;&amp; a[i].first - a[m].first &lt; d; ++i) &#123;</span><br><span class="line">			p.emplace_back(a[i].second, a[i].first);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::sort(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>());</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; p.<span class="built_in">size</span>() &amp;&amp; p[j].first - p[i].first &lt; d; ++j) &#123;</span><br><span class="line">				d = <span class="built_in">std</span>::<span class="built_in">min</span>(d, dist(p[i], p[j]));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	merge(<span class="number">0</span>, n);</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>分治法还能求两个点作为对交的矩阵的最大面积（详见 <a href="/dynamicProgramming/" title="动态规划之分治算法">动态规划之分治算法</a>）</p>
</blockquote>
<h3 id="三维偏序之陈丹琪分治（仅支持离线查询，还是直接暴力好用-）"><a href="#三维偏序之陈丹琪分治（仅支持离线查询，还是直接暴力好用-）" class="headerlink" title="三维偏序之陈丹琪分治（仅支持离线查询，还是直接暴力好用~）"></a>三维偏序之陈丹琪分治（仅支持离线查询，还是直接暴力好用~）</h3><blockquote>
<p>如果带更新怎么处理呢？先预处理求出，之后更新一个计算一个更新？（那也不太行呀）</p>
</blockquote>
<p>一般地，我们考虑可以考虑 $k$ 维偏序，设有 $n$ 个 $k$ 维向量，$a_j \leq a_i$ 当且仅当所有的下标都满足小于等于关系，想知道对任意 $i$ 有多少个 $j \neq i$ 使得 $a_j \leq a_i$。</p>
<p>有复杂度 $O(n \log^k n)$ 的算法，因此在 $k &gt; 3$ 时，我们会选择直接 $O(n^2)$ 暴力解决问题（见下小节）。</p>
<ul>
<li>$k = 1$ 时，我们直接排序，假设没有相同元素，那么它们排完序之后的位置就是答案，有相同的数字的话可以先合并，也可以用 <code>upper_bound</code> 查找出结果。复杂度 $O(n \log n)$</li>
<li>$k = 2$ 时，我们先对第一个坐标偏序，再来一个树状数组，一个个的加入元素，加入之前可以查询结果。这也是求逆序数的操作(如果数据值域范围很大，可以离散化处理一下，仅需对要加入树状数组的那一维离散化，排序可以使用下标排序，就可以避免使用 tuple）。</li>
</ul>
<p>因此三维偏序是一个空缺的问题，就有大名鼎鼎的 cdq 分治。</p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P3810" target="_blank" rel="noopener">LOJ P3810</a>，这个题的<a href="https://www.luogu.com.cn/problem/solution/P3810" target="_blank" rel="noopener">题解</a>中，有人讲的很好，echo6342：</p>
<blockquote>
<p>cdq 分治每次计算前一半对后一半的影响。具体地，假设三维分别是 $x, y, z$，先按 $x$ 排序。分治时每次将前半边、后半边分别按 $y$ 排序。虽然现在 $x$ 的顺序被打乱了，但是前半边还是都小于后半边的，所以要是只计算前半边对后半边的偏序关系，是不会受到 $x$ 的影响的。维护后一半的指针 i，前一半的指针 j，每次将 i 后移一位时，若 $y[j] \leq y[i]$ 则不断后移 j，并不断将 z[j] 加入树状数组。然后再查询树状数组中有多少数小于等于 z[i]。 最后要清空树状数组（注意清空的时候不能直接清空，而是根据更新的命令，反向一次命令来清空，否则一直开树状数组耗时的），还有就是要去重贼麻烦，还是弃用吧。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y, z, id, w;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (x == A.x) <span class="keyword">return</span> y == A.y ? z &lt; A.z : y &lt; A.y;</span><br><span class="line">		<span class="keyword">return</span> x &lt; A.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// ans[i] 表示 小于或等于 a[i] 的元素个数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">cdq</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; &amp;a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 先按照 y 排序，免得后面代码写的太麻烦</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ans</span><span class="params">(a.<span class="built_in">size</span>())</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="comment">// 去重操作</span></span><br><span class="line">	<span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].x != a[i - <span class="number">1</span>].x || a[i].y != a[i - <span class="number">1</span>].y || a[i].z != a[i - <span class="number">1</span>].z) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = i - last - <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = last; j &lt; i; ++j) &#123;</span><br><span class="line">				ans[a[j].id] = t;</span><br><span class="line">				a[j].w = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			a[i - <span class="number">1</span>].w = i - last;</span><br><span class="line">			last = i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> t = a.<span class="built_in">size</span>() - last - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = last; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">		ans[a[i].id] = t;</span><br><span class="line">		a[i].w = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	a.back().w = a.<span class="built_in">size</span>() - last;</span><br><span class="line">	<span class="function">TreeArray <span class="title">A</span><span class="params">(k)</span></span>;</span><br><span class="line">	<span class="keyword">auto</span> cmpy = [](<span class="keyword">const</span> Node &amp;lhs, <span class="keyword">const</span> Node &amp;rhs) &#123;</span><br><span class="line">		<span class="keyword">return</span> lhs.y &lt; rhs.y;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; divide = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="keyword">if</span> (r - l &lt;= <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">		divide(l, m);</span><br><span class="line">		divide(m, r);</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>() + l, a.<span class="built_in">begin</span>() + m, cmpy);</span><br><span class="line">		<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>() + m, a.<span class="built_in">begin</span>() + r, cmpy);</span><br><span class="line">		<span class="keyword">int</span> t = l;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; r; ++i) &#123;</span><br><span class="line">			<span class="keyword">while</span> (t &lt; m &amp;&amp; a[t].y &lt;= a[i].y) &#123;</span><br><span class="line">				A.add(a[t].z, a[t].w);</span><br><span class="line">				++t;</span><br><span class="line">			&#125;</span><br><span class="line">			ans[a[i].id] += A.sum(a[i].z);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; t; ++i) A.add(a[i].z, -a[i].w);</span><br><span class="line">	&#125;;</span><br><span class="line">	divide(<span class="number">0</span>, a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="k-维偏序（暴力-bitset-优化，分块时间换空间）-O-frac-k-n-2-w"><a href="#k-维偏序（暴力-bitset-优化，分块时间换空间）-O-frac-k-n-2-w" class="headerlink" title="k 维偏序（暴力 bitset 优化，分块时间换空间） $O(\frac{k n^2}{w})$"></a>k 维偏序（暴力 bitset 优化，分块时间换空间） $O(\frac{k n^2}{w})$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e4</span> + <span class="number">2</span>;</span><br><span class="line"><span class="comment">// a 是 k * n 矩阵表示 n 个 k 维向量，输出每个小于自身的向量个数</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">partialOrder</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; &amp;a)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 直接暴力不太行，所以需要时间换空间，具体说就是分块。</span></span><br><span class="line">	<span class="keyword">int</span> k = a.<span class="built_in">size</span>(), n = a[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">using</span> Node = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Node&gt; <span class="title">f</span><span class="params">(k, Node(n))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) f[i][j] = &#123;a[i][j], j&#125;;</span><br><span class="line">		<span class="built_in">std</span>::sort(f[i].<span class="built_in">begin</span>(), f[i].<span class="built_in">end</span>());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> sn = <span class="built_in">std</span>::<span class="built_in">sqrt</span>(n);</span><br><span class="line">	<span class="keyword">using</span> Data = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt;&gt;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Data&gt; <span class="title">bs</span><span class="params">(k, Data(n / sn + <span class="number">1</span>))</span></span>;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; now;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j % sn == <span class="number">0</span>) bs[i][j / sn] = now;</span><br><span class="line">			now.<span class="built_in">set</span>(f[i][j].second);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (n % sn == <span class="number">0</span>) bs[i][n / sn] = now;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> getbst = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> val) -&gt; <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; &#123;</span><br><span class="line">		<span class="comment">// 如果求小于或等于的个数，这里要改成 upper_bound 并且要用 INT_MAX，还有最终答案减 1（去掉自身）</span></span><br><span class="line">		<span class="keyword">int</span> j = <span class="built_in">std</span>::lower_bound(f[i].<span class="built_in">begin</span>(), f[i].<span class="built_in">end</span>(), <span class="built_in">std</span>::make_pair(val, INT_MIN)) - f[i].<span class="built_in">begin</span>();</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; r = bs[i][j / sn];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> t = j / sn * sn; t &lt; j; ++t) r.<span class="built_in">set</span>(f[i][t].second);</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;N&gt; now; now.<span class="built_in">set</span>();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">			now &amp;= getbst(i, a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		r[j] = now.count();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/U66865" target="_blank" rel="noopener">LOJ U66865</a>，可参考 <a href="https://www.cnblogs.com/cjyyb/p/8196312.html" target="_blank" rel="noopener">小蒟蒻 yyb 的博客</a> 中的 ppt 实现。其它例题：<a href="http://cogs.pro:8081/cogs/problem/problem.php?pid=vSJzQVejP" target="_blank" rel="noopener">偏序++</a></p>
<blockquote>
<p>虽然三维偏序问题用 cdq 分治更好，但是用 bitset 暴力过题还是没啥问题的，例如 <a href="https://www.luogu.com.cn/problem/P3810" target="_blank" rel="noopener">LOJ P3810</a></p>
</blockquote>
<h2 id="几类根号算法"><a href="#几类根号算法" class="headerlink" title="几类根号算法"></a>几类根号算法</h2><p>首先注意到 $\max \{x \mid \lfloor \frac{n}{x} \rfloor =  \lfloor \frac{n}{i} \rfloor \} =  \lfloor \frac{ n }{ \lfloor \frac{n}{i} \rfloor } \rfloor$</p>
<p><strong>Proof</strong>：由于 $x \cdot  \lfloor \frac{n}{x} \rfloor \leq n$ 所以 $x \leq \frac{n}{\lfloor \frac{n}{x} \rfloor}$，所以 $x \leq \lfloor \frac{n}{\lfloor \frac{n}{x} \rfloor} \rfloor$，所以取 $x = i$ 和 $x = \lfloor \frac{n}{i} \rfloor$，则 $\lfloor \frac{n}{\lfloor \frac{ n }{ \lfloor \frac{n}{i} \rfloor } \rfloor} \rfloor = \lfloor \frac{n}{i} \rfloor$，另一方面，若 $\lfloor \frac{n}{x} \rfloor =  \lfloor \frac{n}{i} \rfloor$, 则 $x \leq \lfloor \frac{n}{\lfloor \frac{n}{i} \rfloor} \rfloor$，证毕。</p>
<h3 id="s-n-sum-i-1-n-lfloor-frac-n-i-rfloor"><a href="#s-n-sum-i-1-n-lfloor-frac-n-i-rfloor" class="headerlink" title="$ s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor $"></a>$ s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor $</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	LL sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line">		j = n / (n / i);</span><br><span class="line">		sum += LL(j - i + <span class="number">1</span>) * (n / i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sum-i-1-n-lfloor-frac-n-i-rfloor-lfloor-frac-m-i-rfloor-f-i"><a href="#sum-i-1-n-lfloor-frac-n-i-rfloor-lfloor-frac-m-i-rfloor-f-i" class="headerlink" title="$\sum_{i=1}^n \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{i} \rfloor f(i)$"></a>$\sum_{i=1}^n \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{i} \rfloor f(i)$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="comment">// g[i]=f[i]+g[i-1]</span></span><br><span class="line">	LL sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= <span class="built_in">min</span>(n, m); i = j + <span class="number">1</span>) &#123;</span><br><span class="line">		j = <span class="built_in">min</span>(n / (n / i), m / (m / i);</span><br><span class="line">		sum += LL(n / i) * (m / i) * (g[j] - g[i - <span class="number">1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例题：<a href="https://ac.nowcoder.com/acm/contest/9005/C" target="_blank" rel="noopener">牛客</a>，大致题意是：$n=p \times k + m, 0 \leq m &lt; k$，求 $\sum_{p = 1}^n km$，注意到 $m = n - pk$，所以用上述公式计算即可。</p>
<h3 id="h-n-frac-n-n-1-n-2-3-sum-i-2-n-h-lfloor-frac-n-i-rfloor"><a href="#h-n-frac-n-n-1-n-2-3-sum-i-2-n-h-lfloor-frac-n-i-rfloor" class="headerlink" title="$h(n) = \frac{n(n-1)(n-2)}{3} - \sum_{i=2}^n h(\lfloor \frac{n}{i} \rfloor)$"></a>$h(n) = \frac{n(n-1)(n-2)}{3} - \sum_{i=2}^n h(\lfloor \frac{n}{i} \rfloor)$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">auto</span> it = mp.<span class="built_in">find</span>(n);</span><br><span class="line">	<span class="keyword">if</span> (it != mp.<span class="built_in">end</span>()) <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">	<span class="keyword">int</span> r = LL(n) * (n - <span class="number">1</span>) % M * (n - <span class="number">2</span>) % M * inv3 % M;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j; i &lt;= n; i = j + <span class="number">1</span>) &#123;</span><br><span class="line">		j = n / (n / i);</span><br><span class="line">		r -= LL(j - i + <span class="number">1</span>) * getans(n / i) % M;</span><br><span class="line">		<span class="keyword">if</span> (r &lt; <span class="number">0</span>) r += M;</span><br><span class="line">	&#125;</span><br><span class="line">	mp.insert(<span class="built_in">std</span>::make_pair(n, r));</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="递归算法复杂度分析"><a href="#递归算法复杂度分析" class="headerlink" title="递归算法复杂度分析"></a>递归算法复杂度分析</h2><p>下图取自算法导论</p>
<p><img src= "/img/loading.gif" data-lazy-src="complexAnalysis.png" alt="complexAnalysis"></p>
<h2 id="To-Be-Continue"><a href="#To-Be-Continue" class="headerlink" title="To Be Continue"></a>To Be Continue</h2><h2 id="日常表白-zly"><a href="#日常表白-zly" class="headerlink" title="日常表白 zly"></a>日常表白 zly</h2>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>万能通用模板</title>
    <url>/allTemplate/</url>
    <content><![CDATA[<h2 id="比赛版"><a href="#比赛版" class="headerlink" title="比赛版"></a>比赛版</h2><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; cas;</span><br><span class="line">	<span class="keyword">while</span> (cas--) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意 <code>std::endl</code> 和 <code>\n</code> 的区别是前一个刷新缓冲区，后一个不刷新。</p>
</blockquote>
<h3 id="no-Case"><a href="#no-Case" class="headerlink" title="no Case"></a>no Case</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="面试版"><a href="#面试版" class="headerlink" title="面试版"></a>面试版</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>良好的码风，不乱 define，代码通用性高，不用 using namespace std</p>
</blockquote>
<h2 id="时间自测版本"><a href="#时间自测版本" class="headerlink" title="时间自测版本"></a>时间自测版本</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">auto</span> start = <span class="built_in">std</span>::clock();</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Time used: "</span> &lt;&lt; (<span class="built_in">std</span>::clock() - start) &lt;&lt; <span class="string">"ms"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 和 C++17 学习记录</title>
    <url>/stl/</url>
    <content><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>为了更加 <strong>优雅</strong> 的写 C++，在学了一点 C++17 皮毛之后，重新探索了一下 C++ STL，总结一些好用的特征。</p>
<p><code>static_cast&lt;T&gt;, optional&lt;T&gt;</code> 是两个好东西。</p>
<p>等到 Codeforces 支持 <code>C++20</code> 后开始学习 <code>C++2x</code></p>
<blockquote>
<p>没有必要关心你自己不用的特征！用的就一定要搞清楚。</p>
</blockquote>
<p>以下示例中，凡是 vector 类型的 <code>a.begin(),a.end()</code> 对应的数组类型都可以改成 <code>a,a+n</code>。</p>
<p>避免使用 <code>vector&lt;bool&gt;</code>，推荐使用 <code>bitset&lt;N&gt;</code><br>简单的说就是它并未实际保存一个 <code>bool</code>, 而是用位域的概念进行了封装.<br>所以你在实际应用的时候可能会发生一些你意料之外的问题.</p>
<h3 id="INT-MAX-DBL-MAX"><a href="#INT-MAX-DBL-MAX" class="headerlink" title="INT_MAX, DBL_MAX"></a><code>INT_MAX</code>, <code>DBL_MAX</code></h3><p>注意一般只用来比较大小的初始变量，做运算会有溢出问题。<code>int</code> 溢出本质就是对 $2^31$ 取模，<code>double</code> 会出现大数吃小数（这个涉及 double 的二进制表达，加减的时候要向大的数对齐），一旦超过了 <code>DBL_MAX</code>，那就变成 <code>inf</code>，<code>inf</code> 的运算规则跟数学的一致。<code>inf - inf = nan</code> 跟 <code>1/0 = nan</code> 一致都是未定义数。</p>
<h3 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h3><p><code>min,max,minmax</code> 都是参数个数为 2，返回的是值。所以不举例了，注意到 <code>minmax</code> 返回的是 <code>pair</code></p>
<p><code>min_element,max_element,minmax_element</code> 参数都是 <code>vector</code>，且返回的是索引。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *max_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">auto</span> lr = minmax_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">//不能取*,因为返回的是pair类型</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *lr.first &lt;&lt; <span class="string">" "</span> &lt;&lt; *lr.second &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">auto</span>[l, r] = minmax_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">//自动解析也行</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; *l &lt; <span class="string">" "</span> &lt;&lt; *r &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="累积运算-accumulate-（长没关系，有代码补全）"><a href="#累积运算-accumulate-（长没关系，有代码补全）" class="headerlink" title="累积运算  accumulate （长没关系，有代码补全）"></a>累积运算  accumulate （长没关系，有代码补全）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">0</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//默认累和</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">0</span>, <span class="built_in">std</span>::plus&lt;<span class="keyword">int</span>&gt;()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//可选加减乘除</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">0</span>, <span class="built_in">std</span>::minus&lt;<span class="keyword">int</span>&gt;()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>, <span class="built_in">std</span>::multiplies&lt;<span class="keyword">int</span>&gt;()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">1</span>, <span class="built_in">std</span>::divides&lt;<span class="keyword">int</span>&gt;()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; accumulate(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="number">0</span>, [](<span class="keyword">auto</span> &amp; x, <span class="keyword">auto</span> &amp; y) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">3</span> * x + y;</span><br><span class="line">&#125;) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><blockquote>
<p>用 <code>stable_sort</code> 是稳定排序，即不改变原有相互不小于的元素的相对位置</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()); <span class="comment">// 默认从小到大排序</span></span><br><span class="line"><span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">std</span>::less&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// 手动从小到大排序（不一定是int，具体问题具体修改）</span></span><br><span class="line"><span class="built_in">std</span>::sort(a.rbegin(), a.<span class="built_in">end</span>()); <span class="comment">// 从大到小排序</span></span><br><span class="line"><span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), <span class="built_in">std</span>::greater&lt;<span class="keyword">int</span>&gt;()); <span class="comment">// 从大到小排序</span></span><br><span class="line"><span class="comment">//对于 tuple 和 pair 大小关系都是从按照字典序比较的</span></span><br><span class="line"><span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), [](<span class="keyword">int</span> &amp; x, <span class="keyword">int</span> &amp; y) &#123;</span><br><span class="line">	<span class="keyword">return</span> (x ^ <span class="number">4</span>) &lt; (y ^ <span class="number">4</span>); <span class="comment">// 位运算的优先级好低呀</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> &amp; x: a) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>std::tuple_size&lt;decltype(tupleExample)&gt;::value;</code> 可以获得 tuple 是多少维的。其中 <code>decltype</code> 代表 <code>declare type</code> 即声明类型。</p>
</blockquote>
<h3 id="集合交并运算"><a href="#集合交并运算" class="headerlink" title="集合交并运算"></a>集合交并运算</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; x&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; y&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; t;</span><br><span class="line"><span class="built_in">std</span>::set_intersection(x.<span class="built_in">begin</span>(), x.<span class="built_in">end</span>(), y.<span class="built_in">begin</span>(), y.<span class="built_in">end</span>(), <span class="built_in">std</span>::inserter(t, t.<span class="built_in">begin</span>()));</span><br><span class="line"><span class="comment">// 若x,y,t是vector等有push_back 的容器，就可以使用</span></span><br><span class="line"><span class="comment">// set_intersection(x.begin(),x.end(),y.begin(),y.end(),back_inserter(t));</span></span><br><span class="line"><span class="comment">// set_union,set_difference,set_symmetric_difference 等同理</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>优先使用 <code>unorder_set</code></p>
</blockquote>
<h3 id="lambda-表达式递归写法"><a href="#lambda-表达式递归写法" class="headerlink" title="lambda 表达式递归写法"></a>lambda 表达式递归写法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; gcd = [ &amp; ](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">int</span> &#123; <span class="comment">// 注意最前面不能用auto</span></span><br><span class="line">	<span class="keyword">return</span> b ? gcd(b, a % b) : a;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; gcd(<span class="number">102</span>, <span class="number">210</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::__gcd(<span class="number">102</span>, <span class="number">210</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<h3 id="C-STL-内建的一些好用的函数"><a href="#C-STL-内建的一些好用的函数" class="headerlink" title="C++ STL 内建的一些好用的函数"></a>C++ STL 内建的一些好用的函数</h3><blockquote>
<p>下面函数后加 <code>ll</code> 就可以得到 <code>unsigned long long</code> 对应的版本。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> uint = <span class="keyword">unsigned</span> <span class="keyword">int</span>;</span><br><span class="line">__builtin_parity(uint n):   返回n的二进制<span class="number">1</span>的个数奇偶性</span><br><span class="line">__builtin_clz(uint n)：     返回n的二进制前置<span class="number">0</span>的个数</span><br><span class="line">__builtin_ctz(uint n):      返回n的二进制后置<span class="number">0</span>的个数</span><br><span class="line">__builtin_ffs(<span class="keyword">int</span> n)：      返回n的二进制从后往前第一次出现<span class="number">1</span>的位置</span><br><span class="line">__lg(<span class="keyword">int</span> n):                返回log2(n)的整数部分</span><br><span class="line">= __builtin_ctz(uint n)+<span class="number">1</span></span><br><span class="line">__builtin_popcount(uint n): 返回n的二进制<span class="number">1</span>的个数，以上函数仅在GCC中有</span><br><span class="line">lowbit(uint n): n&amp;(-n)      返回使得最大的<span class="number">2</span>^i|n <span class="comment">// 这个不是内建的</span></span><br><span class="line"><span class="comment">//产生大的随机数</span></span><br><span class="line"><span class="built_in">std</span>::mt19937 rnd(<span class="built_in">std</span>::chrono::steady_clock::now().time_since_epoch().count());</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="容器简介"><a href="#容器简介" class="headerlink" title="容器简介"></a>容器简介</h2><ul>
<li>array, vector, deque, list（双向链表），forward_list（单向链表） 都是顺序容器。</li>
<li>set, map 是关联容器。</li>
<li>unordered_map 和 unordered_set 是无序关联容器</li>
<li>stack，queue，priority_queue 严格说不是容器，而是容器适配器（默认使用 deque，可以自己换成 vector）</li>
</ul>
<h3 id="优先队列-priority-queue"><a href="#优先队列-priority-queue" class="headerlink" title="优先队列 priority_queue"></a>优先队列 priority_queue</h3><ul>
<li><code>std::priority_queue&lt;int&gt;</code> 是默认最大堆，即头部是最大值。</li>
<li>最小堆可以用 <code>std::priority_queue&lt;int, std::vector&lt;int&gt;, std::greater&lt;&gt;&gt;</code>。</li>
<li>如果一般化地情况，<code>std::priority_queue&lt;Node&gt;</code> 其中 Node 中要定义小于号，然后也是最大堆。例如 Node 可以是 <code>std::pair&lt;int, int&gt;</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> x, y;</span><br><span class="line">	Node(<span class="keyword">int</span> _x, <span class="keyword">int</span> _y) : x(_x), y(_y) &#123;&#125;</span><br><span class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> x * A.y &lt; y * A.x;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>另一种方式（cmp 中出现的 lambda 函数必须是全局变量），例如对 <code>pii = std::pair&lt;int, int&gt;</code> 的<pre><code><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span> <span class="params">(<span class="keyword">const</span> pii &amp;lhs, <span class="keyword">const</span> pii &amp;rhs)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> lhs.first * rhs.second &lt; rhs.second * rhs.first;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<blockquote>
<p>注意优先队列不能随机访问和自然遍历 0.0</p>
</blockquote>
<h3 id="注意-map-和-unordered-map-的数据污染问题"><a href="#注意-map-和-unordered-map-的数据污染问题" class="headerlink" title="注意 map 和 unordered_map 的数据污染问题"></a>注意 map 和 unordered_map 的数据污染问题</h3><p>map 中支持 <code>mp[i]</code> 的直接调用（即使没有数据 i，此时默认返回 0），但是次调用会污染了数据，即此时无论 mp 中是否有元素 i, i 都被添加到 mp 中。此时调用迭代器，i 就会出现了，这里需要特别注意。</p>
<p>unordered_map 同理。</p>
<h2 id="大数库"><a href="#大数库" class="headerlink" title="大数库"></a>大数库</h2><h3 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h3><blockquote>
<p>谁说 GMP 好用的，出来挨打！已经抛弃</p>
</blockquote>
<p>Ubuntu 20.04 好像内置安装了 GMP，如果没安装可以使用 <code>sudo apt install libgmp-dev</code> 安装（可能需要安装 m4)<br>使用的时候 <code>#include &lt;gmpxx.h&gt;</code> 就好了（带 xx 表示 C++ 使用，不带表示 C 使用），不过它真的难用</p>
<h3 id="NTL：专攻数论，以后再学吧"><a href="#NTL：专攻数论，以后再学吧" class="headerlink" title="NTL：专攻数论，以后再学吧"></a><a href="https://www.shoup.net/ntl/doc/tour.html" target="_blank" rel="noopener">NTL</a>：专攻数论，以后再学吧</h3><blockquote>
<p>NTL 才是正确的选择，但是它的高效是需要借助 GMP 的</p>
</blockquote>
<h3 id="Boost：最终选择"><a href="#Boost：最终选择" class="headerlink" title="Boost：最终选择"></a><a href="https://www.boost.org/" target="_blank" rel="noopener">Boost</a>：最终选择</h3><blockquote>
<p>Boost 是激进的 STL，STL 是保守的 Boost</p>
</blockquote>
<p>一键安装：<code>sudo apt install libboost-all-dev</code>，正确用法：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> BINT = boost::multiprecision::cpp_int;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>win10 下 WSL ubuntu20.04 真香。全所未有的方便！<br>win10 下 还可以用 <a href="https://packages.msys2.org/package/mingw-w64-x86_64-boost?repo=mingw64" target="_blank" rel="noopener">MSYS2 安装</a><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;boost/multiprecision/cpp_int.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> BINT = boost::multiprecision::cpp_int;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> pll = <span class="built_in">std</span>::pair&lt;LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> sp[N], p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i += <span class="number">2</span>) sp[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] &lt;= sp[i] &amp;&amp; i * p[j] &lt; N; ++j) &#123; <span class="comment">//防止乘法溢出</span></span><br><span class="line">			sp[i * p[j]] = p[j]; <span class="comment">// 注意到sp只被赋值一次</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">BINT f[N];</span><br><span class="line"><span class="function">BINT <span class="title">getPowSum</span><span class="params">(LL n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="comment">// k&lt;1000</span></span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> BINT(n);</span><br><span class="line">	<span class="keyword">if</span> (p[<span class="number">1</span>] != <span class="number">2</span>) spf();</span><br><span class="line">	<span class="keyword">int</span> nk = <span class="number">2</span> * k + <span class="number">1</span>;</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">auto</span> bPow = [](BINT x, <span class="keyword">int</span> n) -&gt; BINT &#123;</span><br><span class="line">		BINT r(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (; n; x *= x, n &gt;&gt;= <span class="number">1</span>) <span class="keyword">if</span> (n&amp;<span class="number">1</span>) r *= x;</span><br><span class="line">		<span class="keyword">return</span> r;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= nk + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (sp[i] == i) f[i] = bPow(BINT(i), k);</span><br><span class="line">		<span class="keyword">else</span> f[i] = f[sp[i]] * f[i / sp[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nk; ++i) f[i] += f[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= nk) <span class="keyword">return</span> f[n];</span><br><span class="line">	BINT res = <span class="number">0</span>, tl = <span class="number">1</span>, tr = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = nk - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) tr = tr * (n - i - <span class="number">1</span>) / (nk - i);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= nk; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((nk - i) &amp; <span class="number">1</span>) res -= f[i] * tl * tr;</span><br><span class="line">		<span class="keyword">else</span> res += f[i] * tl * tr;</span><br><span class="line">		tl = tl * (n - i) / (i + <span class="number">1</span>);</span><br><span class="line">		tr = tr * (nk - i) / (n - i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; getPowSum(<span class="number">100</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="2021-1-11-更新"><a href="#2021-1-11-更新" class="headerlink" title="2021/1/11 更新"></a>2021/1/11 更新</h2><h3 id="指向-const-的指针-p-const-指针-q-和-指向-const-的-const-指针-pq"><a href="#指向-const-的指针-p-const-指针-q-和-指向-const-的-const-指针-pq" class="headerlink" title="指向 const 的指针 p, const 指针 q 和 指向 const 的 const 指针 pq"></a>指向 const 的指针 p, const 指针 q 和 指向 const 的 const 指针 pq</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> *p &#123;&amp;i&#125;;</span><br><span class="line">*p = &amp;j;</span><br><span class="line"><span class="built_in">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">int</span> * <span class="keyword">const</span> q &#123;&amp;k&#125;;</span><br><span class="line">*q = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">int</span> * <span class="keyword">const</span> pq&#123;&amp;j&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="mutable-成员"><a href="#mutable-成员" class="headerlink" title="mutable 成员"></a>mutable 成员</h3><p>multable 成员指出，即使是 const 对象，它的 mutable 成员也是可以被修改的（例如计数的）<br>。</p>
<h3 id="虚函数-virtual-重载-overide，不再允许子类重载-final"><a href="#虚函数-virtual-重载-overide，不再允许子类重载-final" class="headerlink" title="虚函数 virtual, 重载 overide，不再允许子类重载 final"></a>虚函数 virtual, 重载 overide，不再允许子类重载 final</h3><p>假设基类 的 A 函数需要调用 B 函数，而子类有对 B 进行覆盖。那么子类在调用（从基类继承的） A 函数时，并不会调用子类的 B 函数，而是调用基类的 B 函数。如果像 A 函数调用的是子类中的 B 函数，那么只需在 A 函数前加 virtual 关键字即可，此时最好在子类的函数中添加一个 overide 关键字，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Box.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BOX_HPP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BOX_HPP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> &#123;</span></span><br><span class="line">	<span class="keyword">double</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="keyword">double</span> length &#123;<span class="number">1.0</span>&#125;;</span><br><span class="line">	<span class="keyword">double</span> <span class="built_in">width</span> &#123;<span class="number">1.0</span>&#125;;</span><br><span class="line">	<span class="keyword">double</span> <span class="built_in">height</span> &#123;<span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	Box() = <span class="keyword">default</span>;</span><br><span class="line">	Box(<span class="keyword">double</span> lv, <span class="keyword">double</span> wv, <span class="keyword">double</span> hv) : length &#123;lv&#125;, <span class="built_in">width</span> &#123;wv&#125;, <span class="built_in">height</span> &#123;hv&#125; &#123;&#125;</span><br><span class="line">	<span class="comment">// Function to show the volume of an object</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">showVolume</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Box usable volume is "</span> &lt;&lt; volume() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; &#125;</span><br><span class="line">	<span class="comment">// Function to calculate the volume of a Box object</span></span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> length * <span class="built_in">width</span> * <span class="built_in">height</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package.hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> PACKAGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACKAGE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box.hpp"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Package</span> :</span> <span class="keyword">public</span> Box &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">// Constructor</span></span><br><span class="line">	Package(<span class="keyword">double</span> lv, <span class="keyword">double</span> wv, <span class="keyword">double</span> hv) : Box &#123;lv, wv, hv&#125; &#123;&#125;</span><br><span class="line">	<span class="comment">// Function to calculate volume of a ToughPack allowing 15% for packing</span></span><br><span class="line">	<span class="function"><span class="keyword">double</span> <span class="title">volume</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">override</span> </span>&#123; <span class="keyword">return</span> <span class="number">0.85</span> * length * <span class="built_in">width</span> * <span class="built_in">height</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box.hpp"</span> <span class="comment">// For the Box class</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Package.hpp"</span> <span class="comment">// For the ToughPack class</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Box box &#123;<span class="number">20.0</span>, <span class="number">30.0</span>, <span class="number">40.0</span>&#125;; <span class="comment">// Define a box</span></span><br><span class="line">	Package hardcase &#123;<span class="number">20.0</span>, <span class="number">30.0</span>, <span class="number">40.0</span>&#125;; <span class="comment">// Declare tough box - same size</span></span><br><span class="line">	box.showVolume(); <span class="comment">// Display volume of base box</span></span><br><span class="line">	hardcase.showVolume(); <span class="comment">// Display volume of derived box</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="lambda-函数做计数器"><a href="#lambda-函数做计数器" class="headerlink" title="lambda 函数做计数器"></a><a href="https://github.com/shuai132/blog_code/tree/master/src/1.closure" target="_blank" rel="noopener">lambda 函数做计数器</a></h3>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>快速数论变换</title>
    <url>/nft/</url>
    <content><![CDATA[<p>快速 Fourier 变换，被称为 20 世纪最伟大的十大算法之一。所以很多软件都有对应的 FFT，例如 Python 的 <code>scipy.fftpack</code> 中就有关于 FFT 的包。所以个人写 FFT 就没有那么必要了。但是 NFT 的包一般都没多少，而且会写 NFT 必然就会写 FFT 了。大约在 5 年前就写过 NFT 的 C++ 代码，现在一看依然不记得蝶式映射到底是咋想的，<del>所以想独立思考出整个过程</del>(失败）。</p>
<blockquote>
<p>此博文特别划水，建议直接阅读 <a href="http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform" target="_blank" rel="noopener">miskcoo 博文：从多项式乘法到快速傅里叶变换</a></p>
</blockquote>
<p>发现 NFT 一个很大的限制就是你只能在 <code>NFT-friendly</code> 的域（例如 $\mod 998244353 = 119 \cdot2^{23}$，原根为 $3$ ）或者模很小的数的环中处理。即环中所有运算放在整数环中都不会超过选择的大基底。</p>
<p>选择 $n$ 个 <code>NFT-friendly</code> 的大基底 $p_1,\cdots, p_n$ 使得 $p_1\cdots p_n$ 大于 ans 的上界，然后再用 <a href="/chineseRemainTheorem/" title="中国剩余定理">中国剩余定理</a> 就可以把 ans 搞出来了。</p>
<a id="more"></a>
<h2 id="基底的选择"><a href="#基底的选择" class="headerlink" title="基底的选择"></a>基底的选择</h2><p>我们考虑 $\mod p$  构成的域。即运算默认是 $\mod p$ 的（除了指数上的幂次数），因为原根定理，此形式必有原根 $g$，即存在 $\mod p$ 中所有元素都可以写成 $g^n$ 的形式（所以 $g^{p-1}=1,g^{n}\neq 1, 0&lt;n&lt;p-1$）。而我们做 NFT 是需要找一个元素 $w$，使得 $w^{2^k} = 1$，因此我们需要找素数 $p$，使得 $p-1=c \cdot 2^k$，其中 $c$ 是个小奇数。</p>
<h3 id="查找基底的-SageMath-代码"><a href="#查找基底的-SageMath-代码" class="headerlink" title="查找基底的 SageMath 代码"></a>查找基底的 SageMath 代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>,<span class="number">32</span>): <span class="comment"># 调节这个数值范围来找自己想要的 p</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">25</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span>(is_prime(j*<span class="number">2</span>^i+<span class="number">1</span>)):</span><br><span class="line">            ans.append(j*<span class="number">2</span>^i+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ans: </span><br><span class="line">    print(<span class="string">"1 + "</span>,factor(i<span class="number">-1</span>),<span class="string">"\t=\t"</span>,i)</span><br></pre></td></tr></table></figure>
<p>我们会发现有很多可供选择的例子，其中的娇楚（$c$ 较小，$k$ 较大，$p^2 &lt; 2^{63}$）</p>
<ul>
<li><code>x_1 = 1 + 2^27 * 15</code> 十分推荐！$x_2$ 刚好不超过 <code>INT_MAX</code>，所以在乘积取模之前还多一次加法运算，就很方便！</li>
<li><code>x_2 = 1 + 2^27 * 17</code> 是平方不超过 <code>LL(long long)</code> 中最大的一个，但是不推荐，因为 $2*x_1^2$ 超了 <code>LL</code>。</li>
<li><code>x_3 = 1 + 2^21 * 479</code> 是网上常见的一个，但并不推荐。$c$ 太大了！</li>
<li><code>x_4 = 1 + 2^12 * 3</code> 是最小不超过<code>INT16</code>，并且 $c$ 特别小的一个！如果不用<code>LL</code>就很推荐</li>
<li><code>x_5 = 1 +  2^57 * 29</code> 是不超过 <code>INT64</code> 中最推荐的一个！然后基础运算需要用 GCC 内建的 <code>__int128</code></li>
</ul>
<p>总之，$x_1$ 是最为推荐的，$x_2,x_3$ 很常见主要是因为国内第一篇比较完整的介绍 NFT 的是 <a href="http://blog.miskcoo.com/" target="_blank" rel="noopener">大佬 miskcoo</a>，他当时给的常数是 $x_2,x_3$，然后就人云亦云了！$x_5$ 很有意思，它敲好比 $2^{62}$ 小一点，然后它又大于 $1e9+9$，而 $1e9+7,1e9+9$ 这两个孪生素数又经常的出现在 <code>ICPC/IO</code> 中！<strong>但是，貌似也没啥用，见 NFT 模板代码的注释</strong></p>
<p>用 SageMath 自带的 <code>primtive_root</code> 函数分别求对应的原根 $g_1=31,g_2=g_3=g_5=3,g_4=11$。</p>
<p>所以，在 <code>LL</code> 的数据范围内，我们可以使用 $x_1$，可以处理最长长度为 $2^{27}$ 的 NFT，最长为 $2^{26} \sim 6 \times 10^7$ 项的 NFT 多项式乘法。 </p>
<blockquote>
<p>我们现在存在 $w$，有 $w^N = 1,\; w^n \neq 1, 0&lt; n &lt; N$，其中 $N = 2^k, k&lt;27$，有时我们用 $w_N$ 表明 $w$ 和 $N$ 的关系。</p>
</blockquote>
<h2 id="离散-Fourier-变换-DFT"><a href="#离散-Fourier-变换-DFT" class="headerlink" title="离散 Fourier 变换 DFT"></a>离散 Fourier 变换 DFT</h2><p>对长度为 $N$ 的数列 $a_0,\cdots a_{N-1}$ 做离散 Fourier 变换得到数列 $\hat{a}_0 \cdots \hat{a}_{N-1}$：</p>
<script type="math/tex; mode=display">
\hat{a}_k = \sum_{n=0} ^{N-1} w^{kn}a_n</script><p>写成矩阵形式：</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
\hat{a}_0 \\
\hat{a}_1 \\
\vdots \\
\hat{a}_{N-1} 
\end{pmatrix} 
= 
\begin{pmatrix}
1 & 1   & \cdots &1 \\
1 & w & \cdots &w^{N-1} \\
\vdots& & \ddots & \\
1 & w^{N-1}& \cdots & w^{(N-1)(N-1)}
\end{pmatrix} 
\begin{pmatrix}
a_0 \\
a_1 \\
\vdots \\
a_{N-1} 
\end{pmatrix}</script><p>即上述矩阵为 $A$，则 $a_{ij} = w^{ij}$, 即 $b_{ij}= w^{-ij}$，则 $AB = NI$，即 $A^{-1} = \frac{1}{N}(w^{-ij})_{N \times N}$。即我们得到了 Fourier 逆变换公式：</p>
<script type="math/tex; mode=display">
a_k = \frac{1}{N} \sum_{n=0} ^{N-1} w^{-kn} \hat{a}_n</script><h2 id="快速-Fourier-数论变换-NFT"><a href="#快速-Fourier-数论变换-NFT" class="headerlink" title="快速 Fourier 数论变换 NFT"></a>快速 Fourier 数论变换 NFT</h2><p>记 $H = \frac{N}{2}$，</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat{a}_{k} &= \sum_{n=0} ^{N-1} w^{kn}a_n \\
&= (a_0+w^{2k}a_2+\cdots+ w^{2k(H-1)}a_{N-2})+w^k(a_1+w_{2k}a_3+\cdots+w^{2k(H-1)}a_{N-1}) \\
&= \sum_{n=0}^{H-1} (w^2)^{kn}a_{2n} + w^k  \sum_{n=0}^{H-1} (w^2)^{kn}a_{2n+1} \\
\hat{a}_{k+H} &= \sum_{n=0}^{H-1} (w^2)^{kn}a_{2n} - w^k  \sum_{n=0}^{H-1} (w^2)^{kn}a_{2n+1} \\
\end{aligned}</script><p>即长度为 $N$ 的 Fourier 变换可以其奇数项和偶数项的长度为 $\frac{N}{2}$ 的 Fourier 变换表出。于是递归的我们可以在 $O(n\log n)$ 时间复杂度求出。</p>
<blockquote>
<p>递归太消耗计算时间了。因此我们需要给出非递归的版本</p>
</blockquote>
<h3 id="快速-NFT-图"><a href="#快速-NFT-图" class="headerlink" title="快速 NFT 图"></a>快速 NFT 图</h3><p>下图出自 <a href="http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform" target="_blank" rel="noopener">miskcoo 从多项式乘法到快速傅里叶变换</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="bit-reverse-miskcoo.png" alt="bit-reverse-miskcoo"></p>
<p>从这个图发现，最终的计算顺序，是每个数的位倒序。处理的细节 miskcoo 博客写的特别清楚了！</p>
<blockquote>
<p>当我想要修改 Miskcoo 的代码形式时，发现怎么修改都没他的好！</p>
</blockquote>
<p>还有 NFT 可以用于求多项式的逆！也可见 <a href="http://blog.miskcoo.com/2015/05/polynomial-inverse" target="_blank" rel="noopener">Miskcoo 的博文</a></p>
<h2 id="NFT-和卷积的关系"><a href="#NFT-和卷积的关系" class="headerlink" title="NFT 和卷积的关系"></a>NFT 和卷积的关系</h2><p>设 $a,b$ 是长度为 $N$（不必 2 的幂次，之前这个限制只是为了快速计算）的数列，则</p>
<script type="math/tex; mode=display">
\hat{ab} = \hat{a} \star \hat{b}</script><p><strong>Proof</strong>：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\hat{a} \star \hat{b}(k) &=  \sum_{n=0} ^k  \hat{a}(n) \hat{b}(k-n) \\ 
&=  \sum_{n=0} ^k (\sum_{i=0} ^{N-1}  w^{ni} a_i ) (\sum_{j=0} ^{N-1}w^{(k-n)j}b_j) \\ 
&= \hat{ab}(k)
\end{aligned}</script><blockquote>
<p>最后一个式子成立是因为若 $i \neq j$，则 $\sum_{n=0} ^k w^{ni} a_i w^{(k-n)j}b_j=0$</p>
</blockquote>
<p>所以我们有 $a \star b= \hat{\hat{a} \hat{b}}$，而多项式乘法只是卷积的一个例子。有些时候 <strong>计算式</strong> 一开始不是卷积形式，但是可以转换成卷积形式，再利用 FFT 或者 NFT 加速。</p>
<h2 id="NFT-模板"><a href="#NFT-模板" class="headerlink" title="NFT 模板"></a>NFT 模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> BI = __int128;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(BI *x,<span class="keyword">int</span> len)</span></span>&#123; <span class="comment">// note that bitreverse(i)=j</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;j) swap(x[i],x[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=len&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// the mod must NFT-friendly or (len+1)*mod^2 &lt; FM</span></span><br><span class="line"><span class="keyword">const</span> BI FM = BI(<span class="number">29</span>)&lt;&lt;<span class="number">57</span>|<span class="number">1</span>, gg=<span class="number">3</span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(BI *x,<span class="keyword">int</span> len,<span class="keyword">bool</span> isInverse=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">	g = powmod(gg,(FM<span class="number">-1</span>)/len,FM);</span><br><span class="line">	<span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">		g = powmod(g,FM<span class="number">-2</span>,FM);</span><br><span class="line">		BI invlen = powmod(BI(len),FM<span class="number">-2</span>,FM);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">			x[i]=x[i]*invlen%FM;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(x,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> half=<span class="number">1</span>,<span class="built_in">step</span>=<span class="number">2</span>;half!=len;half&lt;&lt;=<span class="number">1</span>,<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		BI wn = powmod(g,len/<span class="built_in">step</span>,FM),w=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="built_in">step</span>,w=<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;i+half;++j)&#123;</span><br><span class="line">				BI t=(w*x[j+half])%FM;</span><br><span class="line">				x[j+half]=(FM-t+x[j])%FM;</span><br><span class="line">				x[j]=(x[j]+t)%FM;</span><br><span class="line">				w = w*wn%FM;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">square</span><span class="params">(BI *a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">1</span>&lt;&lt;(<span class="number">32</span>-__builtin_clz(<span class="number">2</span>*n+<span class="number">1</span>));</span><br><span class="line">	nft(a,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">		a[i]=a[i]*a[i]%FM;</span><br><span class="line">	&#125;</span><br><span class="line">	nft(a,len,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(BI *a,BI *b,<span class="keyword">int</span> na,<span class="keyword">int</span> nb)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">1</span>&lt;&lt;(<span class="number">32</span>-__builtin_clz(na+nb+<span class="number">1</span>));</span><br><span class="line">	nft(a,len);nft(b,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">		a[i] = a[i]*b[i]%FM;</span><br><span class="line">	&#125;</span><br><span class="line">	nft(b,len,<span class="number">1</span>);nft(a,len,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NFT-模板更新（2020-7-9"><a href="#NFT-模板更新（2020-7-9" class="headerlink" title="NFT 模板更新（2020/7/9)"></a>NFT 模板更新（2020/7/9)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> LL M = <span class="number">998244353</span>,ROOT=<span class="number">3</span>;</span><br><span class="line"><span class="function">LL <span class="title">powmod</span><span class="params">(LL x,LL n)</span></span>&#123;</span><br><span class="line">	<span class="function">LL <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%M;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>; x=x*x%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; &amp;a)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i!=a.<span class="built_in">size</span>();++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;j) swap(a[i],a[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=a.<span class="built_in">size</span>()&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; &amp;a,<span class="keyword">bool</span> isInverse=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">	LL g = powmod(ROOT,(M<span class="number">-1</span>)/a.<span class="built_in">size</span>());</span><br><span class="line">	<span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">		g = powmod(g,M<span class="number">-2</span>);</span><br><span class="line">		LL invLen = powmod(LL(a.<span class="built_in">size</span>()),M<span class="number">-2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:a) x=x*invLen%M;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(a);</span><br><span class="line">	<span class="function"><span class="built_in">vector</span>&lt;LL&gt; <span class="title">w</span><span class="params">(a.<span class="built_in">size</span>(),<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=w.<span class="built_in">size</span>();++i) w[i] = w[i<span class="number">-1</span>]*g%M;</span><br><span class="line">	<span class="keyword">auto</span> addMod = [](LL x,LL y)&#123;<span class="keyword">return</span> (x+=y)&gt;=M?x-=M:x;&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">2</span>,half = <span class="number">1</span>;half!=a.<span class="built_in">size</span>();<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>,half&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,wstep=a.<span class="built_in">size</span>()/<span class="built_in">step</span>;i!=a.<span class="built_in">size</span>();i+=<span class="built_in">step</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=i;j!=i+half;++j)&#123;</span><br><span class="line">				LL t = (a[j+half]*w[wstep*(j-i)])%M;</span><br><span class="line">				a[j+half]=addMod(a[j],M-t);</span><br><span class="line">				a[j]=addMod(a[j],t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;LL&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;LL&gt; a,<span class="built_in">vector</span>&lt;LL&gt; b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sz=<span class="number">1</span>,tot = a.<span class="built_in">size</span>()+b.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span>(sz&lt;tot) sz*=<span class="number">2</span>;</span><br><span class="line">	a.resize(sz);b.resize(sz);</span><br><span class="line">	nft(a);nft(b);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=sz;++i) a[i] = a[i]*b[i]%M;</span><br><span class="line">	nft(a,<span class="number">1</span>);</span><br><span class="line">	a.resize(tot);</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关于多项式乘法，求逆，带余除法的理论基础见下图，取自 <a href="https://cp-algorithms.com/algebra/polynomial.html" target="_blank" rel="noopener">cp-algorithm</a></p>
<p><img src= "/img/loading.gif" data-lazy-src="mulInv.png" alt="mulInv"></p>
<p><img src= "/img/loading.gif" data-lazy-src="divRem.png" alt="divRem"></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
        <tag>SageMath</tag>
      </tags>
  </entry>
  <entry>
    <title>$x^2 \equiv a \mod n$ 何时有解</title>
    <url>/quadraticModEquation/</url>
    <content><![CDATA[<p>显然，我们只需考虑 $0 \leq a &lt; n$ 的情形。这个问题应该很早就被人考虑好了，不过无所谓吧（反正只是个博文而已）。以下内容都是独立完成的。并可看作 <a href="/quadraticResidueAndGaussReciprocity/" title="二次剩余和 Gauss 互反律">二次剩余和 Gauss 互反律</a> 这篇博文的延续。最后再给出方程的一个解（如果存在的话）。</p>
<a id="more"></a>
<p>记 $A_n =  \{0 &lt; x &lt; n \mid \gcd(x,n) = 1\}$，则 $A_n$ 关于 $\mod n$ 的乘法构成一个群（根据 Euler 定理 $|A_n| = \psi(n)$）</p>
<p>所以若 $\gcd(a,n)= 1$，则任意 $x \in A_n$，存在唯一 $y \in A_n$ 使得 $xy \equiv a \mod n$ </p>
<p>若 $x^2 \equiv a \mod n$ 无解，则 $\prod_{x \in A_n} x = a^{\frac{\psi(n)}{2}} \mod n$</p>
<p>若 $x^2 \equiv a \mod n$ 有解，设 $0 &lt; a_1 &lt; a_2 &lt; \cdots &lt; a_r &lt; n$ 是全部解。则 $\prod_{x \in A_n} x = a^{\frac{\psi(n)-r}{2}} a_1 \cdots a_r  \mod n$，注意到 $r$ 只与 $n$ 有关，与 $a$ 无关。</p>
<blockquote>
<p>用 $[\frac{a}{n}] = 1$ 表示有解，用 $[\frac{a}{n}] = 0$ 表示无解。</p>
</blockquote>
<p>为了考虑这个问题，我们分情况讨论</p>
<h2 id="x-2-equiv-a-mod-2-m-gcd-a-p-m-1-何时有解"><a href="#x-2-equiv-a-mod-2-m-gcd-a-p-m-1-何时有解" class="headerlink" title="$x^2 \equiv a \mod 2^m,  \gcd(a,p^m) = 1$ 何时有解"></a>$x^2 \equiv a \mod 2^m,  \gcd(a,p^m) = 1$ 何时有解</h2><p>当 $m=1,2$ 时，有解当且仅当 $a=1$</p>
<p>当 $m \geq 3$ 时，$2^m | (a_2 -a_1)(a_2+a_1)$, 若 $(a_2-a_1)$ 和 $a_2+a_1$ 都是 <code>4</code> 的倍数，则 $a_1,a_2$ 也是 <code>2</code> 的倍数矛盾于 $\gcd(a,2^m) = 1$。所以 $2^{m-1} \mid a_2+a_1)$ 或者 $2^{m-1} \mid (a_2-a_1)$。所以 $0 &lt; a_1 &lt; 2^{m-2}$，$a_2 = 2^{m-1} - a_1, a_3 = 2^{m-1}+a_1, a_4 = 2^m-a_1$。</p>
<p>但是，若 $x$ 是奇数，则 $x^2 \equiv 1\mod 8$ ，令一方面 $\gcd(a,2^m) = 1$ 当且仅当 $a \equiv \mod 2$，而且每一个解对应 4 个 $x$。</p>
<p>即 $1^2,2^2,\cdots,(2^m-1)^2 \mod 2^m$，只有 $2^{m-3}$ 个数，但是小于 $2^m$ 且模 8 为 1 的数也只有，$2^{m-3}$ 个。因此，</p>
<p>有解 <strong>当且仅当</strong> $a \equiv 1 \mod 8$</p>
<h2 id="x-2-equiv-a-mod-p-m-p-gt-2-gcd-a-p-m-1-何时有解"><a href="#x-2-equiv-a-mod-p-m-p-gt-2-gcd-a-p-m-1-何时有解" class="headerlink" title="$x^2 \equiv a \mod p^m,\;p&gt;2, \gcd(a,p^m) = 1$ 何时有解"></a>$x^2 \equiv a \mod p^m,\;p&gt;2, \gcd(a,p^m) = 1$ 何时有解</h2><p>因为 $p^m \mid (a_2-a_1)(a_2+a_1)$，若$(a_2-a_1)$ 和 $a_2+a_1$ 都是 $p$ 的倍数，则 $a_1, a_2$ 也是 $p$ 的倍数矛盾于 $\gcd(a,p^m) = 1$，所以 $a_2 = p^m - a_1$。从而 $r=2, \; a_1a_2 \equiv -a \mod p^m$，所以</p>
<ul>
<li><p>若 $x^2 \equiv a \mod p^m$ 无解，则 $\prod_{x \in A_n} x = a^{\frac{p^{m-1}(p-1)}{2}} \mod p^m$</p>
</li>
<li><p>若 $x^2 \equiv a \mod p^m$ 有解，则 $\prod_{x \in A_n} x = -a^{\frac{p^{m-1}(p-1)}{2}} \mod p^m$</p>
</li>
</ul>
<p>取 $a=1$，则 $\prod_{x \in A_n} x = -1 \mod p^m$，即 </p>
<script type="math/tex; mode=display">
[\frac{a}{p^m}] =  (1 \equiv a^{\frac{p^{m-1}(p-1)}{2}} \mod p^m)?</script><h2 id="x-2-equiv-a-p-i-mod-p-m-i-lt-m-gcd-a-p-m-1-何时有解"><a href="#x-2-equiv-a-p-i-mod-p-m-i-lt-m-gcd-a-p-m-1-何时有解" class="headerlink" title="$x^2 \equiv a p^i \mod p^m, \; i&lt;m, \; \gcd(a,p^m) = 1$ 何时有解"></a>$x^2 \equiv a p^i \mod p^m, \; i&lt;m, \; \gcd(a,p^m) = 1$ 何时有解</h2><p>若 $i=2k-1$ 为奇数，则 $p^k \mid x$，从而 $p^{i+1} \mid ap^i$，矛盾于 $\gcd(a,p^m) = 1$</p>
<p>所以 $i$ 为偶数，显然此时上式有解当且仅当 $x^2 \equiv a \mod p^{m-i},\gcd(a,p^{m-i}) = 1$ 有解</p>
<p>综上 </p>
<script type="math/tex; mode=display">
[ \frac{a}{p^m} ] = \left\{ \begin{array}{cc} 
1 & a=0 \\
1 & p=2,\; a \equiv 1 \mod 8 \\
-1 & p=2,\; a \not \equiv 1 \mod 8 \\
(1 \equiv a^{\frac{p^{m-1}(p-1)}{2}} \mod p^m)? & p>2,\; \gcd(a,p^m) = 1\\
-1 & \gcd(a,p^m) = p^i, i \equiv 1 \mod 2 \\
[\frac{ap^{-i}}{p^{m-i}}] & \gcd(a,p^m) = p^i, i \equiv 0 \mod 2 \\
\end{array} \right.</script><h2 id="x-2-equiv-a-mod-m-1m-2-gcd-m-1-m-2-1-何时有解"><a href="#x-2-equiv-a-mod-m-1m-2-gcd-m-1-m-2-1-何时有解" class="headerlink" title="$x^2 \equiv a \mod m_1m_2, \gcd(m_1,m_2)=1$ 何时有解"></a>$x^2 \equiv a \mod m_1m_2, \gcd(m_1,m_2)=1$ 何时有解</h2><p>考虑</p>
<script type="math/tex; mode=display">
\begin{aligned}
x \equiv a_1^2 \mod m_1 \\
x \equiv a_2^2 \mod m_2
\end{aligned}</script><p>则，存在 $t_1,t_2$ 使得，$t_1m_1 + t_2m_2 = 1$，所以 $t_1^2 m_1^2 + t_2^2 m_2^2 + 2 t_1 m_1 t_2 m_2=1$, 所以 $x \equiv (t_2m_2 a_1)^2$ 且 $x \equiv (t_1 m_1 a_2)^2$，所以 </p>
<script type="math/tex; mode=display">
x \equiv (t_2 m_2 a_1)^2 + (t_1 m_1 a_2)^2 \equiv (t_2 m_2 a_1 + t_1 m_1 a_2)^2 \mod m_1 m_2</script><p>令一方面若 $x \equiv a^2 \mod m_1 m_2$，则 $x \equiv (a \mod m_i)^2 \mod m_i$</p>
<p>即 $x^2 = a \mod m_1 m_2$ <strong>有解当且仅当</strong> $[\frac{a}{m_1}] = [\frac{a}{m_2}] = 1$</p>
<blockquote>
<p>最终方案：$n = p_1^{m_1} \cdots p_r^{m_r}, \; p_1&lt; \cdots &lt;p_r$, $[\frac{a}{m}] = \prod [\frac{a}{p_i^{m_i}}]$ </p>
</blockquote>
<h2 id="判断是否有解的-sagemath-代码"><a href="#判断是否有解的-sagemath-代码" class="headerlink" title="判断是否有解的 sagemath 代码"></a>判断是否有解的 sagemath 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modSqrtSymbol.ipynb</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modSqrtSymbol</span><span class="params">(an,n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> p,m <span class="keyword">in</span> factor(n):</span><br><span class="line">        a = an%p^m</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">0</span>:  <span class="keyword">continue</span></span><br><span class="line">        flag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> a%p == <span class="number">0</span>:</span><br><span class="line">            a//=p</span><br><span class="line">            m-=<span class="number">1</span></span><br><span class="line">            flag = <span class="keyword">not</span> flag</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> a%<span class="number">8</span> != <span class="number">1</span>:  <span class="keyword">return</span>  <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> power_mod(a,p^(m<span class="number">-1</span>)*(p<span class="number">-1</span>)//<span class="number">2</span>,p^m) != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为 <code>factor</code> 复杂度是 $O(\sqrt{n})$， 所以整体复杂度 $O(\sqrt{n})$</p>
</blockquote>
<h2 id="求出-x-2-equiv-a-mod-n-的一个解"><a href="#求出-x-2-equiv-a-mod-n-的一个解" class="headerlink" title="求出 $x^2 \equiv a \mod n$ 的一个解"></a>求出 $x^2 \equiv a \mod n$ 的一个解</h2><blockquote>
<p>本来是想求全部解的，但是考虑到如果 $\gcd(a,n) \neq 1$ 则解的个数实在太多，就不想求全部解了，当然如果真的有这个需要，求全部解也不难。</p>
<p>另外，无论是是否有解还是求全部解都可以直接暴力做，只是复杂度为 $O(n)$ ，效率太低。</p>
</blockquote>
<h3 id="求-x-2-equiv-a-mod-2-m-的全部解，不妨设-a-equiv-1-mod-8"><a href="#求-x-2-equiv-a-mod-2-m-的全部解，不妨设-a-equiv-1-mod-8" class="headerlink" title="求 $x^2 \equiv a \mod 2^m$ 的全部解，不妨设 $a \equiv 1 \mod 8$"></a>求 $x^2 \equiv a \mod 2^m$ 的全部解，不妨设 $a \equiv 1 \mod 8$</h3><p>若 $m=1$，则 $x=1$，若 $m=2$，则 $x = 1, 3$，若 $m=3$，则 $x=1,3,5,7$，若 $m \geq 4$，不妨设 $x_{m-1}$ 是满足方程 $x^2 \equiv a \mod 2^{m-1}$的最小正整数解，即 $x_{m-1}^2 = a + 2^{m-1}k$</p>
<ul>
<li><p>若 $k$ 是偶数，则必然是 $x_{m-1}^2 \equiv a \mod 2^m$ 的解，最小的解就是 $\min(x_{m-1},2^{m-2}-x_{m-1})$，但由于 $x_{m-1} \leq 2^{m-3}$，所以 $x_m=x_{m-1}$</p>
</li>
<li><p>若 $k$ 为奇数，则 $(2^{m-2} - x_{m-1})^2 = 2^{2m-4} - 2^{m-1} + x_{m-1}^2 \equiv a \mod 2^m$，且 $0&lt;2^{m-2}-x_{m-1}&lt;2^{m-2}$，所以 $x_m =2^{m-2} - x_{m-1}$</p>
</li>
</ul>
<p>所以经过 $m$ 步就可找到所有解就是 $x_m, 2^{m-1} - x_m,2^{m-1} + x_m, 2^m - x_m$</p>
<h3 id="求-x-2-equiv-a-mod-p-m-p-gt-2-的全部解，其中-gcd-a-p-m-1"><a href="#求-x-2-equiv-a-mod-p-m-p-gt-2-的全部解，其中-gcd-a-p-m-1" class="headerlink" title="求 $x^2 \equiv a \mod p^m, \; p&gt;2$ 的全部解，其中 $\gcd(a,p^m) = 1$"></a>求 $x^2 \equiv a \mod p^m, \; p&gt;2$ 的全部解，其中 $\gcd(a,p^m) = 1$</h3><p>令 $q = \frac{\psi(p^m)}{2} = p^{m-1}\frac{p-1}{2}$，若 $q$ 是奇数，则 $(a^{\frac{q+1}{2}})^2 = a^q a \equiv a\mod p^m$，从而解就是 $a^{\frac{q+1}{2}},p^m-a^{\frac{q+1}{2}}$</p>
<p>否则，记 $q = 2^{i}q’$（想模仿上面 $q$ 是奇数的情况），我们找一个非二次剩余 $b$，即 $b^q \equiv -1 \mod p^m$。我们记 $x = a^{\frac{q’+1}{2}},\;y = b^{q’}, \; t= a^{q’}$。则</p>
<p>$x^2 = ta, t^{2^i} = 1, y^{2^i}=-1$。我们想保持 $x^2 = ta$，让 $t$ 变成 1。就打到了我们的目的。</p>
<p>若 $t^{2^{s}} = -1, t^{2^{s+1}} = 1$, 则 $s&lt;i$，那么 $(y^{2^{i-s}}t)^{2^{s}} = y^{2^i}t^{2^{s}} = 1$，并且 $(y^{2^{i-s-1}}x)^2 = (y^{2^{i-s}}t)a$，我们更新 $t = y^{2^{i-s}}t$，更新 $x=y^{2^{i-s-1}}x$。重复上述过程直到 $t=1$。</p>
<p>我们也可以类似 $p=2$ 的情况，经过 $m$ 步得到全部解，只是 $m=1$ 的时候是困难的，并且和上述分析一致，所以就没用 $p=2$ 时的方法。若 $x_{m-1}$ 满足 $x_{m-1}^2 = a + p^{m-1}k$</p>
<ul>
<li><p>若 $k$ 是偶数，$(x_{m-1} - \frac{k}{2}p^{m-1})^2 \equiv a \mod p^m$</p>
</li>
<li><p>若 $k$ 是奇数，$(x_{m-1} + \frac{p-k}{2}p^{m-1})^2 \equiv a \mod p^m$</p>
</li>
</ul>
<p>对一般的 $n = p_1^{m_1} \cdots p_r ^{m_r}$，我们对每个 $(a, p_i ^m)$ 给出一个解，再用 <a href="/chineseRemainTheorem/" title="中国剩余定理">中国剩余定理</a> 拼出最终解。</p>
<h3 id="x-2-equiv-a-mod-n-的一个解的-Sagemath-代码"><a href="#x-2-equiv-a-mod-n-的一个解的-Sagemath-代码" class="headerlink" title="$x^2 \equiv a \mod n$ 的一个解的 Sagemath 代码"></a>$x^2 \equiv a \mod n$ 的一个解的 Sagemath 代码</h3><blockquote>
<p>需要用到上面的 <code>modSqrtSymbol</code> 函数</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># modSqrt.ipynb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># find one x s.t. x^2 = a mod 2^m, gcd(a,2) = 1 and 0 &lt; a &lt; 2^m and must have an answer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modSqrt2Core</span><span class="params">(a,m)</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,m+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> (x*x-a)%(<span class="number">1</span>&lt;&lt;i) != <span class="number">0</span>:</span><br><span class="line">            x = (<span class="number">1</span>&lt;&lt;i<span class="number">-2</span>)-x</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># find one x s.t. x^2 = a mod p^m, gcd(a,p)=1, p&gt;2 and  0 &lt; a &lt; p^m and must have an answer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modSqrtPCore</span><span class="params">(a,p,m)</span>:</span></span><br><span class="line">    n = p^m</span><br><span class="line">    q = p^(m<span class="number">-1</span>)*(p<span class="number">-1</span>)&gt;&gt;<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> q%<span class="number">2</span> == <span class="number">1</span>:  <span class="keyword">return</span> power_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,n)</span><br><span class="line">    b=randint(<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">while</span>(power_mod(b,q,n)==<span class="number">1</span>):  b=randint(<span class="number">0</span>,n<span class="number">-1</span>)</span><br><span class="line">    ni = q&amp;(-q)</span><br><span class="line">    q //= ni</span><br><span class="line">    x = power_mod(a,(q+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>,n)</span><br><span class="line">    y = power_mod(b,q,n)</span><br><span class="line">    t = power_mod(a,q,n)</span><br><span class="line">    <span class="comment"># x^2 = ta mod n, y^ni = -1 mod n</span></span><br><span class="line">    <span class="keyword">while</span> t != <span class="number">1</span>:</span><br><span class="line">        ns = <span class="number">1</span>;tt=t*t;</span><br><span class="line">        <span class="keyword">while</span> tt!=<span class="number">1</span>:</span><br><span class="line">            tt=(tt*tt)%n</span><br><span class="line">            ns&lt;&lt;=<span class="number">1</span></span><br><span class="line">        <span class="comment"># t^ns = -1 mod n</span></span><br><span class="line">        t = power_mod(y,ni//ns,n)*t%n</span><br><span class="line">        x = power_mod(y,ni//(ns*<span class="number">2</span>),n)*x%n</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># find one x s.t. x^2 = a mod p^m and must have an answer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modPowerSqrt</span><span class="params">(a,p,m)</span>:</span></span><br><span class="line">    n = p^m</span><br><span class="line">    a %= n</span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a%p==<span class="number">0</span>:</span><br><span class="line">        a//=p</span><br><span class="line">        m-=<span class="number">1</span></span><br><span class="line">        time+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">0</span>:  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>**(time//<span class="number">2</span>)*(modSqrt2Core(a,m) <span class="keyword">if</span> p==<span class="number">2</span> <span class="keyword">else</span> modSqrtPCore(a,p,m))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modSqrt</span><span class="params">(a,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> modSqrtSymbol(a,n):  <span class="keyword">return</span> []</span><br><span class="line">    fact = list(factor(n))</span><br><span class="line">    x = [modPowerSqrt(a,p,m) <span class="keyword">for</span> p,m <span class="keyword">in</span> fact]</span><br><span class="line">    m = [p^m <span class="keyword">for</span> p,m <span class="keyword">in</span> fact]</span><br><span class="line">    <span class="keyword">return</span> crt(x,m)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试几个样例</span></span><br><span class="line">a,m = <span class="number">17</span>,<span class="number">2</span>**<span class="number">8</span></span><br><span class="line">x =  modSqrt(a,m)</span><br><span class="line">print(x,x*x%m,a,m)</span><br><span class="line"></span><br><span class="line">a,m = <span class="number">15</span>,<span class="number">7</span>**<span class="number">8</span></span><br><span class="line">x =  modSqrt(a,m)</span><br><span class="line">print(x,x*x%m,a,m)</span><br><span class="line"></span><br><span class="line">a,m = <span class="number">16</span>,<span class="number">3</span>*<span class="number">5</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">7</span>*<span class="number">7</span></span><br><span class="line">x =  modSqrt(a,m)</span><br><span class="line">print(x,x*x%m,a,m)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>SageMath</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划</title>
    <url>/dynamicProgramming/</url>
    <content><![CDATA[<p>动态规划是研究一大类问题（特别是最值问题）的一种思路。从大二刚开始 ICPC 竞赛的时候第一次遇到，到大三学运筹学系统的了解，再到后来一直成为解决问题的一种思考方式。可以说动态规划真的是万金油的方法。</p>
<p>计算机领域（或者说博弈论）中的动态规划，就如同数学中的数学归纳法，一样重要。</p>
<blockquote>
<p>运用动态规划的能力，就好比武侠小说中的内功，是随着时间慢慢累积的。<br>进阶可看 <a href="https://codeforces.com/blog/entry/47764" target="_blank" rel="noopener">zscoder 的博文</a></p>
</blockquote>
<a id="more"></a>
<h2 id="动态规划应用举例"><a href="#动态规划应用举例" class="headerlink" title="动态规划应用举例"></a>动态规划应用举例</h2><ul>
<li>数列的递推关系</li>
<li>背包问题</li>
<li>图论中 <a href="/templateOfCpp/" title="Floyd 算法">Floyd 算法</a>，Dijkstra 算法</li>
<li>流水线问题，旅行商问题</li>
<li>其它杂类问题</li>
</ul>
<h2 id="动态规划原理"><a href="#动态规划原理" class="headerlink" title="动态规划原理"></a>动态规划原理</h2><p>动态规划（dynamic programming）于 1950s 被 Richard Bellman 发现。<a href="https://www.zhihu.com/question/23995189/answer/35324479" target="_blank" rel="noopener">引用这里的话</a>，动态规划本质就是：</p>
<ul>
<li>定义问题的状态（必须满足”无后效性”：这个就很玄学了）</li>
<li>写出状态间的转移方程</li>
</ul>
<p>从而递推（分治）的解决问题。</p>
<blockquote>
<p>难点就在于定义问题的状态</p>
<p>很多时候一个变量的问题，我们需要强行加一个（甚至两个）变量来定义状态</p>
<p>然后给出状态转移方程，再做时间空间的优化。</p>
</blockquote>
<h2 id="常规动态规划的状态定义"><a href="#常规动态规划的状态定义" class="headerlink" title="常规动态规划的状态定义"></a>常规动态规划的状态定义</h2><ul>
<li>以该位置结尾的最优策略</li>
<li>多设一个变量的最优策略</li>
</ul>
<h2 id="动态规划举例（长期更新）"><a href="#动态规划举例（长期更新）" class="headerlink" title="动态规划举例（长期更新）"></a>动态规划举例（长期更新）</h2><h3 id="codeforces1354F"><a href="#codeforces1354F" class="headerlink" title="codeforces1354F"></a><a href="https://codeforces.ml/problemset/problem/1354/F" target="_blank" rel="noopener">codeforces1354F</a></h3><p>有 $n$ 张牌，$i$ 号牌的数值是 $a_i$，当 $i$ 号牌放入桌上，之前在桌上的牌，每张数值增加 $b_i$，桌上的牌可以销毁（每张牌最多销毁一次），但是桌上牌的数量不能超过 $k$。 问使桌上牌数值总和最大的放法。其中数据满足</p>
<script type="math/tex; mode=display">
1 \leq k \leq n,\; 1 \leq a_i \leq N,\; 0 \leq b_i \leq N = 10^5, \; a_i,b_i,n,k \in \mathbb{N}</script><blockquote>
<p>由于牌的编号于问题无关，所以不妨设 $b_i$ 单调递增。</p>
</blockquote>
<p>状态定义：<code>dp[i][j]</code> 表示：场上前 $j$ 张牌数（编号都不超过 $i$ ）的桌面牌总和最大值（其实还要减去后 $k-j$ 张牌的原始面值）。如果不减去就有后效性了！！！</p>
<p>状态转移：我们考虑第 $i$ 张牌，</p>
<ul>
<li>如果将它最终留在桌面上，那么它一定是最后一张放在桌面上的，因为 $b_i$ 单调递增。此时 $dp[i][j] = dp[i-1][j-1]+(j-1)b[i] + a[i]$</li>
<li>如果它没留在桌面，那么它一定会在后来第 $k$ 张牌加过 buff，$dp[i][j] = dp[i-1][j] + (k-1)b[i]$</li>
</ul>
<p>所以</p>
<script type="math/tex; mode=display">
dp[i][j] = \max(dp[i-1][j-1]+(j-1)b[i]+a[i],\; dp[i-1][j]+(k-1)b[i])</script><p>我们可以用 <code>isin[i][j]</code> 来标记桌上第 $j$ 张牌是否是 $i$ 号牌。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">102</span>;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="keyword">bool</span> isin[N][N],chose[N];</span><br><span class="line"><span class="keyword">using</span> node = tuple&lt;<span class="keyword">int</span>,<span class="keyword">int</span>,<span class="keyword">int</span>&gt;;</span><br><span class="line">node q[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">		dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>]+(k<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;i &amp;&amp; j&lt;=k;++j)&#123;</span><br><span class="line">			<span class="keyword">int</span> x = dp[i<span class="number">-1</span>][j]+(k<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i]);</span><br><span class="line">			<span class="keyword">int</span> y = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+(j<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i])+<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(q[i]);</span><br><span class="line">			<span class="keyword">if</span>(x&gt;y)&#123;</span><br><span class="line">				dp[i][j] = x;</span><br><span class="line">				isin[i][j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				dp[i][j] = y;</span><br><span class="line">				isin[i][j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(i&lt;=k)&#123;</span><br><span class="line">			dp[i][i] = dp[i<span class="number">-1</span>][i<span class="number">-1</span>]+(i<span class="number">-1</span>)*<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(q[i])+<span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(q[i]);</span><br><span class="line">			isin[i][i] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n,j=k;i;--i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isin[i][j])&#123;</span><br><span class="line">			chose[i]=<span class="literal">true</span>;</span><br><span class="line">			--j;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			chose[i]=<span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> cas,n,k,a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;cas;</span><br><span class="line">	<span class="keyword">while</span>(cas--)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">			q[i] = &#123;i,a,b&#125;;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		sort(q+<span class="number">1</span>,q+n+<span class="number">1</span>,[](<span class="keyword">const</span> node &amp; x, <span class="keyword">const</span> node &amp; y)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(x)&lt;<span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(y);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(<span class="number">2</span>*n-k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		getans(n,k);</span><br><span class="line">		<span class="keyword">int</span> last = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(chose[i])&#123;</span><br><span class="line">				<span class="keyword">if</span>(++last == k)&#123;</span><br><span class="line">					last = i;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!chose[i])  <span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>&lt;&lt;-<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[i])&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(q[last])&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="hdu-5691"><a href="#hdu-5691" class="headerlink" title="hdu 5691"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=5691" target="_blank" rel="noopener">hdu 5691</a></h3><p>这题大意：给你一些数，数值固定，部分数的位置随意调节，问你如何调解使得下式取值最大</p>
<script type="math/tex; mode=display">
a_0 a_1 + a_1 a_2 + \cdots + a_{n-1} a_n</script><p>这确实是经典的状态转移问题：</p>
<p>设 $i$ 的 2 进制表示是 $0 \cdots 0 i_1 0 \cdots 0 i_x 0\cdots 0$ 有 $x$ 位。<br><code>dp[i][j]</code> 表示前 $x$ 个空 分别填了 $a[i_1],a[i_2],\cdots,a[i_x]$ 的一个排列 且 $i_x = j$ 使目标最大的最大值。<br>那么，自然地有 <code>dp[i|(1&lt;&lt;k)][k] = max(dp[i][j]+a[j]*a[k])</code></p>
<p>详细转移见代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; <span class="keyword">if</span> (a&lt;b) a=b;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF =  <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],p[N];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, Case = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>,++Case);</span><br><span class="line">        <span class="keyword">int</span> n, x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)    p[i] = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,a+i, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(x != <span class="number">-1</span>) p[x] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                dp[i][j] = -INF;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="number">-1</span>)    dp[<span class="number">1</span>&lt;&lt;p[<span class="number">0</span>]][p[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)   dp[<span class="number">1</span>&lt;&lt;i][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;(<span class="number">1</span>&lt;&lt;n);++i)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;++j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!(i&amp;(<span class="number">1</span>&lt;&lt;j)))   <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;++k)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&amp;(<span class="number">1</span>&lt;&lt;k))    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">int</span> x = __builtin_popcount(i);</span><br><span class="line">                    <span class="keyword">if</span>(p[x] == <span class="number">-1</span> || p[x] == k)&#123;</span><br><span class="line">                        upmax(dp[i|(<span class="number">1</span>&lt;&lt;k)][k], dp[i][j]+a[j]*a[k]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = -INF;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) upmax(res, dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Codeforces-1312E"><a href="#Codeforces-1312E" class="headerlink" title="Codeforces 1312E"></a><a href="https://codeforces.com/contest/1312/problem/E" target="_blank" rel="noopener">Codeforces 1312E</a></h3><p>我们用 <code>ans[i][j]</code> 表示前 <code>i</code> 个数中以 <code>j</code> 结尾的最短数列长度，并用 <code>b[i][j]</code> 保存导致它以 <code>j</code> 结尾的前缀首项的位置。那么状态转移就显然，可从代码中读取。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1022</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">502</span>][N],b[<span class="number">502</span>][N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,x;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(ans,inf,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">		ans[<span class="number">0</span>][x] = <span class="number">1</span>;</span><br><span class="line">		b[<span class="number">0</span>][x]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;++j)&#123;</span><br><span class="line">				<span class="keyword">if</span>(ans[i<span class="number">-1</span>][j]!=inf)&#123;</span><br><span class="line">					ans[i][x] = <span class="built_in">min</span>(ans[i][x],ans[i<span class="number">-1</span>][j]+<span class="number">1</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				b[i][x]=i;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">int</span> s = i<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">while</span>(s&gt;=<span class="number">0</span>&amp;&amp;ans[s][x]!=inf)&#123;</span><br><span class="line">				ans[i][x+<span class="number">1</span>] = ans[s][x];</span><br><span class="line">				b[i][x+<span class="number">1</span>] = b[s][x];</span><br><span class="line">				s = b[s][x]<span class="number">-1</span>;</span><br><span class="line">				++x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">int</span> r = inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;</span><br><span class="line">			r = <span class="built_in">min</span>(r,ans[n<span class="number">-1</span>][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;r&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="洛谷-P1005-矩阵取数游戏"><a href="#洛谷-P1005-矩阵取数游戏" class="headerlink" title="洛谷 P1005 矩阵取数游戏"></a><a href="https://www.luogu.com.cn/problem/P1005" target="_blank" rel="noopener">洛谷 P1005 矩阵取数游戏</a></h3><blockquote>
<p>每一行单独考虑，然后因为数据范围，所以用 Python 交题</p>
<p>按照规模做 <code>dp</code>，最近做的很少，记录一哈 2020/7/4</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a)</span>:</span></span><br><span class="line">	b = a.copy()</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(a)):</span><br><span class="line">		c = []</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(b)<span class="number">-1</span>):</span><br><span class="line">			c.append(max(<span class="number">2</span>*b[j]+a[i+j],<span class="number">2</span>*b[j+<span class="number">1</span>]+a[j]))</span><br><span class="line">		b=c</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>*b[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">n = int(input().split()[<span class="number">0</span>])</span><br><span class="line">r=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">	r += f([int(_) <span class="keyword">for</span> _ <span class="keyword">in</span> input().split()])</span><br><span class="line">print(r)</span><br></pre></td></tr></table></figure>
<h3 id="洛谷-T135246-「SWTR-05」Grid"><a href="#洛谷-T135246-「SWTR-05」Grid" class="headerlink" title="洛谷 T135246 「SWTR-05」Grid"></a><a href="https://www.luogu.com.cn/problem/T135246?contestId=28195" target="_blank" rel="noopener">洛谷 T135246 「SWTR-05」Grid</a></h3><p><code>dp[i][j]</code> ：第 <code>i</code> 行，以第 <code>j</code> 个数结尾的最小和， <code>s[i][j]</code> ：第 <code>i</code> 行，前 <code>j</code> 个数之和</p>
<p><code>rr[i][j]</code> ：到达 <code>i,j</code> 位置经过的数字和。 </p>
<p><code>r[i][j]</code> ：首次到达 <code>i,j</code> 位置经过格子的数字和(不包括 <code>i,j</code> 的值）初值为 <code>rr[i+1][j]</code></p>
<p><code>dp[i][j]</code> 和 <code>s[i][j]</code> 的状态转移是显然的，<code>rr[i][j]</code> 和 <code>r[i][j]</code> 状态转移：</p>
<script type="math/tex; mode=display">
\begin{aligned}
r[i][j] = \min_{j \leq k<m} r[i][k] + s[i][k] - s[i][j] \\
rr[i][j] = r[i][j] + dp[i][j]
\end{aligned}</script><p>由于 <code>r[i][j]</code> 转移式的对称性，我们考虑记录 <code>s[i][j] + r[i][j]</code> 的最小值，（直接优化了一个 $O(m)$），这也是此题的经典之处。最后 <code>rr</code> 数组可被优化掉。当然也可以对 <code>r</code> 进行空间优化，<del>但是没必要</del>。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	LL a[n][m],dp[n][m],s[n][m],r[n+<span class="number">1</span>][m];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line">			<span class="keyword">if</span>(j==<span class="number">0</span>) s[i][j] = a[i][j];</span><br><span class="line">			<span class="keyword">else</span> s[i][j] = s[i][j<span class="number">-1</span>]+a[i][j];</span><br><span class="line">			cur += a[i][j];</span><br><span class="line">			dp[i][j] = cur;</span><br><span class="line">			cur = <span class="built_in">min</span>(cur,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">		LL mi = <span class="number">1e9</span>+<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=m<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">			r[i][j] = (i==n<span class="number">-1</span>?<span class="number">0</span>:r[i+<span class="number">1</span>][j]);</span><br><span class="line">			<span class="keyword">if</span>(r[i][j]&lt;mi-s[i][j])&#123;</span><br><span class="line">				mi = r[i][j]+s[i][j]; </span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				r[i][j] = mi-s[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">			r[i][j] += dp[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ret = r[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;++j)&#123;</span><br><span class="line">		ret = <span class="built_in">min</span>(ret,r[<span class="number">0</span>][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ret&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面上题的 <strong>空间优化版本（优雅的不行，需要考虑从上向下走）</strong>：</p>
<p><code>rr[j]</code> 表示上一行的答案， <code>r[j]</code> 表示当前行的答案。那么 <code>r[j]</code> 的初始值应该为 <code>rr[j]+dp[j]</code>，状态转移</p>
<script type="math/tex; mode=display">
r[j] = \min_{0 \leq k \leq j} r[k] - s[k] + s[j]</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n,m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	LL a[m],s[m],dp[m],r[m],rr[m]=&#123;&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">		LL cur = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;a[j];</span><br><span class="line">			cur += a[j];</span><br><span class="line">			dp[j] = cur;</span><br><span class="line">			cur = <span class="built_in">min</span>(cur,<span class="number">0L</span>L);</span><br><span class="line">			s[j] = a[j]+(j==<span class="number">0</span>?<span class="number">0</span>:s[j<span class="number">-1</span>]);</span><br><span class="line">		&#125;</span><br><span class="line">		cur = rr[<span class="number">0</span>]+dp[<span class="number">0</span>]-s[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)&#123;</span><br><span class="line">			r[j] = <span class="built_in">min</span>(rr[j]+dp[j],cur+s[j]);</span><br><span class="line">			cur = <span class="built_in">min</span>(cur,r[j]-s[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j) rr[j] = r[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;*min_element(rr,rr+m)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="T134867-YsOI2020-归零"><a href="#T134867-YsOI2020-归零" class="headerlink" title="T134867 [YsOI2020]归零"></a><a href="https://www.luogu.com.cn/problem/T134867?contestId=31074" target="_blank" rel="noopener">T134867 [YsOI2020]归零</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL M = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">132</span>;</span><br><span class="line">LL f[N],invf[N];</span><br><span class="line"><span class="function">LL <span class="title">pow_mod</span><span class="params">(LL x,LL n)</span></span>&#123;</span><br><span class="line">	LL r = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%M;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>; x=x*x%M;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i) f[i]=f[i<span class="number">-1</span>]*i%M;</span><br><span class="line">	invf[N<span class="number">-1</span>] = pow_mod(f[N<span class="number">-1</span>],M<span class="number">-2</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i) invf[i] = invf[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k&gt;n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> f[n]*invf[n-k]%M*invf[k]%M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	init();</span><br><span class="line">	<span class="built_in">string</span> ss;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;ss;</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;c:ss) s.emplace_back(c-<span class="string">'0'</span>);</span><br><span class="line">	<span class="keyword">auto</span> plusOne = [&amp;](<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;</span><br><span class="line">		<span class="keyword">int</span> id = r<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(s[id]==<span class="number">9</span>) --id;</span><br><span class="line">		++s[id];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=id+<span class="number">1</span>;i&lt;r;++i) s[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">auto</span> minusOne = [&amp;](<span class="keyword">int</span> l,<span class="keyword">int</span> r)&#123;</span><br><span class="line">		<span class="keyword">int</span> id = r<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(s[id]==<span class="number">0</span>) --id;</span><br><span class="line">		--s[id];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=id+<span class="number">1</span>;i&lt;r;++i) s[i] = <span class="number">9</span>;</span><br><span class="line">	&#125;;</span><br><span class="line">	function&lt;<span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt;(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; f = [&amp;](<span class="keyword">int</span> l,<span class="keyword">int</span> r) -&gt; <span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt;&#123;</span><br><span class="line">		<span class="keyword">if</span>(all_of(s.<span class="built_in">begin</span>()+l,s.<span class="built_in">begin</span>()+r,[](<span class="keyword">int</span> x)&#123; <span class="keyword">return</span> x == <span class="number">0</span>;&#125;))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt;&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">map</span>&lt;<span class="keyword">int</span>,LL&gt; ret;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;r;++i)&#123;</span><br><span class="line">			<span class="keyword">if</span>(s[i])&#123;</span><br><span class="line">				<span class="keyword">int</span> x = s[i];</span><br><span class="line">				s[i]=<span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span>(x&gt;<span class="number">4</span>) plusOne(l,i);</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ia:f(l,i))&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;ib:f(i,r))&#123;</span><br><span class="line">						<span class="keyword">int</span> t1 = <span class="number">1</span>+ia.first+ib.first;</span><br><span class="line">						LL t2 = ia.second*ib.second%M*C(ia.first+ib.first,ia.first)%M;</span><br><span class="line">						<span class="keyword">if</span>(ret.<span class="built_in">find</span>(t1)==ret.<span class="built_in">end</span>())&#123;</span><br><span class="line">							ret[t1] = t2;</span><br><span class="line">						&#125;<span class="keyword">else</span> ret[t1] = (ret[t1]+t2)%M;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(x&gt;<span class="number">4</span>) minusOne(l,i);</span><br><span class="line">				s[i]=x;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;;</span><br><span class="line">	LL res = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> &amp;x:f(<span class="number">0</span>,s.<span class="built_in">size</span>()))&#123;</span><br><span class="line">		<span class="comment">//cout&lt;&lt;x.first&lt;&lt;" "&lt;&lt;x.second&lt;&lt;endl;</span></span><br><span class="line">		res+=x.second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;res%M&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态压缩-DP（mask-dp）"><a href="#状态压缩-DP（mask-dp）" class="headerlink" title="状态压缩 DP（mask dp）"></a>状态压缩 DP（mask dp）</h2><h3 id="给定-2n-个非负整数，求两两配对的最大公约数的和的最大值"><a href="#给定-2n-个非负整数，求两两配对的最大公约数的和的最大值" class="headerlink" title="给定 $2n$ 个非负整数，求两两配对的最大公约数的和的最大值"></a>给定 $2n$ 个非负整数，求两两配对的最大公约数的和的最大值</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// input n and 2n non-negetive integers(less than 1e9)</span></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	n *= <span class="number">2</span>;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="comment">// initial all gcd which will be used for effectiveness</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">gcd</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">			gcd[i][j] = <span class="built_in">std</span>::__gcd(a[i], a[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">auto</span> cmax = [](LL &amp;a, LL b) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a &lt; b) a = b;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// total complex O(2^n * n^3) and we can remove the "if" part of following code</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">mask</span><span class="params">(<span class="number">1</span> &lt;&lt; n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">0</span>; <span class="built_in">step</span> &lt; n; ++<span class="built_in">step</span>) &#123; <span class="comment">// every step choose two integers</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">0</span>; msk &lt; (<span class="number">1</span> &lt;&lt; n); ++msk) <span class="keyword">if</span> (__builtin_popcount(msk) == <span class="number">2</span> * <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="keyword">if</span> (!(msk &amp; (<span class="number">1</span> &lt;&lt; i))) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) <span class="keyword">if</span> (!(msk &amp; (<span class="number">1</span> &lt;&lt; j))) &#123;</span><br><span class="line">					cmax(mask[msk|(<span class="number">1</span> &lt;&lt; i)|(<span class="number">1</span> &lt;&lt; j)], mask[msk] + gcd[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(mask.back());</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本问题可以在多项式时间用<a href="https://oi-wiki.org/topic/graph-matching/general-match/" target="_blank" rel="noopener">一般图匹配</a> 解决。</p>
</blockquote>
<h3 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a><a href="https://atcoder.jp/contests/abc180/tasks/abc180_e" target="_blank" rel="noopener">旅行商问题</a></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;std::tuple&lt;int, int, int&gt;&gt; a(n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y, z] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">	<span class="keyword">auto</span> dist = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line">		<span class="keyword">auto</span> [aix, aiy, aiz] = a[i];</span><br><span class="line">		<span class="keyword">auto</span> [ajx, ajy, ajz] = a[j];</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">abs</span>(aix - ajx) + <span class="built_in">abs</span>(aiy - ajy) + <span class="built_in">std</span>::<span class="built_in">max</span>(<span class="number">0</span>, ajz - aiz);</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">d</span><span class="params">(n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n))</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			d[i][j] = dist(i, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> cmin = [](<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a &gt; b) a = b;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">mask</span><span class="params">(<span class="number">1</span> &lt;&lt; n, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n, <span class="number">1e8</span>))</span></span>;</span><br><span class="line">	mask[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">1</span>; <span class="built_in">step</span> &lt; n; ++<span class="built_in">step</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> msk = <span class="number">1</span>; msk &lt; (<span class="number">1</span> &lt;&lt; n); msk += <span class="number">2</span>) <span class="keyword">if</span> (__builtin_popcount(msk) == <span class="built_in">step</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (msk &amp; (<span class="number">1</span> &lt;&lt; i)) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; ++j) <span class="keyword">if</span> (!(msk &amp; (<span class="number">1</span> &lt;&lt; j))) &#123;</span><br><span class="line">					cmin(mask[msk|(<span class="number">1</span> &lt;&lt; j)][j], mask[msk][i] + d[i][j]);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> r = <span class="number">1e8</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) r = <span class="built_in">std</span>::<span class="built_in">min</span>(r, mask[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][i] + d[i][<span class="number">0</span>]);</span><br><span class="line">	<span class="built_in">print</span>(r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="453B：状态压缩-DP"><a href="#453B：状态压缩-DP" class="headerlink" title="453B：状态压缩 DP"></a><a href="https://codeforces.com/contest/453/problem/B" target="_blank" rel="noopener">453B</a>：状态压缩 DP</h3><p>给定数列 $a$，求满足元素两两互素的数列 $b$ 使得 $\sum |a_i - b_i|$ 最小</p>
<blockquote>
<p>注意到 $b_i &lt; 2 a_i$，因为否则取 $b_i = 1$ 即可。</p>
</blockquote>
<p>由于 $60$ 内的素数个数为 17, 因此可以状态压缩 DP。设 <code>dp[i][j]</code> 表示使得 $\sum_{k = 1} ^ i |a_k - b_k|$ 最小，且$b_1 \cdots b_i$ 中所有出现的素因子的状态为 $j$。因此状态转移就是 <code>dp[i][j | factor[k]] = min(dp[i - 1][j] + |a_i - k|)</code>，其中 <code>factor[k]</code> 与 $j$ 没有交集。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">int</span> ma = *<span class="built_in">std</span>::max_element(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()) * <span class="number">2</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; ma; ++i) &#123;</span><br><span class="line">		<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= i; ++j) <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) p.emplace_back(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">factor</span><span class="params">(ma)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; ma; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.<span class="built_in">size</span>(); ++j) <span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) &#123;</span><br><span class="line">			factor[i] |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; p.<span class="built_in">size</span>(), <span class="number">1e9</span>))</span></span>;</span><br><span class="line">	ans[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * a[i - <span class="number">1</span>]; ++j) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; (<span class="number">1</span> &lt;&lt; p.<span class="built_in">size</span>()); ++k) <span class="keyword">if</span> ((k &amp; factor[j]) == <span class="number">0</span>) &#123;</span><br><span class="line">				ans[i][k | factor[j]] = <span class="built_in">std</span>::<span class="built_in">min</span>(ans[i][k | factor[j]], ans[i - <span class="number">1</span>][k] + <span class="built_in">abs</span>(a[i - <span class="number">1</span>] - j));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">r</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> now = <span class="built_in">std</span>::min_element(ans[n].<span class="built_in">begin</span>(), ans[n].<span class="built_in">end</span>()) - ans[n].<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">2</span> * a[i]; ++j) <span class="keyword">if</span> ((now | factor[j]) == now) &#123;</span><br><span class="line">			<span class="keyword">if</span> (ans[i][now ^ factor[j]] + <span class="built_in">abs</span>(a[i] - j) == ans[i + <span class="number">1</span>][now]) &#123;</span><br><span class="line">				r[i] = j;</span><br><span class="line">				now ^= factor[j];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : r) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">	<span class="built_in">println</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="662C：状态压缩-DP-FWT-模板"><a href="#662C：状态压缩-DP-FWT-模板" class="headerlink" title="662C：状态压缩 DP + FWT 模板"></a><a href="https://codeforces.com/contest/662/problem/C" target="_blank" rel="noopener">662C</a>：状态压缩 DP + FWT 模板</h3><p>给定 $n \times m$ 的 0-1 方阵，可以取反一些行和列使得最后 0 的数列最小。</p>
<blockquote>
<p>首先注意到 $n &lt; 20$，我们可以把每一列看作一个状态 <code>i</code> ，并且结果跟列的顺序无关。我们可以记录下初始情况每种状态数 C[i] 量。<br>并且每一种状态 <code>i</code> 对答案的贡献显然就是它的 0, 1 个数的最小值记作 <code>g[i]</code>。<br>对于每一个行取反 S, 其实就是将一个状态 i 变成 状态 <code>i ^ S</code><br>所以每一种行取反 S，最终的答案 $\displaystyle F(S) = \sum_{i} C[i] \cdot g[i \wedge S] = \sum_{i \wedge j = S} C[i] \cdot g[j]$ </p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> print(x) std::cout &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> println std::cout &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x += y) &gt;= P &amp;&amp; (x -= P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    (x -= y) &lt; <span class="number">0</span> &amp;&amp; (x += P);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FWT</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; N &lt; n; N &lt;&lt;= <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j + m], a[i + j]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j + m], a[i + j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTand</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!rev) add(a[i + j], a[i + j + m]);</span><br><span class="line">                <span class="keyword">else</span> sub(a[i + j], a[i + j + m]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FWTxor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a, <span class="keyword">bool</span> rev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = a.<span class="built_in">size</span>(), inv2 = (P + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">2</span>, m = <span class="number">1</span>; l &lt;= n; l &lt;&lt;= <span class="number">1</span>, m &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j += l) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[i + j], y = a[i + j + m];</span><br><span class="line">                <span class="keyword">if</span> (!rev) &#123;</span><br><span class="line">                    a[i + j] = (x + y) % P;</span><br><span class="line">                    a[i + j + m] = (x - y + P) % P;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    a[i + j] = <span class="number">1L</span>L * (x + y) * inv2 % P;</span><br><span class="line">                    a[i + j + m] = <span class="number">1L</span>L * (x - y + P) * inv2 % P;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Or</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">And</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTand(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTand(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTand(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Xor</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a1, <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">std</span>::<span class="built_in">max</span>(a1.<span class="built_in">size</span>(), a2.<span class="built_in">size</span>()), N = extend(n);</span><br><span class="line">        a1.resize(N), FWTxor(a1, <span class="literal">false</span>);</span><br><span class="line">        a2.resize(N), FWTxor(a2, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">A</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) A[i] = <span class="number">1L</span>L * a1[i] * a2[i] % P;</span><br><span class="line">        FWTxor(A, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; fwt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	std::vector&lt;int&gt; c(1 &lt;&lt; n), g(1 &lt;&lt; n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">			r |= (a[j][i] - <span class="string">'0'</span>) &lt;&lt; j;</span><br><span class="line">		&#125;</span><br><span class="line">		++c[r];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (<span class="number">1</span> &lt;&lt; n); ++j) &#123;</span><br><span class="line">			<span class="keyword">if</span> (j &amp; (<span class="number">1</span> &lt;&lt; i)) ++g[j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class="line">		g[i] = <span class="built_in">std</span>::<span class="built_in">min</span>(g[i], n - g[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> f = fwt.Xor(c, g);</span><br><span class="line">	<span class="built_in">print</span>(*<span class="built_in">std</span>::min_element(f.<span class="built_in">begin</span>(), f.<span class="built_in">end</span>()));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="树形-DP"><a href="#树形-DP" class="headerlink" title="树形 DP"></a>树形 DP</h2><blockquote>
<p>树形 DP 本质上就是，树结构可以给出各种不同的偏序关系，针对不同的问题，给出偏序关系，再来 DP</p>
</blockquote>
<h2 id="换根-DP"><a href="#换根-DP" class="headerlink" title="换根 DP"></a>换根 DP</h2><p>树形 DP 的进阶：<a href="https://zhuanlan.zhihu.com/p/348349531" target="_blank" rel="noopener">朝夕 ACM 笔记</a></p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P3478" target="_blank" rel="noopener">LOJ P3478</a></p>
<p>题意：求以树的某个节点为根，各个节点的深度之和</p>
<p>做法：先以 1 为根预处理出所有子树的深度之和，然后 DP，例如 v 的父节点为 u，那么 <code>ans[v] = ans[u] - sz[v] + sz[1] - sz[v]</code> (以 v 的根的子树的深度都要降低 1， v 的父节点和兄弟节点深度都要加 1)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> u, v;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		e[u].emplace_back(v);</span><br><span class="line">		e[v].emplace_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	std::vector&lt;int&gt; dep(n + 1), sz(n + 1);</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">ans</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; pdfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		sz[u] = <span class="number">1</span>;</span><br><span class="line">		ans[u] = dep[u];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">			pdfs(v, u);</span><br><span class="line">			sz[u] += sz[v];</span><br><span class="line">			ans[u] += ans[v];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	dep[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	pdfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">// 预处理出 1 为根的结果，然后进行换根 DP</span></span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u, <span class="keyword">int</span> fa) -&gt; <span class="keyword">void</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">			ans[v] = ans[u] + sz[<span class="number">1</span>] - <span class="number">2</span> * sz[v];</span><br><span class="line">			dfs(v, u);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::max_element(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>()) - ans.<span class="built_in">begin</span>() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>换根 DP 套路：</p>
<ul>
<li>dfs 预处理以 1 为根的结果，预处理时其实也计算了子树的结果</li>
<li>第二次 dfs 进行 DP。</li>
</ul>
<p>其它例题：<a href="https://codeforces.com/problemset/problem/1324/F" target="_blank" rel="noopener">1324F</a> 和 <a href="https://codeforces.com/problemset/problem/708/C" target="_blank" rel="noopener">708C</a></p>
<h2 id="斜率优化-DP"><a href="#斜率优化-DP" class="headerlink" title="斜率优化 DP"></a>斜率优化 DP</h2><p>形如 $dp[i] = c_i + \min_{j &lt; i} a_j x_i + b_j$ 的都可以用斜率优化 DP（要求 $x_i, a_j$ 单调，最大值同理也是一样的）</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P2120" target="_blank" rel="noopener">LOJ P2120</a> </p>
<p>就此题具体说明斜率优化 DP</p>
<p>首先设 <code>dp[i]</code> 为在第 i 个工厂建设仓库，前 i 个工厂的费用之和的最小值。显然 $dp[0] = 0$</p>
<script type="math/tex; mode=display">
dp[i] = c_i + \min_{j < i} dp[j] + \sum_{k = j + 1}^i (x_i - x_k) p_k</script><p>设 $a_i = \sum_{j = 1}^i p_j$，$b_i = \sum_{j = 1}^i x_j p_j$，则</p>
<script type="math/tex; mode=display">
dp[i] = c_i + a_i x_i - b_i + \min_{j < i} -a_j x_i + (b_j + dp[j])</script><p>不妨设 $i &gt; j &gt; k$，那么若决策 j 优于 k 当且仅当 $-a_j x_i + b_j + dp[j] &lt; -a_k x_i + b_k + dp[k]$ 当且仅当 $x_i &gt; \frac{(b_j + dp[j]) - (b_k + dp[k])}{a_j - a_k}$（记作 solpe(j, k)），显然若 <code>solpe(i, j) &lt; solpe(j, k)</code> 则 <code>j</code> 必不可能成为最优点。因此相邻的节点斜率必然是递增的，因此合法队首对应的就是答案。用一个双向队列即可。（实现的时候变量有一些混用为了代码的简洁）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;LL&gt; x(n + 1), a(n + 1), c(n + 1), b(n + 1), dp(n + 1);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; a[i] &gt;&gt; c[i];</span><br><span class="line">		++x[i]; <span class="comment">// 为了避免 x[0] = x[1]</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		b[i] = b[i - <span class="number">1</span>] + x[i] * a[i];</span><br><span class="line">		a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// j &gt; k, </span></span><br><span class="line">	<span class="keyword">auto</span> solpe = [&amp;](<span class="keyword">int</span> j, <span class="keyword">int</span> k) -&gt; <span class="keyword">double</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">double</span>(b[j] - b[k]) / (a[j] - a[k]); </span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">// 这里手写双向队列要更为方便，队列中相邻两点斜率是单调递增的，且队首最优</span></span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">Q</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r &amp;&amp; solpe(Q[l + <span class="number">1</span>], Q[l]) &lt;= x[i]) ++l;</span><br><span class="line">		dp[i] = c[i] + (a[i] - a[Q[l]]) * x[i] - b[i] + b[Q[l]];</span><br><span class="line">		b[i] += dp[i];</span><br><span class="line">		<span class="keyword">while</span> (l &lt; r &amp;&amp; solpe(Q[r], Q[r - <span class="number">1</span>]) &gt;= solpe(i, Q[r])) --r;</span><br><span class="line">		Q[++r] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四边形优化-DP"><a href="#四边形优化-DP" class="headerlink" title="四边形优化 DP"></a><a href="https://oi-wiki.org/dp/opt/quadrangle/" target="_blank" rel="noopener">四边形优化 DP</a></h2><h3 id="区间-2D1D-动态规划，将-O-n-3-复杂度优化成-O-n-2"><a href="#区间-2D1D-动态规划，将-O-n-3-复杂度优化成-O-n-2" class="headerlink" title="区间 2D1D 动态规划，将 $O(n^3)$ 复杂度优化成 $O(n^2)$"></a>区间 2D1D 动态规划，将 $O(n^3)$ 复杂度优化成 $O(n^2)$</h3><script type="math/tex; mode=display">
f_{l, r} = \min_{l \leq k < r} f_{l, k} + f_{k + 1, r} + w(l, r) \qquad (1 \leq l < r \leq n)</script><p>其中 $w(l, r)$ 满足</p>
<ul>
<li>区间单调性：$w(l’, r’) \leq w(l, r)$ 对任意 $l \leq l’ \leq r’ \leq r$ 成立</li>
<li>四边形不等式：$w(l_1, r_1) + w(l_2, r_2) \leq w(l_2, r_1) +  w(l_1, r_2)$ 对任意 $l_1 \leq l_2 \leq r_1 \leq r_2$ 成立。</li>
<li>四边形不等式（等价形式）：$w(i, j) + w(i + 1, j + 1) \geq w(i + 1, j) + w(i, j + 1)$ 对任意 $i &lt; j$ 成立。</li>
</ul>
<p>若 $w(l, r)$ 满足上述关系，那么 $f_{l, r}$ 满足四边形不等式。首先注意到 $l_1 = l_2$ 或 $r_1 = r_2$ 时是平凡的。我们分 $l_1 &lt; l_2 = r_1 &lt; r_2$ 和 $l_1 &lt; l_2 &lt; r_1 &lt; r_2$ 两种情况讨论，都用数学归纳法证明。第一种情形只需 $w(l, r)$ 的区间单调性，第二种情形的证明只需四边形不等式。</p>
<p><a href="https://github.com/OI-wiki/OI-wiki/pull/2958/commits/172c5b18aa3b3b63fd4df4978341a1743818ef05" target="_blank" rel="noopener">完整证明</a></p>
<p>此时记 $m_{l, r} = \min \{k: f_{l, r} = f_{l, k} + f_{k + 1, r} + w(l, r)\} \quad (1 \leq l &lt; r \leq n)$ 即最小最优决策点。则有（反证法证明）</p>
<script type="math/tex; mode=display">
m_{l, r - 1} \leq m_{l, r} \leq m_{l + 1, r} \quad (l + 1 < r)</script><p>因此如果我们在计算 $f_{l, r}$ 的同时记录下最小最优决策点 $m_{l, r}$ 那么我们对 决策点 $k$ 的总枚举次数为</p>
<script type="math/tex; mode=display">
\sum_{1 \leq l \leq r} m_{l, r} = n - 1 +
\sum_{1 \leq l + 1 \leq r} m_{l + 1, r} - m_{l, r -1} = n - 1 \sum_{1 < i < n} m_{i, n} - m_{1, i} \leq n^2</script><blockquote>
<p>若 $w$ 仅满足区间单调性，我们取最大值，那么做法完全不同，此时</p>
</blockquote>
<script type="math/tex; mode=display">
g_{l, r} = \max_{l \leq k < r} g_{l, k} + g_{k + 1, r} + w(l, r) \qquad (1 \leq l < r \leq n)</script><p>我们可以证明：$g_{l, r} = \max \left(g_{l, l} + g_{l + 1, r}, g_{l, r - 1} + g(r, r) \right) + w(l, r)$。</p>
<p>设 $k$ 是 $g_{l, r}$ 的最小最优决策点。不妨假设 $l &lt; k &lt; r - 1$，设 $u$ 是 $g_{l, k}$ 的最优决策点，$v$ 是 $g_{k + 1, r}$ 的最优决策点。那么我们先决策 $u$ 再决策 $k$ 可知 $w(u + 1, r) &lt; w(l, k)$。先决策 $v$ 再决策 $k$ 知 $w(l, v) \leq w(k + 1, r)$，然而 $w(l, v) + w(u + 1,r) \geq w(l, k) + w(k + 1, r)$ 矛盾。（画图看就能看得很清晰）</p>
<p>模板例题：<a href="https://www.luogu.com.cn/problem/P1880" target="_blank" rel="noopener">LOJ P1880</a></p>
<p>题意：在一个圆圈上，有 n 堆石子，可以合并相邻的石子获得合并后的石子数的得分。问最后合并成一堆时最大得分和最小得分。</p>
<p>做法：首先我们可以搞 2n 堆石子，破圈为链。然后设 $f_{i, j}, g_{i, j}$ 为分别为第 i 堆到第 j 堆合并成一堆的最小和最大得分。记 $w(i, j)$ 为第 i 堆到第 j 堆石子数之和，则</p>
<script type="math/tex; mode=display">
f_{i, j} = \min_{i \leq k < j} g(i, k) + g(k + 1, j) + w(i, j) \\
g_{i, j} = \max_{i \leq k < j} g(i, k) + g(k + 1, j) + w(i, j) \\</script><p>显然 $w(i, j)$ 满足区间单调性和四边形恒等式，因此对于最小都可以用平行四边形优化。</p>
<p>对于最大值，用上述优化做法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;LL&gt; <span class="title">a</span><span class="params">(<span class="number">2</span> * n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="comment">// 破圈为链</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">		a[i + n] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; ++i) a[i] += a[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">auto</span> w = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line">		<span class="keyword">return</span> a[r] - a[l - <span class="number">1</span>];</span><br><span class="line">	&#125;;</span><br><span class="line">	std::vector&lt;std::vector&lt;LL&gt;&gt; f(2 * n + 1, std::vector&lt;LL&gt;(2 * n + 1)), mf(2 * n + 1, std::vector&lt;LL&gt;(2 * n + 1));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * n; ++i) &#123;</span><br><span class="line">		f[i][i + <span class="number">1</span>] = w(i, i + <span class="number">1</span>);</span><br><span class="line">		mf[i][i + <span class="number">1</span>] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> g = f;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt; n; ++len) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>, r = len + <span class="number">1</span>; r &lt;= <span class="number">2</span> * n; ++l, ++r) &#123;</span><br><span class="line">			f[l][r] = INT64_MAX;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = mf[l][r - <span class="number">1</span>]; k &lt;= mf[l + <span class="number">1</span>][r]; ++k) &#123;</span><br><span class="line">				<span class="keyword">if</span> (f[l][r] &gt; f[l][k] + f[k + <span class="number">1</span>][r]) &#123;</span><br><span class="line">					f[l][r] = f[l][k] + f[k + <span class="number">1</span>][r];</span><br><span class="line">					mf[l][r] = k;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			f[l][r] += w(l, r);</span><br><span class="line">			g[l][r] = <span class="built_in">std</span>::<span class="built_in">max</span>(g[l + <span class="number">1</span>][r], g[l][r - <span class="number">1</span>]) + w(l, r);			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	LL ff = INT64_MAX;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ff = <span class="built_in">std</span>::<span class="built_in">min</span>(ff, f[i][i + n - <span class="number">1</span>]);</span><br><span class="line">	LL gg = INT64_MIN;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) gg = <span class="built_in">std</span>::<span class="built_in">max</span>(gg, g[i][i + n - <span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ff &lt;&lt; <span class="string">"\n"</span> &lt;&lt; gg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>石子合并问题的最优解法是 GarsiaWachs 算法，复杂度 $O(n \log n)$。例题：<a href="https://www.luogu.com.cn/problem/P5569" target="_blank" rel="noopener">LOJ 5569</a>，以后有时间再学论文：<a href="https://sci-hub.do/10.1016/0196-6774%2888%2990009-0#" target="_blank" rel="noopener">A New Proof of the Garsia-Wachs Algorithm</a>，本质是决策树问题。</p>
</blockquote>
<h3 id="二维滚动-DP-分治-DP-将-O-n-m-2-复杂度优化成-O-n-m"><a href="#二维滚动-DP-分治-DP-将-O-n-m-2-复杂度优化成-O-n-m" class="headerlink" title="二维滚动 DP 分治 DP 将 $O(n m^2)$ 复杂度优化成 $O(n m)$"></a>二维滚动 DP 分治 DP 将 $O(n m^2)$ 复杂度优化成 $O(n m)$</h3><script type="math/tex; mode=display">
f_{i, j} = \min_{k < j} f_{i - 1, k} + w(k + 1, j) \quad (1 \leq i \leq n, 1 \leq j \leq m)</script><p>其中 $f(0, 0) = 0$，$f_0, i = \infty, f_{i, j} = 0 \quad i &gt; j$。$w$ 满足区间单调和四边形不等式。</p>
<p>不难看出 $f_{1, j} = w(1, j)$。</p>
<p>我们对 $i$ 数学归纳法证明：$f_{i, j + 1} + f_{i + 1, j} \geq f_{i, j} + f_{i + 1, j + 1}$ 对任意 $i &lt; j$ 成立。即证明四边形不等式。</p>
<p>当 $i = 1$ 时，$f_{2, j} = f_{1, p} + w(p + 1, j) = w(1, p) + w(p + 1, j)$，并且 $f_{2, j + 1} \leq w(1, p) + w(p + 1, j + 1)$</p>
<p>从而</p>
<script type="math/tex; mode=display">
f_{1, j + 1} + f_{2, j} = w(1, j + 1) + w(1, p) + w(p + 1, j) \geq w(1, j) + w(p + 1, j + 1) + w(1, p) \geq f_{1, j} + f_{2, j + 1}</script><p>假设 $f_{i - 1, j} + f_{i, j - 1} \geq f_{i - 1, j - 1} + f_{i, j}$ 对任意 $i &lt; j$ 成立，那么显然 $f_{i - 1, k} + f_{i, j - 1} \geq f_{i - 1, j - 1} + f_{i, k}$ 对任意 $i &lt; j \leq k$ 成立。</p>
<p>分情况讨论，记  $u, v$ 分别为 $f_{i, j + 1}, f_{i+ 1, j}$ 的最优决策点（$i - 1 \leq u \leq j, i \leq v &lt; j$）。那么</p>
<p>假设 $i &lt; i + 1 &lt; j &lt; j +1$</p>
<ul>
<li><p>$u \geq v$，则 $i \leq u \leq j$，$f_{i + 1, j + 1} \leq f_{i, u} + w(u + 1, j +1)$，$f_{i, j} \leq f_{i - 1, v} + w(v + 1, j)$ 从而 </p>
<script type="math/tex; mode=display">
  f_{i, j + 1} + f_{i + 1, j} = f_{i - 1, u} + w(u + 1, j +1) + f_{i, v} + w(v + 1, j)</script><p>  由归纳法知道 $f_{i - 1, u} + f_{i, v} \geq  f_{i - 1, v} + f_{i, u} \quad (i - 1 &lt; i &lt; v \leq u)$。两式相加得到我们要证的目标。</p>
</li>
<li><p>$u &lt; v$ 则 $i - 1 \leq u &lt; j$，$f_{i + 1, j + 1} \leq f_{i, v} + w(v + 1, j + 1), f_{i, j} \leq f_{i - 1, u} + w(u + 1, j)$，从而 $u + 1 \leq v + 1 \leq j \leq j + 1$</p>
<script type="math/tex; mode=display">
  f_{i, j + 1} + f_{i + 1, j} - f_{i +1, j + 1} - f_{i, j} \geq w(u + 1, j +1) + w(v + 1, j) - w(v + 1, j + 1) - w(u + 1, j) \geq 0</script></li>
</ul>
<p>假设 $i &lt; i + 1 = j &lt; j + 1$</p>
<ul>
<li><p>若 $u &lt; j$，则 $f_{i, j} \leq f_{i - 1, u} + w(u + 1, j)$，</p>
<script type="math/tex; mode=display">
  f_{i, j} + f_{i + 1, j + 1} \leq f_{i - 1, u} + w(u + 1, j) + f_{i, i} + w(i + 1, j + 1) \leq f_{i - 1, u} + w(u + 1, j + 1) + f_{i, i} + w(i + 1, j) = f_{i, j + 1} + f_{i + 1, j}</script></li>
<li><p>若 $u = j$ ，注意到 $i - 1 &lt; i = j - 1 &lt; j$，归纳法有 $f_{i - 1, j} + f_{i, j - 1} \geq f_{i - 1, j - 1} + f_{i, j}$。所以 $f_{i, j + 1} + f_{i + 1, j} = f_{i - 1, j} + w(j + 1, j + 1) + f_{i, j - 1} + w(j, j) \geq f_{i - 1, j - 1} + w(j, j) f_{i, j} + w(j + 1, j + 1) \geq f_{i, j} + f_{i + 1, j + 1}$，证毕。</p>
</li>
</ul>
<p>记 $k[i][j]$ 为 $f_{i, j}$ 的最小最优策略。</p>
<p>决策优化不等式：$k[i -1][j] \leq k[i][j] \leq k[i][j + 1]$（注意这与之前的不同）。</p>
<p>证明：记 $u = k[i][j], x = k[i - 1][j], y = k[i][j + 1]$，反证法：若 $u &lt; x$。首先由定义 </p>
<script type="math/tex; mode=display">
f_{i - 1, u} + w(u + 1, j) \leq f_{i - 1, x} + w(x + 1, j)</script><p>又 $i - 2 &lt; i - 1 \leq u &lt; k$，因此 </p>
<script type="math/tex; mode=display">
f_{i - 2, u} + f_{i - 1, x} \leq f_{i - 2, x} + f_{i - 1, u}</script><p>两式相加得到</p>
<script type="math/tex; mode=display">
f_{i - 2, u} + w(u + 1, j) \leq f_{i - 2, x} + w(x + 1, j)</script><p>矛盾与 $x$ 是 $f_{i - 1, j}$ 的最小最优策略。</p>
<p>同理，假设 $u &gt; y$。由定义</p>
<script type="math/tex; mode=display">
f_{i - 1, y} + w(y + 1, j + 1) \leq f_{i - 1, u} + w(u + 1, j + 1)</script><p>又 $y + 1 &lt; u + 1 \leq j &lt; j + 1$。</p>
<script type="math/tex; mode=display">
w(y + 1, j) + w(u + 1, j + 1) \leq w(y + 1, j + 1) + w(u + 1, j)</script><p>两式相加得到</p>
<script type="math/tex; mode=display">
f_{i - 1, y} + w(y + 1, j) \leq f_{i - 1, u} + w(u + 1, j)</script><p>复杂度：</p>
<script type="math/tex; mode=display">
\sum_{i = 1}^{n} \sum_{j = 1}^m k_{i, j + 1} - k_{i - 1, j} = \sum_{i = 1}^n k_{i, m + 1} + \sum_{j = 1}^m  k_{n, j} < 2 n m</script><p>例题：<a href="https://www.luogu.com.cn/problem/P4767" target="_blank" rel="noopener">LOJ P4767</a></p>
<p>不难看出 $w(k, j)$ 表示在 $k$ 到 $j$ 个村庄建一个邮局使得总距离之和最小（那肯定是建在中位数位置）不难证明它满足四边形不等式（分奇偶很好证明）。首先把 w 给预处理出来。然后再转移。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">	std::vector&lt;std::vector&lt;int&gt;&gt; w(n + 1, std::vector&lt;int&gt;(n + 1)), f(m + 1, std::vector&lt;int&gt;(n + 2));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) w[i][i + <span class="number">1</span>] = a[i + <span class="number">1</span>] - a[i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt; n; ++len) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = len + <span class="number">1</span>; j &lt;= n; ++j, ++i) &#123;</span><br><span class="line">			w[i][j] = w[i + <span class="number">1</span>][j - <span class="number">1</span>] + a[j] - a[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span> mf = f;</span><br><span class="line">	<span class="comment">// mf[i - 1][j] \leq mf[i][j] \leq m[i][j + 1]</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) f[<span class="number">0</span>][i] = <span class="number">1e9</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">		mf[i][n + <span class="number">1</span>] = n;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt; <span class="number">0</span>; --j) &#123;</span><br><span class="line">			f[i][j] = INT_MAX;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="built_in">std</span>::<span class="built_in">max</span>(i - <span class="number">1</span>, mf[i - <span class="number">1</span>][j]); k &lt; j &amp;&amp; k &lt;= mf[i][j + <span class="number">1</span>]; ++k) &#123;</span><br><span class="line">				<span class="keyword">if</span> (f[i][j] &gt; f[i - <span class="number">1</span>][k] + w[k + <span class="number">1</span>][j]) &#123;</span><br><span class="line">					f[i][j] = f[i - <span class="number">1</span>][k] + w[k + <span class="number">1</span>][j];</span><br><span class="line">					mf[i][j] = k;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; f[m][n] &lt;&lt; <span class="string">"\n"</span>; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其它例题：<a href="https://codeforces.com/contest/321/problem/E" target="_blank" rel="noopener">321E</a>。</p>
<h3 id="1D1D-四边形-分治-DP-将-O-n-2-复杂度优化成-O-n-log-n"><a href="#1D1D-四边形-分治-DP-将-O-n-2-复杂度优化成-O-n-log-n" class="headerlink" title="1D1D 四边形 + 分治 DP 将 $O(n^2)$ 复杂度优化成 $O(n \log n)$"></a>1D1D 四边形 + 分治 DP 将 $O(n^2)$ 复杂度优化成 $O(n \log n)$</h3><script type="math/tex; mode=display">
f_r = \min_{l = 1}^{r - 1} f_l + w(l, r) \quad (1 \ r \leq n)</script><p>若 $w(l, r)$ 满足四边形不等式，记 $k_r$ 为 $f_r$ 的最小最优决策点，则（反证法可证明）</p>
<script type="math/tex; mode=display">
\forall r_1 \leq r_2: \quad k_{r_1} \leq k_{r_2}</script><p>使用分治法优化 DP（递归实现）可以给出 $O(n \log n)$ 的做法。</p>
<blockquote>
<p>如果上述 $w(l, r) = f(r) - g(l)$，并且 $f, g$ 单调递增，则我们可以使用斜率优化 DP，$O(n)$ 解决。</p>
</blockquote>
<h3 id="四边形不等式函数类"><a href="#四边形不等式函数类" class="headerlink" title="四边形不等式函数类"></a>四边形不等式函数类</h3><ul>
<li>$w_1(l, r), w_2(l, r)$ 均满足四边形不等式（或区间包含单调性），则 $\forall c_1, c_2 \geq 0$，$c_1 w_1 + c_2 w_2$ 对应的也满足。</li>
<li>若存在函数 $f, g$ 使得 $w(l, r) = f(r) - g(l)$ 则函数 $w$ 满足四边形恒等式。若 $f, g$ 单调递增，则 $w$ 满足区间包含单调性。</li>
<li>若 $h(x), h’(x)$ 都是单调递增的，若 $w$ 满足区间包含单调性和四边形不等式，则 $h(w)$ 也满足。</li>
<li>$h’(x)$ 单调递增，若 $w$ 满足区间包含单调性和四边形恒等式，则 $h(w)$ 满足四边形不等式。</li>
</ul>
<h3 id="决策单调性分治优化-DP"><a href="#决策单调性分治优化-DP" class="headerlink" title="决策单调性分治优化 DP"></a>决策单调性分治优化 DP</h3><p>例题：<a href="https://codeforces.com/gym/101471/" target="_blank" rel="noopener">2017 ACM-ICPC Word Final D: Money for Nothing</a></p>
<p>$L_i = (x_i, y_i) x_i &lt; x_{i + 1}, y_i &gt; y_{i + 1}$<br>$R_i = (p_i, q_i) p_i &lt; p_{i + 1}, q_i &gt; q_{i + 1}$</p>
<p>$L_iR_j = (q_j - y_i)(p_j - x_i), \quad (x_i &lt; p_i, y_j &lt; p_j)$ 即围成的面积。<br>即 $u_i$ 为 使得 $L_iR_j$ 最大的 $j$（多个取下标最大的）。若 $i &lt; j, k &lt; l$，画个图显然就有（有点四边形内味）</p>
<script type="math/tex; mode=display">
L_iR_l + L_jR_k \leq L_iR_k + L_jR_l</script><p>因此 $u_i$ 是单调递增的（因此这样就可以调整最优策略了，这也就给出了决策单调性）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// freopen("C:\\Users\\dna049\\cf\\in", "r", stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	std::vector&lt;std::pair&lt;int, int&gt;&gt; a(n), b(m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;[x, y] : b) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">	<span class="built_in">std</span>::sort(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i].second &lt; a[cnt - <span class="number">1</span>].second) a[cnt++] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	a.resize(cnt);</span><br><span class="line">	<span class="built_in">std</span>::sort(b.<span class="built_in">begin</span>(), b.<span class="built_in">end</span>());</span><br><span class="line">	cnt = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">while</span> (cnt &gt; <span class="number">0</span> &amp;&amp; b[i].second &gt;= b[cnt - <span class="number">1</span>].second) --cnt;</span><br><span class="line">		b[cnt++] = b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	b.resize(cnt);</span><br><span class="line">	<span class="comment">// 确保了始终能找到最优策略</span></span><br><span class="line">	b.insert(b.<span class="built_in">begin</span>(), &#123;<span class="number">0</span>, INT_MAX&#125;);</span><br><span class="line">	LL ans = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">void</span>(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)&gt; divideConquer = [&amp;](<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> opl, <span class="keyword">int</span> opr) &#123;</span><br><span class="line">		<span class="comment">// 区间都是左闭右开的</span></span><br><span class="line">		<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">		LL rm = INT64_MIN;</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">-1</span>;</span><br><span class="line">		<span class="comment">// 一开始必然满足 b[opl].second &gt; a[mid].second，因此 k 必然满足</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = opl; i &lt; opr &amp;&amp; b[i].second &gt; a[mid].second; ++i) &#123;</span><br><span class="line">			LL tmp = LL(b[i].second - a[mid].second) * (b[i].first - a[mid].first);</span><br><span class="line">			<span class="keyword">if</span> (tmp &gt; rm) &#123;</span><br><span class="line">				rm = tmp;</span><br><span class="line">				k = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans = <span class="built_in">std</span>::<span class="built_in">max</span>(ans, rm);</span><br><span class="line">		divideConquer(l, mid, opl, k + <span class="number">1</span>);</span><br><span class="line">		<span class="comment">// b[k].second &gt; a[mid].second &gt; ... &gt; a[r - 1].second，从而没有 k = -1 出现的可能</span></span><br><span class="line">		divideConquer(mid + <span class="number">1</span>, r, k, opr);</span><br><span class="line">	&#125;;</span><br><span class="line">	divideConquer(<span class="number">0</span>, a.<span class="built_in">size</span>(), <span class="number">0</span>, b.<span class="built_in">size</span>());</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这题不指定左下角节点和右上角节点。那么我们可以让所有节点成为左下角，所有节点成为右上角，就又变成此问题了。如果更进一步，不要求左下角和右上角，只要是斜对角线即可。那么我们可以让所有横坐标取相反数，再算一遍即可（妙啊）。</p>
<p>如果求最小值我目前还不知道有什么好方法。</p>
<h3 id="仅有一个特殊元素分治优化"><a href="#仅有一个特殊元素分治优化" class="headerlink" title="仅有一个特殊元素分治优化"></a>仅有一个特殊元素分治优化</h3><p>例题：<a href="https://codeforces.com/contest/1442/problem/D" target="_blank" rel="noopener">1442D</a>，详见<a href="https://codeforces.com/blog/entry/84298" target="_blank" rel="noopener">官方题解</a>，或者我的 <a href="/codeforces/" title="做题记录">做题记录</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
        <tag>运筹学</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Grossman 常数</title>
    <url>/grossmanConstant/</url>
    <content><![CDATA[<p>考虑由如下递推关系确定的实数数列 $\lbrace A_n \rbrace$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
A_{n+2} = \frac{A_n}{1+A_{n+1}} \\
A_0=1,\; A_1=x
\end{aligned}</script><p>可以证明，有且仅有一个 $x=x_0$ 使得 $\lbrace A_n \rbrace$ 收敛。这个 $x_0 = 0.7373383…$  被称为 Grossman 常数。</p>
<p><a href="https://mathworld.wolfram.com/GrossmansConstant.html" target="_blank" rel="noopener">Grossman 常数</a> 在 Wolfram 百科里面有讲，也在 Finch, S. R.《 Mathematical Constants》又讲，但是都依赖于核心论文 <a href="1987_Article_MathematicalEntertainments.pdf">Janssen, A. J. E. M. and Tjaden, D. L. A. Solution to Problem 86-2. <em>Math. Intel.</em> <strong>9</strong>, 40-43, 1987.</a> 折腾终于下下来了。</p>
<blockquote>
<p>吐槽一下 Wolfram 百科提供的所有 Reference 链接没法访问。。。</p>
</blockquote>
<a id="more"></a>
<p>为了方便起见，我们记：</p>
<script type="math/tex; mode=display">
\begin{aligned}
A_0(x) = \alpha >0 ,\; A_1(x) = x \\
A_{n+2}(x) = \frac{A_{n}(x)}{1+A_{n+1}(x)}
\end{aligned}</script><p>首先罗列一些显而易见的结果：</p>
<ul>
<li><p>如果 $x&gt;0$，则 $A_n(x)&gt;0$，且 $A_{2n}(0)=\alpha,A_{2n+1}(0)=0$</p>
</li>
<li><p>$a(x) = \lim A_{2n}(x),\; b(x)= \lim A_{2n+1}(x)$ 均存在，且 $a(x)b(x)=0$</p>
</li>
<li><p>如果 $\lim A_n(x)$ 存在，则为 $0$</p>
</li>
<li><p>如果 $x \leq 0$，则 $\lim A_n(x)$ 不存在 （反证，奇偶项写出两个递推关系分析）</p>
<p><strong>以下仅考虑 $x\geq 0$ 的情形</strong></p>
</li>
<li><p>$A_{2n}(x)$ 是连续单调递减的函数 （数学归纳）</p>
</li>
<li><p>$A_{2n+1}(x)$ 是连续单调递增的函数 （数学归纳）</p>
</li>
<li><p>$a(x) \geq 0$ 单调递减，$b(x) \geq 0$ 单调递增</p>
</li>
<li><p>$A_{2n}(x),\;A_{2n+1}(x)$ 都关于 $n$ 单调递减</p>
</li>
<li><p>重要公式（累和相加）： </p>
<script type="math/tex; mode=display">
\alpha - A_{2N+2}(x) =  \sum_{n=0} ^N A_{2n+1}(x) A_{2n+2}(x) \\
x - A_{2N+3}(x) = \sum_{n=0} ^N A_{2n+3}(x) A_{2n+2}(x)</script></li>
</ul>
<blockquote>
<p>以上罗列的结果按顺序证明是容易的！</p>
</blockquote>
<h2 id="lim-A-n-x-0-当且仅当-A-n-x-关于-n-单调递减"><a href="#lim-A-n-x-0-当且仅当-A-n-x-关于-n-单调递减" class="headerlink" title="$\lim A_n(x) =0$  当且仅当 $A_n(x)$ 关于 $n$ 单调递减"></a>$\lim A_n(x) =0$  当且仅当 $A_n(x)$ 关于 $n$ 单调递减</h2><p><strong>Proof</strong>： 若 $\lim A_n(x) =0$ ，再由上面的 “重要公式” 易知：</p>
<script type="math/tex; mode=display">
A_{2N+2}(x) =  \sum_{n=N+1} ^ \infty A_{2n+1}(x) A_{2n+2}(x) \\
A_{2N+3}(x) = \sum_{n=N+1} ^ \infty A_{2n+3}(x) A_{2n+2}(x)</script><p>所以 $A_{2N+2}&gt;A_{2N+3}$ ，紧接着 $A_{2N+1} = \sum_{n=N+1} ^ \infty A_{2n+1}A_{2n} &gt; A_{2N+2}$，所以 $A_n(x)$ 关于 $n$ 单调递减</p>
<blockquote>
<p>这也提供了一个求解 Grossman 常数的数值依据。</p>
</blockquote>
<h2 id="最多只有一个-x-使得-lim-A-n-x-0"><a href="#最多只有一个-x-使得-lim-A-n-x-0" class="headerlink" title="最多只有一个 $x$ 使得 $\lim A_n(x) =0$"></a>最多只有一个 $x$ 使得 $\lim A_n(x) =0$</h2><p><strong>Proof</strong>：若 $\lim A_n(y) = \lim A_n(x) = 0,\; y&gt;x$，则：</p>
<script type="math/tex; mode=display">
\frac{A_{n+2}(y)}{A_{n+2}(x)} = \frac{A_{n}(y)}{A_{n}(x)} \frac{1+A_{n+1}(x)}{1+A_{n+1}(y)}</script><p>从而</p>
<script type="math/tex; mode=display">
\frac{A_{2n+2}(y)}{A_{2n+2}(x)} = \prod _{k=1} ^n \frac{1+A_{2k+1}(y)}{1+A_{2k+1}(x)} \\
\frac{A_{2n+1}(y)}{A_{2n+1}(x)} = \frac{y}{x} \prod _{k=1} ^n \frac{1+A_{2k}(y)}{1+A_{2k}(x)}</script><p>从而  $\frac{A_{2n+2}(y)}{A_{2n+2}(x)}$ 单调递减收敛于 $L_1 \leq 1$，$\frac{A_{2n+1}(y)}{A_{2n+1}(x)}$  单调递增收敛于 $L_2&gt;1$。所以</p>
<script type="math/tex; mode=display">
\lim \frac{A_{2n+2}(y)}{A_{2n+2}(x)} \frac{A_{2n+1}(x)}{A_{2n+1}(y)} = \frac{L_1}{L_2} <1</script><p>但是另一方面</p>
<script type="math/tex; mode=display">
1 \geq \frac{A_{2n+2}(y)}{A_{2n+1}(y)} \geq \frac{A_{2n+3}(y)}{A_{2n+1}(y)} = \frac{1}{1+A_{2n+2}(y)} \to 1 \\
1 \leq \frac{A_{2n+1}(x)}{A_{2n+2}(x)} \geq \frac{A_{2n+1}(x)}{A_{2n+3}(x)} = 1+A_{2n+2}(x) \to 1</script><p>矛盾！</p>
<h2 id="Dini-定理"><a href="#Dini-定理" class="headerlink" title="Dini 定理"></a>Dini 定理</h2><p>为了证明的连贯性，先给出下面需要引用 <strong>Dini 定理</strong>（证明见陈纪修《数学分析》下册定理 10.2.7）</p>
<p>设函数序列 $\{S_n(x)\}$ 在闭区间 $[a,b]$ 上（点态）收敛于 $S(x)$，且满足：</p>
<ul>
<li>$S_n(x)$ 在 $[a,b]$ 上连续</li>
<li>$\{S_n(x)\}$ 关于 $n$ 单调</li>
</ul>
<p>则 $\{S_n(x)\}$ 在 $[a,b]$ 一致收敛于 $S(x)$ 当且仅当 $S(x)$ 在 $[a,b]$ 上连续 （”$\Rightarrow$”易证，”$\Leftarrow$” 称作 Dini <strong>定理</strong>）</p>
<h2 id="存在唯一的-x-使得-lim-A-n-x-0"><a href="#存在唯一的-x-使得-lim-A-n-x-0" class="headerlink" title="存在唯一的 $x$ 使得 $\lim A_{n}(x) = 0$"></a>存在唯一的 $x$ 使得 $\lim A_{n}(x) = 0$</h2><p>由“重要公式”知：</p>
<script type="math/tex; mode=display">
\alpha - a(x) = \sum_{n=0} ^{\infty} A_{2n+1}(x) A_{2n+2}(x) \\
x - b(x) = \sum_{n=0} ^{\infty} A_{2n+3}(x) A_{2n+2}(x) \\</script><p>从而 $\alpha -  a(x) &gt; x - b(x)$，所以 $b(\alpha) &gt; 0$，从而 $a(\alpha) = 0$，并且 $a(0) = \alpha,\; b(0) = 0$。令</p>
<script type="math/tex; mode=display">
x_0 = \sup \{ x \in [0, \alpha] \mid a(x) >0 \} \\
x_1 = \inf \{ x \in [0,\alpha] \mid b(x)>0 \}</script><p>显然 $x_0 \leq x_1$， 若 $x_0 &lt; x_1$，则 对任意 $x_0 &lt; x &lt; x_1$ 有，$a(x) = b(x) = 0$，矛盾于收敛于 0 的 $x$ 最多只有一个，从而 $x_0 = x_1$。</p>
<p>注意到 $\frac{1}{1+\alpha} A_{2n+1}(x) A_{2n+2}(x) \leq  A_{2n+3}(x) A_{2n+2}(x) \leq  A_{2n+1}(x) A_{2n+2}(x)$，所以 $a(x),b(x)$ 在闭区间 $D$ 上有共同的一致收敛性，从而由 <strong>Dini 定理</strong> 知，$a(x)$ 在闭区间 $D$ 上连续当且仅当 $b(x)$ 在闭区间 $D$ 上连续。</p>
<blockquote>
<p>我们想要证明 $a(x),b(x) $ 在区间 $[0,\alpha]$ 上连续，从而 $a(x_0) = b(x_0) = 0$。</p>
</blockquote>
<p>当 $x &lt; x_0$ 时，$b(x)=0$，当 $x &gt; x_0$ 时，$a(x)=0$，所以 $a(x),b(x)$ 在 $[0,x_0) \cup (x_0, \alpha]$ 上连续。</p>
<p>若 $a(x_0) &gt;0$，则 $b(x_0) = 0$，记 $b_0 = \lim_{x \to x_0 ^{+}} b(x)$，若 $b_0&gt;0$， 则</p>
<script type="math/tex; mode=display">
A_{2k+2}(x) = \prod_{j=1} ^k \frac{1}{1+A_{2j-1}(x)} < \frac{1}{(1+b_0)^k} \quad x \in (x_0, \alpha ] \\
A_{2k+1}(x) = \prod_{j=1}^k \frac{1}{1+A_{2j}(x)} < \frac{1}{(1+a(x_0))^k} \quad x \in [0,x_0]</script><p>从而 $a(x),b(x)$ 在 $[0,\alpha]$ 上一致收敛，矛盾，从而 $b_0 = 0$，从而 $b(x)$ 连续，从而 $a(x)$ 连续，矛盾，从而 $a(x_0) = 0$。同理 $b(x_0) = 0$。所以 $\lim A_n(x) = 0$。</p>
<h2 id="Grossman-常数的推广"><a href="#Grossman-常数的推广" class="headerlink" title="Grossman 常数的推广"></a>Grossman 常数的推广</h2><p>由上述过程可知，本质上，对每个给定的 $A_0 \geq 0$, 都存在唯一的 $0 \leq A_1 \leq A_0$ ，使得 $\lim A_n$ 存在（且等于 0）。我们不妨 $A_1 = F(A_0)$，其中 $F: [0, +\infty] \to [0, \infty]$，满足 $F(0)= 0$，若$x&gt;0$ 则，$0&lt;F(x)&lt;x$ ，假设 $A_0 = \alpha$，则 $A_1 = F(\alpha),\;A_2 = \frac{\alpha}{1+F(\alpha)}$，而 $(A_0, A_1) = (F(\alpha),\frac{\alpha}{1+F(\alpha)})$ 必然能使得 $\lim A_n = 0$， 所以 $F(F(\alpha)) = \frac{\alpha}{1+F(\alpha)}$，写成</p>
<script type="math/tex; mode=display">
x = (1+F(x))F(F(x))</script><p>由于 $a(x)$ 关于 $\alpha$ 连续，所以 $x_0(\alpha) = \sup \{ x \in [0, \alpha] \mid a(x) &gt;0 \}$ 关于 $\alpha$ 连续，即上述 $F(x)$ 连续，若可导​，则 $F(x)$ 单调递增。</p>
<blockquote>
<p>上述形式最早由 Gabor Nyerges 给出（由于找不到文献，所以就自己推导了一下）</p>
</blockquote>
<p>按照上述观点，从而 Grossman 常数就是 $F(1)$。</p>
<h2 id="Grossman-常数的数值计算"><a href="#Grossman-常数的数值计算" class="headerlink" title="Grossman 常数的数值计算"></a>Grossman 常数的数值计算</h2><p>由于 $\lim A_n(x) =0$  当且仅当 $A_n(x)$ 关于 $n$ 单调递减 。令 $n_0$ 是最小的 $n$ 使得 $A_{n+1}(x) &gt; A_n(x)$，则</p>
<script type="math/tex; mode=display">
A_{n+3}(x) - A_{n+2}(x) = \frac{(A_{n+1} - A_n) + (A_{n+1}^2 - A_n A_{n+2}) }{(1+A_{n+2})(1+A_{n-1})} > 0</script><p>从而对任意 $k \geq 0$，$A_{n+2k+1} &gt; A_{n+2k}$。</p>
<p>若 $n$ 为偶数，则 $b(x)&gt;a(x)$，从而 $b(x) &gt; 0 = a(x)$，即 $x&gt;x_0$。反之，若 $n$ 为奇数，则 $x &lt; x_0$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bigercheck</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> m,<span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">10000</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ans=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(--<span class="built_in">step</span>&amp;&amp;x&gt;m)&#123;</span><br><span class="line">        ans = !ans;</span><br><span class="line">        <span class="keyword">double</span> t=x/(<span class="number">1</span>+m);</span><br><span class="line">        x = m;</span><br><span class="line">        m = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x&gt;m||ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">F</span><span class="params">(<span class="keyword">double</span> x,<span class="keyword">double</span> eps = <span class="number">1e-12</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> l =x/(<span class="number">1</span>+x),r = x;</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;eps)&#123;</span><br><span class="line">        <span class="keyword">double</span> m = (l+r)*<span class="number">0.5</span>;</span><br><span class="line">        <span class="keyword">if</span>(bigercheck(x,m))  r=m;</span><br><span class="line">        <span class="keyword">else</span> l=m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;F(x)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;F(F(x))*(F(x)+<span class="number">1</span>)-x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>高精度太耗时了！参考 <a href="https://oeis.org/A085835" target="_blank" rel="noopener">A085835</a> </p>
</blockquote>
<h2 id="后来的故事"><a href="#后来的故事" class="headerlink" title="后来的故事"></a>后来的故事</h2><p>Gabor Nyerges 在 2014 年的论文 《On the convergence of $x_n = f(x_{n–2}, x_{n–1})$ when $f (x, y) &lt; x$. Advances in Difference Equations2014, 2014:8》中证明，只需 $f: (0,\infty)^2 \to (0,\infty)$，$f (x, y) &lt; x$，且$f(x,y)$ 关于 $y$ 递减，则对任意 $x_0 &gt; 0$，存在 $f(x_0,x_0)&lt;x_1&lt;x_0$ 使得 $x_n$ 单调递减趋于 0 。但是没法保证唯一性，毕竟条件这么弱。证明过程巧妙的应用了闭区间套定理。</p>
<h3 id="明显的推论：若-x-n-frac-x-n-2-1-f-x-n-1-，其中-f-0-infty-to-0-infty-为单调递增的连续函数，-则，对任意-x-geq-0-，存在唯一的-frac-x-0-1-f-x-0-leq-x-1-leq-x-0"><a href="#明显的推论：若-x-n-frac-x-n-2-1-f-x-n-1-，其中-f-0-infty-to-0-infty-为单调递增的连续函数，-则，对任意-x-geq-0-，存在唯一的-frac-x-0-1-f-x-0-leq-x-1-leq-x-0" class="headerlink" title="明显的推论：若 $x_n = \frac{x_{n-2}}{1+f(x_{n-1})}$，其中 $f: (0,\infty) \to (0, \infty)$为单调递增的连续函数， 则，对任意 $x \geq 0$，存在唯一的 $\frac{x_0}{1+f(x_0)} \leq x_1 \leq x_0$"></a>明显的推论：若 $x_n = \frac{x_{n-2}}{1+f(x_{n-1})}$，其中 $f: (0,\infty) \to (0, \infty)$为单调递增的连续函数， 则，对任意 $x \geq 0$，存在唯一的 $\frac{x_0}{1+f(x_0)} \leq x_1 \leq x_0$</h3><p><strong>Proof</strong> ：存在性由 Gabor Nyerges 的证明显然，唯一性模仿之前的过程显然。</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 和 Linux Shell</title>
    <url>/vimWithLinuxShell/</url>
    <content><![CDATA[<p>Windows10 + WSL(Ubuntu 20.04LTS) 用的越来越多，就想系统的入门一下： vim 和 Linux Shell</p>
<a id="more"></a>
<h2 id="Vi-m-入门"><a href="#Vi-m-入门" class="headerlink" title="Vi(m) 入门"></a>Vi(m) 入门</h2><p>所有类 Unix 系统都自带 vi，所以学习 vi 收益满满！</p>
<blockquote>
<p>参考：<a href="https://codeshellme.github.io/2020/04/vim-use/" target="_blank" rel="noopener">如何高效使用Vim</a>，<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">Linux vi/vim | 菜鸟教程</a></p>
</blockquote>
<h3 id="vi-m-工作模式图解"><a href="#vi-m-工作模式图解" class="headerlink" title="vi(m) 工作模式图解"></a>vi(m) 工作模式图解</h3><p><img src= "/img/loading.gif" data-lazy-src="vim-vi-workmodel.png" alt="vimWorkMod"></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>常见命令（区分大小写)</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gg</code></td>
<td>移动到当前文件的第一行</td>
</tr>
<tr>
<td><code>G</code></td>
<td>移动到当前文件的最后一行</td>
</tr>
<tr>
<td><code>M</code></td>
<td>移动到当前文件的中间一行</td>
</tr>
<tr>
<td><code>Ctrl + o</code></td>
<td>移动到上一次编辑的地方</td>
</tr>
<tr>
<td><code>:n</code> ， 其中 n 为数字</td>
<td>输入一个 <code>:</code>，再输入一个 <code>数字</code>，按回车，快速跳到某一行</td>
</tr>
<tr>
<td><code>ndd</code>，其中 n 为数字（不写默认为 1）</td>
<td>删除光标所在的行，并且内容在剪切板</td>
</tr>
<tr>
<td><code>nyy</code>，其中 n 为数字（不写默认为 1）</td>
<td>复制光标所在的行，并且内容在剪切板</td>
</tr>
<tr>
<td><code>D</code></td>
<td>删除 <code>光标</code> 到行 <code>末尾</code> 所有的内容，并且内容在剪切板</td>
</tr>
<tr>
<td><code>p</code></td>
<td>粘贴剪切板的内容到光标处</td>
</tr>
<tr>
<td><code>/word</code></td>
<td>向光标之下寻找一个名称为 word 的字符串</td>
</tr>
<tr>
<td><code>?word</code></td>
<td>向光标之上寻找一个字符串名称为 word 的字符串。</td>
</tr>
<tr>
<td><code>n</code></td>
<td>这个 n 是英文按键。继续搜索下一个目标</td>
</tr>
<tr>
<td><code>N</code></td>
<td>这个 N 是英文按键。与 n 刚好相反</td>
</tr>
<tr>
<td><code>Ctrl + v</code></td>
<td>进入列选择模式</td>
</tr>
<tr>
<td><code>Shift + v</code></td>
<td>进入行选择模式</td>
</tr>
<tr>
<td><code>u</code></td>
<td>复原前一个动作</td>
</tr>
<tr>
<td><code>Ctrl+r</code></td>
<td>重做上一个动作</td>
</tr>
<tr>
<td><code>Ctrl+n</code></td>
<td>常规（Normal）补全</td>
</tr>
<tr>
<td><code>Ctrl+o</code></td>
<td>全能（Omni）补全</td>
</tr>
</tbody>
</table>
</div>
<h3 id="vimrc-超简洁设置："><a href="#vimrc-超简洁设置：" class="headerlink" title=".vimrc 超简洁设置："></a><code>.vimrc</code> 超简洁设置：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">syntax on    " 语法高亮</span><br><span class="line">set nu       " 行数显示</span><br><span class="line">set ts=4     " tab 宽度</span><br><span class="line">set spell    " 语法拼写检测</span><br><span class="line">set noexpandtab       " 不将 tab 转换成空格</span><br><span class="line">colorscheme darkblue  " 颜色主题： /usr/share/vim/vimxx/colors (xx: 版本号)</span><br></pre></td></tr></table></figure>
<h3 id="vi-m-键盘图"><a href="#vi-m-键盘图" class="headerlink" title="vi(m)键盘图"></a>vi(m)键盘图</h3><p><img src= "/img/loading.gif" data-lazy-src="vi-vim.png" alt="vim-vim"></p>
<h3 id="vi-m-命令思维导图"><a href="#vi-m-命令思维导图" class="headerlink" title="vi(m) 命令思维导图"></a>vi(m) 命令思维导图</h3><p><img src= "/img/loading.gif" data-lazy-src="vim.png" alt="vim"></p>
<h2 id="Linux-Shell-入门"><a href="#Linux-Shell-入门" class="headerlink" title="Linux Shell 入门"></a>Linux Shell 入门</h2><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <code>#!/bin/sh</code>，它同样也可以改为 <code>#!/bin/bash</code>。</p>
<blockquote>
<p>参考：<a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">Shell 教程 | 菜鸟教程</a>，<a href="https://zhuanlan.zhihu.com/p/65106362" target="_blank" rel="noopener">这些Shell编程必备知识你都掌握了吗？</a></p>
</blockquote>
<h3 id="Hello-Shell"><a href="#Hello-Shell" class="headerlink" title="Hello Shell"></a>Hello Shell</h3><p><code>vim test.sh</code> 编辑下面内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo "Hello Shell "</span><br></pre></td></tr></table></figure>
<p><code>esc</code> + <code>:wq</code> 保存，执行下面命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使脚本具有执行权限</span></span><br><span class="line">$ chmod +x test.sh</span><br><span class="line"><span class="comment">#执行脚本，若报错则输入 chmod u+x test.sh</span></span><br><span class="line">$ ./test.sh</span><br><span class="line"><span class="comment">#无执行权限时</span></span><br><span class="line">$ sh ./test.sh</span><br></pre></td></tr></table></figure>
<h3 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hello=123 # 变量定义</span><br><span class="line">readonly my_blog="dna049.com" #只读变量（常量）定义</span><br><span class="line">echo $my_blog   #变量引用方式一，不推荐</span><br><span class="line">echo $&#123;my_blog&#125; #变量引用方式二，推荐</span><br><span class="line">for skill in C++ Python SageMath; do</span><br><span class="line">    echo "I am good at $&#123;skill&#125;Script"</span><br><span class="line">done</span><br><span class="line">unset my_blog   #删除变量</span><br></pre></td></tr></table></figure>
<blockquote>
<p>变量定义 <code>=</code> 两边不能有空格！</p>
</blockquote>
<h3 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">myBlog='dna049.com' #单引号里的任何字符都会原样输出, 不支持转义</span><br><span class="line">str="My Blog is \"$myBlog\"! \n"</span><br><span class="line">echo -e $str # -e 开启转义</span><br><span class="line">echo 'hello, ' $&#123;myBlog&#125; " Welcome!" #单引号双引号都可以做字符拼接</span><br><span class="line">echo $&#123;#myBlog&#125; #获取字符串长度</span><br><span class="line">echo $&#123;myBlog:0:6&#125; # 输出dna049</span><br></pre></td></tr></table></figure>
<h3 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h3><ul>
<li><code>$n</code>：传入参数，例如：<code>$0 $1 $2</code> 分别表示，脚本名，第一个参数，第二个参数</li>
<li><code>$#</code>：脚本后面跟的参数个数（不包含脚本名)</li>
<li><code>$@</code>：所有参数，并且可以被遍历</li>
<li><code>$*</code>：所有参数</li>
<li><code>\$$</code>：当前脚本的进程 ID (没有 <code>\</code>)</li>
<li><code>$?</code>：上一条命令的退出状态</li>
</ul>
<h3 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">array=(A B "cpp" D)</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo "数组元素个数为: $&#123;#array[*]&#125;" # @* 都对应着全部内容</span><br><span class="line">echo "数组元素为: $&#123;array[@]&#125;" </span><br><span class="line">echo $&#123;array[@]:1:4&#125; </span><br><span class="line">echo $&#123;array[@]::3&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Shell-运算符"><a href="#Shell-运算符" class="headerlink" title="Shell 运算符"></a>Shell 运算符</h3><ul>
<li>算数运算符： <code>+ - * / % = == !=</code></li>
<li>关系运算符：<code>-eq -ne -ge -lt -gt -le</code></li>
<li>布尔运算符：<code>! -o -a</code> （取否，or，and）</li>
<li>逻辑运算符：<code>&amp;&amp; ||</code> ，需要： <code>[[ expr ]]</code></li>
<li>字符串运算符：<code>= != -z -n $</code></li>
<li>文件测试运算符：<code>-b -c -d -f -g -k -p -u -r -w -x -s -e</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a=11;b=22</span><br><span class="line">val=`expr $a + $b`</span><br><span class="line">echo "a + b : $val"</span><br><span class="line"></span><br><span class="line">if [ $a == $b ];then</span><br><span class="line">   echo "a 等于 b"</span><br><span class="line">elif [ $a -gt $b ];then</span><br><span class="line">   echo "a 大于 b"</span><br><span class="line">elif [ $a -lt $b ];then</span><br><span class="line">   echo "a 小于 b"</span><br><span class="line">else</span><br><span class="line">   echo "没有符合的条件"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ $a -lt 100 &amp;&amp; $b -gt 100 ]];then</span><br><span class="line">   echo "返回 true"</span><br><span class="line">else</span><br><span class="line">   echo "返回 false"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">a="abc"</span><br><span class="line">if [ -n $a ];then</span><br><span class="line">   echo "-n $a : 字符串长度不为 0"</span><br><span class="line">else</span><br><span class="line">   echo "-n $a : 字符串长度为 0"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<blockquote>
<p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作</p>
<p>条件表达式要放在方括号之间，并且要有空格，例如L：<code>[$a==$b]</code> 是错误的，必须写成 <code>[ $a == $b ]</code></p>
</blockquote>
<h3 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h3><p><code>printf  format-string  [arguments...]</code></p>
<p>例如： <code>printf &quot;%-8s = %10.4f\n&quot; pi 3.141592653</code></p>
<blockquote>
<p><code>%s %c %d %f</code> 都是格式替代符</p>
<p><code>%-8s</code> 指一个宽度为 8 个字符（<code>-</code> 表示左对齐，没有则表示右对齐），如果不足则自动以空格填充，超过也会将内容全部显示出来。</p>
</blockquote>
<h3 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h3><h4 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h4><ul>
<li><p><code>if else-if else</code> 已经在上面例子中提过了。</p>
</li>
<li><p><code>case esac</code> 的奇葩写法，吐了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo '输入 1 到 4 之间的数字:'</span><br><span class="line">echo '你输入的数字为:'</span><br><span class="line">read aNum       </span><br><span class="line">case $aNum in</span><br><span class="line">    1)  echo '你选择了 1'</span><br><span class="line">    ;;</span><br><span class="line">    2)  echo '你选择了 2'</span><br><span class="line">    ;;</span><br><span class="line">    3)  echo '你选择了 3'</span><br><span class="line">    ;;</span><br><span class="line">    4)  echo '你选择了 4'</span><br><span class="line">    ;;</span><br><span class="line">    *)  echo '你没有输入 1 到 4 之间的数字'</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>read</code> 输入快乐啊！</p>
</blockquote>
</li>
</ul>
<h4 id="循环控制：for-while-until-break-continue"><a href="#循环控制：for-while-until-break-continue" class="headerlink" title="循环控制：for while until break continue"></a>循环控制：<code>for while until break continue</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例子来自 https://www.runoob.com/linux/linux-shell-process-control.html</span></span><br><span class="line">for str in 'This is a string'</span><br><span class="line">do</span><br><span class="line">    echo $str</span><br><span class="line">done</span><br><span class="line">for((i=1;i&lt;=5;i++));do</span><br><span class="line">    echo "这是第 $i 次调用";</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo '按下 &lt;CTRL-D&gt; 退出'</span><br><span class="line">echo -n '输入你最喜欢的网站名: '</span><br><span class="line">while read FILM</span><br><span class="line">do</span><br><span class="line">    echo "是的！$FILM 是一个好网站"</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">a=0</span><br><span class="line">until [ ! $a -lt 10 ]</span><br><span class="line">do</span><br><span class="line">   echo $a</span><br><span class="line">   a=`expr $a + 1`</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">funWithParam()&#123;</span><br><span class="line">    echo "第一个参数为 $1 !"</span><br><span class="line">    echo "第二个参数为 $2 !"</span><br><span class="line">    echo "参数总数有 $# 个!"</span><br><span class="line">    echo "作为一个字符串输出所有参数 $* !"</span><br><span class="line">&#125;</span><br><span class="line">echo "-----函数开始执行-----"</span><br><span class="line">funWithParam 3 . 1 4 1 5 9 2 </span><br><span class="line">echo "-----函数执行完毕-----"</span><br></pre></td></tr></table></figure>
<h3 id="Shell-输入-输出重定向和文件包含-特别好用！"><a href="#Shell-输入-输出重定向和文件包含-特别好用！" class="headerlink" title="Shell 输入/输出重定向和文件包含(特别好用！)"></a>Shell 输入/输出重定向和文件包含(特别好用！)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ echo <span class="string">"菜鸟教程：www.runoob.com"</span> &gt; users</span><br><span class="line">$ cat users</span><br><span class="line">$ echo <span class="string">"菜鸟教程：www.runoob.com"</span> &gt;&gt; users</span><br><span class="line">$ cat users</span><br></pre></td></tr></table></figure>
<ul>
<li><p>test2.sh 中调用 test.sh：<code>source ./test.sh</code></p>
</li>
<li><p>管道运算符 <code>|</code>，是 unix 一个很强大的功能。</p>
<p>command 1 | command 2</p>
<p>把第一个命令 command 1 执行的结果作为 command 2 的输入，例如:</p>
<p><code>$ ls -s|sort -nr</code> </p>
</li>
</ul>
<h3 id="Linux-工具："><a href="#Linux-工具：" class="headerlink" title="Linux 工具："></a>Linux 工具：</h3><ul>
<li><a href="https://www.runoob.com/linux/linux-remote-login.html" target="_blank" rel="noopener">Linux 远程登录</a></li>
<li><a href="https://www.runoob.com/linux/linux-forget-password.html" target="_blank" rel="noopener">Linux 忘记密码解决方法</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>中国剩余定理</title>
    <url>/chineseRemainTheorem/</url>
    <content><![CDATA[<p>仅以此博文，感谢知乎好友 <a href="https://www.zhihu.com/people/li-yong-xiang-38" target="_blank" rel="noopener">Vivr0</a> </p>
<p>中国剩余定理也称孙子定理，是中国古代求解一次同余方程组的方法。</p>
<a id="more"></a>
<p>用现代的语言来说就是：</p>
<script type="math/tex; mode=display">
x \equiv
\left\{ 
\begin{array}{cc}
a_1 \mod m_1 \\
a_2 \mod m_2 \\
\vdots \\
a_n \mod m_n
\end{array}
\right.</script><p>且正整数组 $m_i$ 两两互素，则对任意整数组 $a_i$，上述方程有解，解可以写成 $x \equiv a \mod m$</p>
<p>我们不要求 $m_i$ 两两互素也能求解，只是不一定有解，下面详细给出做法。</p>
<p>我们先考虑 $n=2$ 的情形。即 </p>
<script type="math/tex; mode=display">
x \equiv
\left\{
\begin{array}{cc}
a_1 \mod m_1 \\
a_2 \mod m_2
\end{array}
\right.</script><p>我们可以把方程写成</p>
<script type="math/tex; mode=display">
\left\{
\begin{array}{lll}
x - a_1 & \equiv \; 0  & \mod m_1 \\
x - a_1 & \equiv \; a_2-a_1 & \mod m_2
\end{array}
\right.</script><p>我们设 $d = \gcd(m_1,m_2)$，则 $d| x-a_1$ 又 $d|m_2$，所以  $d|a_2-a_1$。</p>
<blockquote>
<p>我们知道对任意正整数 $a,b$,  存在整数 $x, y$ 使得 $xa + yb = \gcd(a,b)$。</p>
<p>(最后 Python 代码注释中有给出 $x, y$ 的详细操作)</p>
</blockquote>
<p>存在 $t_1, t_2$ 使得 $m_1 t_1 + m_2 t_2 = gcd(m_1, m_2) = d$，所以</p>
<script type="math/tex; mode=display">
x-a_1 \equiv \frac{a_2-a_1}{d} (m_1t_1 + m_2t_2) \equiv \frac{a_2-a_1}{d} t_1 m_1 \mod m_2</script><p>即 $x \equiv a \mod m$，其中 $a=  a_1 + \frac{a_2-a_1}{d} t_1m_1 = \frac{t_2m_2a_1+t_1m_1a_2}{d}$，$m = lcm(m_1,m_2) = \frac{m_1m_2}{d}$ </p>
<blockquote>
<p>$n-1$ 次上述操作，就处理了一般情况</p>
</blockquote>
<h2 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b,LL&amp; x,LL&amp; y)</span></span>&#123;  <span class="comment">// ax + by = gcd(a,b)</span></span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;<span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d=exgcd(b,a%b,y,x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;LL,LL&gt; crt2(LL a1,LL m1,LL a2,LL m2)&#123; // x = ai mod mi, m_i &gt;0</span><br><span class="line">    LL t1,t2,ans = a2-a1;</span><br><span class="line">    LL d = exgcd(m1,m2,t1,t2);</span><br><span class="line">    assert(ans%d == <span class="number">0</span>);</span><br><span class="line">    LL m = m1/d*m2;</span><br><span class="line">    ans = (a1+ans/d*t1%m2*m1)%m; <span class="comment">// %m2 是避免溢出</span></span><br><span class="line">    <span class="keyword">return</span> make_pair(ans&gt;<span class="number">0</span>?ans:ans+m,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">22</span>;</span><br><span class="line">LL a[N],m[N];</span><br><span class="line">pair&lt;LL,LL&gt; crt(int n)&#123; // x = a[i] mod m[i], m[i] &gt;0</span><br><span class="line">    pair&lt;LL,LL&gt; ans = make_pair(a[<span class="number">0</span>]%m[<span class="number">0</span>],m[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)&#123;</span><br><span class="line">        ans = crt2(ans.first,ans.second,a[i],m[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL a1,m1,a2,m2;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a1&gt;&gt;m1&gt;&gt;a2&gt;&gt;m2)&#123;</span><br><span class="line">        LL ans = crt2(a1,m1,a2,m2).first;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>((ans-a1)%m1 || (ans-a2)%m2)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"something wrong"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Python-代码"><a href="#Python-代码" class="headerlink" title="Python 代码"></a>Python 代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># input : a,b natural number</span></span><br><span class="line"><span class="comment"># output: [gcd(a,b), x, y]</span></span><br><span class="line"><span class="comment"># ax + by = gcd(a,b)</span></span><br><span class="line"><span class="comment"># Algorithm: b(a//bx+y) + a%bx = gcd(b,a%b) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exgcd</span><span class="params">(a,b)</span>:</span></span><br><span class="line">	<span class="keyword">if</span>(b == <span class="number">0</span>): <span class="keyword">return</span> [a,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">	[d,y,x] = exgcd(b,a%b)</span><br><span class="line">	<span class="keyword">return</span> [d,x,y-a//b*x]</span><br><span class="line"></span><br><span class="line"><span class="comment"># input:  x = ai mod m_i, mi&gt;0, i=1,2</span></span><br><span class="line"><span class="comment"># output: x = a mod m</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crt2</span><span class="params">(a1,m1,a2,m2)</span>:</span></span><br><span class="line">	[d,t1,t2] = exgcd(m1,m2)</span><br><span class="line">	a,m = a2-a1,m1//d*m2</span><br><span class="line">	<span class="keyword">if</span>(a%d):  <span class="keyword">raise</span> ValueError(<span class="string">'No solution to crt problem'</span>)</span><br><span class="line">	<span class="keyword">return</span> [(a1+a//d*t1*m1)%m,m]</span><br><span class="line"></span><br><span class="line"><span class="comment"># input:  x = ai mod m_i, mi&gt;0</span></span><br><span class="line"><span class="comment"># output: x = a mod m</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crt</span><span class="params">(a,m)</span>:</span></span><br><span class="line">	n = len(a)</span><br><span class="line">	<span class="keyword">if</span>(len(m)!=n):  <span class="keyword">raise</span> ValueError(<span class="string">'a and m must have equal length'</span>)</span><br><span class="line">	aa,mm = a[<span class="number">0</span>],m[<span class="number">0</span>]</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">		[aa,mm] = crt2(aa,mm,a[i],m[i])</span><br><span class="line">	<span class="keyword">return</span> [aa,mm]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	[a,m]=crt([<span class="number">2</span>,<span class="number">-4</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>])</span><br><span class="line">	print(a,m)</span><br><span class="line">	[a,m]=crt([<span class="number">2</span>,<span class="number">-4</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">5</span>,<span class="number">12</span>])</span><br><span class="line">	print(a,m)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>上流开源免费数学软件之 SageMath</title>
    <url>/sageMath/</url>
    <content><![CDATA[<p>Sage 的是“ 圣”的意思，所以 <a href="http://www.sagemath.org/" target="_blank" rel="noopener">SageMath</a> 懂啥意思了吧，上流！哈哈。SageMath 整合了当前开源的所有高效包，用来取代 MATLAB（20G)，Mathematics(5G）等商业软件。 而 SageMath 安装包仅 1G 不到，而且语言基于 Python，就很快乐。而且你还能免费注册账号用基于 Jupyter Notebook 的 <a href="https://cocalc.com/" target="_blank" rel="noopener">SageMath 在线版: Cocalc</a> </p>
<blockquote>
<p>感谢知乎好友<a href="https://www.zhihu.com/people/li-yong-xiang-38" target="_blank" rel="noopener">Vivr0</a> 的推荐</p>
</blockquote>
<a id="more"></a>
<p>SageMath 的安装，入门教程在 <a href="http://www.sagemath.org/" target="_blank" rel="noopener">官网</a> 很容易就找到了，而且下载提供国内镜像下载地址，特别友好。除了入门教程，还有专题教程。语言和 Python 几乎一致。不用一致 import，内建的特别好。文件格式：<code>.sage</code></p>
<blockquote>
<p>Macos or Linux 上用 sage 会更加快乐！WSL 就没法用 Jupyter 了，不过也还行！</p>
</blockquote>
<h2 id="SageMath-特征"><a href="#SageMath-特征" class="headerlink" title="SageMath 特征"></a>SageMath 特征</h2><ul>
<li>交互界面下，有赋值就不输出，表达式会输出(调用 <code>__repr__</code> 方法)</li>
<li><code>ZZ,QQ,RR,CC</code> 分别表示整数，有理数，实数，复数</li>
<li>Tab 补全，vim 姿势退出，git 姿势复制粘贴，很上流</li>
<li><code>^</code> 等同 <code>**</code>，<code>^^</code> 表示 <code>xor</code>, <code>/</code> 表示分数的除。其它和 Python 一致</li>
<li>（Python）函数和 SageMath 符号表达式是有本质区别的。</li>
<li>自带抽象代数：群，多项式环，$\mathbb{Z}_n$ ，$p$-adic 数等等。上流</li>
<li><code>latex(expr)</code> ：表达式的 latex 形式</li>
<li>可以直接使用 <code>oeis</code></li>
<li>sage.arith.misc 各种杂类函数，sage.games 有几个有意思的。</li>
<li><code>%time</code>： 测时间，<code>?</code> 帮助文章并且可以定位到源码位置查看源码！</li>
<li><a href="https://github.com/sagemath/sage/blob/develop/src/sage" target="_blank" rel="noopener">github 上查看 SageMath 模块源码</a></li>
<li>线性规划有包 MixIntegerLinearProgram</li>
<li>To be Continue</li>
</ul>
<h2 id="Jupyter-Notebook"><a href="#Jupyter-Notebook" class="headerlink" title="Jupyter Notebook"></a>Jupyter Notebook</h2><p><a href="https://github.com/dunovank/jupyter-themes" target="_blank" rel="noopener">jupyter 主题</a></p>
<p><code>Esc</code> 进入命令模式，<code>Enter</code> 进入编辑模式。<a href="https://www.cnblogs.com/locke-hu/p/9236540.html" target="_blank" rel="noopener">快捷键</a>友好(工具栏最右边有快捷键查询)</p>
<h4 id="命令模式常用快捷键（按-Esc-键开启）"><a href="#命令模式常用快捷键（按-Esc-键开启）" class="headerlink" title="命令模式常用快捷键（按 Esc 键开启）"></a>命令模式常用快捷键（按 Esc 键开启）</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">快捷键</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>S</code></td>
<td>保存当前 NoteBook</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>Shift-Enter</code></td>
<td>运行本单元，选中下个单元</td>
<td>新单元默认为命令模式</td>
</tr>
<tr>
<td style="text-align:left"><code>Ctrl-Enter</code></td>
<td>运行本单元</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>Alt-Enter</code></td>
<td>运行本单元，在其下插入新单元</td>
<td>新单元默认为编辑模式</td>
</tr>
<tr>
<td style="text-align:left"><code>D,D</code></td>
<td>删除选中的单元</td>
<td>连续按两个 D 键</td>
</tr>
<tr>
<td style="text-align:left"><code>Y</code></td>
<td>单元转入代码状态</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>M</code></td>
<td>单元转入 markdown 状态</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>R</code></td>
<td>单元转入 raw 状态</td>
<td>保持原始格式</td>
</tr>
<tr>
<td style="text-align:left"><code>B</code></td>
<td>当前行下方插入一行，并进入该行</td>
<td></td>
</tr>
<tr>
<td style="text-align:left"><code>Shift-H</code></td>
<td>清空所有输出</td>
<td>个人定制哈哈</td>
</tr>
</tbody>
</table>
</div>
<h4 id="编辑模式常用快捷键（-按-Enter-键启动）"><a href="#编辑模式常用快捷键（-按-Enter-键启动）" class="headerlink" title="编辑模式常用快捷键（ 按 Enter 键启动）"></a>编辑模式常用快捷键（ 按 Enter 键启动）</h4><div class="table-container">
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Tab</code></td>
<td>代码补全或缩进</td>
<td></td>
</tr>
<tr>
<td><code>Shift-Tab</code></td>
<td>提示</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-]</code></td>
<td>缩进</td>
<td>向右缩进</td>
</tr>
<tr>
<td><code>Ctrl-[</code></td>
<td>解除缩进</td>
<td>向左缩进</td>
</tr>
<tr>
<td><code>Ctrl-/</code></td>
<td>注释整行/撤销注释</td>
<td>仅代码状态有效</td>
</tr>
<tr>
<td><code>Ctrl-Z</code></td>
<td>撤销</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-ShiftZ</code></td>
<td>重做</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-Y</code></td>
<td>重做</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-Home</code></td>
<td>跳到单元开头</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-Up</code></td>
<td>跳到单元开头</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-End</code></td>
<td>跳到单元末尾</td>
<td></td>
</tr>
<tr>
<td><code>Ctrl-Down</code></td>
<td>跳到单元末尾</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>Jupyter Notebook 在绘图方面特别方便，而且可以将代码和 Markdown 很清楚的写在一起</p>
<p>Jupyter 卡顿时候一定要强制中断！有数字的说明运行好了的！</p>
</blockquote>
<h2 id="SageMath-文档"><a href="#SageMath-文档" class="headerlink" title="SageMath 文档"></a>SageMath 文档</h2><p><a href="https://doc.sagemath.org/html/en/tutorial/index.html" target="_blank" rel="noopener">入门教程</a>，<a href="https://doc.sagemath.org/html/en/reference/index.html" target="_blank" rel="noopener">用户手册</a>，<a href="https://doc.sagemath.org/html/en/reference/py-modindex.html" target="_blank" rel="noopener">所有模块</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>模块索引(首字母)</th>
<th>模块全名（<code>sage.</code>）</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>a</code></td>
<td>algebra, arith</td>
</tr>
<tr>
<td><code>c</code></td>
<td>calculus, categories, coding, combinat, cPython , crypto</td>
</tr>
<tr>
<td><code>d</code></td>
<td>date_structures, databases, docs, doctest, dynaimics</td>
</tr>
<tr>
<td><code>e, f</code></td>
<td>ext, features, finance, functions</td>
</tr>
<tr>
<td><code>g</code></td>
<td>game_theory, games, geometry, graphs, groups</td>
</tr>
<tr>
<td><code>h, i</code></td>
<td>knots, lfuntions libs, logic</td>
</tr>
<tr>
<td><code>m</code></td>
<td>manifolds, matrix, matroids media, misc, modular, modules, monoids</td>
</tr>
<tr>
<td><code>n, p, q, r</code></td>
<td>numerical, parallel, plot probability, quadratic_forms, quivers, repl, rings</td>
</tr>
<tr>
<td><code>s, t</code></td>
<td>sandpiles, sat, schemes, sets, stats, structure, symbolic, tensor, typeset</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>记不清名字的时候多用代码补全！</p>
</blockquote>
<p>先找对应名字，再找对应模块中的函数，最后看手册用的例子。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Math</tag>
        <tag>SageMath</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 调用 C/C++ 之 ctypes</title>
    <url>/ctypes/</url>
    <content><![CDATA[<p>放弃 Julia 之后，我开始想要用 Python + ctypes 满足自己的需求。由于 Windows 搞这个很麻烦，就在 Ubuntu 上搞了，不过我是在 WSL 上做的哈哈。</p>
<a id="more"></a>
<h2 id="Python-调用-C-示例"><a href="#Python-调用-C-示例" class="headerlink" title="Python 调用 C 示例"></a>Python 调用 C 示例</h2><p><a href="https://docs.Python.org/zh-cn/3.8/library/ctypes.html" target="_blank" rel="noopener">ctypes 官方中文文档</a>中选择自己 Python 对应版本的文档。有很清晰的描述，然后在 <a href="https://docs.Pythontab.com/interpy/c_extensions/ctypes/" target="_blank" rel="noopener">Pythonlab.com</a> 中很直观的例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add.cpp</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> <span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>; <span class="comment">// 这样就不用改之前的代码了！</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add_int</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由于 C++ 支持函数重载功能，在编译时会更改函数名。</p>
<p>所以在函数声明时，前缀 <code>extern &quot;C&quot;</code> 则确保按 C 的方式编译。</p>
</blockquote>
<p>然后把上面 <code>add.c/add.cpp</code> 编译成 <code>.so</code> 文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#For Linux</span></span><br><span class="line">$ gcc -fPIC -shared -o libadder.so add.c</span><br><span class="line">$ g++ -fPIC -shared -o libadder.so add.cpp</span><br></pre></td></tr></table></figure>
<p>再调用就好了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#load the shared object file</span></span><br><span class="line">adder = CDLL(<span class="string">'./libadder.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Find sum of integers</span></span><br><span class="line">res_int = adder.add_int(<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"Sum of 4 and 5 = "</span>, res_int)</span><br></pre></td></tr></table></figure>
<h2 id="Python-调用自己写的-primepi-C-函数"><a href="#Python-调用自己写的-primepi-C-函数" class="headerlink" title="Python 调用自己写的 primepi C++ 函数"></a>Python 调用自己写的 primepi C++ 函数</h2><blockquote>
<p>Python 调用自己写的 PrimePI 岂不美哉</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N], pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="comment">// 仅对要用的做extern操作</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">	p[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) isp[i] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; i += <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isp[i]) p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>, t = (N - <span class="number">1</span>) / i + <span class="number">1</span>; j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j) &#123;</span><br><span class="line">			isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span> * <span class="number">3</span> * <span class="number">5</span> * <span class="number">7</span> * <span class="number">11</span> * <span class="number">13</span> * <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM + <span class="number">1</span>][M + <span class="number">1</span>], sz[M + <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	initprime();</span><br><span class="line">	pi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; N; ++i) &#123;</span><br><span class="line">		<span class="keyword">if</span> (isp[i]) pi[i] = pi[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> pi[i] = pi[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	sz[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= PM; ++i) phi[i][<span class="number">0</span>] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">		sz[i] = p[i] * sz[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= PM; ++j) &#123;</span><br><span class="line">			phi[j][i] = phi[j][i - <span class="number">1</span>] - phi[j / p[i]][i - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">primephi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s &lt;= M) <span class="keyword">return</span> phi[x % sz[s]][s] + (x / sz[s]) * phi[sz[s]][s];</span><br><span class="line">	<span class="keyword">if</span> (x / p[s] &lt;= p[s]) <span class="keyword">return</span> primepi(x) - s + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; N &amp;&amp; x / p[s] / p[s] &lt;= p[s]) &#123;</span><br><span class="line">		<span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x + <span class="number">0.2</span>))];</span><br><span class="line">		LL ans = pi[x] - LL(s2x + s - <span class="number">2</span>) * (s2x - s + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = s + <span class="number">1</span>; i &lt;= s2x; ++i) &#123;</span><br><span class="line">			ans += pi[x / p[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> primephi(x, s - <span class="number">1</span>) - primephi(x / p[s], s - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; N) <span class="keyword">return</span> pi[x];</span><br><span class="line">	<span class="keyword">int</span> ps2x = pi[<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x + <span class="number">0.2</span>))];</span><br><span class="line">	<span class="keyword">int</span> ps3x = pi[<span class="keyword">int</span>(cbrt(x + <span class="number">0.2</span>))];</span><br><span class="line">	LL ans = primephi(x, ps3x) + LL(ps2x + ps3x - <span class="number">2</span>) * (ps2x - ps3x + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = ps3x + <span class="number">1</span>, ed = ps2x; i &lt;= ed; ++i) &#123;</span><br><span class="line">		ans -= primepi(x / p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>执行 <code>g++ -fPIC -shared -o libprimepi.so primepi.cpp</code> 后运行下面 Python 程序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">c = CDLL(<span class="string">'./libprimepi.so'</span>)</span><br><span class="line">c.init()</span><br><span class="line"><span class="comment"># 再大就崩了，Segmentation fault (core dumped)</span></span><br><span class="line">print(c.primepi(<span class="number">9876543210</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>C 中用 Python 老是提醒没有 <code>Python.h</code>，试了网上的方法，各种系统都不行服了。不过无所谓最在 C 中用 Python 啊</p>
</blockquote>
<h2 id="SageMath-调用-C-的方法"><a href="#SageMath-调用-C-的方法" class="headerlink" title="SageMath 调用 C 的方法"></a><a href="https://doc.sagemath.org/html/en/thematic_tutorials/cython_interface.html#cython-interface" target="_blank" rel="noopener">SageMath 调用 C 的方法</a></h2><h2 id="动态库和静态库"><a href="#动态库和静态库" class="headerlink" title="动态库和静态库"></a><a href="https://www.cnblogs.com/skynet/p/3372855.html" target="_blank" rel="noopener">动态库和静态库</a></h2><h2 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h2><p>既然要混合编程了，哪必然要涉及到 makefile 了，于是我去 <a href="https://www.zhihu.com/question/23792247/answer/600773044" target="_blank" rel="noopener">知乎</a></p>
<p>示例源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">	fun1();</span><br><span class="line">	fun2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fun1.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"this is fun1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fun2.c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"this is fun2\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>示例 Makefile（注意 Makefile 一定要 Tab 缩进)</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># makefile1</span></span><br><span class="line"><span class="section">app: main.c fun1.c fun2.c  </span></span><br><span class="line">	gcc main.c fun1.c fun2.c -o app</span><br><span class="line"></span><br><span class="line"><span class="comment"># makefile2</span></span><br><span class="line"><span class="section">app: main.o fun1.o fun2.o  </span></span><br><span class="line">	gcc main.o fun1.o fun2.o -o app</span><br><span class="line"><span class="section">main.o: main.c</span></span><br><span class="line">	gcc -c main.c -o main.o</span><br><span class="line"><span class="section">fun1.o: fun1.c</span></span><br><span class="line">	gcc -c fun1.c -o fun1.o</span><br><span class="line"><span class="section">fun2.o: fun2.c</span></span><br><span class="line">	gcc -c fun2.c -o fun2.o</span><br><span class="line"></span><br><span class="line"><span class="comment"># makefile3</span></span><br><span class="line">obj = main.o fun1.o fun2.o  </span><br><span class="line">target = app  </span><br><span class="line">CC = gcc</span><br><span class="line"><span class="variable">$(target)</span>: <span class="variable">$(obj)</span></span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(obj)</span> -o <span class="variable">$(target)</span></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># makefile</span></span><br><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> ./*.c)</span>  </span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %.c, %.o, <span class="variable">$(src)</span>)</span> <span class="comment"># obj = $(src:%.c=%.o)  </span></span><br><span class="line">target = app  </span><br><span class="line">CC = gcc</span><br><span class="line"><span class="variable">$(target)</span>: <span class="variable">$(obj)</span>  </span><br><span class="line">	<span class="variable">$(CC)</span> <span class="variable">$(obj)</span> -o <span class="variable">$(target)</span></span><br><span class="line"><span class="section">%.o: %.c  </span></span><br><span class="line">	<span class="variable">$(CC)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean  </span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">	rm -rf <span class="variable">$(obj)</span> <span class="variable">$(target)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中 <code>$</code> 自然是取值操作 <code>%</code> 是未定元的感觉，然后 <code>wildcard, patsubst</code> 从版本中就能看出。</p>
<p><code>$&lt;</code>：第一个依赖文件；<code>$@</code>：目标文件；<code>$^</code>：所有不重复的依赖文件，以空格分开。</p>
</blockquote>
<p>依次执行 <code>make -f makefilei</code> 即可，最后 <code>make (-f makefile 可省略), make clean</code> 是最终版本</p>
<h2 id="Make-规则"><a href="#Make-规则" class="headerlink" title="Make 规则"></a><a href="https://zhuanlan.zhihu.com/p/44267123" target="_blank" rel="noopener">Make 规则</a></h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">目标: 预置条件</span></span><br><span class="line">&lt;TAB&gt; 步骤</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/127335903" target="_blank" rel="noopener">这里写的很详细</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
        <tag>Make</tag>
      </tags>
  </entry>
  <entry>
    <title>Julia 入门到放弃</title>
    <url>/juliaLearning/</url>
    <content><![CDATA[<blockquote>
<p>和 Julia 的一夜情结束了 0.0 ，渣男 dna049 拥抱 SageMath 咯</p>
</blockquote>
<p>学完 Python 之后，觉得 Python 更像一个工具箱，啥都能干，但是我真的需要一个（轻量级）科学计算的工具，而不是像 Matlab 一样的付费巨无霸（我不想再用盗版软件了，学校正版 Matlab 2020 20G 吃不消！）而 C/C++ 在科学计算中因为原生精度问题，又没有特别权威的高精度包，所以也不太行。我甚至有自己学着去开发一种新型语言来打破当前尴尬的局面，直到我知道了 <a href="https://docs.juliacn.com/latest/" target="_blank" rel="noopener">Julia</a> ，已分手，理由：</p>
<blockquote>
<p>有 C 快吗？没有！有 Python 方便吗？没有！安装个包就跟求它借 100w 一样（国内源安装不了）</p>
<p>免费是取代 MATLAB，Mathematics 的理由吗？不是，收费是一件好事！！！</p>
<p>学术界的高性能计算的人员，它们学校至少买了 MATLAB 或者 Mathematics 好吧！</p>
<p>非上述人员，真的需要高性能计算吗？？？再说了真的性能高吗？向量化计算竟然还没有循环快，我吐了好吧</p>
</blockquote>
<a id="more"></a>
<h2 id="我会的语言"><a href="#我会的语言" class="headerlink" title="我会的语言"></a>我会的语言</h2><p>我已经会写，C/C++，Matlab，Python 了，接触过 Java, Swift, Lua(现在全忘了)。又要新学一门语言其实我是抵触的，并且 Julia 的语法简直就像 <code>没有分号的Matlab</code> ，我是很不喜欢的，依然想着某天我也能设计一个仅用于科学计算和 OI/ICPC 的语言! </p>
<ul>
<li>用 C/C++ 写高效小巧的功能</li>
<li>用 Python 处理日常小功能，计算器，模拟鼠标键盘控制，图片处理，视频处理，小游戏开发。</li>
<li>用 ~~Julia ~~ SageMath 写复杂的科学计算用以取代 Matlab。VSCode 一定要选择一个工作区文件夹</li>
<li>用 Matlab（学校版）做演示和交互，Wolfram Mathematics（网页版）做验算。</li>
</ul>
<h2 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h2><p>Julia 设计理念竟然是传承各种语言的优势，丢弃各个语言的不足的一种动态编程语言，可是这不是既要马儿跑，又要马儿不吃草吗？它借助 LLVM 和 JIT 技术。</p>
<p>Julia 有交互界面，现在语言感觉都能像 Python，Matlab 一样支持交互界面，<em>REPL</em> <em>REPL</em> : Read Eval Print Loop : 交互式解释器。</p>
<blockquote>
<p>高精度，支持向量，矩阵，传值而非传引用，速度快是我向往的</p>
</blockquote>
<h2 id="Julia-入门"><a href="#Julia-入门" class="headerlink" title="Julia 入门"></a>Julia 入门</h2><h3 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h3><blockquote>
<p>太接近数学符号了！不亏是 MIT 出来的。</p>
</blockquote>
<ul>
<li><p>支持非 ASCII 码当运算符我是接受不了的</p>
</li>
<li><p>typeof 查看类型</p>
</li>
<li><p>Bool 类型： <code>true, false</code></p>
</li>
<li><p>整数有 Int8,16,32,64,128, 和 U 版本（越界取模），还有高精度 BigInt（都会自动向这个转化）</p>
</li>
<li><p>浮点数有 Int16，Int32，Int64，有 Inf，-Inf，NaN，eps，还有高精度 BigFloat（当然了不可能是精确值）</p>
</li>
<li><p>有理数和复数自带（<code>//</code> 表示有理数，im 表示虚数 i）</p>
</li>
<li><p>从 1 开头索引，我有点接受不了</p>
</li>
<li><p>整除: <code>÷</code> (或者用 div)  异或：<code>⊻</code>(或者用 xor)</p>
<blockquote>
<p>div 向 0 近似，fld 向 -inf 近似，cld 向 +inf 近似</p>
</blockquote>
</li>
<li><p>Base.operator_precedence 看运算符优先级，Base.operator_associativity 看是左结合还是右结合</p>
</li>
<li><p>math 包内建</p>
</li>
<li><p>养成运算符之间加空格的好习惯</p>
</li>
<li><p>短路求值是个好东西</p>
</li>
<li><p>dot 运算，竟然比 for 循环慢？？？搞笑？这玩什么</p>
</li>
<li><p>好像要 Python 一样有 Yield 目前没找到</p>
</li>
<li><p>!放在函数名后面表示输入参数会被改变（但是不一定要这么做）</p>
</li>
<li><p>Copy 跟 Python 一样是浅 Copy</p>
</li>
</ul>
<h3 id="包的国内镜像"><a href="#包的国内镜像" class="headerlink" title="包的国内镜像"></a>包的国内镜像</h3><p>装个包，人装傻了！</p>
<p>USTC 的用不了，所以用 ZJU 的了</p>
<blockquote>
<p>先把<a href="https://mirrors.zju.edu.cn/julia/registries/General/Registry.toml" target="_blank" rel="noopener">Registry.toml</a> 文件下载下来，放在 <code>C:\\Users\\Administrator\\.julia\\registries\\General\\</code></p>
</blockquote>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">(v1<span class="number">.4</span>) pkg&gt; registry add https://mirrors.zju.edu.cn/julia/registries/General.git/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Julia</tag>
      </tags>
  </entry>
  <entry>
    <title>$GL_n(\mathbb{Z}_m)$ 的阶数</title>
    <url>/orderOfGLnZm/</url>
    <content><![CDATA[<p>由线性无关性，我们不难知道 $|GL_n(\mathbb{Z}_p)| = \prod_{i=0} ^{n-1} (p^n-p^i)$，但是 $|GL_n(\mathbb{Z}_m)|$ 却是一个相对复杂的问题，它本质上是在考虑有限 Abel 群的自同构群的阶数问题。它又跟递推数列模 $m$ 的周期密切相关。</p>
<a id="more"></a> 
<p>2007 年 CHRISTOPHER J. HILLAR AND DARREN L. RHEA 发表一篇论文<a href="automorphismsOfFiniteAblianGroup.pdf">《AUTOMORPHISMS OF FINITE Abelian GROUPS》</a> 完美的解决了这个问题。</p>
<h2 id="有限生成-Abel-群结构定理"><a href="#有限生成-Abel-群结构定理" class="headerlink" title="有限生成 Abel 群结构定理"></a>有限生成 Abel 群结构定理</h2><p>设 $G$ 是一个有限 Abel 群，那么 $G$ 同构于一些</p>
<script type="math/tex; mode=display">
H_p = \mathbb{Z}_{p^{e_1}} \times \cdots  \mathbb{Z}_{p^{e_n}}</script><p>的乘积。其中 $p$ 是素数（$p$ 一般默认为素数），$1 \leq e_1 \leq \cdots \leq e_n$ 是正整数。</p>
<blockquote>
<p>证明可见任意一般抽象代数（或近世代数）书。</p>
</blockquote>
<h2 id="乘积的自同构"><a href="#乘积的自同构" class="headerlink" title="乘积的自同构"></a>乘积的自同构</h2><p>若 $H$ 和 $K$ 是有限群，且它们的阶数互素。那么我们就有同构：</p>
<script type="math/tex; mode=display">
Aut(H) \times Aut(K) \simeq Aut(H \times K)</script><p><strong>Proof</strong> ：我们构造很自然的映射：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\phi: Aut(H) \times Aut(K) \to Aut(H \times K) \\
\phi(\alpha,\beta)(h,k) = (\alpha(h),\beta(k))
\end{aligned}</script><p>容易验证 $\phi$  是合理的映射，并且是单射，然后我们同构构造它的逆映射来说明它是满射。</p>
<p>我们记 $n = |H|,m = |K|$，$\pi_H,\pi_K$ 是标准投影映射： $\pi_H: H \times K \to H$，$\pi_K: H \times K \to K$ 。对于给定的 $\omega \in Aut(H \times K)$，我们定义同态 $\gamma: K \to H$， $\gamma(k) = \pi_H(\omega(1_H,k))$，注意到 $\lbrace k^n: k \in K \rbrace \subseteq \ker \gamma$。又 $m,n$是互素的，所以 $\gamma$ 是平凡的映射。同理，我们定义 $\delta: H \to K$，$\delta(h) = \pi_K(\omega(h,1_K))$ 也是平凡映射。最后我们定义$H$和$K$的自同态：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\omega_H(h) = \pi_H(w(h,1_K)) ,\quad \omega(k) = \pi_K(w(1_H,k)) \\
\omega(h,k) = \omega(h,1_K) \omega(1_H,k) = (\omega_H(h),  \omega_K(k)) = \phi(w_H,w_k)(h,k)
\end{aligned}</script><p>由于 $\omega_H,\omega_K$ 都是单射，并且 $H,K$ 是有限群，所以它们是自同构，证毕。</p>
<blockquote>
<p>所以我们考虑 $Aut(G)$，只需考虑 $Aut(H_p)$ 即可</p>
</blockquote>
<h2 id="H-p-的自同态"><a href="#H-p-的自同态" class="headerlink" title="$H_p$ 的自同态"></a>$H_p$ 的自同态</h2><p>我们定义，环 $E_p = End(H_p)$（加法就是映射的加法，乘法就是映射的复合）</p>
<p>由于循环群 $C_{p^{e_i}}$ 对应的是 模 $p^{e_i}$ 的加法群。所以 $H_p$ 中的元素可以表示成列向量 $(\overline{h_1},\cdots \overline{h_n})^T$，其中 $\overline{h_i} \in \mathbb{Z}_{p^{e_i}}, \; h_i \in \mathbb{Z}$</p>
<p>我们定义（<strong>精华所在</strong>)</p>
<script type="math/tex; mode=display">
R_p \doteq \lbrace (a_{ij} \in \mathbb{Z}^{n \times n}: p^{e_i - e_j}|a_{ij} \quad \forall 1 \leq j < i \leq n)</script><p>注意到 $\forall A \in R_p$，$A = P A’ P^{-1}$，其中 $P = diag(p^{e_1},\cdots,p^{e_n}), A’ \in \mathbb{Z}^{n \times n}$。从而 $R_p$ 根据加法和矩阵乘法，构成了一个环。</p>
<p>我们定义 $\pi_i: \mathbb{Z} \to \mathbb{Z}_{p^{e_i}}$ 为标准商映射。$\pi: \mathbb{Z}^n \to H_p$ 为：</p>
<script type="math/tex; mode=display">
\pi(h_1,\cdots h_n)^T = (\pi_1(h_1),\cdots,\pi_n(h_n))^T = (\overline{h_1},\cdots \overline{h_n})^T</script><p>我们不难验证 $\psi: R_p \to E_p$</p>
<script type="math/tex; mode=display">
\psi(A)(\overline{h_1},\cdots \overline{h_n})^T = \pi(A(h_1,\cdots,h_n)^T)</script><p>是环满同态（需要验证映射合理性，环同态，满射）且 $\ker \psi = \lbrace A = (a_{ij}) \in R_p: p^{e_i} | a_{ij}$ </p>
<h2 id="H-p-的自同构-Aut-H-p"><a href="#H-p-的自同构-Aut-H-p" class="headerlink" title="$H_p$ 的自同构 $Aut(H_p)$"></a>$H_p$ 的自同构 $Aut(H_p)$</h2><p>$M = \psi(A) \in Aut(H_p)$ 当且仅当 $A \mod p \in GL_n(\mathbb{F}_p)$，即 $\det(A) \in U(H_p)$ 是 $H_p$ 中可逆元。</p>
<p><strong>Proof</strong>：利用 $A$ 的逆矩阵推出 $M$ 是自同构，利用 $M$ 的逆映射给出 $A$ 的逆矩阵。</p>
<h2 id="Aut-H-p"><a href="#Aut-H-p" class="headerlink" title="$| Aut(H_p)|$"></a>$| Aut(H_p)|$</h2><p>定义：$d_k = \max \lbrace l: e_l  = e_k \rbrace, c_k = \min \lbrace l: e_l  = e_k \rbrace$，显然 $c_k \leq k \leq d_k$。我们需要计算</p>
<ul>
<li>所有 $GL_n(\mathbb{F}_p)$ 中可以拓展成 $A \in R_p$ 的元素</li>
<li>每个元素拓展方式</li>
</ul>
<p>我们找到所有 $M \in  GL_n(\mathbb{F}_p)$ 形如：</p>
<script type="math/tex; mode=display">
M = 
\begin{pmatrix} 
m_{11} & & & \star \\
\vdots \\
m_{d_1 1} \\
& m_{d_2 2} \\
& & \ddots \\
0 & & & m_{d_n n} 
\end{pmatrix}</script><blockquote>
<p>注意到 $\sum_{j=1} ^n \sum_{i=1} ^{d_j} m_{ij} = \sum_{e_i \leq e_j} m_{ij} = \sum_{i=1} ^n \sum_{j = c_i}^n m_{ij}$</p>
</blockquote>
<p>因为我们只考虑线性无关的，所以这种 $M$ 的数量是</p>
<script type="math/tex; mode=display">
\prod_{k=1} ^n (p^{d_k} - p^{k-1})</script><p>将 $m_{ij}$ 从 $\overline{m_{ij}} \in \mathbb{Z}_p$ 到 $\overline{a_{ij}} \in p^{e_i-e_j} \mathbb{Z}/p^{e_i} \mathbb{Z}$ 使得 $a_{ij} \equiv m_{ij} \mod p$ 的方案数分两种情况</p>
<ul>
<li>$e_i &gt; e_j$ 时， $p^{e_j}$ 种</li>
<li>$e_i \leq e_j$ 时， $p^{e_i-1}$ 种</li>
</ul>
<p>从而</p>
<script type="math/tex; mode=display">
|Aut(H_p)| = \prod_{k=1} ^n (p^{d_k} - p^{k-1}) \prod _{j=1} ^n (p^{e_j})^{n-d_j} \prod_{i=1} ^n (p^{e_i -1})^{n-c_i+1}</script><h2 id="GL-n-mathbb-Z-m"><a href="#GL-n-mathbb-Z-m" class="headerlink" title="$|GL_n(\mathbb{Z}_m)|$"></a>$|GL_n(\mathbb{Z}_m)|$</h2><p>由 $|Aut(H_p)|$ 的公式的特殊形式，我们知道 $|GL_n(Z_{p^s})| = p^{n^2 (s-1)} \prod_{k=1} ^n (p^n - p^{k-1})$。</p>
<p>将 $m$ 质因数分解 $m = p_1^{s_1} \cdots p_r ^{s_r}, \quad p_1 &lt; \cdots &lt; p_r$ </p>
<script type="math/tex; mode=display">
|GL_n(\mathbb{Z}_m)| =  \prod_{i=1} ^r |GL_n(Z_{p_i^{s_i}})|</script><h2 id="mathbb-Z-m-上-n-阶给定可逆矩阵-A-的周期"><a href="#mathbb-Z-m-上-n-阶给定可逆矩阵-A-的周期" class="headerlink" title="$\mathbb{Z}_m$ 上$n$ 阶给定可逆矩阵 $A$ 的周期"></a>$\mathbb{Z}_m$ 上$n$ 阶给定可逆矩阵 $A$ 的周期</h2><p>设 $f(\lambda) = | \lambda I -A|$，$A$ 可逆等价于 $\gcd(f(\lambda),\lambda) = 1$，由于 $A^k$ 都可以由 $I,A,\cdots A^{n-1}$，线性表出，但是由于是在 $\mod m$ 的意义下，所以根据容斥原理，对任意 $k \geq m^n$ 时，必然存在 $l &lt; k$，使得 $A^k = A^l$。即 $A$ 的周期上限是 $m^n$，并且周期是 $|GL_n(\mathbb{Z}_m)|$ 的一个真因子（$n&gt;1$）。</p>
<p>显然若 $A$ 可对角化，那么 $A$ 的周期必然是 $\phi(m)$ 的一个因子！但是注意这里 $A$ 对称并不能推出 $A$ 可对角化。</p>
<h2 id="常系数递推数列模意义下的周期"><a href="#常系数递推数列模意义下的周期" class="headerlink" title="常系数递推数列模意义下的周期"></a>常系数递推数列模意义下的周期</h2><p>给定初值，$x_1,\cdots x_s$, 和递推关系：$x_{n+s} = a_1 x_{n+s-1} + \cdots + a_s x_n, a_s \neq 0$ 的数列 ${x_n}$可以表示成：</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
x_n \\
x_{n-1} \\
\vdots  \\
x_{n-s+1}
\end{pmatrix} =
\begin{pmatrix}
a_1 & a_2 &\cdots & a_s \\
1 & 0 \\
\vdots  & & & 0\\
0 &\cdots & 1& 0
\end{pmatrix} 

\begin{pmatrix}
x_{n-1} \\
x_{n-2} \\
\vdots  \\
x_{n-s}
\end{pmatrix}</script><p>可以通过矩阵幂在 $O(s^3 \log n)$ 复杂度求出。</p>
<blockquote>
<p>当 $s$ 相对较大时，根据特征多项式将系数矩阵 $A^n$ 写成 $I,A,\cdots A^{s-1}$ 的线性组合，然后只考虑仅乘以第一行，就可以在 $O(s^2\log n)$ 复杂度求出</p>
</blockquote>
<p>我们考虑 数列 $\lbrace x_n  \mod m \rbrace$ ，由容斥原理知，数列 $\lbrace x_n  \mod m \rbrace$ 是周期数列，记它的最小正周期为 $f(m)$ ，则 </p>
<script type="math/tex; mode=display">
f(m) = lcm(f(p_1^{s_1}),\cdots f(p_r^{s_r}))</script><p>只要 $p_i \not| \; a_s$，则 $f(p_i ^{s_i})$  是 $|GL_n(\mathbb{Z}_{p_i^{s_i}})|$ 的一个真因子（当 $n&gt;1$ 时，$GL_n(\mathbb{Z}_{p_i^{s_i}})$ 不是循环群）。</p>
<blockquote>
<p>精确的周期要具体问题具体分析。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>不超过 $x$ 的素数之和</title>
    <url>/primePowSum/</url>
    <content><![CDATA[<p>我们可以在不求出 <strong>不超过 $x$ 的所有素数</strong> 的情况下，求出最终结果。</p>
<script type="math/tex; mode=display">
f_k(x) \doteq \sum_{p \leq x} p^k</script><ul>
<li>$f_0(x) = \pi(x)$ 这个在 <a href="/computationOfPiX/" title="$\pi(x)$ 的计算">$\pi(x)$ 的计算</a></li>
<li>$f_1(x) = \sum_{p \leq x} p$ 这是我们关心的结果</li>
<li>对于一般的 $k$ 借助 <a href="/fastPowSumOfNaturalNumber/" title="自然数方幂和快速算法">自然数方幂和快速算法</a> 也可以求</li>
</ul>
<a id="more"></a>
<h2 id="f-k-x-s-：-最小素因子大于-p-s-且不超过-x-的数的-k-次方和"><a href="#f-k-x-s-：-最小素因子大于-p-s-且不超过-x-的数的-k-次方和" class="headerlink" title="$f_k(x,s)$： 最小素因子大于 $p_s$ 且不超过 $x$ 的数的 $k$ 次方和"></a>$f_k(x,s)$： 最小素因子大于 $p_s$ 且不超过 $x$ 的数的 $k$ 次方和</h2><script type="math/tex; mode=display">
f_k(x,s) = \sum_{m \leq x, \delta(m)>p_s} m^k</script><p>其中，$\delta(m)$ 表示 $m$ 的最小素因子（约定 $\delta(1) = + \infty$）。</p>
<h3 id="f-k-x-s-的递推公式"><a href="#f-k-x-s-的递推公式" class="headerlink" title="$f_k(x,s)$ 的递推公式"></a>$f_k(x,s)$ 的递推公式</h3><script type="math/tex; mode=display">
\begin{aligned}
f_k(x,s) &= \sum_{m \leq x, \delta(m)>p_s} m^k \\
&= f(x,s-1) - \sum_{m \leq x, \delta(m) = p_s} m^k \\
&= f(x,s-1) - p_s ^k f(\frac{x}{p_s},s-1)
\end{aligned}</script><blockquote>
<p>$\displaystyle f_k(x,0) = \sum_{i=1} ^ {\lfloor x \rfloor} i^k$</p>
</blockquote>
<h3 id="f-k-x-s-和-f-k-x-的关系"><a href="#f-k-x-s-和-f-k-x-的关系" class="headerlink" title="$f_k(x,s)$  和 $f_k(x)$ 的关系"></a>$f_k(x,s)$  和 $f_k(x)$ 的关系</h3><p>若 $s &gt;= \pi(\sqrt{x})$，则</p>
<script type="math/tex; mode=display">
f_k(x) = f_k(x,s) - 1  + f_k(p_s)</script><h3 id="只对-k-1-写代码（一般的-k-同理）"><a href="#只对-k-1-写代码（一般的-k-同理）" class="headerlink" title="只对 $k=1$ 写代码（一般的 $k$ 同理）"></a>只对 $k=1$ 写代码（一般的 $k$ 同理）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;p[<span class="number">1</span>]=<span class="number">2</span>;isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)   isp[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])  p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>,t=(N<span class="number">-1</span>)/i + <span class="number">1</span>;j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j)&#123;</span><br><span class="line">            isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">LL spi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initprime();</span><br><span class="line">    pi[<span class="number">2</span>] = <span class="number">1</span>;spi[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])&#123;</span><br><span class="line">            pi[i]=pi[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            spi[i] = spi[i<span class="number">-1</span>]+i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pi[i]=pi[i<span class="number">-1</span>];</span><br><span class="line">            spi[i] = spi[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sump</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">sumphi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="number">0</span>)  <span class="keyword">return</span> (x+<span class="number">1</span>)*x/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x/p[s] &lt;= p[s])  <span class="keyword">return</span> sump(x)+<span class="number">1</span>-sump(p[s]);</span><br><span class="line">    <span class="keyword">return</span> sumphi(x,s<span class="number">-1</span>)-p[s]*sumphi(x/p[s],s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sump</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> spi[x];</span><br><span class="line">    <span class="keyword">int</span> s = pi[<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">    <span class="keyword">return</span> sumphi(x,s) <span class="number">-1</span>+ sump(p[s]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n = 10^10 就超过int64了,此时用Int128 n &lt; N*N</span></span><br><span class="line">        <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sump(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是其实我们还可以，类似于 $\pi(x)$ 的计算一样, 取 $\pi(\sqrt[3]{x}) \leq s \leq \pi(\sqrt{x})$</p>
<script type="math/tex; mode=display">
f_k(x) = f_k(x,s) - 1  + f_k(p_s) - \sum_{i=s+1} ^ {\pi(\sqrt{x})} (f(\frac{x}{p_i})-f(p_{i-1})) p_i ^k</script><h3 id="只对-k-1-写代码（一般的-k-同理）-1"><a href="#只对-k-1-写代码（一般的-k-同理）-1" class="headerlink" title="只对 $k=1$ 写代码（一般的 $k$ 同理）"></a>只对 $k=1$ 写代码（一般的 $k$ 同理）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;p[<span class="number">1</span>]=<span class="number">2</span>;isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)   isp[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])  p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>,t=(N<span class="number">-1</span>)/i + <span class="number">1</span>;j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j)&#123;</span><br><span class="line">            isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">LL spi[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initprime();</span><br><span class="line">    pi[<span class="number">2</span>] = <span class="number">1</span>;spi[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])&#123;</span><br><span class="line">            pi[i]=pi[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            spi[i] = spi[i<span class="number">-1</span>]+i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            pi[i]=pi[i<span class="number">-1</span>];</span><br><span class="line">            spi[i] = spi[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sump</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">sumphi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="number">0</span>)  <span class="keyword">return</span> (x+<span class="number">1</span>)*x/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x/p[s] &lt;= p[s])  <span class="keyword">return</span> sump(x)+<span class="number">1</span>-sump(p[s]);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;N &amp;&amp; x/p[s]/p[s] &lt;= p[s])&#123;</span><br><span class="line">        <span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">        LL ans = spi[x]+<span class="number">1</span>-spi[p[s]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=s2x;++i)&#123;</span><br><span class="line">            ans+=p[i]*(spi[x/p[i]]-spi[p[i<span class="number">-1</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sumphi(x,s<span class="number">-1</span>)-p[s]*sumphi(x/p[s],s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sump</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> spi[x];</span><br><span class="line">    <span class="keyword">int</span> ps2x = pi[<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">    <span class="keyword">int</span> ps3x = pi[<span class="keyword">int</span>(cbrt(x+<span class="number">0.2</span>))];</span><br><span class="line">    LL ans = sumphi(x,ps3x) <span class="number">-1</span> + spi[p[ps3x]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =ps3x+<span class="number">1</span>;i&lt;=ps2x;++i)&#123;</span><br><span class="line">        ans -= p[i]*(sump(x/p[i])-sump(p[i<span class="number">-1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n = 10^10 就超过int64了,此时用Int128 n &lt; N*N</span></span><br><span class="line">        <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sump(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>特殊数列</title>
    <url>/SpecialNumberSequences/</url>
    <content><![CDATA[<p>在知乎上看到一个有趣的问题: <a href="https://www.zhihu.com/question/383254359" target="_blank" rel="noopener">如何证明这个数列无界？</a> 在此记录一下简单的做法，然后把这篇博客记录以后遇到的一些特殊数列。</p>
<p>证明：当 $x$ 是无理数时，$f_n(x) = \sum_{i=1}^n (-1)^{\lfloor ix \rfloor}$  无界</p>
<blockquote>
<p>$\lfloor x \rfloor$ 表示 $x$ 的整数部分， $0 \leq \lbrace x \rbrace \doteq x- \lfloor x \rfloor&lt;1$ 表示 $x$ 的小数部分</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>为了更顺畅的介绍这个数列，我们先来点前戏，不然插入的时候就不那么顺滑了 0.0 不要笑，我没有开车 0.0</p>
</blockquote>
<h2 id="连分数"><a href="#连分数" class="headerlink" title="连分数"></a><a href="ContinuedFractions.pdf">连分数</a></h2><blockquote>
<p>它和 Farey 序列，无理数的有理逼近，密切相关</p>
</blockquote>
<p>我们将一个整数序列 $a_0,a_1, \cdots, a_n$ 构成的分数叫做连分数，记作</p>
<script type="math/tex; mode=display">
[a_0,a_1,\cdots, a_n] = a_0 + \frac{1}{a_1 + \frac{1}{a_2 + \cdots}}</script><p>其中 $a_0$ 是整数， $a_i (i&gt;0)$ 是正整数。</p>
<p>我们定义:</p>
<p>$p_0 = a_0,p_1 = a_1a_0 +1,p_n = a_np_{n-1} + p_{n-2} (n&gt;1)$</p>
<p>$q_0 = 1,q_1 = a_1,q_n=a_nq_{n-1}+q_{n-2} (n&gt;1)$</p>
<p>那么数学归纳法易证：</p>
<script type="math/tex; mode=display">
[a_0,a_1,\cdots, a_n] = \frac{p_n}{q_n} = x_0</script><p>并且还有</p>
<ul>
<li>$[a_0,a_1,\cdots, a_n] = [a_0,a_1,\cdots, a_{n-1} + \frac{1}{a_n}]$</li>
<li>$p_{n+1}q_n - q_{n+1}p_n = (-1)^n$</li>
<li>从而 $(p_n,p_{n+1}) = (q_n,q_{n+1}) = (p_n,q_n) = 1$</li>
<li>$x_{n+2} - x_n = \frac{(-1)^n a_{n+2}}{q_n q_{n+2}}$</li>
<li>从而 $x_0 &lt; x_2&lt; x_4 &lt; \cdots &lt; x_5 &lt; x_3 &lt; x_1$</li>
</ul>
<h3 id="对任意一个数-x-构造连分数"><a href="#对任意一个数-x-构造连分数" class="headerlink" title="对任意一个数 $x$ 构造连分数"></a>对任意一个数 $x$ 构造连分数</h3><ol>
<li>初始 $i = 0$</li>
<li>$a_i = \lfloor x \rfloor$ 取 $x$ 的整数部分。</li>
<li>$x - a_i == 0$ 结束</li>
<li>取 $x = \frac{1}{x-a_i}$ </li>
<li>++$i$ 回到步骤 1</li>
</ol>
<p>从构造中，我们看出：<strong>连分数长度有限当且仅当 $x$ 是有理数</strong>，此时，最后一项得到的连分数就是 $x$。</p>
<p>当 $x$ 是无理数时， $x_{2n} &lt; x &lt; x_{2n+1}$ ，又因为</p>
<script type="math/tex; mode=display">
x_{2n+1} - x_{2n} = \frac{1}{q_{2n}q_{2n+1}} \leq  \frac{1}{2n(2n+1)}</script><p>且  $x_{2n}$  单调递增，$x_{2n+1}$ 单调递减。所以 $\lim _{n \to \infty} x_n = x$。并且</p>
<script type="math/tex; mode=display">
|x - \frac{p_n}{q_n} | < \frac{1}{q_n ^2}</script><h3 id="补充定义"><a href="#补充定义" class="headerlink" title="补充定义"></a>补充定义</h3><script type="math/tex; mode=display">
a_n' \doteq a_n'(x) \doteq [a_n, a_{n+1}, a_{n+2},\cdots]</script><script type="math/tex; mode=display">
p_{n+1}' \doteq a_{n+1}' p_n + p_{n-1} = \frac{p_{n+2}'}{a_{n+2}'} \\ 
q_{n+1}' \doteq a_{n+1}' q_n + q_{n-1} = \frac{q_{n+2}'}{a_{n+2}'}</script><p>显然，$x = \frac{p_n’}{q_n’} =  \frac{p_n}{q_n} + \frac{(-1)^n}{q_n q_{n+1}’}$</p>
<h3 id="唯一分解"><a href="#唯一分解" class="headerlink" title="唯一分解"></a>唯一分解</h3><p>对于任意给定 $x = [a_0,a_1,\cdots,a_n,\cdots]$，对任意 $N$，有如下唯一分解：</p>
<script type="math/tex; mode=display">
N = \sum c_i q_i  = \sum_{i=0} ^{m(N,x)} c_i(N,x)q_i(x)</script><p>其中 $0 \leq c_i \leq a_{i+1}, c_m(N,x) &gt;0$ 且对任意 $0 \leq j \leq m(N,x)$，$\sum_{i=0} ^ j c_i q_i &lt; q_{j+1}$ 。</p>
<h2 id="f-n-x-sum-i-1-n-1-lfloor-ix-rfloor-何时有界"><a href="#f-n-x-sum-i-1-n-1-lfloor-ix-rfloor-何时有界" class="headerlink" title="$ f_n(x) = \sum_{i=1}^n (-1)^{\lfloor ix \rfloor} $ 何时有界"></a>$ f_n(x) = \sum_{i=1}^n (-1)^{\lfloor ix \rfloor} $ 何时有界</h2><p>由于 $f_n(x+2) = f_n(x) $， 所以我们仅考虑 $x \in [0,2) $ ， 在不引起混淆时，简记成 $f_n $</p>
<h3 id="当-x-是有理数时，记-x-frac-p-q-quad-p-q-1"><a href="#当-x-是有理数时，记-x-frac-p-q-quad-p-q-1" class="headerlink" title="当 $x$ 是有理数时，记 $ x = \frac{p}{q},\quad (p,q)=1$"></a>当 $x$ 是有理数时，记 $ x = \frac{p}{q},\quad (p,q)=1$</h3><p>则 $f_{2q+n} = f_{2q} + f_n$， 从而 $a_n$ 有界当且仅当 $f_{2q} \neq 0 $</p>
<script type="math/tex; mode=display">
f_{2q} = \sum_{i=1}^{2q} (-1)^{\lfloor \frac{ip}{q} \rfloor } =\sum_{i=1}^{q} (-1)^{\lfloor \frac{ip}{q} \rfloor } + \sum_{i=1}^{q} (-1)^{\lfloor  \frac{(i+q)p}{q} \rfloor  } = (1+(-1)^p) f_q</script><ul>
<li><p>当 $q$ 为奇数， $f_{2q} = 0$，即 $f_n$ 有界</p>
</li>
<li><p>当 $p$ 为偶数时，此时 $q$ 为奇数，且 $(\frac{p}{2},q)=1$，所以当 $i$ 跑遍 $[1, q]$ 时，$i\frac{p}{2} \mod q$ 跑遍 $[0,q-1]$，即</p>
<script type="math/tex; mode=display">
f_q = \sum_{i=1}^q (-1)^{ \lfloor \frac{2( i\frac{p}{2} \mod q)}{q} \rfloor} =\sum_{i=0} ^{q-1} (-1)^{\lfloor \frac{2i}{q} \rfloor} = \frac{q+1}{2} - \frac{q-1}{2} = 1</script><p>从而 $f_{2q} = 2f_q = 2$ 推出 $f_n$ 无界。</p>
</li>
</ul>
<h2 id="对任意无理数-x-，我们证明-g-n-x-f-n-2x-无界，从而-f-n-x-无界"><a href="#对任意无理数-x-，我们证明-g-n-x-f-n-2x-无界，从而-f-n-x-无界" class="headerlink" title="对任意无理数 $x$，我们证明 $g_n(x) = f_n(2x)$ 无界，从而 $f_n(x)$ 无界"></a>对任意无理数 $x$，我们证明 $g_n(x) = f_n(2x)$ 无界，从而 $f_n(x)$ 无界</h2><blockquote>
<p>目前没理解论文中的做法，太繁琐了</p>
</blockquote>
<p>显然，我们只需考虑 $0&lt; x &lt;1$</p>
<p>我们考虑 $x$ 的连分数 $[0,a_1,a_2,\cdots,a_n,\cdots]$，由于 $(p_n,q_n)=(q_n,q_{n+1})=1$ (目前不知道有什么简单的操作)</p>
<p>这个问题可以推广到更一般的情形：<a href="1.pdf">单栏阅读</a> <a href="2.pdf">双栏阅读</a></p>
<blockquote>
<p>里面定理一挺有意思的，虽然长但是很清晰。</p>
</blockquote>
<h2 id="另一个相关问题：https-www-zhihu-com-question-392014769"><a href="#另一个相关问题：https-www-zhihu-com-question-392014769" class="headerlink" title="另一个相关问题：https://www.zhihu.com/question/392014769"></a>另一个相关问题：<a href="https://www.zhihu.com/question/392014769" target="_blank" rel="noopener">https://www.zhihu.com/question/392014769</a></h2><p>是否存在 $N$ 使得， $|\sin n|&gt;\frac{1}{n}$ 对所有 $n&gt;N$ 成立。(<a href="https://www.zhihu.com/people/dna049" target="_blank" rel="noopener">dna049</a> 和 <a href="https://www.zhihu.com/people/zhai-sen-8" target="_blank" rel="noopener">寨森 Lambda-CDM</a> 建议修改)</p>
<h3 id="存在无穷多个正整数-x-n-使得-sin-x-n-lt-frac-2-pi-x-n"><a href="#存在无穷多个正整数-x-n-使得-sin-x-n-lt-frac-2-pi-x-n" class="headerlink" title="存在无穷多个正整数 $x_n$ 使得 $|\sin x_n| &lt; \frac{2 \pi}{x_n}$"></a>存在无穷多个正整数 $x_n$ 使得 $|\sin x_n| &lt; \frac{2 \pi}{x_n}$</h3><p>引理： 对任意无理数 $a$ , 存在无穷多个 $x_n$，使得 $\min(\{a x_n\},\{-a x_n\}) &lt; \frac{2}{x_n}$</p>
<p>我们考虑 $a$ 的连分数 $[a_0,a_1,\cdots,a_n,\cdots]$, 我们知道 $|a - \frac{p_n}{q_n} | &lt; \frac{1}{q_n ^2}$，由于 $(p_n,q_n) = 1$,  所以存在 $u_n,v_n$ 使得 $p_n u_n + q_n v_n = 1$, 此时 $p_n(u_n+tq_n) + q_n(v_n - tp_n) = 1$，所以我们不妨假设 $q_n &lt; u_n &lt; 2q_n$。所以 </p>
<script type="math/tex; mode=display">
\{ a u_n \} = \{ (a-\frac{p_n}{q_n})u_n + \frac{p_n}{q_n}u_n \}  = \{ (a-\frac{p_n}{q_n})u_n + \frac{1}{q_n} \}</script><p>我们仅考虑 $n$ 为奇数数的情况，此时 $-\frac{1}{q_n^2} &lt; a - \frac{p_n}{q_n} &lt; 0$，所以 $-\frac{1}{q_n} &lt;(a-\frac{p_n}{q_n})u_n + \frac{1}{q_n} &lt;\frac{1}{q_n}$。而 $x_n = u_{2n+1} &gt; q_{2n+1}$  即为所求。</p>
<blockquote>
<p>实际上 $n$ 为偶数时，也可以取做，只是此时 $u_n$ 要换成 $3q_n - u_n$</p>
</blockquote>
<p>取引理中 $a = \frac{1}{\pi}$，由于 $|\sin(x)|$ 是周期为 $\pi$ 的偶函数。所以 $|\sin(x_n)| = |\sin(\{ax_n\}\pi)| = |\sin(\{-ax_n\}\pi)| &lt; \frac{2\pi}{x_n}$</p>
<p>受 <a href="https://www.zhihu.com/people/zhai-sen-8" target="_blank" rel="noopener">寨森 Lambda-CDM</a>  启发，可以不用引理直接证明：</p>
<h3 id="存在无穷多个正整数-m-，使得-sin-m-lt-frac-pi-m"><a href="#存在无穷多个正整数-m-，使得-sin-m-lt-frac-pi-m" class="headerlink" title="存在无穷多个正整数 $m$，使得 $|\sin m| &lt; \frac{\pi}{m}$"></a>存在无穷多个正整数 $m$，使得 $|\sin m| &lt; \frac{\pi}{m}$</h3><p>Proof：考虑 $\frac{1}{\pi}$ 的连分数 $[a_0,a_1,\cdots,a_n,\cdots]$，我们有 $|\frac{1}{\pi} - \frac{p_n}{q_n} | &lt; \frac{1}{q_n ^2}$，所以</p>
<script type="math/tex; mode=display">
|\sin q_n| = |\sin[(\frac{q_n}{\pi} -p_n) \pi + p_n\pi ]|  =  |\sin[(|\frac{q_n}{\pi} -p_n|) \pi]| < \frac{\pi}{q_n}</script><p>这个问题还关联这 <a href="https://mathworld.wolfram.com/IrrationalityMeasure.html" target="_blank" rel="noopener">Irrationality Measure</a>，菲尔兹奖级别的工作！</p>
<h3 id="Irrationality-Measure"><a href="#Irrationality-Measure" class="headerlink" title="Irrationality Measure"></a><a href="https://mathworld.wolfram.com/IrrationalityMeasure.html" target="_blank" rel="noopener">Irrationality Measure</a></h3><p>对于给定是实数 $x$, 定义</p>
<script type="math/tex; mode=display">
\begin{aligned}
\mu(x) \doteq \inf_{u \in R} u \\
R = \{ u\mid \exists \text{ infty } (p,q)\; s.t.\quad 0< |x -\frac{p}{q}| < \frac{1}{q^u} \}
\end{aligned}</script><p>显然考虑连分数，我们知道 当 $x$ 是有理数时，$u(x) = 1$，无理数时，$\mu(x) \geq 2$。</p>
<p>Roth 证明，当 $x$ 是代数数时 $\mu(x) = 2$，因此获得 Field 奖。</p>
<p>$\mu(L) = \infty$，其中 $L = \sum_{n=1} ^{\infty} 10^{-n!}$ 为刘维尔（Joseph Liouville）数</p>
<p>我们下面证明：当 $u&gt;2$ 时，$A = \{ x \mid 0&lt; |x -\frac{p}{q}| &lt; \frac{1}{q^u}\}$，则 $A$ 的外（lebesgue）测度 $m^{\star}(A) = 0$，从而（lebesgue）测度 $m(A)=0$</p>
<p>由于 当$1\leq p \leq q$时， $(\frac{p}{q}-\frac{1}{q^u},\frac{p}{q} + \frac{1}{q^u})$ 只有可数个，记作$I_1, I_2,\cdots I_n,\cdots$ ，按照定义，$A \cap (0,1) \subseteq \overline\lim I_n$, 另一方面 $\sum_{i=1}^{\infty} I_n = \sum_{q=1}^{\infty} \frac{q+1}{q^u} &lt; +\infty$，从而 $m^{\star}(A \cup (0,1)) = 0$，同理可证了$m^{\star}(A \cup (n,n+1))=0, n \in \mathbb{Z}$，从而 </p>
<script type="math/tex; mode=display">
0 \leq m^{\star}(A) \leq \sum_{n \in \mathbb{Z}} m^{\star}(A \cup (n,n+1)) =0</script><p>从而$m^{\star}(A) = m(A) = 0$。其中 $m^{\star}(I) = \inf \{u|u=\sum_{k=1}^{\infty} |I_k|,\; \cup_{k=1}^ {\infty} I_k \supset m ,I_k \text{ 是开矩形 } \}$</p>
<h2 id="sagemath-数值测试-Jupyter-Notebook-上运行"><a href="#sagemath-数值测试-Jupyter-Notebook-上运行" class="headerlink" title="sagemath 数值测试(Jupyter Notebook 上运行)"></a>sagemath 数值测试(Jupyter Notebook 上运行)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = continued_fraction(<span class="number">1</span>/pi).convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    n = x[i].denominator()</span><br><span class="line">    print(N(abs(sin(n))-pi/n),<span class="string">"\t= "</span>,abs(sin(n))-pi/n ) <span class="comment"># 后来精度就崩了</span></span><br><span class="line">    </span><br><span class="line">x = continued_fraction(<span class="number">1</span>/pi).convergents()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    n = x[i].denominator()</span><br><span class="line">    print(i,N(abs(sin(n))*n),<span class="string">"\t= "</span>,abs(sin(n))*n) <span class="comment"># 后来精度就崩了</span></span><br></pre></td></tr></table></figure>
<h3 id="1-sum-s-in-S-frac-1-s-2-1-其中-S-a-m-a-gt-1-m-gt-1-a-m-in-mathbb-N"><a href="#1-sum-s-in-S-frac-1-s-2-1-其中-S-a-m-a-gt-1-m-gt-1-a-m-in-mathbb-N" class="headerlink" title="$1 = \sum_{s \in S} \frac{1}{s^2-1}$, 其中 $S = \{a^m | a &gt; 1, m&gt;1, a,m \in \mathbb{N} \}$"></a>$1 = \sum_{s \in S} \frac{1}{s^2-1}$, 其中 $S = \{a^m | a &gt; 1, m&gt;1, a,m \in \mathbb{N} \}$</h3><blockquote>
<p>方法：<a href="https://link.zhihu.com/?target=https%3A//www.maa.org/sites/default/files/pdf/upload_library/22/Ford/bibiloni206.pdf">On a Series of Goldbach and Euler</a></p>
</blockquote>
<script type="math/tex; mode=display">
\begin{aligned}
\lim S(n) &= \sum_{a \in A} \sum_{m\geq 2} \frac{1}{a^m -1} \\ 
&=  \sum_{a \in A} \sum_{m\geq 2} \frac{1}{a^m} + \sum_{a \in A} \sum_{m\geq 2} \frac{1}{a^m(a^m -1)} \\ 
& =  \sum_{a \in A} \frac{1}{a(a-1)} +   \sum_{b \in B} \frac{1}{b(b -1)} \\ 
& = \sum_{i=2}^n \frac{1}{n(n-1)} = 1
\end{aligned}</script><p>其中 $B = \{n \in \mathbb{N} \mid n = k^m , k&gt;1 \}$，$A= \{n \in \mathbb{N} \mid n &gt;1 \} - B$</p>
<h2 id="f-n-m-sum-i-0-i-leq-n-im-C-n-im-i"><a href="#f-n-m-sum-i-0-i-leq-n-im-C-n-im-i" class="headerlink" title="$f(n,m) = \sum_{i=0}^{i \leq n-im} C_{n-im}^i$"></a>$f(n,m) = \sum_{i=0}^{i \leq n-im} C_{n-im}^i$</h2><blockquote>
<p>洛谷题目，具体题号就不便说了。</p>
</blockquote>
<p>数据范围 $1 \leq n \leq 10^{18} , m \leq 100$ 。我们注意考察 $f(n,m)$ 的意义！假设我们要上楼梯，每次只能上 1 步或者 $m+1$ 步，那么 $f(n,m)$ 就是方案数，因此，我们显然有</p>
<script type="math/tex; mode=display">
f(n,m) = f(n-1,m)+f(n-m-1,m)</script><p>当然了我们不考虑意义直接用 $f(n,m)-f(n-1,m)$ 也可以得到这个公式。</p>
<h3 id="无法过题的-O-m-log-m-log-n-代码，原因是没法找一个合适的基底"><a href="#无法过题的-O-m-log-m-log-n-代码，原因是没法找一个合适的基底" class="headerlink" title="无法过题的 $O(m \log m \log n)$ 代码，原因是没法找一个合适的基底"></a>无法过题的 $O(m \log m \log n)$ 代码，原因是没法找一个合适的基底</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL=<span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> BI=__int128;</span><br><span class="line"><span class="keyword">const</span> LL mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M =<span class="number">10004</span>;</span><br><span class="line">BI a[<span class="number">4</span>*M],r[<span class="number">4</span>*M],ans[<span class="number">2</span>*M];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">powmod</span><span class="params">(T x,U n,T p)</span></span>&#123;</span><br><span class="line">	<span class="function">T <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;  x=x*x%p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bitreverse</span><span class="params">(BI *x,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;j) swap(x[i],x[j]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=len&gt;&gt;<span class="number">1</span>;(j^=l)&lt;l;l&gt;&gt;=<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> BI FM = BI(<span class="number">29</span>)&lt;&lt;<span class="number">57</span>|<span class="number">1</span>,gg=<span class="number">3</span>;</span><br><span class="line"><span class="comment">// the mod must NFT-friendly or (len+1)*mod^2 &lt; FM</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(BI *x,<span class="keyword">int</span> len,<span class="keyword">bool</span> isInverse=<span class="literal">false</span>)</span></span>&#123;</span><br><span class="line">	g = powmod(gg,(FM<span class="number">-1</span>)/len,FM);</span><br><span class="line">	<span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">		g=powmod(g,len<span class="number">-1</span>,FM);</span><br><span class="line">		BI invlen = powmod(BI(len),FM<span class="number">-2</span>,FM);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">			x[i]=x[i]*invlen%FM;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	bitreverse(x,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> half=<span class="number">1</span>,<span class="built_in">step</span>=<span class="number">2</span>;half!=len;half&lt;&lt;=<span class="number">1</span>,<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">		BI wn = powmod(g,len/<span class="built_in">step</span>,FM);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="built_in">step</span>)&#123;</span><br><span class="line">			<span class="function">BI <span class="title">w</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;i+half;++j)&#123;</span><br><span class="line">				BI t=(w*x[j+half])%FM;</span><br><span class="line">				x[j+half]=(FM-t+x[j])%FM;</span><br><span class="line">				x[j]=(x[j]+t)%FM;</span><br><span class="line">				w = w*wn%FM;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stand</span><span class="params">(BI *a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*n;i&gt;n;--i)&#123;</span><br><span class="line">		a[i<span class="number">-1</span>]=(a[i<span class="number">-1</span>]+a[i])%mod;</span><br><span class="line">		a[i-n<span class="number">-1</span>]=(a[i-n<span class="number">-1</span>]+a[i])%mod;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">square</span><span class="params">(BI *a, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">1</span>&lt;&lt;(<span class="number">32</span>-__builtin_clz(<span class="number">2</span>*n+<span class="number">1</span>));</span><br><span class="line">	nft(a,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">		a[i]=a[i]*a[i]%FM;</span><br><span class="line">	&#125;</span><br><span class="line">	nft(a,len,<span class="number">1</span>);</span><br><span class="line">	stand(a,n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(BI *a,BI *b,<span class="keyword">int</span> na,<span class="keyword">int</span> nb)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">1</span>&lt;&lt;(<span class="number">32</span>-__builtin_clz((na+nb)+<span class="number">1</span>));</span><br><span class="line">	nft(a,len);nft(b,len);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">		a[i] = a[i]*b[i]%FM;</span><br><span class="line">	&#125;</span><br><span class="line">	nft(b,len,<span class="number">1</span>);nft(a,len,<span class="number">1</span>);</span><br><span class="line">	stand(a,na);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initC</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		ans[i] = <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m+<span class="number">1</span>;i&lt;=<span class="number">2</span>*m;++i)&#123;</span><br><span class="line">		ans[i] = (ans[i<span class="number">-1</span>]+ans[i-m<span class="number">-1</span>])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	<span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line">	r[<span class="number">0</span>]=a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(LL n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	initC(m);</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) mul(r,a,m,m);</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>; square(a,m);</span><br><span class="line">	&#125;</span><br><span class="line">	LL ret = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		ret+=(r[i]*ans[i+m])%mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="comment">//freopen("m","w",stdout);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL n;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line">		<span class="keyword">if</span>(m==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;powmod(<span class="number">2L</span>L,n,mod)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(n&lt;=m)&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">cout</span>&lt;&lt;getans(n-m,m)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求-m-阶线性递推关系式第-n-项"><a href="#求-m-阶线性递推关系式第-n-项" class="headerlink" title="求 $m$ 阶线性递推关系式第 $n$ 项"></a>求 $m$ 阶线性递推关系式第 $n$ 项</h2><blockquote>
<p>参考：<a href="https://wenku.baidu.com/view/bac23be1c8d376eeafaa3111.html" target="_blank" rel="noopener">2013/03/02 线性递推关系和矩阵乘法</a></p>
<p><strong>上面文献的意义</strong>：矩阵加速已经成为过去式了，多项式加速时代的到来，NFT 加速多项式的时代到来。</p>
</blockquote>
<p>设 $a_n = c_{m-1} a_{n-1} + c_{m-2} a_{n-2} + c_0 a_{n-m}$，给定了初值 $a_1,a_2,\cdots,a_m$ 的情况下，求 $a_n$</p>
<p>我们记</p>
<script type="math/tex; mode=display">
A = \begin{pmatrix}
c_1 & c_2 &\cdots& c_m \\
1 & 0&  & 0 \\
& &\vdots&  \\
0 & \cdots &1 & 0
\end{pmatrix}</script><p>并且显然</p>
<script type="math/tex; mode=display">
\begin{pmatrix}
a_n \\
a_{n-1} \\
\vdots \\
a_{n-m+1}
\end{pmatrix} = 
A
\begin{pmatrix}
a_{n-1} \\
a_{n-2} \\
\vdots \\
a_{n-m}
\end{pmatrix}  = 
A^{n-m}
\begin{pmatrix}
a_{m} \\
a_{m-1} \\
\vdots \\
a_{1}
\end{pmatrix}</script><p>我们就可以用矩阵乘法在 $O(m^3 \log n)$ 解决这个问题了。</p>
<p><strong>但线性递推关系式可以不用矩阵优化到</strong> $O(m^2 \log n)$ ：</p>
<p>显然 $A$ 的特征多项式 $f(x) = x^m - c_1 x^{m-1}- \cdots -c_m$，所以 $A^n = c_{m-1} A^{n-1} + \cdots c_0 I$，也就是说 $A^n$ 可以由 $A^{m-1},A^{m-2},\cdots,I$ 线性表出，而 $A^{n_1+n_2} = A^{n1} A^{n_2}$ 然后运算就是卷积运算，相当于多项式乘法！也就是说我们可以在 $O(m^2 \log n)$ 时间复杂度，求出 $A^n = b_0 I + b_1 A + \cdots b_{m-1} A^{m-1}$, 注意到</p>
<script type="math/tex; mode=display">
A^i \begin{pmatrix}
a_{m} \\
a_{m-1} \\
\vdots \\
a_{1}
\end{pmatrix} =
\begin{pmatrix}
a_{i+m} \\
a_{i+m-1} \\
\vdots \\
a_{i+1}
\end{pmatrix}</script><p>所以我们只需预处理出 $a_1,\cdots,a_{2m-1}$ 这 $2m-1$ 个数即可。<a href="/templateOfCpp/" title="代码见我博客的模板">代码见我博客的模板</a></p>
<blockquote>
<p>这也提供了一般 $m$ 阶矩阵的 $n$ 次方的一个 $O(m^3+m^2\log n)$ 的算法！！！卧槽！我也太帅了吧。</p>
</blockquote>
<p><del>最后如果递推关系中仅有常数个 $c_i$ 不为 0，此时还能用 NFT（数论快速变换）</del> 利用 <a href="https://cp-algorithms.com/algebra/polynomial.html" target="_blank" rel="noopener">多项式带模除法: Division with remainder</a> 的 $O(m \log m)$ 算法，上述算法可以优化到 $O(m\log m \log n + m^2)$，（暂时不知道如何去掉 $m^2$）但是写法太复杂。搞定！参考 <a href="https://oi-wiki.org/math/linear-recurrence/" target="_blank" rel="noopener">这里</a>，不要涉及矩阵</p>
<p>注意到一次乘法之后，会变成 $I,A,\cdots A^{2m-1}$ 的线性组合，$A^{m},\cdots A^{2m-1}$ 这 $m$ 个要再用前 $m$ 线性表出，由于 $c_i$ 仅有常数个不为 0，可以 $O(m)$ 复杂度把他们写成前 $m$ 个的线性组合。</p>
<blockquote>
<p>当 $m&gt;10^4$ 时，我们就有必要写带 NFT 的版本了（NFT 模板可以在我博客中找到）有需求的时候再写吧。</p>
</blockquote>
<h2 id="sum-i-equiv-r-mod-m-binom-n-i-mod-M"><a href="#sum-i-equiv-r-mod-m-binom-n-i-mod-M" class="headerlink" title="$\sum_{i \equiv r \mod m} \binom{n}{i} \mod M$"></a>$\sum_{i \equiv r \mod m} \binom{n}{i} \mod M$</h2><p>数据范围：$1 \leq n \leq 10^{18},\; 2 \leq m \leq 2000,\; 0 \leq r &lt; m,\; 10^8 &lt; M &lt; 10^9$</p>
<p>记 $w$ 满足 $w^m = 1,w^n \neq 1, 0 &lt; n &lt; m$，则答案为 $\frac{1}{m}\sum_{i=0}^{m-1}F(w^i)$，其中 $F(x) = x^{m-r}(1+x)^n \mod x^{m}-1$</p>
<p>假设 $F(x) = \sum_{i=0}^{m-1} a_i x^i$，则答案就是 $a_0$，即答案是 $F(0)$</p>
<p>这个跟上面一样本质是一样的，做带模的多项式运算。</p>
<blockquote>
<p>参考：<a href="https://codeforces.ml/blog/zscoder" target="_blank" rel="noopener">zscoder 的博客</a></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poly</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">2003</span>;</span><br><span class="line">	<span class="keyword">int</span> d;</span><br><span class="line">	LL a[N];</span><br><span class="line">	Poly(<span class="keyword">int</span> _d):d(_d)&#123;</span><br><span class="line">		<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">auto</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> i)&#123;</span><br><span class="line">		<span class="keyword">return</span> a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	Poly <span class="keyword">operator</span>*(Poly &amp;A)&#123;</span><br><span class="line">		<span class="function">Poly <span class="title">R</span><span class="params">(d+A.d)</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=d;++i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=A.d;++j)&#123;</span><br><span class="line">				R[i+j] += a[i]*A[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> R;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Poly <span class="title">mulmod</span><span class="params">(Poly &amp;A,Poly &amp;B,<span class="keyword">int</span> m,LL mod)</span></span>&#123;</span><br><span class="line">	Poly R = A*B;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=R.d;i&gt;=m;--i)&#123;</span><br><span class="line">		R[i-m] += R[i];</span><br><span class="line">		R[i]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	R.d = m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)&#123;</span><br><span class="line">		R[i]%=mod;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span> U&gt;</span><br><span class="line"><span class="function">T <span class="title">powmod</span><span class="params">(T x,U n,<span class="keyword">int</span> m,LL mod)</span></span>&#123;</span><br><span class="line">	<span class="function">T <span class="title">r</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	r[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=mulmod(r,x,m,mod);</span><br><span class="line">		n&gt;&gt;=<span class="number">1</span>;  x=mulmod(x,x,m,mod);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	LL n,r,mod;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;mod)&#123;</span><br><span class="line">		<span class="function">Poly <span class="title">A</span><span class="params">(m<span class="number">-1</span>)</span></span>;</span><br><span class="line">		A[<span class="number">0</span>]=A[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">		Poly R = powmod(A,n,m,mod);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;(R[r%m]*m%mod)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组合数倒数交错和-sum-i-0-n-frac-1-i"><a href="#组合数倒数交错和-sum-i-0-n-frac-1-i" class="headerlink" title="组合数倒数交错和 $\sum_{i=0}^n \frac{(-1)^i}$"></a>组合数倒数交错和 $\sum_{i=0}^n \frac{(-1)^i}{{n \choose i}}$</h2><p>考虑积分 $F(n,m) = \int _0^1 x^m (1-x)^{n-m} dx$，显然 $F(n,m)=F(n,n-m),F(n,0) = \frac{1}{n+1}$<br>且分部积分即可知道 $F(n,m) = \frac{m}{n-m+1} F(n,m-1) = \frac{1}{(n+1){n \choose m}}$，再等比数列求和就有</p>
<script type="math/tex; mode=display">
\sum_{i=0}^n \frac{(-1)^i}{{n \choose i}} = (n+1) \int _0 ^1 \sum _{i=0} ^n (-x)^ i (1-x)^ {n-i} dx = (n+1) \int _0 ^1 (1-x)^{n+1}-(-x)^{n+1}dx = \frac{n+1}{n+2} (1+(-1)^n)</script><h2 id="To-be-continued"><a href="#To-be-continued" class="headerlink" title="To be continued"></a>To be continued</h2>]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>点灯问题之高斯消元法</title>
    <url>/gaussianElimination/</url>
    <content><![CDATA[<p>在知乎的 <a href="https://zhuanlan.zhihu.com/skymath" target="_blank" rel="noopener">数学&amp;算法</a> 专栏里看到 <a href="https://zhuanlan.zhihu.com/p/53646257" target="_blank" rel="noopener">点灯游戏的 $O(n^3)$ 算法</a>，觉得挺有意思，特此记录，并且补充代码</p>
<a id="more"></a>
<h2 id="点灯游戏简介"><a href="#点灯游戏简介" class="headerlink" title="点灯游戏简介"></a>点灯游戏简介</h2><p>一层大楼共有 $n \times n$ 个房间，每个房间都有一盏灯和一个按钮。按动一个房间的按钮后，这个房间和周围四个相邻的房间的灯的状态全部都会改变（由暗变为亮或者亮变为暗）。目标是通过按按钮把所有的灯都点亮（默认情况下全暗）。求点灯方案。</p>
<ol>
<li>全局枚举，复杂度 $O(2^{n^2})$</li>
<li>首行枚举，复杂度 $O(2^n)$ ，由于第一行的方案就决定了下一行的方案</li>
<li>线性方程组求解，复杂度 $O(n^6)$</li>
<li>上述线性方程组求解可以转化成 $n$ 个变量的线性方程组，复杂度 $O(n^3)$</li>
</ol>
<p>以上内容取自 <a href="https://zhuanlan.zhihu.com/p/53646257" target="_blank" rel="noopener">点灯游戏的 $O(n^3)$ 算法</a> </p>
<blockquote>
<p>最终方案做法概括：$n^2$ 个方程 $n^2$ 个未知数的线性方程组，由于用第$i$行的方程可以将第 $i+1$ 行的未知数表示成前 $i$ 行的线性组合，从而是第一行的现行组合，这样到最后一行。最后一行的方程还未使用，从而变成了 $n$ 个方程 $n$ 个未知数的线性方程组。</p>
</blockquote>
<p>由于方案可能不唯一，所以用 Python 自带的 numpy 以及 scipy 都不计算奇异矩阵。所以就自己写了高斯消元法来求解。</p>
<blockquote>
<p>注意 numpy 数据越界的问题！</p>
</blockquote>
<h2 id="高斯消元法普通版本"><a href="#高斯消元法普通版本" class="headerlink" title="高斯消元法普通版本"></a>高斯消元法普通版本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="comment"># numpy 是用C写的，所以本质是强类型的，需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tri</span><span class="params">(A, b, eps = <span class="number">1e-6</span>)</span>:</span></span><br><span class="line"><span class="comment"># 使A上三角，并返回A的秩 和 列变换px</span></span><br><span class="line">	n = len(A)</span><br><span class="line">	px = list(range(n))</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		j,k = i,i</span><br><span class="line">		<span class="keyword">while</span>(k&lt;n):</span><br><span class="line">			j=i</span><br><span class="line">			<span class="keyword">while</span>(j&lt;n <span class="keyword">and</span> np.fabs(A[j,k])&lt;eps): j+=<span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span>(j != n): <span class="keyword">break</span></span><br><span class="line">			k+=<span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span>(k == n): <span class="keyword">return</span> i,px</span><br><span class="line">		<span class="keyword">if</span>(i!=k):</span><br><span class="line">			px[i],px[k] = px[k],px[i]</span><br><span class="line">			A[:,[i,k]] = A[:,[k,i]]</span><br><span class="line">		<span class="keyword">if</span>(j != i):</span><br><span class="line">			b[[i,j]] = b[[j,i]]</span><br><span class="line">			A[[i,j]] = A[[j,i]]</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">			ratio = A[j,i]/A[i,i]</span><br><span class="line">			b[j] -= b[i]*ratio</span><br><span class="line">			A[j,i:n] -= A[i,i:n]*ratio</span><br><span class="line">	<span class="keyword">return</span> n,px</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trisolve</span><span class="params">(A, b)</span>:</span></span><br><span class="line">	ans = b.copy()</span><br><span class="line">	n = len(A)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">		ans[i] = ans[i]/A[i,i]</span><br><span class="line">		ans[:i] -= A[:i,i]*ans[i]</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(AA, bb, eps = <span class="number">1e-6</span>)</span>:</span></span><br><span class="line"><span class="comment"># 求解 Ax = b ，其中A是矩阵，b是列向量</span></span><br><span class="line"><span class="comment"># 答案是 ans[:,0] + k[1] ans[:,1] + ... + k[n-r] ans[n-r]</span></span><br><span class="line">	<span class="comment">#一定要类型转化，不然会很惨！</span></span><br><span class="line">	A = AA.copy()</span><br><span class="line">	b = bb.copy()</span><br><span class="line">	A = A.astype(np.float) </span><br><span class="line">	b = b.astype(np.float)</span><br><span class="line">	n = len(A)</span><br><span class="line">	r,px = tri(A,b,eps)</span><br><span class="line">	py = list(range(n))</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n): py[px[i]] = i</span><br><span class="line">	<span class="keyword">if</span>(r == n): <span class="keyword">return</span> trisolve(A,b)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(r,n):</span><br><span class="line">		<span class="keyword">if</span>(np.fabs(b[i,<span class="number">0</span>])&gt;eps): <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	ans = np.matrix(np.zeros([n,n-r+<span class="number">1</span>]))</span><br><span class="line">	ans[:r,<span class="number">0</span>] = trisolve(A[:r,:r],b[:r])</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(r,n):</span><br><span class="line">		ans[:r,i-r+<span class="number">1</span>] = trisolve(A[:r][:r],-A[:r,i])</span><br><span class="line">		ans[i,i-r+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> ans[py]</span><br><span class="line"></span><br><span class="line">A = np.matrix(<span class="string">'1,2;3,4'</span>)</span><br><span class="line">b = np.matrix(<span class="string">'2;4'</span>)</span><br><span class="line">ans = solve(A,b)</span><br><span class="line">print(ans)</span><br><span class="line">print((b-A*ans[:,<span class="number">0</span>]))</span><br><span class="line">print(A*ans[:,<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>
<h2 id="高斯消元法模素数版本之点灯问题-O-n-3-求解"><a href="#高斯消元法模素数版本之点灯问题-O-n-3-求解" class="headerlink" title="高斯消元法模素数版本之点灯问题 $O(n^3)$ 求解"></a>高斯消元法模素数版本之点灯问题 $O(n^3)$ 求解</h2><p>解的个数取 $\log_2$ 就是 <a href="http://oeis.org/search?q=A159257&amp;sort=&amp;language=&amp;go=Search" target="_blank" rel="noopener">A159257</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="comment"># numpy 是用C写的，所以本质是强类型的，需要注意</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv</span><span class="params">(a,p)</span>:</span> <span class="comment"># 0&lt;a&lt;p and gcd(a,p)=1</span></span><br><span class="line">	<span class="keyword">if</span>(a == <span class="number">1</span>): <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> (p-p//a)*inv(p%a,p)%p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trip</span><span class="params">(A, b, p = <span class="number">2</span>)</span>:</span> <span class="comment"># 0 &lt;= A[i,j] &lt; p</span></span><br><span class="line"><span class="comment"># 使A上三角，并返回A的秩 和 列变换px</span></span><br><span class="line">	n = len(A)</span><br><span class="line">	px = list(range(n))</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		j,k = i,i</span><br><span class="line">		<span class="keyword">while</span>(k&lt;n):</span><br><span class="line">			j=i</span><br><span class="line">			<span class="keyword">while</span>(j&lt;n <span class="keyword">and</span> A[j,k]==<span class="number">0</span>): j+=<span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span>(j != n): <span class="keyword">break</span></span><br><span class="line">			k+=<span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span>(k == n): <span class="keyword">return</span> i,px</span><br><span class="line">		<span class="keyword">if</span>(i!=k):</span><br><span class="line">			px[i],px[k] = px[k],px[i]</span><br><span class="line">			A[:,[i,k]] = A[:,[k,i]]</span><br><span class="line">		<span class="keyword">if</span>(j!=i):</span><br><span class="line">			b[[i,j]] = b[[j,i]]</span><br><span class="line">			A[[i,j]] = A[[j,i]]</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,n):</span><br><span class="line">			ratio = A[j,i]*inv(A[i,i],p)%p</span><br><span class="line">			b[j] = (b[j]-b[i]*ratio)%p</span><br><span class="line">			A[j,i:n] = (A[j,i:n]-A[i,i:n]*ratio)%p</span><br><span class="line">	<span class="keyword">return</span> n,px</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trisolvep</span><span class="params">(A, b, p=<span class="number">2</span>)</span>:</span> <span class="comment"># 0 &lt;= A[i,j] &lt; p and 0&lt;A[i,i]&lt;p</span></span><br><span class="line">	ans = b.copy()</span><br><span class="line">	n = len(A)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">		ans[i] = ans[i]*inv(A[i,i],p)%p</span><br><span class="line">		ans[:i] = (ans[:i] - A[:i,i]*ans[i])%p</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solvep</span><span class="params">(A, b, p=<span class="number">2</span>)</span>:</span></span><br><span class="line"><span class="comment"># 求解 Ax = b ，其中A是矩阵，b是列向量</span></span><br><span class="line"><span class="comment"># 答案是 a[0] + k[1] a[1] + ... + k[n-r] a[n-r]</span></span><br><span class="line">	n = len(A)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">			A[i,j]%=p</span><br><span class="line">		b[i]%=p</span><br><span class="line">	r,px = trip(A,b,p)</span><br><span class="line">	py = list(range(n))</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n): py[px[i]] = i</span><br><span class="line">	<span class="keyword">if</span>(r == n): <span class="keyword">return</span> trisolvep(A,b,p)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(r,n):</span><br><span class="line">		<span class="keyword">if</span>(b[i,<span class="number">0</span>] != <span class="number">0</span>): <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">	ans = np.matrix(np.zeros([n,n-r+<span class="number">1</span>], dtype=np.int))</span><br><span class="line">	ans[:r,<span class="number">0</span>] = trisolvep(A[:r,:r],b[:r])</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(r,n):</span><br><span class="line">		ans[:r,i-r+<span class="number">1</span>] = trisolvep(A[:r,:r],(-A[:r,i])%p)</span><br><span class="line">		ans[i,i-r+<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> ans[py]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lighton</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="comment"># x 是行向量</span></span><br><span class="line">	n = x.size</span><br><span class="line">	ans = np.matrix(np.ones([n,n]),dtype = np.int)</span><br><span class="line">	ans[<span class="number">0</span>,:] = x</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">			<span class="keyword">if</span>(i<span class="number">-2</span>&gt;=<span class="number">0</span>): ans[i,j] ^= ans[i<span class="number">-2</span>,j]</span><br><span class="line">			ans[i,j] ^= ans[i<span class="number">-1</span>,j]</span><br><span class="line">			<span class="keyword">if</span>(j<span class="number">-1</span>&gt;=<span class="number">0</span>): ans[i,j] ^= ans[i<span class="number">-1</span>,j<span class="number">-1</span>]</span><br><span class="line">			<span class="keyword">if</span>(j+<span class="number">1</span>&lt;n): ans[i,j] ^= ans[i<span class="number">-1</span>,j+<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">light</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="comment"># n 是整数</span></span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>): <span class="keyword">return</span> [np.matrix(<span class="string">'1'</span>)]</span><br><span class="line">	x = np.matrix(np.zeros([n,n+<span class="number">1</span>]),dtype = np.int)</span><br><span class="line">	y = np.matrix(np.zeros([n,n+<span class="number">1</span>]),dtype = np.int)</span><br><span class="line">	<span class="comment"># 先处理好第一二行</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		x[i,i] = <span class="number">1</span></span><br><span class="line">		y[i,<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		y[i,:] -= x[i,:]</span><br><span class="line">		<span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>): y[i,:] -= x[i<span class="number">-1</span>,:]</span><br><span class="line">		<span class="keyword">if</span>(i+<span class="number">1</span>&lt;n):  y[i,:] -= x[i+<span class="number">1</span>,:]</span><br><span class="line">	<span class="comment"># 第i行由它的前两行决定</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">		last = np.matrix(np.zeros([n,n+<span class="number">1</span>]),dtype = np.int)</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n): last[i,<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">			last[i,:] -= x[i,:]</span><br><span class="line">			last[i,:] -= y[i,:]</span><br><span class="line">			<span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>): last[i,:] -= y[i<span class="number">-1</span>,:]</span><br><span class="line">			<span class="keyword">if</span>(i+<span class="number">1</span>&lt;n):  last[i,:] -= y[i+<span class="number">1</span>,:]</span><br><span class="line">		x = y</span><br><span class="line">		y = last</span><br><span class="line">	<span class="comment"># 此时 x为倒数第二行，y为倒数第一行，根据最后一行灯的情况列方程</span></span><br><span class="line">	A = np.matrix(np.zeros([n,<span class="number">2</span>*n]),dtype = np.int)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">		A[i,i] = A[i,i+n]=<span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span>(i<span class="number">-1</span>&gt;=<span class="number">0</span>): A[i,i<span class="number">-1</span>+n] = <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span>(i+<span class="number">1</span>&lt;n):  A[i,i+<span class="number">1</span>+n] = <span class="number">1</span></span><br><span class="line">	A = A*np.vstack((x,y))</span><br><span class="line">	b = np.matrix(np.ones([n,<span class="number">1</span>]),dtype = np.int)</span><br><span class="line">	ans = np.matrix(np.zeros([n,n]),dtype = np.int)</span><br><span class="line">	x = solvep(A[:,:n],b - A[:,<span class="number">-1</span>]).T</span><br><span class="line">	<span class="comment"># x 是方程的解，也就是首行的点灯情况</span></span><br><span class="line">	cnt = <span class="number">2</span>**(len(x)<span class="number">-1</span>)</span><br><span class="line">	ans = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(cnt):</span><br><span class="line">		<span class="comment"># 这里一定要用copy而不能直接等于</span></span><br><span class="line">		x0 = np.copy(x[<span class="number">0</span>,:]) </span><br><span class="line">		index = <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span>(i):</span><br><span class="line">			index+=<span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span>(i&amp;<span class="number">1</span>): x0+=x[index,:]</span><br><span class="line">			i&gt;&gt;=<span class="number">1</span></span><br><span class="line">		ans.append(lighton(x0&amp;<span class="number">1</span>))</span><br><span class="line">	<span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):  <span class="comment"># n = 19 时方案数 2^16 = 65536，所以会比较慢</span></span><br><span class="line">	n = int(input(<span class="string">'输入n：'</span>)) </span><br><span class="line">	m = light(n)</span><br><span class="line">	print(<span class="string">'方案数：'</span>+str(len(m)))</span><br><span class="line">	print(m)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>没学 Python 之前这个操作我肯定是用 Matlab 做了。</p>
<p>不用 C 是因为操作矩阵的话用 C 还要写矩阵乘法。矩阵加法等操作，代码量大大提升。</p>
<p>不过没想到 Python 代码量也这么大，主要还是问题复杂或者说优化代码不可避免带来代码量的提高</p>
<p>高斯消元法对于行不满秩的情况也太繁琐了吧！怪不得它们都不实现。。。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 将图片换成字符</title>
    <url>/imageToChar/</url>
    <content><![CDATA[<p>我知乎上看到 <a href="https://zhuanlan.zhihu.com/p/126669800" target="_blank" rel="noopener">怎么用 Python 把图片转化为字符？</a> 挺有趣的，自己也尝试了一下，当然他也是参考 <a href="https://github.com/RameshAditya/asciify/blob/master/asciify.py" target="_blank" rel="noopener">这里</a>。</p>
<p>原理就是：将图片（位图）转化成灰度图，即 0~255 的数值，然后将这些数值换成特殊符号（自定义）</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># imageToChar.py 使用说明：</span></span><br><span class="line"><span class="comment"># 把图片(例如xx.png)和这个文件放在同一文件夹中</span></span><br><span class="line"><span class="comment"># 命令行进入上面的文件夹路径输入</span></span><br><span class="line"><span class="comment"># py imageTochar.py xx.png (自选宽度：78，可不填)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">chars = [<span class="string">'z'</span>, <span class="string">'l'</span>, <span class="string">'y'</span>, <span class="string">'#'</span>, <span class="string">'?'</span>, <span class="string">'*'</span>, <span class="string">'+'</span>, <span class="string">';'</span>, <span class="string">':'</span>, <span class="string">','</span>, <span class="string">'.'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resize</span><span class="params">(image, newW)</span>:</span></span><br><span class="line">	(w, h) = image.size</span><br><span class="line">	<span class="comment"># 0.58 大致是单个字符在DOS界面的宽高比</span></span><br><span class="line">	newDim = (newW, int(<span class="number">0.58</span>*h*newW/w))</span><br><span class="line">	newImg = image.resize(newDim)</span><br><span class="line">	<span class="keyword">return</span> newImg</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">garytochar</span><span class="params">(grayImg,newW)</span>:</span></span><br><span class="line">	newPix = [];step=<span class="number">256</span>//len(chars) + <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i,data <span class="keyword">in</span> enumerate(grayImg.getdata()):</span><br><span class="line">		<span class="keyword">if</span>(i%newW == <span class="number">0</span>): newPix.append(<span class="string">'\n'</span>)</span><br><span class="line">		newPix.append(chars[data//step])  <span class="comment">#也可以用 data%len(chars)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">''</span>.join(newPix)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">imagetochar</span><span class="params">(imgPath, newW = <span class="number">78</span>)</span>:</span></span><br><span class="line">	img = Image.open(imgPath)</span><br><span class="line">	newImg = resize(img,newW)</span><br><span class="line">	grayImg = newImg.convert(<span class="string">'L'</span>)</span><br><span class="line">	<span class="keyword">return</span> garytochar(grayImg,newW)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="keyword">import</span> sys</span><br><span class="line">	imgPath, newW, *tmp = sys.argv[<span class="number">1</span>:<span class="number">3</span>]+ [<span class="number">78</span>]</span><br><span class="line">	charPix = imagetochar(imgPath,int(newW))</span><br><span class="line">	print(charPix)</span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">原始图片</th>
<th style="text-align:center">字符图片</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src= "/img/loading.gif" data-lazy-src="dna049.png" alt="dna049"></td>
<td style="text-align:center"><img src= "/img/loading.gif" data-lazy-src="dna049char.png" alt="dna049"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>第$n$个素数</title>
    <url>/nthPrimeNumber/</url>
    <content><![CDATA[<p>很早之前写过 <a href="/computationOfPiX/" title="$\pi(x)$ 的计算">$\pi(x)$ 的计算</a> ，在知乎上用它回答问题的时候，发现我怎么没有写 <strong>求第 $n$ 个素数。</strong></p>
<blockquote>
<p>做法依赖于 $\pi(x)$ 的计算，$\pi(x)$ 表示不超过 $x$ 的素数个数</p>
</blockquote>
<a id="more"></a>
<h2 id="素数定理-这里就不证了"><a href="#素数定理-这里就不证了" class="headerlink" title="素数定理( 这里就不证了)"></a>素数定理( 这里就不证了)</h2><script type="math/tex; mode=display">
\lim _{x \to \infty} \frac{\pi(x)}{x/\ln x} = 1</script><p>从而我们知道：</p>
<script type="math/tex; mode=display">
\lim _{x \to \infty} \frac{p_n}{n \ln n} = 1</script><p>其中，$p_n$ 为第 $n$ 个素数，显然 $p_n$ 是 $\pi(x) = n$ 最小的解。</p>
<h2 id="p-n-求解"><a href="#p-n-求解" class="headerlink" title="$p_n$ 求解"></a>$p_n$ 求解</h2><ul>
<li>预处理小于 $N$ 的素数</li>
<li>初始值 $n\ln n$</li>
<li>牛顿梯度法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e8</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;p[<span class="number">1</span>]=<span class="number">2</span>;isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)   isp[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])  p[++cnt] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>,t=(N<span class="number">-1</span>)/i + <span class="number">1</span>;j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j)&#123;</span><br><span class="line">            isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">8</span>; <span class="comment">// 不能再大了不然内存顶不住了</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>*<span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM+<span class="number">1</span>][M+<span class="number">1</span>],sz[M+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    initprime();</span><br><span class="line">    pi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;++i)&#123;</span><br><span class="line">        pi[i]=pi[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(isp[i])    ++pi[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sz[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=PM;++i)  phi[i][<span class="number">0</span>]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)&#123;</span><br><span class="line">        sz[i]=p[i]*sz[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=PM;++j)&#123;</span><br><span class="line">            phi[j][i]=phi[j][i<span class="number">-1</span>]-phi[j/p[i]][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">primephi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s &lt;= M)  <span class="keyword">return</span> phi[x%sz[s]][s]+(x/sz[s])*phi[sz[s]][s];</span><br><span class="line">    <span class="keyword">if</span>(x/p[s] &lt;= p[s])  <span class="keyword">return</span> primepi(x)-s+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x/p[s]/p[s] &lt;= p[s] &amp;&amp; x&lt;N)&#123;</span><br><span class="line">        <span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">        LL ans = pi[x]-(s2x+s<span class="number">-2</span>)*(s2x-s+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=s2x;++i)&#123;</span><br><span class="line">            ans+=pi[x/p[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> primephi(x,s<span class="number">-1</span>)-primephi(x/p[s],s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> pi[x];</span><br><span class="line">    <span class="keyword">int</span> ps2x = primepi(<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>)));</span><br><span class="line">    <span class="keyword">int</span> ps3x = primepi(<span class="keyword">int</span>(cbrt(x+<span class="number">0.2</span>)));</span><br><span class="line">    LL ans = primephi(x,ps3x) + LL(ps2x+ps3x<span class="number">-2</span>)*(ps2x-ps3x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =ps3x+<span class="number">1</span>,ed = ps2x;i&lt;=ed;++i)&#123;</span><br><span class="line">        ans -= primepi(x/p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(LL n)</span></span>&#123;  <span class="comment">// 可以用概率判别来替换</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> isp[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;p[i]&lt;=n/p[i]&amp;&amp;i&lt;N;++i)&#123; </span><br><span class="line">        <span class="keyword">if</span>(p[i]&amp;&amp;n%p[i]==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primep</span><span class="params">(LL n)</span></span>&#123;    <span class="comment">// Newton 梯度法</span></span><br><span class="line">    <span class="keyword">if</span>(n &lt;= pi[N<span class="number">-1</span>])  <span class="keyword">return</span> p[n];</span><br><span class="line">    LL ans= n*<span class="built_in">log</span>(n), err = <span class="built_in">log</span>(n)/<span class="built_in">log</span>(<span class="number">10</span>);</span><br><span class="line">    LL m = primepi(ans);</span><br><span class="line">    <span class="keyword">while</span>(m&lt;n||m&gt;n+err)&#123;</span><br><span class="line">        ans += (n-m)/(<span class="built_in">log</span>(m)<span class="number">-1</span>)*<span class="built_in">log</span>(m)*<span class="built_in">log</span>(m);</span><br><span class="line">        m = primepi(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span> = m-n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="built_in">step</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(!isprime(ans))    --ans;</span><br><span class="line">        --ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ++ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    LL n;   <span class="comment">// n &lt; N*N </span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n=987654321098 = 9.8*10^11 用时 128s 太慢了。</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;primep(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://primes.utm.edu/nthprime/index.php#nth" target="_blank" rel="noopener">第 $n$ 个素数和 $\pi(x)$ 的网站</a></p>
<p><a href="https://github.com/kimwalisch/primecount" target="_blank" rel="noopener">世界纪录保持者的求法</a></p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>悄悄话</title>
    <url>/scrite/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">math</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="cbb27fdce9c737e991c7ea253bd3df794ec0f5e5be5b95aff59aa58f645bd866"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Encrypt</tag>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器和 Tab 的选择</title>
    <url>/ide/</url>
    <content><![CDATA[<p>由于 Sublime 本身以及插件的下载巨慢无比，并且 Python 插件中对 <code>\r \b</code> 不支持，让我很想转 VSCode</p>
<blockquote>
<p>VSCode + Jupyter Notebook + Sagemath 太快乐了！<br>VSCode 把 Jupyter Notebook 内置了。VSCode 太强了，统一 ide 指日可待(2020/8/21)。</p>
</blockquote>
<a id="more"></a>
<h2 id="IDE：（文本编辑器，代码编辑器，集成开发环境）"><a href="#IDE：（文本编辑器，代码编辑器，集成开发环境）" class="headerlink" title="IDE：（文本编辑器，代码编辑器，集成开发环境）"></a>IDE：（文本编辑器，代码编辑器，集成开发环境）</h2><ul>
<li>2011-2012 学校机房 VC++6.0 写 C ，属实 SB…</li>
<li>2012-now ACM 集训队 Codeblocks 写 C/C++，<del>依旧是写 C/C++ 的首选环境</del> (VScode 无敌)</li>
<li>2013-now MATLAB </li>
<li>2013-now Sublime (打开任何文本文件，编译运行 <code>C++，Python，Latex</code>)，别说了，爱过 0.0</li>
<li>2015-2015 VS 游戏公司实习</li>
<li>2015-2015 vim 配置 ACM/ICPC 区域赛服务器（只记得 <code>i :wq</code> 和 <code>vim.rc</code> 了）</li>
<li>2015-2017 macDown 写 markdown</li>
<li>2020.1-now  Typora 写 markdown (2020/8/6 被 VScode 取代)</li>
<li>2020.3-now VSCode 试图替代 Sublime （done！）</li>
<li>2020.5-now Jupyter Notebook 写 SegaMath 上流！</li>
<li>2020.8.29 使用 Windows Terminal Preview 也太快乐了</li>
</ul>
<blockquote>
<p>从 古董 VC++6.0 到重量级 VS，一直对微软的编辑器有这莫名的反感，但是这次 VSCode 全开源确实做的很不错。（新 Edge 浏览器也很不错，莫非微软变了？）</p>
</blockquote>
<h2 id="Vi-m-VS-Emacs"><a href="#Vi-m-VS-Emacs" class="headerlink" title="Vi(m) VS Emacs"></a>Vi(m) VS Emacs</h2><p>因为没用过 Emacs，<a href="/vimWithLinuxShell/" title="Vim">Vim</a> 只用在无图形界面的系统，例如服务器，所以对此问题无感。搜狐上的一篇 <a href="https://www.sohu.com/a/149343369_487482" target="_blank" rel="noopener">图文</a>挺有意思的。</p>
<h2 id="Tab-VS-Space"><a href="#Tab-VS-Space" class="headerlink" title="Tab VS Space"></a>Tab VS Space</h2><p>之前学 C 的时候默认都是用 tab 缩进，也用 tab 缩进了很多年（C/C++ 本身对缩进就不要求），后来学 Python 的时候，缩进是必要的，并且不允许用 tab 和 space 混合缩进，然后 Python 一群人就说 4 个空格代替 tab 可以使代码变得整体和美观，听起来很不错，但是 tab 党真的受不了！</p>
<blockquote>
<p>tab 设计出来不就是为了美观的缩进吗？ 而且 tab 的姿势很潇洒不觉得吗？</p>
<p>用 tab 缩进，用空格对齐 （前无空格，后无 tab）</p>
</blockquote>
<h2 id="VSCode-配置"><a href="#VSCode-配置" class="headerlink" title="VSCode 配置"></a>VSCode 配置</h2><p>添加： 中文，Font 20（左下角设置），主题（One Monokai Theme）</p>
<p>C/C++，C/C++ Compile Run，Python，Markdown All in One，Latex WorkShop，draw.io</p>
<blockquote>
<p>可以在下面多搞一个 terminal 然后 进入 py 测试</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="vi.jpg" alt="vscode"></p>
<blockquote>
<p>VSCode + WSL 也太快乐了吧</p>
</blockquote>
<h2 id="VSCode-快捷键"><a href="#VSCode-快捷键" class="headerlink" title="VSCode 快捷键"></a>VSCode 快捷键</h2><p>（sublime 完全退役了，爱过）</p>
<ul>
<li><code>shift + alt + f</code> 文件夹查找</li>
<li><code>F12</code> 定义跳转（很多都有）</li>
<li><code>alt + left</code> 回到跳转前的位置</li>
<li><code>F1</code> 无敌的搜索</li>
<li><code>F1</code> 搜索 <code>Clang</code> 配置 <code>C++</code> 代码风格</li>
</ul>
<h2 id="硬件环境（完美搭配）"><a href="#硬件环境（完美搭配）" class="headerlink" title="硬件环境（完美搭配）"></a>硬件环境（完美搭配）</h2><ul>
<li>杂牌组装台式机装 Windows7 + VMware 里装 Ubuntu(Linux 一个流行的发行版) </li>
<li>或者 杂牌组装台式机装 Win10 + WSL（无图形界面，也挺好）</li>
<li>MacBook</li>
<li>ipad pro + pencil</li>
<li>非 iphone</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>转义字符</title>
    <url>/convertChar/</url>
    <content><![CDATA[<p>转义字符在任何一种编程语言中都会提到（正则表达式也是）。写这篇博客的原因是，在 <a href="https://raycoder.me/p/Python-special-characters/" target="_blank" rel="noopener">友链 Ray 的博客</a> 中无意发现：</p>
<blockquote>
<p>Python 自带的 shell 以及 SublimeText3 配置的环境 不支持 <code>\b</code> 和 <code>\r</code></p>
<p>但是 C++ IDE 就支持，例如：Codeblocks</p>
</blockquote>
<a id="more"></a>
<p>以下图表来自 <a href="https://baike.baidu.com/item/转义字符/86397?fr=aladdin" target="_blank" rel="noopener">百度百科</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">转义字符</th>
<th style="text-align:left">意义</th>
<th style="text-align:center">ASCII 码值（十进制）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>\a</code></td>
<td style="text-align:left">响铃(BEL)</td>
<td style="text-align:center">007</td>
</tr>
<tr>
<td style="text-align:left"><code>\b</code></td>
<td style="text-align:left">退格(BS) ，将当前位置移到前一列</td>
<td style="text-align:center">008</td>
</tr>
<tr>
<td style="text-align:left"><code>\f</code></td>
<td style="text-align:left">换页(FF)，将当前位置移到下页开头</td>
<td style="text-align:center">012</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td style="text-align:left">换行(LF) ，将当前位置移到下一行开头</td>
<td style="text-align:center">010</td>
</tr>
<tr>
<td style="text-align:left"><code>\r</code></td>
<td style="text-align:left">回车(CR) ，将当前位置移到本行开头</td>
<td style="text-align:center">013</td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td style="text-align:left">水平制表(HT) （跳到下一个 TAB 位置）</td>
<td style="text-align:center">009</td>
</tr>
<tr>
<td style="text-align:left"><code>\v</code></td>
<td style="text-align:left">垂直制表(VT)</td>
<td style="text-align:center">011</td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td style="text-align:left">代表一个反斜线字符 <code>\</code></td>
<td style="text-align:center">092</td>
</tr>
<tr>
<td style="text-align:left"><code>\’</code></td>
<td style="text-align:left">代表一个单引号（撇号）字符</td>
<td style="text-align:center">039</td>
</tr>
<tr>
<td style="text-align:left"><code>\”</code></td>
<td style="text-align:left">代表一个双引号字符</td>
<td style="text-align:center">034</td>
</tr>
<tr>
<td style="text-align:left"><code>\?</code></td>
<td style="text-align:left">代表一个问号</td>
<td style="text-align:center">063</td>
</tr>
<tr>
<td style="text-align:left"><code>\0</code></td>
<td style="text-align:left">空字符(NUL)</td>
<td style="text-align:center">000</td>
</tr>
<tr>
<td style="text-align:left"><code>\ddd</code></td>
<td style="text-align:left">1 到 3 位八进制数所代表的任意字符</td>
<td style="text-align:center">三位八进制</td>
</tr>
<tr>
<td style="text-align:left"><code>\xhh</code></td>
<td style="text-align:left">十六进制所代表的任意字符</td>
<td style="text-align:center">十六进制</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>注意： 转义字符与操作系统无关！</p>
<p>Python Shell 和无视 <code>\r</code> ,而 <code>\b</code> 会报错。</p>
<p>Sublime 的插件无视 <code>\r</code> ，<code>\b</code> 会被输出为: <code>&lt;0x08&gt;</code></p>
</blockquote>
<p>下面内容摘自<a href="https://baike.baidu.com/item/换行符/1410821?fr=aladdin" target="_blank" rel="noopener">百度百科</a>：</p>
<p>回车 (<code>\r</code>) 本义是光标重新回到本行开头，r 代表 <code>return</code> ，控制字符可以写成 CR，即 <code>Carriage Return</code><br>换行 (<code>\n</code>) 本义是光标往下一行（不一定到下一行行首），n 代表 <code>newline</code>，控制字符可以写成 LF，即 <code>Line Feed</code></p>
<p>在不同的操作系统这几个字符表现不同：<br>比如在 WIN 系统下，这两个字符就是表现的本义，<br>在 UNIX 类系统，换行 <code>\n</code> 就表现为光标下一行并回到行首，<br>在 MAC 上，<code>\r</code> 就表现为回到本行开头并往下一行，至于 ENTER 键的定义是与操作系统有关的。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 自动输入</title>
    <url>/autoInputWithPy/</url>
    <content><![CDATA[<p>在知乎上看到 <a href="https://zhuanlan.zhihu.com/p/115563930" target="_blank" rel="noopener">使用 Python 控制自己的电脑和键盘是一种什么样的体验？</a> 里面介绍的 pyautogui，于是在 <a href="https://pyautogui.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">pyautogui 官网</a> 上查了一下，因为挺有趣的特此记录：</p>
<blockquote>
<p>可以用来写一个 LOL 打人机拿首胜的脚本 0.0</p>
</blockquote>
<a id="more"></a>
<h2 id="安装-pyautogui"><a href="#安装-pyautogui" class="headerlink" title="安装 pyautogui"></a>安装 pyautogui</h2><p> <code>pip install pyautogui -i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<h2 id="持续获取鼠标位置的示例"><a href="#持续获取鼠标位置的示例" class="headerlink" title="持续获取鼠标位置的示例"></a>持续获取鼠标位置的示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># getMousePosition.py</span></span><br><span class="line"><span class="keyword">import</span> pyautogui <span class="keyword">as</span> pg</span><br><span class="line">print(<span class="string">'Press Ctrl+C to quit.'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		x,y = pg.position() </span><br><span class="line">		positionStr = <span class="string">'X: '</span>+str(x).rjust(<span class="number">4</span>)+ <span class="string">' Y: '</span>+str(y).rjust(<span class="number">4</span>)</span><br><span class="line">		print(positionStr, end = <span class="string">''</span>)</span><br><span class="line">		print(<span class="string">'\b'</span>* len(positionStr), end =<span class="string">''</span>, flush = <span class="literal">True</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">	print(<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>退格 <code>\b</code> 也太好玩了</p>
<p>唯一新的东西就是 <code>pg.position()</code> 来获取鼠标位置</p>
</blockquote>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pg <span class="keyword">as</span> pg</span><br><span class="line">pg.PAUSE = <span class="number">1</span> <span class="comment"># 每条语句相隔1s执行</span></span><br><span class="line"><span class="comment"># 鼠标操作</span></span><br><span class="line">pg.move(x,y,duration = num_seconds)   <span class="comment">#相对移动</span></span><br><span class="line">pg.moveTo(x, y, duration=num_seconds) <span class="comment">#数秒内鼠标移动到(x,y)位置</span></span><br><span class="line">pg.click(x=moveToX, y=moveToY, clicks=num_of_clicks, interval=secs_between_clicks, button=<span class="string">'left'</span>) <span class="comment"># 鼠标（默认左键）单击</span></span><br><span class="line">pg.doubleClick(x=moveToX, y=moveToY) <span class="comment"># 鼠标双击（可以用上面的）</span></span><br><span class="line">pg.mouseDown(x=moveToX, y=moveToY, button=<span class="string">'left'</span>) <span class="comment"># 鼠标按住</span></span><br><span class="line">pg.mouseUp(x=moveToX, y=moveToY, button=<span class="string">'left'</span>) <span class="comment">#鼠标抬起 </span></span><br><span class="line">pg.dragTo(x, y, duration=num_seconds) <span class="comment"># 拖拽</span></span><br><span class="line">pg.drag(x,, duration=num_seconds) <span class="comment">#相对拖拽</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 键盘操作</span></span><br><span class="line"><span class="comment"># 切屏</span></span><br><span class="line">pg.keyDown(<span class="string">'alt'</span>)</span><br><span class="line">pg.press(<span class="string">'tab'</span>)</span><br><span class="line">pg.press(<span class="string">'tab'</span>)</span><br><span class="line">pg.keyUp(<span class="string">'alt'</span>)</span><br><span class="line"><span class="comment"># 复制粘贴</span></span><br><span class="line">pg.keyDown(<span class="string">'shift'</span>)</span><br><span class="line">pg.press([<span class="string">'left'</span>]*<span class="number">3</span>)</span><br><span class="line">pg.keyUp(<span class="string">'shift'</span>) </span><br><span class="line">pg.hotkey(<span class="string">'ctrl'</span>,<span class="string">'c'</span>)</span><br><span class="line">pg.hotkey(<span class="string">'ctrl'</span>,<span class="string">'v'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全屏浏览器中 写入 网址并前往</span></span><br><span class="line">pg.moveTo(<span class="number">360</span>,<span class="number">52</span>)</span><br><span class="line">pg.click()</span><br><span class="line">pg.write(<span class="string">'dna049.com'</span>,interval = <span class="number">0.2</span>)</span><br><span class="line">pg.press(<span class="string">'enter'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># messageBox</span></span><br><span class="line">pg.alert(text=<span class="string">''</span>, title=<span class="string">''</span>, button=<span class="string">'OK'</span>) <span class="comment"># 提示消息小窗口</span></span><br><span class="line">pg.confirm(text=<span class="string">''</span>, title=<span class="string">''</span>, buttons=[<span class="string">'OK'</span>, <span class="string">'Cancel'</span>]) <span class="comment"># 选择窗口，返回选择的内容</span></span><br><span class="line">pg.prompt(text=<span class="string">''</span>, title=<span class="string">''</span> , default=<span class="string">''</span>) <span class="comment"># 输入消息窗口</span></span><br><span class="line">pg.password(text=<span class="string">''</span>, title=<span class="string">''</span>, default=<span class="string">''</span>, mask=<span class="string">'*'</span>) <span class="comment"># 输入密码窗口</span></span><br></pre></td></tr></table></figure>
<h2 id="挂机玩-LOL-上述-pyautogui-被弃用了"><a href="#挂机玩-LOL-上述-pyautogui-被弃用了" class="headerlink" title="挂机玩 LOL (上述 pyautogui 被弃用了)"></a>挂机玩 LOL (上述 pyautogui 被弃用了)</h2><p>很遗憾，LOL 拦截了虚拟键盘操作（包括 <code>pyautogui pywin32</code>）</p>
<p><del><strong>按键盒子</strong>貌似可以解决（没试过）。最后我们需要驱动级的模拟按键：<a href="https://github.com/starofrainnight/pywinio" target="_blank" rel="noopener">pywinio</a></del></p>
<blockquote>
<p>键盘操作 <strong>用<code>pip install keyboard</code></strong> ： <a href="https://github.com/boppreh/keyboard" target="_blank" rel="noopener">keyboard 示例</a>。</p>
<p>鼠标操作 <strong>用<code>pip install mouse</code></strong> ： <a href="https://github.com/boppreh/mouse" target="_blank" rel="noopener">mouse 示例</a> </p>
</blockquote>
<p><code>mouse keyboard</code> 两个项目是同一个人创建的，并且带有按键监听功能，持续更新，十分推荐。它的使用 github 上有，直接下面代码也能看懂。</p>
<h3 id="设计者需要考虑"><a href="#设计者需要考虑" class="headerlink" title="设计者需要考虑"></a>设计者需要考虑</h3><ul>
<li>买装备 （装备栏要注意固定）     </li>
<li>选择路线 （上中下随机，根据时间去具体的点）</li>
<li>如何攻击 （乱打）</li>
<li>何时回城 </li>
</ul>
<h3 id="使用者操作步骤"><a href="#使用者操作步骤" class="headerlink" title="使用者操作步骤"></a>使用者操作步骤</h3><ol>
<li>打开英雄联盟 训练模式或简单人机，选好英雄（建议寒冰）</li>
<li>所有的东西恢复默认设置，装备栏<strong>左上角对齐</strong></li>
<li>在命令行执行 <code>py lolAuto.py</code></li>
<li>切到游戏界面</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lolAuto.py</span></span><br><span class="line"><span class="keyword">import</span> keyboard <span class="keyword">as</span> kb </span><br><span class="line"><span class="keyword">import</span> mouse <span class="keyword">as</span> ms</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buyequipment</span><span class="params">(flag = True)</span>:</span></span><br><span class="line">	sleep(<span class="number">1</span>)</span><br><span class="line">	kb.send(<span class="string">'p'</span>)</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line">	<span class="keyword">if</span>(flag):</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">				ms.move(<span class="number">196</span><span class="number">-65</span>*j,<span class="number">695</span><span class="number">-125</span>*i)</span><br><span class="line">				ms.double_click()</span><br><span class="line">				sleep(<span class="number">0.12</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		ms.move(<span class="number">64</span>,<span class="number">192</span>)</span><br><span class="line">		ms.double_click()</span><br><span class="line">		sleep(<span class="number">0.5</span>)</span><br><span class="line">	sleep(<span class="number">0.5</span>)</span><br><span class="line">	kb.send(<span class="string">'p'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">attack</span><span class="params">()</span>:</span></span><br><span class="line">	kb.send(<span class="string">'a'</span>)</span><br><span class="line">	sleep(<span class="number">0.2</span>)</span><br><span class="line">	ms.click()</span><br><span class="line">	sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skill</span><span class="params">()</span>:</span></span><br><span class="line">	kb.send(choice(<span class="string">'qwer'</span>))</span><br><span class="line">	ms.click()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upgradeskill</span><span class="params">()</span>:</span></span><br><span class="line">	kb.press(<span class="string">'ctrl'</span>)</span><br><span class="line">	skill()</span><br><span class="line">	kb.release(<span class="string">'ctrl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">infield</span><span class="params">(road, direc)</span>:</span></span><br><span class="line">	x,y = road[<span class="number">0</span>][direc]</span><br><span class="line">	ms.move(x,y,<span class="literal">True</span>,<span class="number">0.2</span>)</span><br><span class="line">	sleep(<span class="number">0.2</span>)</span><br><span class="line">	ms.click(<span class="string">'right'</span>)</span><br><span class="line">	kb.press(<span class="string">'space'</span>)</span><br><span class="line">	sleep(<span class="number">28</span>)</span><br><span class="line">	<span class="keyword">if</span>(direc != <span class="string">'mid'</span>): sleep(<span class="number">6</span>)</span><br><span class="line">	kb.release(<span class="string">'space'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myexit</span><span class="params">(event)</span>:</span></span><br><span class="line">	<span class="keyword">if</span>(event.name == <span class="string">'k'</span>): os._exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	print(<span class="string">'Welcome lolAuto designed by dna049'</span>)</span><br><span class="line">	print(<span class="string">'请先打开 LOL 进入游戏，恢复默认设置，\n 然后把买装备的界面左上角对齐 \n 再打开次应用'</span>)</span><br><span class="line">	print(<span class="string">'按 k 键 结束！'</span>)</span><br><span class="line">	kb.hook(myexit)</span><br><span class="line">	sleep(<span class="number">10</span>)</span><br><span class="line">	<span class="comment"># road应该随着时间改变的！</span></span><br><span class="line">	road = [&#123;<span class="string">'top'</span>:[<span class="number">1687</span>,<span class="number">857</span>],<span class="string">'mid'</span>:[<span class="number">1776</span>,<span class="number">944</span>],<span class="string">'ad'</span>:[<span class="number">1864</span>,<span class="number">1034</span>]&#125;]</span><br><span class="line">	ms.click(<span class="string">'right'</span>)</span><br><span class="line">	kb.send(<span class="string">'space'</span>)</span><br><span class="line">	ms.move(<span class="number">960</span>,<span class="number">540</span>)</span><br><span class="line">	ms.click(<span class="string">'right'</span>)</span><br><span class="line">	buyequipment(<span class="literal">False</span>)</span><br><span class="line">	sleep(<span class="number">1</span>)</span><br><span class="line">	direc = choice([<span class="string">'top'</span>,<span class="string">'mid'</span>,<span class="string">'ad'</span>])</span><br><span class="line">	infield(road,direc)</span><br><span class="line">	start = timeB = timeE = timeS = datetime.now()</span><br><span class="line">	sleep(<span class="number">50</span>)</span><br><span class="line">	<span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">		kb.press(<span class="string">'space'</span>)</span><br><span class="line">		x = <span class="number">1920</span> + randint(<span class="number">-150</span>,<span class="number">150</span>)</span><br><span class="line">		y = <span class="number">1080</span> + randint(<span class="number">-80</span>,<span class="number">80</span>)</span><br><span class="line">		ms.move(x//<span class="number">2</span>,y//<span class="number">2</span>,<span class="literal">True</span>,<span class="number">0.2</span>)</span><br><span class="line">		sleep(<span class="number">0.2</span>)</span><br><span class="line">		kb.release(<span class="string">'space'</span>)</span><br><span class="line">		attack()</span><br><span class="line">		<span class="keyword">if</span>((datetime.now()-timeS).seconds &gt; <span class="number">5</span>):</span><br><span class="line">			skill()</span><br><span class="line">			timeS = datetime.now()</span><br><span class="line">			sleep(<span class="number">0.5</span>)</span><br><span class="line">		<span class="keyword">if</span>((datetime.now()-timeE).seconds &gt; <span class="number">30</span>):</span><br><span class="line">			upgradeskill();upgradeskill()</span><br><span class="line">			timeE = datetime.now()</span><br><span class="line">			ms.move(road[<span class="number">0</span>][direc][<span class="number">0</span>],road[<span class="number">0</span>][direc][<span class="number">1</span>])</span><br><span class="line">			sleep(<span class="number">0.2</span>)</span><br><span class="line">			ms.click(<span class="string">'right'</span>)</span><br><span class="line">			sleep(<span class="number">4</span>)</span><br><span class="line">		<span class="keyword">if</span>((datetime.now()-timeB).seconds &gt; <span class="number">240</span>):</span><br><span class="line">			kb.send(<span class="string">'s'</span>)</span><br><span class="line">			kb.send(<span class="string">'b'</span>)</span><br><span class="line">			kb.sleep(<span class="number">8</span>)</span><br><span class="line">			buyequipment()</span><br><span class="line">			timeB = datetime.now()</span><br><span class="line">			infield(road,direc)</span><br><span class="line">		sleep(<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">	print(<span class="string">'Bye lolAuto designed by dna049'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为没法知道自己在哪，所以写的很捞。还有就是这是全局的鼠标键盘操作，而不是针对 LOL 的，哎就这样吧。</p>
</blockquote>
<h3 id="pywinio-安装和使用"><a href="#pywinio-安装和使用" class="headerlink" title="pywinio 安装和使用"></a>pywinio 安装和使用</h3><p>由于 pywinio 安装和使用贼搞人，在此写一下教程，先去 <a href="https://github.com/starofrainnight/pywinio" target="_blank" rel="noopener">这里</a> 下载源码，然后解压到：</p>
<p><code>C:\Users\Administrator\AppData\Local\Programs\Python\Python38\Lib\site-packages</code></p>
<p>打开 cmd 进入上述目录，依次安装 <a href="https://github.com/starofrainnight/pywinio/blob/master/requirements_dev.txt" target="_blank" rel="noopener">requirements_dev.txt</a> 中的依赖包，然后 <code>pip install -e ./pywinio-master</code> 就安装成功了。</p>
<p><strong>使用</strong>： 如果是 64 位操作系统（基本都是吧），管理员身份输入：</p>
<p><code>bcdedit.exe /set TESTSIGNING ON</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pywinio</span><br><span class="line">g_winio = pywinio.WinIO()</span><br><span class="line">print(g_winio.get_port_byte(<span class="number">0xA07</span>))</span><br></pre></td></tr></table></figure>
<p>运行上述代码，如果报错，可参考 <a href="https://blog.csdn.net/bkk854762363/article/details/95319962" target="_blank" rel="noopener">这里</a></p>
<blockquote>
<p>好不容易安装好了，然后我也不会用，后来也没用了，辣鸡…</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>堆</title>
    <url>/heapWithPy/</url>
    <content><![CDATA[<p>堆（heap ）是一种经典的数据结构，C++ STL 中优先队列 <code>priority_queue</code> 和 Python 中的 <code>heapq</code> 都是堆的一种实现。这里说明一下堆的原理和 heapq 的使用：</p>
<blockquote>
<p><a href="/stl/" title="在我的这篇博客">在我的这篇博客</a> 中搜索 <code>优先队列</code> 可以看到堆的简单介绍。</p>
</blockquote>
<a id="more"></a>
<h2 id="（最小）堆是满足下面条件的二叉树"><a href="#（最小）堆是满足下面条件的二叉树" class="headerlink" title="（最小）堆是满足下面条件的二叉树"></a>（最小）堆是满足下面条件的二叉树</h2><ul>
<li>父节点小于等于子节点</li>
<li>用列表或者数组保存（这个也不是必须的，但一般都是这样做的）</li>
</ul>
<blockquote>
<p>堆根节点是最小的节点，堆的深度永远是 $O(\log n)$, 即是平衡的</p>
</blockquote>
<h3 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h3><ul>
<li>插入一个元素： 将它放在最后面，向上更新 $O(\log n)$</li>
<li>删除最小的元素： 将最后的元素放在根节点，向下更新 $O(\log n)$</li>
<li>查看最小的元素（根节点）</li>
<li>将一个列表初始化： 将列表从根更新，然后依次递归更新 $O(n)$</li>
</ul>
<blockquote>
<p>从上述操作可知，堆可以用于 <strong>堆排序</strong>，整体复杂度 $O(n \log n)$</p>
</blockquote>
<h3 id="实现一个堆还是挺简单的，不过我们没必要再造轮子了。-下面用例子看一下-Python-堆的使用"><a href="#实现一个堆还是挺简单的，不过我们没必要再造轮子了。-下面用例子看一下-Python-堆的使用" class="headerlink" title="实现一个堆还是挺简单的，不过我们没必要再造轮子了。 下面用例子看一下 Python 堆的使用"></a><strong>实现一个堆还是挺简单的，不过我们没必要再造轮子了。</strong> 下面用例子看一下 Python 堆的使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="comment"># from heapq import *</span></span><br><span class="line">x= list(range(<span class="number">10</span>))</span><br><span class="line">random.shuffle(x)</span><br><span class="line">heapq.heapify(x)</span><br><span class="line">print(x)</span><br><span class="line">heapq.heappop()</span><br><span class="line">heapq.heappush(x,<span class="number">3</span>)</span><br><span class="line">heapq.heapreplace(x,<span class="number">-1</span>)</span><br><span class="line">heapq.heappushpop(x,<span class="number">-2</span>) <span class="comment">#先push后pop，效率自然更快</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>经典组合问题</title>
    <url>/classicalCombination/</url>
    <content><![CDATA[<p>在此记录一些经典的组合问题，方便日后查阅。</p>
<blockquote>
<p>卡特兰数，斯特林数，放球问题</p>
</blockquote>
<a id="more"></a>
<h2 id="卡特兰（Catalan-）数"><a href="#卡特兰（Catalan-）数" class="headerlink" title="卡特兰（Catalan ）数"></a><a href="https://baike.baidu.com/item/卡特兰数/6125746?fr=aladdin" target="_blank" rel="noopener">卡特兰（Catalan ）数</a></h2><p>$n$ 个 0 和 $n$ 个 1 组成的序列中始终要保持 <strong>任意前缀中</strong> 0 的个数不超过 1 的个数的序列个数为 $\frac{1}{n+1} {2n \choose n }$</p>
<blockquote>
<p>这个问题跟括号合理性等一系列问题合理性有关。</p>
</blockquote>
<p>$n$ 个 0 和 $m$ 个 1 组成的序列（$n \leq m$) 保持 <strong>任意前缀中</strong> 0 的个数不超过 1 的个数的序列个数为：</p>
<script type="math/tex; mode=display">
{n+m \choose n} - {n+m \choose n-1}</script><blockquote>
<p>把 0 当 $x$-轴，1 当 $y$-轴，不合理的情况必然经过 $y = x+1$, 在第一次不合理时，后面的路径就开始与 $y = x +1$ 对称，最终结束点为 $(n-1, m+1)$</p>
</blockquote>
<h2 id="斯特林（Stirling）数"><a href="#斯特林（Stirling）数" class="headerlink" title="斯特林（Stirling）数"></a><a href="https://baike.baidu.com/item/斯特林数" target="_blank" rel="noopener">斯特林（Stirling）数</a></h2><p>关于这个问题可以参考 <a href="https://www.cnblogs.com/gzy-cjoier/p/8426987.html" target="_blank" rel="noopener">这篇博客</a></p>
<blockquote>
<p>第一类斯特林数等到以后用到了再写吧</p>
</blockquote>
<p>第二类斯特林数： 将 $n$ 个不同的元素拆分成 $m$ 个非空集合的方案数 $S(n,m)$。显然有递推关系式：</p>
<script type="math/tex; mode=display">
S(n,m) = S(n-1,m-1)+mS(n-1,m)</script><p>又我们知道：</p>
<script type="math/tex; mode=display">
m^n = \sum _{i=0} ^ m S(n,i) \times i! \times {n \choose i}</script><p>将 $n$ 个任意的放在 $m$ 个不同盒子中。右边的枚举非空盒子数量 $i$，$i$ 个盒子因为是不同的所以要乘 $i!$ （不用担心算多了，因为一旦分配好了，盒子本身即使无区别，放了东西就有区别了）<br><a href="/inverseFormulaAndItsMatrixForm/" title="从我的这篇博文">从我的这篇博文</a> 直接可知 (把 $n$ 看作常数）：</p>
<script type="math/tex; mode=display">
S(n,m) m! = \sum_{i=0}^m (-1)^{m-i} {n \choose i} i^n</script><p>改写成大家通常见到的形式也就是：</p>
<script type="math/tex; mode=display">
S(n,m)  = \frac{1}{m!} \sum_{i=0}^m (-1)^{i} {n \choose i} (m-i)^n</script><blockquote>
<p>补充：知乎上 <a href="https://www.zhihu.com/people/hzy-46-50" target="_blank" rel="noopener">Hongzy</a> 写了一篇 <a href="https://zhuanlan.zhihu.com/p/150779987" target="_blank" rel="noopener">斯特林数入门</a> 的文章，写的甚好。</p>
</blockquote>
<h2 id="正整数分拆数"><a href="#正整数分拆数" class="headerlink" title="正整数分拆数"></a>正整数分拆数</h2><p>将正整数 $n$ 拆分成 $m$ 个非负整数之和的方案数 $f(n,m)$：</p>
<script type="math/tex; mode=display">
f(n,m) = \left\{ \begin{array}{lr} 
1 & n=m=1 \\
f(n,n) & n<m \\
1+f(n,n-1) & n=m \\
f(n,m-1)+f(n-m,m) & n>m>1 
\end{array} \right.</script><h2 id="正整数分拆成乘积数"><a href="#正整数分拆成乘积数" class="headerlink" title="正整数分拆成乘积数"></a><a href="https://oeis.org/A001055" target="_blank" rel="noopener">正整数分拆成乘积数</a></h2><p>记 $fcnt(n,m)$ 表示 $n$ 的乘法分解都不超过 $m$ 的数</p>
<script type="math/tex; mode=display">
fcnt(n,m) = \sum_{d|n} [d<=m] fcnt(\frac{n}{d},d)</script><ul>
<li>打表时间复杂度 $O(n^{\frac{5}{2}})$，空间复杂度 $O(n^2)$ 不推荐！</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10004</span>;</span><br><span class="line"><span class="keyword">int</span> fcnt[N][N]; <span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initFcnt</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)  fcnt[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line">		<span class="keyword">int</span> sn = <span class="built_in">sqrt</span>(i+<span class="number">0.2</span>); </span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">1</span>;d&lt;=sn;++d)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i%d) <span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = N<span class="number">-1</span>;j&gt;=d;--j)  fcnt[i][j]+=fcnt[i/d][d];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=N<span class="number">-1</span>;j&gt;=i/d;--j)  fcnt[i][j]+=fcnt[d][i/d];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(sn*sn == i)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j = N<span class="number">-1</span>;j&gt;=sn;--j)  fcnt[i][j]-=fcnt[sn][sn];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFcnt</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(fcnt[<span class="number">1</span>][<span class="number">1</span>] != <span class="number">1</span>) initFcnt();</span><br><span class="line">	<span class="keyword">return</span> fcnt[n][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">		<span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;getFcnt(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>递归（推荐复杂度不好分析）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcnt</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n == <span class="number">1</span>)  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> sn = <span class="built_in">sqrt</span>(n+<span class="number">0.2</span>),ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">1</span>;d&lt;=sn;++d)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%d)  <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(d&lt;=m &amp;&amp; d&gt;<span class="number">1</span>)  ans += fcnt(n/d,d);</span><br><span class="line">		<span class="keyword">if</span>(n/d&lt;=m) ans+= fcnt(d,n/d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(sn*sn == n &amp;&amp; sn&lt;=m) ans-=fcnt(sn,sn);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n=98765432109876 = 9.8*10^13 用时 42s, N 大点，耗时会小点</span></span><br><span class="line">		<span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;fcnt(n,n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="n-个球放在-m-个盒子中"><a href="#n-个球放在-m-个盒子中" class="headerlink" title="$n$ 个球放在 $m$ 个盒子中"></a><a href="https://blog.csdn.net/qq_39942341/article/details/80246780" target="_blank" rel="noopener">$n$ 个球放在 $m$ 个盒子中</a></h2><p>球有相同和不同两种情况，盒子也是，还有盒子能空和不能空，一共八种情况：</p>
<ul>
<li><p>球同，盒同，非空</p>
<p>正整数拆分数之和 $f(n,m) - f(n,m-1)$</p>
</li>
<li><p>球同，盒同，能空</p>
<p>正整数拆分数 $f(n,m)$</p>
</li>
<li><p>球同，盒异，非空</p>
<p>等价于 $x_1 + \cdots + x_m = n$ 的正整数解，插空法知道 $n-1 \choose m-1$</p>
</li>
<li><p>球同，盒异，能空</p>
<p>同上，$n+m-1 \choose m-1$</p>
</li>
<li><p>球异，盒同，非空</p>
<p>第二类斯特林数： $S(n,m)$</p>
</li>
<li><p>球异，盒同，能空</p>
<p>同上， $\sum_{i=1} ^m S(n,i)$</p>
</li>
<li><p>球异，盒异，非空：$m!S(n,m)$</p>
</li>
<li><p>球异，盒异，能空：$m^n$</p>
</li>
</ul>
<h2 id="有限制的线性方程组的解"><a href="#有限制的线性方程组的解" class="headerlink" title="有限制的线性方程组的解"></a>有限制的线性方程组的解</h2><p>$x_1+ \cdots +x_n = m, c_i &lt; x_i \leq d_i$ 的正整数解的个数？（通过平移不妨设 $c_i = 0$）</p>
<h3 id="m-较小时，动态规划直接做复杂度-O-m-2-n"><a href="#m-较小时，动态规划直接做复杂度-O-m-2-n" class="headerlink" title="$m$ 较小时，动态规划直接做复杂度 $O(m^2 n)$"></a>$m$ 较小时，动态规划直接做复杂度 $O(m^2 n)$</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = d[i]; x &gt; c[i]; --x)&#123;</span><br><span class="line">    dp[i][j] += dp[i<span class="number">-1</span>][j-x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="n-较小时，直接暴力做"><a href="#n-较小时，直接暴力做" class="headerlink" title="$n$ 较小时，直接暴力做"></a>$n$ 较小时，直接暴力做</h3><blockquote>
<p>首先化简为求解：$x_1+ \cdots +x_n = m, 0 \leq x_i \leq a_i$ 的正整数解的个数记作 f(n)</p>
</blockquote>
<p>我们先考虑 $n = 2$ 的情形，并且不妨设 $a_1 &lt; a_2$，我们分情况讨论可得</p>
<script type="math/tex; mode=display">
f(2) = \left\{ \begin{array}{ll}
1 + m & m \leq a_1 \\
1 + a_1 & a_1 < m < a_2 \\
\max(1 + a_1 + a_2 - m, 0) & a_2 \leq m 
\end{array} \right.</script><p>记 $g(m, x, y) = \max(0, 1 + \min(m, x) + \min(0, y - m)$ (定义域：$x \leq y$) 则显然此时有（不妨设 $a_{2i + 1} &lt; a_{2i}$）：</p>
<p>$f(1) = 1$, $f(2) = g(m, a_1, a_2)$, $f(3) = \sum_{x_3 = 0}^{\min(k, a_3)} g(k - x_3, a_1, a_2)$, $f(4) = \sum_{x = 0}^m g(x, a_1, a_2) \cdot g(m - x, a_3, a_4)$，可以一致这样搞下去（$n = 5, 6$ 可以依然可以用此方法），但是此时还不如直接用动态规划做法来做。</p>
<h3 id="d-i-c-i-为一个常数时，用包容排斥原理"><a href="#d-i-c-i-为一个常数时，用包容排斥原理" class="headerlink" title="$d_i - c_i$ 为一个常数时，用包容排斥原理"></a>$d_i - c_i$ 为一个常数时，用包容排斥原理</h3><blockquote>
<p>不妨设 $c_i = 0, d_i = k$</p>
</blockquote>
<script type="math/tex; mode=display">
{m-1 \choose n-1} - {n \choose 1} {m-k-1 \choose n-1} + \cdots (-1)^n {n \choose n} {m-nk-1 \choose n-1} = \sum_{i=0} ^ n (-1)^i {n \choose i} {m-ik-1 \choose n-1}</script>]]></content>
      <tags>
        <tag>Math</tag>
        <tag>组合</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 语法糖之防蛀牙</title>
    <url>/syntacticSugar/</url>
    <content><![CDATA[<p>因为 Python 的语法糖，代码简洁优美，越来越喜欢 Python 了。</p>
<blockquote>
<p>人生苦短，请用 Python</p>
</blockquote>
<a id="more"></a>
<ul>
<li>四则运算不会溢出</li>
<li>乘方，排列组合数内置且不会溢出</li>
<li>支持 <code>x,y = y,x</code> 等简单操作</li>
<li>分号可用来分割，实现一行多句</li>
<li>函数返回值可以是元组，列表，甚至是函数</li>
<li>lambda 表达式</li>
<li>列表生成式 ， 三元操作符： <code>[x//2 if x%2 == 0 else x for x in range(10)]</code></li>
<li><code>in,  enumerate</code> 在 <code>for</code>循环中使用</li>
<li>列表，元组反向标号从 <code>-1</code> 开始数，不用担心越界<ul>
<li>字符串的 <code>split</code> 和 <code>join</code> 方法，<code>eval</code> 计算器。</li>
</ul>
</li>
<li><code>map</code> 将一批数据同时用一个函数处理</li>
<li><code>zip</code> 把列表或元组打包</li>
<li><code>argv</code> 直接可用，不用再管 <code>argc</code></li>
<li>函数可变参数 <code>*args</code>（保存元组）, <code>**kwargs</code>（保存字典）</li>
<li><code>yield</code>  和 <code>yield from</code> 做生成器</li>
<li><code>reduce</code> 函数计算列表内全部乘积等（需要 <code>from functools import reduce</code>）。</li>
<li><a href="https://raycoder.me/p/Python-exec/" target="_blank" rel="noopener">exec 函数</a> 执行 Python 文件中的代码。</li>
<li>用 list 当函数参数实现传引用（指针）的功能</li>
<li>装饰器</li>
<li>带 <code>*</code> 赋值： <code>a,*b,c = [1,3,4,5,6,3,6]</code></li>
<li><code>raise ValueError(&#39;error type...&#39;)</code> 处理异常，哈哈</li>
<li>Python 交互界面中：<code>_</code> 返回的是最近一次的值</li>
<li>任意类有 <code>__init__</code> 和 <code>__repr__</code> 方法（不解释了，顾名思义）</li>
<li><a href="https://blog.csdn.net/goodlixueyong/article/details/52589979" target="_blank" rel="noopener">运算符重载</a>，<a href="https://www.yiibai.com/Python/operator-overloading.html#" target="_blank" rel="noopener">运算符重载 2</a> </li>
</ul>
<blockquote>
<p>非语法糖： 生成器表达式中, in 子句在声明时执行, 而条件子句则是在运行时执行</p>
</blockquote>
<h2 id="装饰器示例"><a href="#装饰器示例" class="headerlink" title="装饰器示例"></a>装饰器示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*arg, **kw)</span>:</span></span><br><span class="line">		print(<span class="string">'start %s'</span> %func)</span><br><span class="line">		<span class="keyword">return</span> func(*arg, **kw)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funcA</span><span class="params">(arg)</span>:</span></span><br><span class="line">	print(arg)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funB</span><span class="params">(arg)</span>:</span>   <span class="comment">#注意这里没有@</span></span><br><span class="line">	print(<span class="string">'不带@的装饰器: '</span>,end=<span class="string">''</span>)</span><br><span class="line">	print(arg)</span><br><span class="line"></span><br><span class="line">x = funcA <span class="comment"># 函数也是对象0.0 骚操作</span></span><br><span class="line">x(<span class="string">'xxxxx'</span>)</span><br><span class="line">log(funB(<span class="number">12</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>看 <code>log(funB(12))</code> 就知道了！因为 log 是 return 的是函数 wrapper ，然后 12 就作为 arg 传入了。 </p>
</blockquote>
<h3 id="类中装饰器：-自带-properity-staticmethod-classmethod"><a href="#类中装饰器：-自带-properity-staticmethod-classmethod" class="headerlink" title="类中装饰器： 自带 @properity @staticmethod @classmethod"></a>类中装饰器： 自带 <code>@properity @staticmethod @classmethod</code></h3><h2 id="To-be-Continue"><a href="#To-be-Continue" class="headerlink" title="To be Continue"></a>To be Continue</h2><blockquote>
<p>我始终相信极简的代码，优美的代码才是正确的编程姿势。</p>
</blockquote>
<h3 id="Python-的坑-动态语言火葬场岂是浪得虚名"><a href="#Python-的坑-动态语言火葬场岂是浪得虚名" class="headerlink" title="Python 的坑 :  动态语言火葬场岂是浪得虚名"></a><a href="https://Python-small-examples.readthedocs.io/en/latest/chapters/p08_keng.html" target="_blank" rel="noopener">Python 的坑</a> :  <strong>动态语言火葬场岂是浪得虚名</strong></h3><ul>
<li>列表快速复制是浅复制</li>
<li>注意传列表等同转指针</li>
<li><a href="https://www.cnblogs.com/xueli/p/4952063.html" target="_blank" rel="noopener">深复制和浅复制</a> 一定要细心</li>
<li>list 自带的 copy 是浅 copy</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 计算 LOL 中猫咪状态数</title>
    <url>/catWithPy/</url>
    <content><![CDATA[<p>我们知道在 LOL（英雄联盟）中，猫咪是可以进入队友身体的，如果 LOL 再出 5V5 克隆模式（<del>我猜不可能</del>），如果某一方选了猫咪这个英雄，场面上会有多少种状态呢（不考虑死亡）？</p>
<blockquote>
<p>这个问题在 2019 年 5 月猫咪刚出来的时候就在 <strong>好好做人群</strong> 讨论并给出了结论，只是没写成程序</p>
</blockquote>
<a id="more"></a>
<p>答案是：1296 （可以先拉到最后）</p>
<h2 id="问题数学化"><a href="#问题数学化" class="headerlink" title="问题数学化"></a>问题数学化</h2><p>每只猫可以进入其他猫咪的身体，求（我们更关心 $a_n$）：</p>
<ul>
<li><p>$n$ 只不同的猫咪，会有 $a_n$ 种状态</p>
</li>
<li><p>$n$ 只相同的猫咪，会有 $b_n$ 种状态</p>
</li>
</ul>
<p>我们想要得到 $a_n$ 和 $b_n$ 的表达式或者递推公式，然后写程序求 $a_n, b_n$ </p>
<blockquote>
<p>为了方便，我们约定 $a_0 = b_0 = 1$</p>
</blockquote>
<h2 id="问题求解"><a href="#问题求解" class="headerlink" title="问题求解"></a>问题求解</h2><p>我们可以根据能看到的猫咪数量 $r$ ，来分情况讨论，</p>
<blockquote>
<p>我们先考虑相同猫咪的情况，<del>简单一点</del>  <strong>下面分析全错！！！</strong></p>
</blockquote>
<p>例如，如果 $r=1$，那么其它猫咪都进入了某一只猫咪的身体，有 $b_{n-1}$ 种情况，类似的我们其实可以得到如下公式：</p>
<script type="math/tex; mode=display">
b_n = \sum_{r = 1} ^n \sum _{\begin{array}{c}x_1 + x_2 + \cdots + x_r = n \\ 1 \leq x_1 \leq x_2 \leq \cdots \leq x_r \end{array}} b_{x_1 -1} \cdots b_{x_r -1}</script><blockquote>
<p>$r$ 只可见的猫，分别真实包含了 $x_1, \cdots, x_r$ 只猫，而这 $x_i$ 只猫有一个在最外面，所以它的内部有 $b_{x_i - 1}$ 种可能。</p>
</blockquote>
<p>$b_1 = 1, b_2 = 2$ 是显然的。我们来计算$b_3, b_4, b_5$</p>
<p>$3 = 1+2 = 1 \times 3$，所以 </p>
<script type="math/tex; mode=display">
b_3 = b_2 + b_1 + 1= 4</script><p>$4 = 1+3 = 2+2 = 1+1+2 = 1 \times 4$, 所以</p>
<script type="math/tex; mode=display">
b_4 = b_3 + b_2 + b_1 \times b_1 + b_1 +1 = 9</script><p>类似的对 5 做分解可知：</p>
<script type="math/tex; mode=display">
b_5 = b_4 + b_3 + b_1 \times b_2 + b_2 + b_1 ^2 + b_1 + 1 =20</script><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正整数拆分 n = x_1 + x_2 + ... + x_r, 且 x_i &gt;= low</span></span><br><span class="line"><span class="comment">#low 表示递归的时候最小取值</span></span><br><span class="line"><span class="comment">#ans 保存递归得到的前部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naturalcut</span><span class="params">(n, r, low, ans = [])</span>:</span> </span><br><span class="line">	<span class="keyword">if</span> r &lt;= <span class="number">1</span>: </span><br><span class="line">		<span class="keyword">yield</span> ans+[n]</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(low, <span class="number">1</span> + n//r):</span><br><span class="line">			<span class="keyword">yield</span> <span class="keyword">from</span> naturalcut(n-i, r<span class="number">-1</span>, i, ans +[i])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allcut</span><span class="params">(n)</span>:</span></span><br><span class="line">	b = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		b += list(naturalcut(n,i,<span class="number">1</span>))</span><br><span class="line">	<span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面两个函数和后面代码出现两个类似的函数完全是一致的，只是表现形式不一样</span></span><br><span class="line"><span class="comment"># 上面的简单明了，后面的效率更高一点，所以两个都保存了。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbn</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">1</span>:	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	bn=[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		bn.append(<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> allcut(t):</span><br><span class="line">			product = <span class="number">1</span></span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">				product *= bn[i<span class="number">-1</span>]</span><br><span class="line">			bn[<span class="number">-1</span>] += product</span><br><span class="line">	<span class="keyword">return</span> bn</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,x <span class="keyword">in</span> enumerate(getbn(<span class="number">8</span>)):</span><br><span class="line">    print(str(i)+<span class="string">'只相同猫咪有 '</span>+ str(x)+<span class="string">'种状态'</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们现在考虑不同猫咪的情况</p>
</blockquote>
<p>我们依然根据猫咪在场上的数量 $p_1 + \cdots +p_r$ ，对猫咪进行讨论，则有</p>
<script type="math/tex; mode=display">
a_n = \sum _{r = 1} ^ n \sum _{\begin{array}{c} x_1 p_1 + \cdots + x_r p_r = n \\ 0 < x_1  < \cdots < x_r\end{array}} n! \prod _{i=1}^r  \frac{x_i ^{p_i} a_{x_i -1}^{p_i}}{ (x_i !)^{p_i} p_i!}</script><blockquote>
<p>真实包含了 $x_i$ 只猫的猫有 $p_i$ 只 (这也是为什么$x_i$ 严格递增)，</p>
<p>$x_i^{p_i}$  ：每只猫都要选择一个出来当最外面的猫</p>
<p>$a_{x_i - 1}^{p_i}$ ： 去掉最外面的猫，里面有 $x_i - 1$ 只猫</p>
<p>最后一个式子，经典排位组合问题就不提了。</p>
</blockquote>
<h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正整数拆分 n = x_1p_1 + ... + x_rp_r, 且 low&lt;=x_1&lt;...&lt;x_r</span></span><br><span class="line"><span class="comment">#low 表示递归的时候最小取值</span></span><br><span class="line"><span class="comment">#ans 保存递归得到的前部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naturalcuts</span><span class="params">(n, r, low, ans = [])</span>:</span> </span><br><span class="line">	<span class="keyword">if</span> r == <span class="number">1</span>: </span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n//low):</span><br><span class="line">			<span class="keyword">if</span> n%i == <span class="number">0</span>:	<span class="keyword">yield</span> ans + [(n//i,i)]</span><br><span class="line">	<span class="keyword">elif</span> r &gt;<span class="number">1</span>:</span><br><span class="line">		x = n - r*(r<span class="number">-1</span>)//<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(low, <span class="number">1</span> + x//r):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, x//i - r +<span class="number">2</span>):</span><br><span class="line">				<span class="keyword">yield</span> <span class="keyword">from</span> naturalcuts(n-i*j,r<span class="number">-1</span>,i+<span class="number">1</span>,ans + [(i,j)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allcuts</span><span class="params">(n)</span>:</span></span><br><span class="line">	a = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		a += list(naturalcuts(n,i,<span class="number">1</span>))</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getan</span><span class="params">(n)</span>:</span></span><br><span class="line">	an = [<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		an.append(<span class="number">0</span>)</span><br><span class="line">		factn = math.factorial(t)</span><br><span class="line">		<span class="keyword">for</span> item <span class="keyword">in</span> allcuts(t):</span><br><span class="line">			product = factn</span><br><span class="line">			<span class="keyword">for</span> x,p <span class="keyword">in</span> item:</span><br><span class="line">				product //= math.factorial(x)**p</span><br><span class="line">				product //= math.factorial(p)</span><br><span class="line">				product *= an[x<span class="number">-1</span>]**p</span><br><span class="line">				product *= x**p</span><br><span class="line">			an[<span class="number">-1</span>] += product</span><br><span class="line">	<span class="keyword">return</span> an</span><br><span class="line"></span><br><span class="line">print(getan(<span class="number">10</span>))	<span class="comment">#9只不同猫咪状态数是 100000000（正好一亿）!!! 这也太整了吧</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码能如此简洁多亏了，Python 的这个生成器写法太优美了！！！</p>
</blockquote>
<p>当然了，如果只是 5 只猫咪，那我们其实也可以枚举出所有情况得到 $a_n = 1296, b_n = 20$：</p>
<p><img src= "/img/loading.gif" data-lazy-src="0.png" alt="0"></p>
<h2 id="以下内容更新于-2020-3-17"><a href="#以下内容更新于-2020-3-17" class="headerlink" title="以下内容更新于 2020/3/17"></a>以下内容更新于 2020/3/17</h2><p>在和我大学同学 <strong>祺祺</strong> 讨论之后，他猜测 $a_n = (n+1)^{n-1}$，一开始我是不相信的，不过数据对比之后发现，卧槽，秀啊。所以说明有一种更优美的理解：</p>
<p>假定 LOL 峡谷地图实际上在一只超大的 $0$ 号猫咪肚子里面，那么这些猫咪就构成了以 $0$ 为根的树，我们求得这 $n+1$ 个（有编号）节点无根树个数，然后我们把 $0$ 号节点变成根，就得到了我们所有的状态。</p>
<blockquote>
<p><a href="http://oeis.org/A000273" target="_blank" rel="noopener">$n$ 个节点的无根树个数是 $n^{n-2}$</a>，最早于 A.Cayley 在 1889 年首先公布并证明（现在看来不算严谨的证明），后来有了树的 Prufer 编码，就可以漂亮的解决证明这个问题了。可参考 <a href="http://www.matrix67.com/blog/archives/682" target="_blank" rel="noopener">Matrix67 的博客</a> 或下面说明</p>
</blockquote>
<h3 id="Prufer-编码"><a href="#Prufer-编码" class="headerlink" title="Prufer 编码"></a><a href="https://baike.baidu.com/item/prufer数列/2182091?fr=aladdin" target="_blank" rel="noopener">Prufer 编码</a></h3><p>$n$ 个节点的无根树（也就是简单无向图），可以唯一的给出一个长度为 $n-2$ 的编码，同样每一个长为 $n-2$ 的编码都可以唯一的产生一棵 $n$ 个节点的无根树 （这就证明了上面结论）</p>
<p>给定一颗 $n&gt;2$ 个节点的无根树，每次找出无根树中，度数为 $1$ 的节点中编号最小的节点 $A$，记录节点 $A$ 的邻接点，然后删除节点 $A$ 和它的边。这样一直继续下去，直到只剩下两个节点。</p>
<blockquote>
<p>度数为 $i$ 的节点恰好在 Prufer 编码中出现 $i-1$ 次</p>
</blockquote>
<p>给你一个长度为 $n-2$ 的 Prufer 编码，我们只要找出 <strong>没有在当前编码中最小的</strong> 跟编码中第一个节点相连即可。重复下去即可得到无根树。</p>
<h3 id="后来我发现，我-b-n-算错了！！！，因为很多情况算重复了，为了算-b-n"><a href="#后来我发现，我-b-n-算错了！！！，因为很多情况算重复了，为了算-b-n" class="headerlink" title="后来我发现，我 $b_n$ 算错了！！！，因为很多情况算重复了，为了算 $b_n$"></a>后来我发现，我 $b_n$ 算错了！！！，因为很多情况算重复了，为了算 $b_n$</h3><script type="math/tex; mode=display">
b_n = \sum _{r = 1} ^ n \sum _{\begin{array}{c} x_1 p_1 + \cdots + x_r p_r = n \\ 0 < x_1  < \cdots < x_r\end{array}} \prod_{i = 1} ^ r {b_{x_i - 1}+p_i -1 \choose p_i}</script><p>上述公式包括 <strong>正整数拆分</strong> 和 <strong>给相同的球染色问题</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#正整数拆分 n = x_1p_1 + ... + x_rp_r, 且 low&lt;=x_1&lt;...&lt;x_r</span></span><br><span class="line"><span class="comment">#low 表示递归的时候最小取值</span></span><br><span class="line"><span class="comment">#ans 保存递归得到的前部分</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naturalcuts</span><span class="params">(n, r, low, ans = [])</span>:</span> </span><br><span class="line">	<span class="keyword">if</span> r == <span class="number">1</span>: </span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n//low):</span><br><span class="line">			<span class="keyword">if</span> n%i == <span class="number">0</span>:	<span class="keyword">yield</span> ans + [(n//i,i)]</span><br><span class="line">	<span class="keyword">elif</span> r &gt;<span class="number">1</span>:</span><br><span class="line">		x = n - r*(r<span class="number">-1</span>)//<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(low, <span class="number">1</span> + x//r):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, x//i - r +<span class="number">2</span>):</span><br><span class="line">				<span class="keyword">yield</span> <span class="keyword">from</span> naturalcuts(n-i*j,r<span class="number">-1</span>,i+<span class="number">1</span>,ans + [(i,j)])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">allcuts</span><span class="params">(n)</span>:</span></span><br><span class="line">	a = []</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		a += list(naturalcuts(n,i,<span class="number">1</span>))</span><br><span class="line">	<span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getbn</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> n &lt;= <span class="number">1</span>:	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	bn=[<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1</span>+n):</span><br><span class="line">		bn.append(<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">for</span> item <span class="keyword">in</span> allcuts(t):</span><br><span class="line">			product = <span class="number">1</span></span><br><span class="line">			<span class="keyword">for</span> x,p <span class="keyword">in</span> item:</span><br><span class="line">				product *= math.comb(bn[x<span class="number">-1</span>]+p<span class="number">-1</span>,p)</span><br><span class="line">			bn[<span class="number">-1</span>] += product</span><br><span class="line">	<span class="keyword">return</span> bn</span><br><span class="line"></span><br><span class="line">print(getbn(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://oeis.org/A000081" target="_blank" rel="noopener">这正好是 $n+1$ 个无编号的有根树个数</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Math</tag>
        <tag>LOL</tag>
      </tags>
  </entry>
  <entry>
    <title>输出源代码的 Python 代码</title>
    <url>/printSelfWithPy/</url>
    <content><![CDATA[<p>之前，现在用 Python 写一遍</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">0</span>]) <span class="keyword">as</span> f:</span><br><span class="line">	print(f.read(), end =<span class="string">''</span>)</span><br></pre></td></tr></table></figure>
<p>但是利用传入参数读文件属实耍赖，所以在写一个不用读文件的版本：</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">6</span>))</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">'a = list(range(6))'</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">'print(a[0])'</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="string">'for i in range(6):'</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="string">'    print("a["+str(i)+"] = "+chr(39)+a[i]+chr(39))'</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="string">'for i in range(1,5): print(a[i])'</span></span><br><span class="line">a[<span class="number">5</span>] = <span class="string">'print(a[5], end = "")'</span></span><br><span class="line">print(a[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    print(<span class="string">"a["</span>+str(i)+<span class="string">"] = "</span>+chr(<span class="number">39</span>)+a[i]+chr(<span class="number">39</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>): print(a[i])</span><br><span class="line">print(a[<span class="number">5</span>], end = <span class="string">""</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后一行是因为 Python 默认以 print 回车结尾<br>我无法用 tab 缩进，只能用空格缩进，这是唯一不完美的地方</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Python 写 Windows 关机程序</title>
    <url>/shutdownWithPy/</url>
    <content><![CDATA[<p>用 Python 的 Tkinter GUI 做一让用户输入指定文字（比如叫我爸爸 0.0 哈哈哈），否则关机的程序(只合适 Windows 用户)</p>
<a id="more"></a>
<h2 id="Windows-关机命令-shutdown"><a href="#Windows-关机命令-shutdown" class="headerlink" title="Windows 关机命令 shutdown"></a>Windows 关机命令 shutdown</h2><p>在命令行窗口输入 help shutdown 可以看到详细的参数列表</p>
<h2 id="用-Tkinter-创建出输入框"><a href="#用-Tkinter-创建出输入框" class="headerlink" title="用 Tkinter 创建出输入框"></a>用 Tkinter 创建出输入框</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># baibai.py</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter.simpledialog <span class="keyword">import</span> askstring</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.withdraw() <span class="comment"># 隐藏tkinter的主界面</span></span><br><span class="line">os.system(<span class="string">'shutdown -s -t 30'</span>) <span class="comment"># 30s内关机</span></span><br><span class="line">x, answer = <span class="string">''</span>,<span class="string">'白白是我爸爸'</span></span><br><span class="line">hint = <span class="string">'输入：'</span>+ answer + <span class="string">'，否则在30s内关机！'</span></span><br><span class="line"><span class="keyword">while</span> x != answer:</span><br><span class="line">	x = askstring(<span class="string">'askstring'</span>,hint)</span><br><span class="line"><span class="keyword">if</span>(x == answer):	os.system(<span class="string">'shutdown -a'</span>) <span class="comment"># 用户正确输入了就不关机了</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure>
<h2 id="用-pyinstaller-打包"><a href="#用-pyinstaller-打包" class="headerlink" title="用 pyinstaller 打包"></a>用 pyinstaller 打包</h2><p><code>pyinstaller -F baibai.py -w</code></p>
<p>就可以在 <code>dist</code> 文件夹中找到对应的 exe 文件了。然后发给小伙伴让 Ta 们叫你爸爸 0.0</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>图片转化成位数据</title>
    <url>/imageToByte/</url>
    <content><![CDATA[<h2 id="把图片变成数据"><a href="#把图片变成数据" class="headerlink" title="把图片变成数据"></a>把图片变成数据</h2><p>有时程序需要加载本地图片，然后打包的时候就很不方便，所以 wxPython 支持 img2png.py、img2py.py、img2xpm.py 等工具来支持这种操作，但是我调用的时候一直出错，在网上查了很多方式最后找到了解决方案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># imageToBite.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'dna049.png'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">	bData = base64.b64encode(f.read())</span><br><span class="line">	pData = bData.decode()</span><br><span class="line">	print(pData)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>这段代码就是把图片变成数据 bite。 相应的修改图片就可以换着用了，如果很多就批处理自己照样写。</p>
<p>然后在命令行执行</p>
<p><code>py imageToBite.py &gt; a.txt</code></p>
<p>就可以把数据存下来，然后复制到下面程序的 data 中就行了。</p>
<p><strong>然后在 wxPython 框架下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wx.lib.embeddedimage <span class="keyword">import</span> PyEmbeddedImage</span><br><span class="line">bitmap = PyEmbeddedImage(data).GetBitmap()</span><br></pre></td></tr></table></figure>
<p>就可以咯</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-gui 之 wxPython 做拼图游戏</title>
    <url>/pythonGui/</url>
    <content><![CDATA[<blockquote>
<p>一定要先写逻辑代码，再写用户界面代码</p>
</blockquote>
<h2 id="GUI-的共性"><a href="#GUI-的共性" class="headerlink" title="GUI 的共性"></a>GUI 的共性</h2><blockquote>
<p>好读不好写！！！，因为一看类名函数名就知道每行代码是干嘛的，但是因为大小写还有单词选择可选的很多， 所以一定要配置  <strong>代码补全！！！</strong></p>
</blockquote>
<p>其实任何语言的 GUI 都是类似的，基本就是使用操作系统提供的窗口 API 接口，然后就是时间响应机制，这样就导致了语言特点其实用的特别少，然后真正开发都是使用别人的引擎。</p>
<a id="more"></a>
<p>例如 C++ 开发就会用到 cocos2d， Unity 等（5 年前去游戏公司实习过），还有 MATLAB 的 GUI 开发是真的方便，框架设计特别简单，添加按钮什么的拖拽就可以了，还有就是添加响应函数的时候右键就可以自动帮你定位到要写响应函数的地方，简直就是神器。好了废话不多说了，学习 Python 的 GUI 设计，选的是 wxPython 和 pygame。学习两个库的一些基本操作，然后分别用两种包写拼图游戏。</p>
<h2 id="wxPython-学习"><a href="#wxPython-学习" class="headerlink" title="wxPython 学习"></a>wxPython 学习</h2><p>先用 pip 安装 wxPython</p>
<p><code>pip install wxPython -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</code></p>
<p>wxPython <a href="https://wxPython.org/pages/overview/#hello-world" target="_blank" rel="noopener">官网</a> 给了 hello World 两个简单示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wx; a=wx.App(); wx.Frame(<span class="literal">None</span>, title=<span class="string">"Hello World"</span>).Show(); a.MainLoop()</span><br></pre></td></tr></table></figure>
<p>一行代码做一个 GUI 界面，可能这就叫做人生苦短，请用 Python 吧！</p>
<p>推荐 <a href="http://xoomer.virgilio.it/infinity77/wxPython/Widgets/wx.Bitmap.html#GetSubBitmap" target="_blank" rel="noopener">wxPython 库查阅</a> 和 <a href="https://www.cnblogs.com/ajucs/p/3903690.html" target="_blank" rel="noopener">键盘事件列表</a></p>
<h2 id="pygame-学习"><a href="#pygame-学习" class="headerlink" title="pygame 学习"></a>pygame 学习</h2><p>这一张图就够了感觉！</p>
<p><img src= "/img/loading.gif" data-lazy-src="pygamecheatsheet.png" alt="pygame"></p>
<p>然后还有 <a href="Python_ext pygame.pdf">ppt</a> 以及<a href="pygame_docs.pdf">库查询手册</a> </p>
<h2 id="拼图游戏开始了"><a href="#拼图游戏开始了" class="headerlink" title="拼图游戏开始了"></a>拼图游戏开始了</h2><p>本来是想用 wxPython 和 pygame 两种方式实现同一个拼图游戏，后来 wxPython 的编写（主要是函数查询）把我搞的生无可恋，就不想写 pygame 版本的实现了。下面是源码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># JigsawGame.py writed by dna049 at 2020/2/28  last update: 2020/3/14</span></span><br><span class="line"><span class="comment"># 这是个加注释的版本，有些望文生义的我就不注释了</span></span><br><span class="line"><span class="keyword">import</span> wx</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64 </span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urlrequest 	<span class="comment"># 用于从网上加载图片</span></span><br><span class="line"><span class="keyword">import</span> webbrowser <span class="comment">#打开网页</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk 		<span class="comment"># 用于选择文件夹</span></span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog <span class="comment"># 用于选择文件夹</span></span><br><span class="line"><span class="keyword">from</span> wx.lib.embeddedimage <span class="keyword">import</span> PyEmbeddedImage 	<span class="comment"># 用于把数据变成位图</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JigsawGame</span><span class="params">(wx.Frame)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kw)</span>:</span> <span class="comment">#这个方法只会在最开始调用一次</span></span><br><span class="line">		super(JigsawGame, self).__init__(*args, **kw)</span><br><span class="line">		self.Centre()  	<span class="comment"># 整个窗口出现在屏幕正中心</span></span><br><span class="line">		<span class="comment"># 选择文件</span></span><br><span class="line">		self.fileOpen = <span class="literal">False</span> 	<span class="comment"># 标记是否选择了正确(.png, .jpg, .jpeg, bmp)的文件</span></span><br><span class="line">		self.fileLoad = <span class="literal">False</span> 	<span class="comment"># 标记是否读取了文件(因为只需读取一次)</span></span><br><span class="line">		self.order = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>)] 	<span class="comment"># 0-8这9个位置的初始值都是0-8，后面会变动</span></span><br><span class="line">		self.eB = <span class="number">8</span> 	<span class="comment">#标记空白块的位置，8就是右下角</span></span><br><span class="line">		<span class="comment"># 创建面板（面板上可以放按钮，文本框，静态文本，图层等等东西）</span></span><br><span class="line">		<span class="comment"># style 参数设置是让他可以接收到上下左右键！</span></span><br><span class="line">		self.pnl = wx.Panel(parent = self, style = wx.BORDER_NONE)</span><br><span class="line">		<span class="comment"># 这个就是左下角的欢迎界面，还有字体的设置</span></span><br><span class="line">		welcome = wx.StaticText(self.pnl, pos=(<span class="number">20</span>, <span class="number">521</span>), \</span><br><span class="line">			lAbel = <span class="string">'欢迎来到我的博客:'</span>, \</span><br><span class="line">			style = wx.aligned_RIGHT)</span><br><span class="line">		blog = wx.StaticText(self.pnl, pos = (<span class="number">180</span>, <span class="number">521</span>), \</span><br><span class="line">			lAbel = <span class="string">'dna049.com'</span>)</span><br><span class="line">		blog.SetForegroundColour(<span class="string">'pink'</span>)</span><br><span class="line">		font = blog.GetFont()</span><br><span class="line">		font.PointSize += <span class="number">2</span></span><br><span class="line">		font = font.Bold()</span><br><span class="line">		welcome.SetFont(font)</span><br><span class="line">		blog.SetFont(font)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 这个是操作提示的静态文本</span></span><br><span class="line">		self.hint = wx.StaticText(self.pnl, pos=(<span class="number">710</span>, <span class="number">20</span>), \</span><br><span class="line">			lAbel = <span class="string">'操作：\n\n↑\n← ↓ →\n\n\nW\nA S D'</span>, \</span><br><span class="line">			style = wx.aligned_CENTER)</span><br><span class="line">		self.hint.SetFont(font)</span><br><span class="line">		self.hint.SetForegroundColour(<span class="string">'red'</span>)</span><br><span class="line">		self.hint.Hide()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 一开始的界面中提示按鼠标的静态文本，贼大的那个</span></span><br><span class="line">		self.st = wx.StaticText(self.pnl, pos =(<span class="number">200</span>, <span class="number">200</span>), \</span><br><span class="line">			lAbel = <span class="string">'鼠标点击空白处\n选择一个照片来玩拼图吧'</span>, \</span><br><span class="line">			style = wx.aligned_CENTER)</span><br><span class="line">		font.PointSize += <span class="number">16</span></span><br><span class="line">		self.font = font.Bold()</span><br><span class="line">		self.st.SetFont(self.font)</span><br><span class="line">		self.st.SetForegroundColour(<span class="string">'red'</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 绑定鼠标左键和下面的onleftdown方法</span></span><br><span class="line">		self.pnl.Bind(wx.EVT_LEFT_DOWN, self.onleftdown)</span><br><span class="line">		<span class="comment">#绑定键盘事件和下面的onkeydown方法</span></span><br><span class="line">		self.pnl.Bind(wx.EVT_KEY_DOWN, self.onkeydown)</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">onleftdown</span><span class="params">(self, event)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">not</span> self.fileOpen):</span><br><span class="line">			self.fileName = self.myfile()</span><br><span class="line">			<span class="keyword">if</span> os.path.basename(self.fileName).split(<span class="string">'.'</span>)[<span class="number">-1</span>] <span class="keyword">in</span> [<span class="string">'png'</span>, <span class="string">'jpg'</span>, <span class="string">'jpeg'</span>, <span class="string">'bmp'</span>]:</span><br><span class="line">				self.fileOpen = <span class="literal">True</span></span><br><span class="line">				self.st.Destroy()</span><br><span class="line">				self.run()</span><br><span class="line"></span><br><span class="line">	<span class="comment">#如果已经完成了，那就不让你再玩了，否则就开始按键检测然后还是移动</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">onkeydown</span><span class="params">(self, event)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(self.fileLoad <span class="keyword">and</span> <span class="keyword">not</span> self.isfinish()):</span><br><span class="line">			myKey = [wx.WXK_LEFT, ord(<span class="string">'A'</span>), wx.WXK_RIGHT, ord(<span class="string">'D'</span>), wx.WXK_UP, ord(<span class="string">'W'</span>), wx.WXK_DOWN, ord(<span class="string">'S'</span>)]</span><br><span class="line">			keycode = event.GetKeyCode()</span><br><span class="line">			self.move(myKey.index(keycode)//<span class="number">2</span> <span class="keyword">if</span> (keycode <span class="keyword">in</span> myKey) <span class="keyword">else</span> <span class="number">-1</span>)</span><br><span class="line">		self.pnl.Layout()</span><br><span class="line">		self.isfinish()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 出现让你选择图片的界面，返回文件绝对路径的文件名</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">myfile</span><span class="params">(self)</span>:</span></span><br><span class="line">		chooseFile = tk.Tk()</span><br><span class="line">		chooseFile.withdraw()</span><br><span class="line">		fileName = filedialog.askopenfilename()</span><br><span class="line">		<span class="keyword">return</span> fileName</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 从网上下一个表情包，返回值是位图用来加载</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">onlinefile</span><span class="params">(self)</span>:</span></span><br><span class="line">		url = <span class="string">'https://dna049.com/PythonGui/yes.png'</span></span><br><span class="line">		image = urlrequest.urlopen(url).read()</span><br><span class="line">		bData = base64.b64encode(image)</span><br><span class="line">		pData = bData.decode()</span><br><span class="line">		self.urlYes = PyEmbeddedImage(pData).GetBitmap()</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 把从本地选择出的图片进行调整大小，调整完之后切成3*3的块，然后在画板上画出来</span></span><br><span class="line">		<span class="comment"># 并且进行标记好更新，逻辑代码很短归功于Python的短小精湛！</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">writefile</span><span class="params">(self)</span>:</span></span><br><span class="line">		tmp = wx.Image(self.fileName)</span><br><span class="line">		im = tmp.ConvertToBitmap()</span><br><span class="line">		(sizeW, sizeH) = im.GetSize()</span><br><span class="line">		t = max(<span class="number">0.2</span>, sizeW/<span class="number">720</span>, sizeH/<span class="number">521</span>)+<span class="number">0.02</span></span><br><span class="line">		im = tmp.Scale(int(sizeW/t), int(sizeH/t)).ConvertToBitmap()</span><br><span class="line">		(sizeW, sizeH) = im.GetSize()</span><br><span class="line">		sizeW //= <span class="number">3</span>;sizeH //= <span class="number">3</span></span><br><span class="line">		self.img = []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">			self.img += [im.GetSubBitmap(( (i%<span class="number">3</span>)*sizeW, (i//<span class="number">3</span>)*sizeH, sizeW, sizeH))]</span><br><span class="line">		self.img += [wx.Bitmap.FromRGBA(sizeW, sizeH, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>)]</span><br><span class="line">		self.lastPart = im.GetSubBitmap(( <span class="number">2</span>*sizeW, <span class="number">2</span>*sizeH, sizeW, sizeH))</span><br><span class="line">		ps = [((x%<span class="number">3</span>)*(sizeW +<span class="number">1</span>), (x//<span class="number">3</span>)*(sizeH+<span class="number">1</span>)) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>)]</span><br><span class="line">		self.sbt = [wx.StaticBitmap(self.pnl, bitmap = self.img[i], \</span><br><span class="line">			pos=ps[i], size=(sizeW, sizeH) ) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>)] </span><br><span class="line"></span><br><span class="line">		<span class="comment"># 检测到鼠标左键按下，就开始看文件打开过没有，打开了就无视，没打开就开启文件选择</span></span><br><span class="line">		<span class="comment"># 打开成功之后就把部分提示关闭，然后开始为下一步拼图做准备</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">not</span> self.fileLoad):</span><br><span class="line">			self.fileLoad = <span class="literal">True</span></span><br><span class="line">			self.writefile()</span><br><span class="line">			self.disorder()</span><br><span class="line">			self.pnl.Layout()</span><br><span class="line">			self.hint.Show()</span><br><span class="line">			self.pnl.SetFocus()</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">disorder</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">111</span>): self.move(randint(<span class="number">0</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self, direction)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> direction == <span class="number">0</span>:   self.moveleft()</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="number">1</span>: self.moveright()</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="number">2</span>: self.moveup()</span><br><span class="line">		<span class="keyword">elif</span> direction == <span class="number">3</span>: self.movedown()</span><br><span class="line"></span><br><span class="line">		<span class="comment">#判断是否是合理移动，合理就丢给下面函数更新</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span>	<span class="title">checkmove</span><span class="params">(self, start, end)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(end <span class="keyword">not</span> <span class="keyword">in</span> range(<span class="number">9</span>)):         <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		<span class="keyword">if</span>(start%<span class="number">3</span> == <span class="number">0</span> <span class="keyword">and</span> end%<span class="number">3</span> == <span class="number">2</span>): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		<span class="keyword">if</span>(start%<span class="number">3</span> == <span class="number">2</span> <span class="keyword">and</span> end%<span class="number">3</span> == <span class="number">0</span>): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">moveleft</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(self.checkmove(self.eB, self.eB+<span class="number">1</span>)): self.sbtnew(self.eB, self.eB+<span class="number">1</span>);self.eB+=<span class="number">1</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">moveright</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(self.checkmove(self.eB, self.eB<span class="number">-1</span>)): self.sbtnew(self.eB, self.eB<span class="number">-1</span>);self.eB-=<span class="number">1</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">moveup</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(self.checkmove(self.eB, self.eB+<span class="number">3</span>)): self.sbtnew(self.eB, self.eB+<span class="number">3</span>);self.eB+=<span class="number">3</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">movedown</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span>(self.checkmove(self.eB, self.eB<span class="number">-3</span>)): self.sbtnew(self.eB, self.eB<span class="number">-3</span>);self.eB-=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">		<span class="comment"># 如果操作合理，那就更新每个格子上的图片，并更新order列表</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">sbtnew</span><span class="params">(self, posB, posA)</span>:</span></span><br><span class="line">		(x, y) = self.order[posB],self.order[posA] </span><br><span class="line">		self.order[posB], self.order[posA] = (y, x)</span><br><span class="line">		self.sbt[posB].SetBitmap(self.img[y])</span><br><span class="line">		self.sbt[posA].SetBitmap(self.img[x])</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 每次有按键的时候检测是否拼好了，拼好了就贴上最后一块并把表情包打印出来</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">isfinish</span><span class="params">(self)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> self.order == [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>)]:</span><br><span class="line">			self.sbt[<span class="number">8</span>].SetBitmap(self.lastPart)</span><br><span class="line">			self.onlinefile()</span><br><span class="line">			wx.StaticBitmap(parent = self.pnl, bitmap = self.urlYes, pos=(<span class="number">500</span>, <span class="number">300</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		<span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 程序入口，进入__init__ 函数后，就开始进行鼠标和键盘的监听循环中</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	loveDays = datetime.now() - datetime(<span class="number">2019</span>, <span class="number">10</span>, <span class="number">20</span>) </span><br><span class="line">	app = wx.App()</span><br><span class="line">	<span class="comment"># 创建上面类的对象，标题是喜欢zly妹妹，窗口不允许最大化，也不能调整大小</span></span><br><span class="line">	myGame = JigsawGame(<span class="literal">None</span>, \</span><br><span class="line">		title=<span class="string">'dna049 喜欢zly妹妹的第'</span>+str(loveDays.days)+<span class="string">'天'</span>, \</span><br><span class="line">		size = (<span class="number">800</span>, <span class="number">600</span>), \</span><br><span class="line">		style=wx.DEFAULT_FRAME_STYLE ^ wx.RESIZE_BORDER ^ wx.MAXIMIZE_BOX)</span><br><span class="line">	myGame.Show()</span><br><span class="line">	app.MainLoop()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>wx.EVT_KEY_DOWN 不响应 <code>Tab Enter → ↑ ↓ ←</code></p>
<p>wx.EVT_KEY_UP 响应所有键</p>
<p>wx.EVT_CHAR 仅响应<code>F1 - F12 PrintScreen  ScrollLock PauseBreak</code></p>
<p><strong>wx.Button 和 wx.EVT_KEY_DOWN 等冲突让我懵逼了吐了</strong> </p>
</blockquote>
<h3 id="还是解释一下代码吧"><a href="#还是解释一下代码吧" class="headerlink" title="还是解释一下代码吧"></a>还是解释一下代码吧</h3><ol>
<li>首先创建窗口，窗口名是喜欢 zly 妹妹的第 xxx 天，日常表白 0.0</li>
<li>窗口上放一个面板（panel）然后在上面放很多静态文本，比如我的博客呀，还有操作提示</li>
<li>然后绑定监听鼠标左键，按下了就会让你选择一个文件来玩拼图游戏</li>
<li>然后选择好了图片后，把图片平均切成 <code>3*3</code> 的块，最后一块（右下角)用黑白填充</li>
<li>把这些块打乱，打乱方式是随机的移动（防止随便打乱拼不回去）</li>
<li>监听 键盘 WASD 和上下左右键并写好相应的响应函数</li>
<li>每次接受到监听就检测是否拼好</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 入门</title>
    <url>/pythonLearning/</url>
    <content><![CDATA[<p>在苏铭和蓝莓带领下，最近开始学习 Python，下面是走过的坑，吐槽正式开始</p>
<blockquote>
<p>Python 在代码书写上要求极高，所有很多时候代码复制过来报错。。还有代码区分空格和 Tab</p>
<p>Python 中，对象赋值本质上是对象的引用</p>
<p>不要把 Python 代码写成 C/C++ 的风格！同样 SageMath 的代码也不要迁就 Python</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Python 官网慢的我想吐，几次都没有下下来，最后是在一次中午时分用手机流量定位了下载的地方，然后直接在电脑上手动输入长达 30 字符的网址（带文件名）直接下载，然后网速“飞快”，终于下下来了 26M 的 windows 64 位 Python3.8.2。然后就是用 pip 安装各种包，然后安装的时候真的是一头包，各种报错，各种而且奇慢无比，我吐了。后来终于找到解决方案：引用豆瓣源（其他源也行）。例子如下：</p>
<a id="more"></a>
<p><code>pip install numpy -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</code></p>
<p><code>pip install wxPython -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</code></p>
<p>安装好一些必要的包之后就可以跑程序了。</p>
<blockquote>
<p>pip freeze/list 查看所有安装了的包</p>
</blockquote>
<p><a href="https://pypi.org/" target="_blank" rel="noopener">PyPi</a> ：Python Package Index 查看所有发布的包的索引。</p>
<h2 id="简单的终端-Python-程序示例"><a href="#简单的终端-Python-程序示例" class="headerlink" title="简单的终端 Python 程序示例"></a>简单的终端 Python 程序示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># score.py</span></span><br><span class="line">tmp = input(<span class="string">'苏铭的Python分数：'</span>)</span><br><span class="line"><span class="keyword">if</span> tmp.isdigit():</span><br><span class="line">	score = int(tmp)</span><br><span class="line">	<span class="keyword">if</span> score &gt; <span class="number">100</span>:</span><br><span class="line">	    print(<span class="string">'我信了你的鬼话'</span>)</span><br><span class="line">	<span class="keyword">elif</span> score &gt;=<span class="number">60</span>:</span><br><span class="line">		print(<span class="string">'可以呀苏铭'</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">'菜的呀苏铭'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">'你输入的是什么鬼哦'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="简单的-GUI-Python-程序示例"><a href="#简单的-GUI-Python-程序示例" class="headerlink" title="简单的 GUI Python 程序示例"></a>简单的 GUI Python 程序示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello.py</span></span><br><span class="line"><span class="keyword">import</span>	wx  <span class="comment">#需要安装wxPython包，见上面pip安装</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Frame1</span><span class="params">(wx.Frame)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, superior)</span>:</span></span><br><span class="line">		wx.Frame.__init__(self, parent= superior, title = <span class="string">'Example'</span>,pos = (<span class="number">400</span>,<span class="number">200</span>),size=(<span class="number">350</span>,<span class="number">500</span>))</span><br><span class="line">		panel = wx.Panel(self)</span><br><span class="line">		text1 = wx.TextCtrl(panel,value = <span class="string">'Hello'</span>,pos = (<span class="number">250</span>,<span class="number">300</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	app = wx.App()</span><br><span class="line">	frame = Frame1(<span class="literal">None</span>)</span><br><span class="line">	frame.Show(<span class="literal">True</span>)</span><br><span class="line">	app.MainLoop()</span><br></pre></td></tr></table></figure>
<h2 id="IDE-选择-sublime-大法好-VSCode-无敌"><a href="#IDE-选择-sublime-大法好-VSCode-无敌" class="headerlink" title="IDE 选择(sublime 大法好, VSCode 无敌)"></a>IDE 选择(<del>sublime 大法好</del>, VSCode 无敌)</h2><p>当时我是大 sublime 啊， 百度 sublime+ Python 就可以获得<a href="https://www.cnblogs.com/honkly/p/6599642.html" target="_blank" rel="noopener">完整教程</a> 配置 和 <a href="https://blog.csdn.net/gui951753/article/details/82667860#安装Python3和sublime3" target="_blank" rel="noopener">代码补全</a> 配置，安装 packageControl <strong>网速慢的话可以早上 7 点起来尝试</strong>。(缺点是每次要先 Ctrl+S 保存再 F5 编译，然后下次编译上次的编译窗口不能自己关，我也不知道怎么搞解决这两个问题，可惜！)</p>
<p><code>再也不用担心tab不是tab了！ view ---&gt;  Indentation ---&gt; Convert Indentation to tabs</code></p>
<p><code>多行注释：ctrl + shift + /</code></p>
<blockquote>
<p><strong>一定要配置代码补全!!!, 特别是在用各种包的时候</strong></p>
</blockquote>
<h2 id="入门教程"><a href="#入门教程" class="headerlink" title="入门教程"></a>入门教程</h2><ol>
<li>下载好 Python 后有自带文档</li>
<li><a href="https://www.runoob.com/Python/Python-tutorial.html" target="_blank" rel="noopener">Python 菜鸟教程</a></li>
<li>百度一下，你就知道。不行可以选择 <a href="cn.bing.com">必应</a></li>
<li>网易公开课，我选择的是南京大学的 Python 玩转数据，用手机 app 才能看，建议观看 1-25 集和 43-50 集。 1.5 倍速。</li>
<li>爬虫（下面示例）</li>
<li>Pygame 库的使用（<del>PY 游戏</del>，那也才刺激了吧 0.0）</li>
<li><a href="https://github.com/jackfrued/Python-100-Days" target="_blank" rel="noopener">100 天学会 Python</a></li>
<li><a href="https://github.com/ageitgey/face_recognition" target="_blank" rel="noopener">人脸识别</a></li>
</ol>
<p>基本语法掌握了之后就要掌握类了，Python 的类挺有趣的，哈哈.类中写得变量是类的属性，而每个对象的属性要加 <code>self.</code> 的，然后方法里面的变量是方法内部临时变量。</p>
<h2 id="素数筛"><a href="#素数筛" class="headerlink" title="素数筛"></a>素数筛</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initprime</span><span class="params">(n)</span>:</span></span><br><span class="line">    isp = [x%<span class="number">2</span>==<span class="number">1</span> <span class="keyword">for</span> x  <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">    isp[<span class="number">1</span>] = <span class="literal">False</span>;isp[<span class="number">2</span>]= <span class="literal">True</span></span><br><span class="line">    p = [<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> isp[i]: p.append(i)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> p:</span><br><span class="line">            <span class="keyword">if</span>(i*j&lt;=n):  isp[i*j] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> i%j == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> isp,p</span><br><span class="line"></span><br><span class="line">print(initprime(<span class="number">100008</span>)[<span class="number">-1</span>][<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
<h2 id="爬虫示例"><a href="#爬虫示例" class="headerlink" title="爬虫示例"></a>爬虫示例</h2><p>总结爬虫方法：</p>
<ol>
<li>观察想要想要爬虫的网站中特定数据的网址，用 F12（适用于 Chorme, Edge 等）打开代码检查。找到数据对应的意义和名称</li>
<li>设计流程图和代码框架</li>
<li>Coding</li>
</ol>
<p>本来就不会写，学习了 <a href="https://leetcode-cn.com/circle/article/gy4iKU/" target="_blank" rel="noopener">leetcode</a> 上的代码后，制作了青春（<del>阉割</del>）版的爬取 lol 所有壁纸到当前文件夹的 lolIamge 文件夹中，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> urlrequest</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getimage</span><span class="params">(heroID)</span>:</span></span><br><span class="line">	heroId = str(heroID)</span><br><span class="line">	url = <span class="string">'https://game.gtimg.cn/images/lol/act/img/skin/big'</span> + heroId</span><br><span class="line">	heroDir = <span class="string">r'lolImage\\'</span> + heroId</span><br><span class="line">	<span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(heroDir):	os.mkdir(heroDir)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>): </span><br><span class="line">		heroEnd = <span class="string">'0'</span> + str(i//<span class="number">10</span>) + str(i%<span class="number">10</span>) + <span class="string">'.jpg'</span></span><br><span class="line">		<span class="keyword">try</span>:</span><br><span class="line">			image = urlrequest.urlopen(url + heroEnd).read()</span><br><span class="line">		<span class="keyword">except</span>:	<span class="keyword">break</span></span><br><span class="line">		imageName = heroDir + <span class="string">r'\\'</span> + heroEnd</span><br><span class="line">		<span class="keyword">with</span> open(imageName, <span class="string">'wb'</span>) <span class="keyword">as</span> f:	f.write(image)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'lolImage'</span>):	os.mkdir(<span class="string">'lolImage'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">1000</span>):	getimage(i)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Python 处理字符串的 <code>split</code> 函数强的不行，给爬虫提供了特别便利的条件</p>
</blockquote>
<h2 id="机器学习示例"><a href="#机器学习示例" class="headerlink" title="机器学习示例"></a><a href="# http://open.163.com/newview/movie/free?pid=ME9KEIKS7&amp;mid=MEF16V4ED">机器学习示例</a></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hello ML.py</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree <span class="comment"># https://sklearn.apachecn.org/</span></span><br><span class="line">features = [[<span class="number">140</span>,<span class="number">1</span>], [<span class="number">130</span>,<span class="number">1</span>],[<span class="number">150</span>,<span class="number">0</span>],[<span class="number">170</span>,<span class="number">0</span>]]</span><br><span class="line">lAbels = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf = clf.fit(features,lAbels)</span><br><span class="line">print(clf.predict([[<span class="number">160</span>,<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有需求再去这里学习吧：<a href="https://www.bilibili.com/video/BV164411S78V?from=search&amp;seid=1436888055285204045" target="_blank" rel="noopener">B 站视频</a>，<a href="http://www.ai-start.com/ml2014/html/" target="_blank" rel="noopener">对应笔记</a></p>
</blockquote>
<h2 id="有趣的-Python-特征"><a href="#有趣的-Python-特征" class="headerlink" title="有趣的 Python 特征"></a>有趣的 Python 特征</h2><ul>
<li>内联表达式：[i**2 for i in range(10)]</li>
<li><a href="https://raycoder.me/post/5mrednz2a/" target="_blank" rel="noopener">exec 函数</a> 执行 Python 代码（一般用于文件读取）</li>
<li>元组（tuple）可以做加法和乘法来改变它的值！但是本质上元组的值并没有改变，只是新开了一段连续的内存，然后用刚刚那个指针指向了这段内存！！！所以<strong>元组是不可变的</strong>这句话没毛病</li>
<li>一个元素构成的元组要写成<code>(a,)</code>形式，是因为否则到处都是元组 0.0（因为我们在处理优先级的时候经常加<code>()</code>）</li>
<li>上述说明了为什么内联表达式不支持用 tuple，用的是 list（列表）</li>
<li>生成器可以用 list and tuple，搞完生成器就空了</li>
<li><code>map(func,data)</code> 一次算一堆的值。</li>
<li>Python 中没有<code>++,--</code> 这类自增自减运算</li>
</ul>
<h2 id="打包成可执行文件（-exe）"><a href="#打包成可执行文件（-exe）" class="headerlink" title="打包成可执行文件（.exe）"></a>打包成可执行文件（.exe）</h2><p> 最简单的方法： pip 安装 pyinstaller (借助豆瓣源，见安装段落)，然后执行</p>
<p><code>pyinstaller -F example.py -w</code></p>
<blockquote>
<p>其中 <code>-F</code> 表示单个文件， <code>-w</code> 表示关闭命令行窗口</p>
</blockquote>
<p>问题是，一个几 kb 的 Python 程序，打包就 10M+ 。。。这谁顶得住啊，<a href="https://www.zhihu.com/question/281858271" target="_blank" rel="noopener">解决方案</a> </p>
<blockquote>
<p><a href="https://blog.csdn.net/ZhaDeNianQu/article/details/87717293" target="_blank" rel="noopener">反解析和防止被反解析</a></p>
</blockquote>
<h2 id="datetime-包学习（哈哈哈）"><a href="#datetime-包学习（哈哈哈）" class="headerlink" title="datetime 包学习（哈哈哈）"></a>datetime 包学习（哈哈哈）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line">day = now - datetime.datetime(<span class="number">2019</span>,<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">print(<span class="string">'喜欢茶茶子妹妹的第'</span>+str(day.days)+<span class="string">'天'</span>)</span><br></pre></td></tr></table></figure>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>每个包都有各自的代码规范，使用的时候注意一点可以省很多麻烦。个人比较喜欢的代码规范方式：</p>
<ol>
<li>逗号后面加空格 <code>,</code></li>
<li>类的手写字母大写，例如：<code>class MyHoney():</code></li>
<li>函数或者类的方法全小写</li>
<li>变量或者类中属性首单词字母小写，后面单词首部大写，例如 <code>myName</code></li>
<li>常量全大写</li>
<li>个人不是很喜欢用下划线，不过也是一个不错的选择</li>
<li>函数，类中方法，模块隔行显示</li>
<li>用 tab 缩进，用空格对齐 (强烈抵制用 4 个空格代替 tab！！！)</li>
<li><a href="/syntacticSugar/" title="多用语法糖">多用语法糖</a>
</li>
</ol>
<h2 id="Python-之禅（Zen-of-Python）"><a href="#Python-之禅（Zen-of-Python）" class="headerlink" title="Python 之禅（Zen of Python）"></a>Python 之禅（Zen of Python）</h2><p>在 Python 命令行中输入 <code>import this</code> 就会出现：</p>
<blockquote>
<p>The Zen of Python, by Tim Peters</p>
<p>Beautiful is better than ugly.<br>Explicit is better than implicit.<br>Simple is better than complex.<br>Complex is better than complicated.<br>Flat is better than nested.<br>Sparse is better than dense.<br>Readability counts.<br>Special cases aren’t special enough to break the rules.<br>Although practicality beats purity.<br>Errors should never pass silently.<br>Unless explicitly silenced.<br>In the face of ambiguity, refuse the temptation to guess.<br>There should be one— and preferably only one —obvious way to do it.<br>Although that way may not be obvious at first unless you’re Dutch.<br>Now is better than never.<br>Although never is often better than <em>right</em> now.<br>If the implementation is hard to explain, it’s a bad idea.<br>If the implementation is easy to explain, it may be a good idea.<br>Namespaces are one honking great idea — let’s do more of those!</p>
</blockquote>
<p>就不翻译了，最喜欢的一句:</p>
<p> <strong>Now is better than never although new is often better that <em>right</em> now</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>异或运算及其在 Nim 游戏中的应用</title>
    <url>/xorAndItsApplicationInNimGame/</url>
    <content><![CDATA[<p>异或运算是一种很神奇用途很广的运算. 从性质上, 异或运算作为二元运算, 关于所有非负整数构成一个 Abel 群, 0 作为幺元, 每个元的逆元都是自身(等价于说 $char(N ^ \star,xor)=2$)。</p>
<a id="more"></a>
<h2 id="异或的定义和简单性质"><a href="#异或的定义和简单性质" class="headerlink" title="异或的定义和简单性质"></a>异或的定义和简单性质</h2><p>异或, 英文: exclusive OR, 缩写 xor, 习惯记作 $\wedge$。这个运算 $1\wedge 1=0\wedge 0=0,1\wedge 0=0\wedge 1=1$。 对任意是两个非负整数 $a,b$ 将其写成二进制, 然后各位分别进行异或操作即可. 容易根据上面定义说明之前提到的性质. 下面再介绍一个重要但不是很明显的性质:</p>
<p><strong>引理</strong>: 若 $k=a_1\wedge ⋯\wedge a_n≠0$ 则必然存在 $i$, 使得 $a_i \wedge k&lt;a_i$。<br>证明: 因为 $k \neq 0$, 所以必然记 $k$ 得最高位是第 $t$ 位, 则必然存在 $i$, 使得 $a_i$ 的第 $t$ 为不为 0(否则 $k$ 的第 $t$ 位的 1 咋来的). 那么此时 $a_i \wedge k$ 的第 $t$ 为 0, 前面的位不变, 从而小于 $a_i$。</p>
<h2 id="异或的简单应用"><a href="#异或的简单应用" class="headerlink" title="异或的简单应用"></a>异或的简单应用</h2><p>简单的直接贴代码吧, 不废话.</p>
<h3 id="用异或来改变两个数"><a href="#用异或来改变两个数" class="headerlink" title="用异或来改变两个数"></a>用异或来改变两个数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">swap(UI &amp; a, UI &amp; b)&#123;</span><br><span class="line">	a = a^b;</span><br><span class="line">	b = a^b;</span><br><span class="line">	a = a^b</span><br><span class="line">&#125; <span class="comment">// UI 表示 unsigned int, 写的很骚气.</span></span><br></pre></td></tr></table></figure>
<h3 id="异或找出唯一出现奇数次的数"><a href="#异或找出唯一出现奇数次的数" class="headerlink" title="异或找出唯一出现奇数次的数"></a>异或找出唯一出现奇数次的数</h3><p>把这一堆数全体直接异或即可.</p>
<blockquote>
<p>这个方法可以推广到找出两个只出现奇数次的, 其它出现偶数次的两个数, 方法就是先异或之后的值按照最高位进行标记然后分成两组, 再来一遍.</p>
</blockquote>
<h2 id="Nim-取石子问题"><a href="#Nim-取石子问题" class="headerlink" title="Nim 取石子问题"></a>Nim 取石子问题</h2><p>在 2002 年国家 IO 集训队中张一飞写了<a href="nimGame.pdf">&lt;&lt;由感性认识到理性认识——透析一类搏弈游戏的解答过程&gt;&gt;</a>中明确的表面了这个取 Nim 石子游戏用异或可以完美的解决.</p>
<blockquote>
<p>我把他结果简单表达如下, 并在做一点小小的改变之后得到类似的结果</p>
</blockquote>
<p>游戏规则 1 : 甲乙两人面对若干堆石子，其中每一堆石子的数目任意给定, 两人轮流取走一些石子, 每次至少取一枚石子, 每次只能从某一堆中取, 可以取完, 谁无法取子, 谁就是输家(规则 2 正好相反).</p>
<blockquote>
<p>在规则 1 中张一飞一步一步由浅入深, 从具体例子过度到理性的判断, 最终给出若所有石子数异或结果为 0, 则后手胜, 反之先手胜.</p>
</blockquote>
<p>首先对于此类取石子博弈问题: <strong>必败准则</strong></p>
<blockquote>
<p>必胜局面必然存在一步转化成为一个必负局面;<br>必负局面必然任意一步转化都会成为必胜局面.</p>
</blockquote>
<p>而对于异或也有类似的结果: $k=a_1\wedge  \cdots \wedge a_n$</p>
<blockquote>
<p>若 $k \neq 0$ 由引理知道, 可以减小某个 $a_i$ 使得之后的异或和为 0.<br>若 $k=0$, 则任意改变都会导致异或和不为 0.</p>
</blockquote>
<p>这样操作下去堆数一定在一直减小.<br>对于规则 1: 由于空局面是负局面容易看出, 若异或和为 0 则先手负, 反之先手胜.<br>而对于规则 2, 由于空局面是胜局面,而 1 局面是负局面, 这就有些尴尬了. 并且局面并不能像规则 1 一样进行局面分解, 因此十分麻烦.</p>
<h3 id="规则-2-的感性判断"><a href="#规则-2-的感性判断" class="headerlink" title="规则 2 的感性判断"></a>规则 2 的感性判断</h3><ol>
<li>去掉任意多的 0 和偶数个 1 并不会影响结果(是对的, 但是要分情况推敲一下)</li>
<li>无法根据子局面的胜负来判断总局面的胜负.</li>
<li>负局面的价值远远高于胜局面, $(1),(n,n&gt;1),(1,2n,2n+1)$, 奇数个 1, 偶数个 2 是负局面(用数学归纳法容易证明)</li>
<li>从小的开始枚举, 为被负局面包含的极小局面是胜局面, 被所有胜局面包围的是负局面, 这样可以一直进行下去直到得到我们的结果.</li>
<li>前戏终于结束了, 要来真的了 0.0(好害怕)</li>
</ol>
<h3 id="规则-2-的理性判断"><a href="#规则-2-的理性判断" class="headerlink" title="规则 2 的理性判断"></a>规则 2 的理性判断</h3><p>经过总时长 8 个小时左右的零碎时间思考, 最终给出下面结果:</p>
<ol>
<li>首先我们先剔除所有 0 和偶数个 1 得到新的局面至多有一个 1. 如果为空, 则为胜局面.</li>
<li>对于堆数 $n=1$ 的情形,  $a1=1$ 为负局面, 其它为胜局面.<br>对于堆数 $n&gt;1$ 是若 $a_1\wedge ⋯\wedge a_n=0$ 为负局面, 其它为胜局面.<br><strong>证明</strong>: 首先证明结论对 $n=2$ 是成立, 即 $a_1=a_2$(不可能同时为 1)时是负局面, 因为 $a_1=a_2=2$是负局面, 若 $a_1=a_2&lt;k$ 是负局面, $a_1=a_2 = k$, 则下一步必然是 $(a1,a2)=(m&lt;k,k)$ 为胜局面(若 $m=0,1$ 时显然, 否则下一步 $(a_1=a2)=(m,m)$ 为负局面). 因此结论对 $n=2$ 成立. 现在若结论对于 $n&lt;k$ 成立, 那么由引理若 $a_1\wedge ⋯\wedge a_n=0$ 则下一步必然导致 $a′_1 \wedge ⋯ \wedge a′_n \neq 0$. 若其中某个 $a′_i=0$, 那么由归纳法必然导致结论成立. 那么后手就可以取走一些石子导致 $a′′_1 \wedge ⋯\wedge a′′_n=0$. 另外一出现多于 2 个 1 直接剔除(不会改变异或和的值). 这样下去堆数必然减少, 由归纳法可知结论成立.</li>
</ol>
<p>例如<code>1∧3∧5∧7=0</code> 从而可以判断这是一个负局面.(可以简单试试这个策略玩一玩这个游戏)</p>
<blockquote>
<p>感谢张一飞的论文, 感谢 FDU 高数杭老师提供题目, 感谢蔡学弟把问题分享给我。感谢网友批评指正。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Matsumura《Commutative Algebra》读书笔记</title>
    <url>/commutativeAlgebraByMatsumura/</url>
    <content><![CDATA[<p>在学习非交换环论的过程中, 发现交换环有些东西依然没搞清楚, 复习一下, 顺便再理一理 Matsumura 这本言简意赅的《Commutative Algebra》. 以下环都是指 <strong>含幺交换环(commutative ring with identity)</strong></p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>可以说书中没一句废话, 开头直接给出下面概念, 并且叙述一些常见等价刻画: </p>
<ol>
<li><p>理想的 radical 的定义</p>
</li>
<li><p>prime ideal 的(等价)定义</p>
</li>
<li><p>primary ideal 的定义, 说明 primary ideal 的 radical 是 prime ideal (反之不尽然), 并给出一个理想成为 primary ideal 的充分条件: 包含某个极大理想的某次幂.</p>
</li>
<li><p>定义了环 $A$ 上的 Zariski 拓扑(素谱) $Spec(A)$, 极大谱 $\Omega(A)$, 包含某个集合的素理想全体构成闭集(容易验证确实构成拓扑空间), 给出素谱的基本开邻域基. 由于每个理想都包含在某个极大理想中, 极大理想都是素的, 因此 $Spec(A) = \emptyset \Leftrightarrow A = 0$, 也就是说 $Spec$ 的定义是没有毛病的. $Spec(A)$ 连通当且仅当 $A$ 中无非平凡幂等元.</p>
<script type="math/tex; mode=display">
V(I) = V(J) \Longleftrightarrow \sqrt{I} = \sqrt{J}</script></li>
<li><p>说明环之间的同态映射 $f: A \to B$ 可以诱导 $Spec(B) \to Spec(A)$ 之间的连续映射, 也就是说 $Spec$ 定义了一个环范畴到拓扑空间范畴的一个逆变函子.</p>
</li>
<li><p>给出了一个关于素理想并的常见引理: 一个理想包含在最多两个不是素理想的理想的并中, 则它必然包含在其中一个理想中. 当然这也说明了任意两个真理想的并不会是整个环.</p>
</li>
<li><p>给出了两个理想互素的定义(和为整个环), 并说明此时它们的积等于交. 证明用到 $(I+J)(I \cap J) \subset IJ$.</p>
</li>
<li><p>定义乘闭子集 $S$ 准备做局部化, 应用 Zorn 引理说明与 $S$ 不相交的理想中任意极大元都是素理想, 由此可以证明: $A$ 中幂零元全体 $nil(A)$ 是 $A$ 中所有素理想的交, 也等于 $A$ 中所有极小素理想的交. 再由此结论, 可以说明每个理想 $I$ 的 radical: $\sqrt{I}$ 是所有包含 $I$ 的素理想的交.</p>
</li>
<li><p>定义环 $A$ 在 $S$ 处的局部化 $S^{-1}A$. $S^{-1}A = 0 \Leftrightarrow 0 \in S$. 并且我们有自然映射 $\phi : A \to S^{-1}A, \quad a \mapsto a/1$, 它满足泛性质: 若 $f: A \to B$ 是环同态, 且 $f(S)$ 均为 $B$ 中可逆元, 那么有 $g: S^{-1}A \to B$ 使得 $f = g \phi$</p>
</li>
<li><p>$A$ 中与 $S$ 不交的理想(素, 准素)和 $S^{-1}A$ 中的理想(素, 准素)有保序一一对应.</p>
</li>
<li><p>类似于环, 可以对模 $M$ 作局部化$S^{-1}M \simeq S^{-1}A \otimes M$, 这个同构可以由两个自然的合理的互逆映射给出. 并且我们还有同构 $S^{-1}(M \otimes N) = S^{-1} M \otimes S^{-1}N$. 由于张量函子右正合, 用定义可以证明 $S^{-1}A \otimes -$ 是正合函子. 也就是说 $S^{-1}A$ 是平坦 $A$-模.</p>
</li>
<li><p>给出有限表示(finite presentation)的定义: 即一个有限生成模, 且其生成关系也是有限生成的. 等价于说有正合列: $A^m \to A^n \to M \to 0$ 此时我们有:</p>
<script type="math/tex; mode=display">
S^{-1}(\hom(M,N)) \simeq \hom(S^{-1}M, S^{-1}N)</script><p>证明的关键在于对于自由模$M=A^n$时有上述自然同构, 再由有限表示, 应用 five lemma 证明上式.</p>
</li>
<li><p><strong>局部整体关系</strong> $M \to \prod_{\max p} M_{p}$ 是单的. 其中 $M_{p} = (A - p)^{-1} M$. 证明应用定义说明 $Ann(x) = A$ 即可.</p>
</li>
<li><p><strong>整环的特殊情形</strong> 当 $A$ 为整环时, $A$ 在任意乘闭子集处的局部化都可以看做它的分式域的子环, 实际上我们有</p>
<script type="math/tex; mode=display">
A = \bigcap_{\max p} A_{p}</script><p>证明类似整数作有理数. 定义 $D = \lbrace a \in A \mid ax \in A \rbrace$ 说明若 $x \notin A$ 可知 $D \subset A$ (真包含), 因此 $D$ 在某个极大理想 $P$ 中, 可推出 $x \notin A_{P}$.</p>
</li>
<li><p>我们有自然的同构 $A/I \otimes M \simeq M/IM$, 同构可由正合列 $0 \to I \to A \to A/I \to 0$, 用 $- \otimes M$ 作用上去, 再由定义有 $I \otimes M \to IM$ 的自然满同态( $M$ 平坦时可以说明是同构), 得到正合列: $0 \to IM  \to M \to A/I \otimes M \to 0$<br>特别地, 我们有: $S^{-1}(A/I) = S^{-1}A / I(S^{-1}A)$</p>
</li>
<li><p><strong>Jacobson radical</strong>: $rad(A) = \lbrace x \mid 1+xy \in U(A) \rbrace$ 为所有极大理想的交.</p>
</li>
<li><p><strong>局部环</strong>: 若环 $A$ 只有一个极大素理想 $\mathfrak{m}$, 则称 $A$ 为局部环, $A/\mathfrak{m}$ 称为 $A$ 的 residue field.<br>局部环之所以重要是因为, 任意环 $A$ 在素理想 $p$ 处作局部化都是一个局部环 $A_p$. 此时 $A_p$ 的 residue field 记作 $k(p)$. 它恰好是整环 $A/p$ 的分式域 $K(A/p)$. 由 $A \to A/p$ 到 $A_p \to K(A/p)$ 因此, 我们有 $k(p) \simeq K(A/p)$</p>
</li>
<li><p><strong>局部映射</strong>: 若环 $(A, \mathfrak{m}, k)$ 和 $(A’, \mathfrak{m}’, k’)$ 为局部环, 且有环同态 $\phi: A \to A’$ 使得 $\phi(\mathfrak{m}) \subseteq \mathfrak{m}’$, 则称为局部映射, 此时 $\phi$ 自然诱导了环同态 $k \to k’$.<br>现在对任意环同态 $\phi: A \to B$, 考虑连续映射</p>
<script type="math/tex; mode=display">
\hat{\phi}: Spec(B) \to Spec(A), \quad P \to \phi^{-1}(P) = P \cap A = p</script><p>此时 $\phi(A-p) \subseteq B-P$, 即 $\phi$ 诱导了局部映射 $\phi_P: A_p \to B_P$.</p>
</li>
<li><p><strong>半局部环</strong> 若环 $A$ 只有有限个极大理想 $\mathfrak{m}_1, \mathfrak{m}_2, \cdots , \mathfrak{m}_r$, 则称 $A$ 为半局部环(semilocal ring).<br>由于不同极大理想必然互素, 因此</p>
<script type="math/tex; mode=display">
rad(A) = \mathfrak{m}_1 \cap \cdots \cap \mathfrak{m}_r = \prod \mathfrak{m}_i</script></li>
<li><p><strong>NAK lemma</strong> 设 $I$ 是环 $A$ 的理想, $M$ 是有限生成(f.g.) $A$-模. 若 $IM = M$, 则存在 $t \in I$ 使得 $(1+t)M = 0$, 特别地, 若还有 $I \subseteq rad(A)$, 则 $M=0$.<br><strong>Proof</strong>: 设 $M=Am_1 + \cdots + Am_s$, 对 $s$ 数学归纳, $s=0$ 时, 结论显然, 设 $M’ = M / Am_s$, 则由归纳假设, $\exists x \in I$ 使得 $(1+x)M’=0$, 即 $(1+x)M \subseteq Aw_s$, 由于 $M = IM$, 我们有 $(1+x)M = I(1+x)M \subseteq I(Aw_s) = Iw_s$, 因此存在 $y \in I$ 使得 $(1+x)w_s = yw_s$. 所以<br>$(1+x-y)(1+x)M = 0$, $t = x-y+x+(x-y)x$ 即为所求.<br><strong>NAK lemma</strong> 常用如下应用形式: $I$ 为环 $A$ 的理想, $N \subset M$ 为 $A$-模, 若 $M = N + IM$, 且 $I$ 幂零或 $M$ 有限生成, 则 $M=N$.</p>
</li>
</ol>
<blockquote>
<p>不要以为有限生成, 理想幂零, 环是整环或者 reduced 条件很苛刻, 其实实际碰到的也都是这些环, 主要问题在于有没有丰富的结果, 这些条件在何时发挥着作用. 有限生成可以用数学归纳, 幂零理想可以用于幂次和根理想.</p>
</blockquote>
<ol>
<li>给定局部环 $(A, \mathfrak{m},k)$ , $M$ 是 $A$-模, 若 $\mathfrak{m}$ 幂零(例如 $A$ 是 Artinian)或者 $M$ 有限生成, 则 $M$ 的子集 $G$ 生成 $M$, 当且仅当它在 $M/\mathfrak{m}M = M \otimes k$ 下像 $\bar{G}$ 生成 $M \otimes k$.</li>
</ol>
<blockquote>
<p>由于 $M \otimes k$ 是域 $k$ 上的向量空间, 因此它的一组基提升之后就能生成 $M$, 但是一般地并不能保证这些生成元线性无关.</p>
</blockquote>
<ol>
<li><p>$M$-regular: $a \in A$ 称为 $M$-regular, 若 $0 \to M \xrightarrow{a} M$, 显然, $M$-regular 元全体构成了一个乘闭子集. 设 $S_0$ 为 $A$-regular 元全体, 则 $S_0^{-1}A$ 称为 $A$ 的 total quotient ring. 此时 $\phi: A \to S_0^{-1} A$ 是环单同态.</p>
</li>
<li><p>若 $M$ 是 Noetherian 环 $A$ 上有限生成模,那么我们有投射表示:</p>
<script type="math/tex; mode=display">
\cdots \to X_i \to X_{i+1} \to \cdots X_0 \to M \to 0</script><p>其中 $X_i$ 为有限自由 $A$-模, 特别地, 此时 $M$ 是有限表示(finite presentation). 此时多项式环 $A[x_1, \cdots, x_n]$ 也是 Noetherian, 类似的形式幂级数环 $A[[x_1, \cdots, x_n]]$ 也是 Noetherian, $A$ 上的有限维代数也是 Noetherian.</p>
</li>
</ol>
<blockquote>
<p>任意环中, 理想链的长度不低于极大理想的个数.</p>
</blockquote>
<ol>
<li><p>环 $A$ 是 Artinian, 当且仅当它作为 $A$-模是有限长的, 当且仅当它是 Noetherian, 并且它的素理想都是极大的.</p>
</li>
<li><p>设 $\mathfrak{a}$ 是环 $A$ 的理想, $b \in A$, 若 $\mathfrak{a} + bA$ 和 $\mathfrak{a}:bA$ 都有限生成, 则 $\mathfrak{a}$ 有限生成.<br><strong>Proof</strong>: 设 $a_i \in \mathfrak{a},\quad b_j \in A$ 使得 $\mathfrak{a} + bA = \sum a_iA + bA$ 且 $\mathfrak{a} : bA = \sum c_j A$. 设 $\mathfrak{a}’ = \sum a_iA + \sum bc_j A \subseteq \mathfrak{a}$. 对任意 $a \in \mathfrak{a}$, 我们有 $a \in \mathfrak{a}’ + bA$, 即 $a \equiv rb \mod \mathfrak{a}’$. 因此 $rb \in \mathfrak{a}$. 即 $r \in \mathfrak{a}: bA$, $rb \in \mathfrak{a}’$, 因此 $a \in \mathfrak{a}’$, 即 $\mathfrak{a} = \mathfrak{a}’$.</p>
</li>
<li><p>(Cohen)环 $A$ 是 Noetherian, 当且仅当它的每个素理想都是有限生成的.<br><strong>Proof</strong>: 记 $A$ 中所有非有限生成理想构成的集合为 $F$, 取 $F$ 中极大元 $\mathfrak{a}$ (Zorn 引理保证可行性), 那么由条件知道 $\mathfrak{a}$ 不是素理想, 因此存在 $a,b \in A$, 使得 $a, b \notin \mathfrak{a}$ 且 $ab \in \mathfrak{a}$. 又因为 $\mathfrak{a}$ 的极大性知: $\mathfrak{a}+bA$ 和 $\mathfrak{a}:bA$ 有限生成, 所以 $\mathfrak{a}$ 有限生成, 所以 $F = \emptyset$.</p>
</li>
<li><p>定义 $Supp(M) = \lbrace p \in Spec(A) \mid M_p \neq  0 \rbrace$. 若 $M$ 有限生成, 则 $Supp(M) = V(Ann(M))$. 此时 $Supp(M)$ 就是零化 $M$ 的理想的闭包, 没毛病, 完美.</p>
</li>
</ol>
<h2 id="平坦性-Flatness"><a href="#平坦性-Flatness" class="headerlink" title="平坦性(Flatness)"></a>平坦性(Flatness)</h2><p>设 $S: \quad \cdots \to N  \to N’ \to N’’ \to \cdots$ 是任意 $A$-模序列.<br>称 $A$-模 $M$ 是平坦的, 如果 $S$ 正合, 则 $S \otimes M$ 正合.<br>称 $M$ 忠实平坦的(faithful flat), 如果 $S$ 正合当且仅当 $S \otimes M$ 正合.<br>例子: 投射模是平坦的, 自由模是忠实平坦的.</p>
<h4 id="平坦模的等价刻画"><a href="#平坦模的等价刻画" class="headerlink" title="平坦模的等价刻画"></a>平坦模的等价刻画</h4><ol>
<li>$M$ 是平坦的.</li>
<li>若 $0 \to N \to N’$ exact, 则 $0 \to N \otimes M \to N’ \otimes M$ exact.</li>
<li>对任意(有限生成)理想 $I$, $0 \to I \otimes M \to M$ exact. 即 $I \otimes M \simeq IM$.</li>
<li>$Tor_1 ^A(M,A/I) = 0$ 对任意(有限生成)理想 $I$ 成立.</li>
<li>$Tor_1 ^A(M,N) = 0$ 对任意(有限生成)模 $N$ 成立.</li>
<li>若 $\sum a_i x_i = 0$, 则存在 $b_{ij} \in A, y_j \in M$ 使得 $\sum a_i b_{ij} = 0$ 且 $x_i = \sum b_{ij}y_j$.</li>
</ol>
<h4 id="平坦模的基本性质"><a href="#平坦模的基本性质" class="headerlink" title="平坦模的基本性质"></a>平坦模的基本性质</h4><p><strong>Transitivity</strong>: 设 $\phi: A \to B$ 是平坦环同态(即 $B$ 看做 $A$-模是平坦的), 那么平坦 $B$-模 $N$ 也是平坦 $A$-模. (直接用定义证明即可)</p>
<p><strong>Change of base</strong>: 设 $\phi: A \to B$ 是环同态, 若 $M$ 是平坦 $A$-模, 则 $M \otimes B$ 是平坦 $B$-模.</p>
<p><strong>Localization</strong>: $S^{-1}A$ 是平坦 $A$-模. (直接用元素定义可证)</p>
<p><strong>Tor 函子和张量函子交换</strong>: 设 $\phi: A \to B$ 是平坦同态, $M,N$ 是 $A$-模, 则有</p>
<script type="math/tex; mode=display">
Tor_i ^A(M,N) \otimes _A B = Tor_i ^B(M \otimes_A B,N \otimes_A B)</script><p>当 $A$ Noetherian 且 $M$ 有限生成, 则</p>
<script type="math/tex; mode=display">
Ext_i ^A(M,N) \otimes _A B = Ext_i ^B(M \otimes_A B,N \otimes_A B)</script><p><strong>Proof</strong>: 给定 $M$ 的一个投射(自由)表示: $\cdots \to X_1 \to X_0 \to M \to 0$. 由于 $B_A$ 平坦, 我们得到 $M \otimes_A B$ 的投射表示: $\cdots \to X_1 \otimes_A B  \to X_0 \otimes_A B \to M \otimes_A B \to 0$. 因此我们有:</p>
<script type="math/tex; mode=display">
Tor_i ^B(M \otimes_A B,N \otimes_A B) = H_i(X. \otimes_A N \otimes_A B) = H_i(X. \otimes_A N)\otimes_A B = Tor_i ^A(M,N) \otimes _A B</script><p>当 $A$ Noetherian 且 $M$ 有限生成时, 我们可以给 $M$ 的一个有限自由表示, 再由 $B$ 平坦得到了, $M \otimes _A B$的有限自由表示:<br>$\cdots \to X_1 \otimes_A B \to X_0 \otimes_A B \to M \otimes_A B \to 0$ 由此得到复形:</p>
<script type="math/tex; mode=display">
0 \to \hom_B(M \otimes _A B, N \otimes _A B) \to  \hom_B(X_0 \otimes _A B, N \otimes _A B) \to \hom_B(X_1 \otimes _A B, N \otimes _A B) \to \cdots</script><p>由于 $X_i$ 是有限自由模, 因此 $\hom_B(X_i \otimes B, N \otimes B) = \hom_A(X_i, N) \otimes _A B$. 所以</p>
<script type="math/tex; mode=display">
Ext_i ^B(M \otimes_A B,N \otimes_A B) = H_i(\hom_A(X_i, N) \otimes _A B) = H_i(\hom_A(X_i, N)) \otimes _A B = Ext_i ^A(M,N) \otimes _A B</script><blockquote>
<p>特别地, 去 $B = S^{-1}A$.</p>
</blockquote>
<p>设 $M$ 是平坦 $A$-模, 则 $A$-regular 元都是 $M$-regular 元. 这只因为 $0 \to A \xrightarrow{a} A$ 可推出 $0 \to M \xrightarrow{a}M$.</p>
<h4 id="局部环上有限生成模是自由模"><a href="#局部环上有限生成模是自由模" class="headerlink" title="局部环上有限生成模是自由模"></a>局部环上有限生成模是自由模</h4><p>$(A,\mathfrak{m},k)$ 是局部环, $M$ 是平坦 $A$-模, 若 $\mathfrak{m}$ 幂零或 $M$ 有限生成, 则 $M$ 是自由模.<br>在<strong>基本概念 21</strong>中, $G$ 生成了 $M$, 如果 $G$ 中元素线性无关, 那么 $G$ 自然就是 $M$ 的一组基(从而是自由模), 也就是说, 我们只需证明 $G =\lbrace x_1 \cdots x_n \rbrace$在 $M/mM = M \otimes k$下的象线性无关, 则由 $G$ 线性无关. 而<strong>$\mathfrak{m}$ 幂零或 $M$ 有限生成</strong>这个条件本质上是保证 $M/mM \neq 0$ (由 NAK lemma). 然后对 $n$ 应用数学归纳, 并利用 <strong>平坦模等价刻画 6</strong> 说明线性无关性. 从而命题得证.</p>
<blockquote>
<p>局部环上的投射模都是自由模</p>
</blockquote>
<h4 id="平坦模"><a href="#平坦模" class="headerlink" title="平坦模"></a>平坦模</h4><p>设 $A \to B$ 是平坦同态, 设 $I,J$ 是 $A$ 是理想, 则</p>
<ol>
<li>$(I \cap J)B = IB \cap JB$ </li>
<li>$(I : J)B = IB : JB$, 其中$J$是有限生成的.</li>
</ol>
<p><strong>Proof</strong>: 由正合列: $0 \to I \cap J \to A \to A/I \otimes A/J$, 张量上 $B$得到 $0 \to (I \cap J)B \to B \to B/IB \otimes B/JB$. 因此 $(I \cap J)B = IB \cap JB$.<br>当 $J$ 有限生成时, 只需证明 $J = aA$ 的形式: 由正合列 $0 \to (I :aA) \to A \xrightarrow{f} \to A/I$. 其中 $f(x) = ax \mod I$. 张量上 $B$ 即可得到结论, 对于一般情况应用</p>
<script type="math/tex; mode=display">
(I: \sum_{i=1} ^n a_i A) = \bigcap_{i=1} ^n (I : a_i A)</script><blockquote>
<p>平坦映射讲一个保持理想的交, 一种反映平坦的地方吧.</p>
</blockquote>
<h4 id="平坦的局部整体性"><a href="#平坦的局部整体性" class="headerlink" title="平坦的局部整体性"></a>平坦的局部整体性</h4><p>设 $f: A \to B$ 是环同态(即 $B$ 是交换结合 $A$ 代数), 那么下面条件等价:</p>
<ol>
<li>$B$ 作为 $A$-模平坦.</li>
<li>$B_P$ 作为 $A_p$-模平坦, 其中 $p = P \cap A, \quad P \in Spec(B)$</li>
<li>$B_P$ 作为 $A_p$-模平坦, 其中 $p = P \cap A, \quad P \in \omega(B)$<br><strong>Proof</strong>: $1 \to 2 \to 3$ 显然, $3 \to 1$, 只需证明 $Tor_1 ^A(B,N)=0$. 由$Tor_1 ^{A_p}(B_P, N_p) = 0, P \in \omega(B)$. 知道结论成立.</li>
</ol>
<h3 id="忠实平坦-faithful-flat-f-f"><a href="#忠实平坦-faithful-flat-f-f" class="headerlink" title="忠实平坦 faithful flat (f.f.)"></a>忠实平坦 faithful flat (f.f.)</h3><p>一个自然的问题, 平坦模何时成为忠实平坦模呢?<br>设 $M$ 是 $A$-模, 下面条件等价</p>
<ol>
<li>$M$ 是 f.f. $A$-模;</li>
<li>$M$ 是平坦 $A$-模, 且对任意 $A$-模 $N \neq 0$, $N \otimes M \neq 0$;</li>
<li>$M$ 是平坦 $A$-模, 且对任意 $A$ 的极大理想 $\mathfrak{m}$, $mM \neq M$.<br><strong>Proof</strong>: $1 \to 2$: 由 $0 \to N \to 0$ 和 $0 \to N \otimes M \to 0$ 同时正合性证毕. $2 \to 3$: 由于 $A/\mathfrak{m} \neq 0$, 所以 $M/\mathfrak{m} M \simeq A/\mathfrak{m} \otimes M \neq 0$. $3 \to 2$: 对任意 $0 \neq x \in N$, 存在 $I$ 使得 $Ax \simeq A/I$, 设 $\mathfrak{m}$ 为包含 $I$ 的一个极大理想, 于是 $IM \subseteq \mathfrak{m}M \subset M$, 从而 $(A/I)\otimes M = M/IM \neq 0$. 又由 $M$ 平坦知: $0 \to (A/I) \otimes M \to N \otimes M$ 正合, 所以 $N \otimes M \neq 0$. $2 \to 1$: 设 $S: N’ \xrightarrow{f} N \xrightarrow{g} N’’$ 为 $A$-模序列. 若 $S \otimes M : N’\otimes M \xrightarrow{\hat{f}} N \otimes M  \xrightarrow{\hat{g}} N’’\otimes M$. 由于 $- \otimes M$ 函子正合. $Im(gf) \otimes M = Im(\hat{f}\hat{g})=0$. 从而$Im(gf)=0$, 即 $S$ 是复形, $H(S) \otimes M = H(S \otimes M) = 0$, 从而 $H(S) = 0$, 证毕.</li>
</ol>
<h4 id="局部环中平坦和忠实平坦"><a href="#局部环中平坦和忠实平坦" class="headerlink" title="局部环中平坦和忠实平坦"></a>局部环中平坦和忠实平坦</h4><p>设 $(A,\mathfrak{m}), (B,\mathfrak{n})$ 是局部环, $\phi: A \to B$ 是局部同态, 若 $M \neq 0$ 是有限 $B$-模或 $\mathfrak{n}$ 幂零，则</p>
<script type="math/tex; mode=display">
M \text{是平坦模} \Longleftrightarrow M \text{是忠实平坦模}</script><p>由 $\mathfrak{m} M \subseteq \mathfrak{n}M \neq M$ (NAK lemma), 从而由忠实平坦模的等价刻画知结论成立.<br>推论 1: $B$ 在 $A$ 上平坦等价于忠实平坦.(取 $M=B$)<br>推论 2: 若 $M$ 是有限生成 $A$-模或 $\mathfrak{m}$ 幂零, 则 $M$ 平坦等价于忠实平坦(其实本结论可以由 <strong>局部环上有限生成模是自由模</strong> 小节直接推出).</p>
<h4 id="忠实平坦模的性质"><a href="#忠实平坦模的性质" class="headerlink" title="忠实平坦模的性质"></a>忠实平坦模的性质</h4><p>类似于平坦模, transitive, change of base 都成立. 并且它还满足 descent property: 若 $B$ 是 $A$-代数, $M$ 是忠实平坦 $B$-模, 也是忠实平坦 $A$-模, 那么 $B$也是忠实平坦 $A$-模.<br><strong>忠实平坦在环扩张中起了很重要的作用</strong><br>设 $\phi: A \to B$ 是 f.f. 同态 则:</p>
<ol>
<li>对任意 $A$-模 $N$, $N \to N \otimes B, \quad x \mapsto x \otimes 1$ 是单的. 特别地, $\phi$ 是单的, 因此 $A$ 可以看做 $B$ 的子环.</li>
<li>对任意 $A$ 的理想 $I$, 我们有 $IB \cap A = I$</li>
<li>$\hat{\phi}: Spec(B) \to Spec(A)$ 是满的.</li>
</ol>
<p><strong>Proof</strong>: </p>
<ol>
<li><p>$0 \neq x \in N$, 则 $0 \neq Ax \subset N$. 因此 $Ax \otimes B \in N \otimes B$($B$平坦). 又 $Ax \otimes B = (x \otimes 1)(A \otimes B) = (x \otimes 1)B$. 由 $B$ 忠实平坦知 $x \otimes 1 \neq 0$. </p>
</li>
<li><p>由于 $B \otimes _A (A/I) = B/IB$ 在 $A/I$上 忠实平坦, 因此 $A/I \subseteq B/IB$. 因此 $IB \cap A \subset I$. 又反方向显然, 证毕. </p>
</li>
<li><p>设 $p \in Spec(A)$. $B_p = B \otimes A_p$ 在 $A_p$ 上忠实平坦, 因此  $pB_p \neq B_p$ <strong>(这是关键的一步)</strong>. 取 $B_p$ 中一个包含 $pB_p$ 的极大理想 $\mathfrak{m}$. 则 $pA_p \subseteq \mathfrak{m} \cap A_p$, 因此 $pA_p = \mathfrak{m} \cap A_p$. 设 $P = \mathfrak{m} \cap B$. 则</p>
<script type="math/tex; mode=display">
P \cap A = \mathfrak{m} \cap B \cap A = \mathfrak{m} \cap A = \mathfrak{m} \cap A_p \cap A = pA_p \cap A = p</script><p>要理解上面式子关键在于 $0 \to A \to A_p \to B_p = A_p \otimes B$. 最后 $\mathfrak{m}$ 被拉回之后就在 $B$ 中了.</p>
</li>
</ol>
<h4 id="忠实平坦的等价刻画"><a href="#忠实平坦的等价刻画" class="headerlink" title="忠实平坦的等价刻画"></a>忠实平坦的等价刻画</h4><p>之前已经给了一些平坦的等价可以, 都是与张量积有关, 下面给出的都与谱有关. 即与素理想有关.<br>设 $\phi: A \to B$ 是平坦映射, 以下结论等价:</p>
<ol>
<li>$\phi$ 是忠实平坦的;</li>
<li>$\phi$ 是平坦的, 且 $\hat{\phi}: Spec(B) \to Spec(A)$ 是满的;</li>
<li>$\phi$ 是平坦的, 且对任意 $A$ 中极大理想 $\mathfrak{m}$,存在 $B$ 中极大理想 $\mathfrak{m}’$ 使得 $\mathfrak{m}’ \cap A = \mathfrak{m}$.<blockquote>
<p>这注定了它和 NAK lemma 之间密切的联系.</p>
</blockquote>
</li>
</ol>
<p>$1 \to 2$ 已证, $2 \to 3$ 是因为存在 $p’ \in Spec(B)$ 使得 $p’ \cap A = \mathfrak{m}$. 找一个包含 $p’$ 的极大理想 $\mathfrak{m}’$. 则 $\mathfrak{m} \cap A = \mathfrak{m}$ (由于 $\mathfrak{m}$ 极大). $3 \to 1$ 是因为此时 $\mathfrak{m}B \subseteq \mathfrak{m}’B = \mathfrak{m} \subset B$. 因此 $B$ 在 $A$ 上忠实平坦.</p>
<h4 id="忠实平坦上的平坦"><a href="#忠实平坦上的平坦" class="headerlink" title="忠实平坦上的平坦"></a>忠实平坦上的平坦</h4><p>设 $B$ 是 $A$ 上的忠实平坦 $A$-代数. $M$ 是 $A$-模. 则 $M$ 是 $A$ 上的(忠实)平坦模 $\Longleftrightarrow$ $M$ 是 $B$ 上的(忠实)平坦模。</p>
<p>$\Longrightarrow$ 就是 change of base 的结果. $\Longleftarrow$ 成立是因为一般地我们有:</p>
<script type="math/tex; mode=display">
(S \otimes_A M) \otimes_A B = (S \otimes_A B) \otimes_B (M \otimes_A B)</script><h4 id="整环上的忠实平坦"><a href="#整环上的忠实平坦" class="headerlink" title="整环上的忠实平坦"></a>整环上的忠实平坦</h4><p>设 $A$ 设整环, 整环 $B$ 满足 $A \subseteq B \subseteq Q(A)$, 其中 $Q(A)$ 是 $A$ 的分式域. 则 $B$ 在 $A$ 上忠实平坦当且仅当 $B=A$.<br><strong>Proof</strong>: 若 $B \neq A$, 则对任意 $0 \neq x \in B \backslash A$, $x = y/s,\quad y,s \in A, s \notin U(A)$, 从而 $sB \cap A = A \neq sA$. 因此 $B$ 在 $A$ 上不忠实平坦, 所以 $B = A$.</p>
<blockquote>
<p>但是 $A$ 与 $Q(A)$ 之间的任意环都是平坦的(这可以由 <strong>平坦模的等价刻画 6</strong> 得到)</p>
</blockquote>
<h3 id="Going-up-and-Going-down"><a href="#Going-up-and-Going-down" class="headerlink" title="Going-up and Going-down"></a>Going-up and Going-down</h3><p>在这里还是重提以下 Going-up 和 Going-down 是什么鬼吧, 这部分之前一直糊里糊涂的过了.</p>
<p>设 $\phi: A \to B$ 是环同态. 我们说 Going-up 条件成立是指:<br>对任意 $p \subset p’ \in Spec(A)$, 对任意在理想 $p$ 上的 $P \in Spec(B)$(即$P \cap A = p$). 都存在 $P’ \in Spec(B)$, 使得 $P’ \cap A = p’$ 且 $P \subset P’$</p>
<blockquote>
<p>上面 $p \subset p’$ 是真包含, 若上述 $P’$ 存在, 包含关系必然也是真包含的.</p>
</blockquote>
<p>类似地, 我们说 Going-down 条件成立是指:<br>对任意 $p \subset p’ \in Spec(A)$, 对任意在理想 $p’$ 上的 $P’ \in Spec(B)$(即 $P’ \cap A = p’$). 都存在 $P \in Spec(B)$, 使得 $P \cap A = p$ 且 $P \subset P’$.<br>这等价于:<br>对任意 $p \in Spec(A)$, 对任意包含 $pB$ 的极小素理想 $P$ 都有 $P \cap A = p$.</p>
<blockquote>
<p>上面 $p \subset p’$ 是真包含, 若上述 $P$ 存在, 包含关系必然也是真包含的.</p>
</blockquote>
<h4 id="平坦-Going-down"><a href="#平坦-Going-down" class="headerlink" title="平坦 Going-down"></a>平坦 Going-down</h4><p>设 $\phi: A \to B$ 是平坦映射, 则 $\phi$ 满足 Going-down 条件.<br><strong>Proof</strong>: 设 $p’ \subset p \in Spec(A)$, $P \in Spec(B)$ 使得 $P \cap A = p$. 则 $B_P = B_p$ 在局部环 $A_p$ 上平坦, 因此忠实平坦, 所以 $Spec(B_P) \to Spec(A_p)$ 是满的, 设 $P^{\star} \ subset B_P$ 满足 $P^{\star} \cap A_p = p’A_p$. 则 $P’ = P^{\star} \cap B$ 即为所求.</p>
<h4 id="整-Going-up"><a href="#整-Going-up" class="headerlink" title="整 Going-up"></a>整 Going-up</h4><p>设 $A \subset B$ 是环, 且 $B$ 在 $A$ 上整. 则:</p>
<ol>
<li>$Spec(B) \to Spec(A)$ 是满的</li>
<li>$B$ 中在某个 $Spec(A)$ 上的所有素理想互不包含.</li>
<li>Going-up 条件成立.</li>
<li>若 $A$ 是局部环, $p$ 是唯一极大理想, 则 $B$ 中在 $p$ 上的素理想都是极大理想.</li>
</ol>
<p>先证$4$: 设 $\mathfrak{n}$ 为 $B$ 的一个极大理想, 设 $\mathfrak{m} = \mathfrak{n} \cap A$. $\bar{B} = B / \mathfrak{n}$ 是域, 并且在环 $\bar{A} = A/\mathfrak{m}$ 上整, 对 $A$ 中任意非零元 $x$. $1/x \in \bar{B}$. 因此</p>
<script type="math/tex; mode=display">
(1/x)^n + a_1 (1/x)^{n-1} + \cdots a_n = 0</script><p>所以 $\frac{1}{x} = -(a_1 + a_2 x + a_n x^{n-1} \in A$. 即 $\bar{A}$ 是域, $\mathfrak{m} = p$ 为 $A$ 的唯一极大理想. 设 $P \in Spec(B)$ 使得 $P \cap A = p$. 则 $\bar{B} = B/P$ 是整环, 且在域 $\bar{A} = A/p$ 上整, 易知 $\bar{B}$也是域, 即 $P$ 是极大理想.<br>再证 <code>1, 2</code>: 对任意 $p \in Spec(A)$. $B_p = B \otimes _A A_p = (A-p)^{-1}B$ 在 $A_p$ 上整且包含 $A_p$. 又因为 $B$ 中在 $p$ 上的素理想与 $B_p$ 中在 $pA_p$ 的素理想一一对应, 在由 <code>4</code> 知道 它对应于 $B_p$ 中的极大理想, 因此 <code>1, 2</code>得证.<br>最后证明 <code>3</code>: 设 $p \subset p’ \in Spec(A)$, $P \in Spec(B)$ 使得 $P \cap A = p$, $B/P$ 包含 $A/p$ 且在其上整. 由 $1$ 知, 存在 $P’/P$ 使得 $P’/P \cap A/p = p’/p$. 所以 $P’ \in Spec(B)$ 满足 $P’ \cap B = p’$.</p>
<blockquote>
<p>一个有用的结论: 整环 $B$ 在 $A$ 上整, 则 $B$ 是域当且仅当 $A$ 是域.</p>
</blockquote>
<h3 id="代数几何中的-Constructible-Set"><a href="#代数几何中的-Constructible-Set" class="headerlink" title="代数几何中的 Constructible Set"></a>代数几何中的 Constructible Set</h3><h4 id="Noetherian-空间"><a href="#Noetherian-空间" class="headerlink" title="Noetherian 空间"></a>Noetherian 空间</h4><p>称一个拓扑空间 $X$ 为 Noetherian, 如果它满足闭集的降链条件, 等价于开集的升链条件.<br>显然有限个 Noetherian 空间的并还是 Noetherian 空间, Noetherian 空间的子空间还是 Noetherian 空间. Noetherian 空间是紧的.</p>
<blockquote>
<p>由于 Noetherian 环 $A$ 满足素理想的降链条件, 此时 $Spec(A)$ 是 Noetherian 空间.</p>
</blockquote>
<h4 id="不可约闭集-irreducible-closed-set"><a href="#不可约闭集-irreducible-closed-set" class="headerlink" title="不可约闭集(irreducible closed set)"></a>不可约闭集(irreducible closed set)</h4><p>一个闭集称为不可约的, 如果它不能写成两个真闭子集的并. </p>
<blockquote>
<p>在 Noetherian 空间中, 每个闭集都可以写成有限个不可约闭子集的并. 并且这些不可约子集互不包含, 称每一个都为这个闭集的不可约部分.</p>
</blockquote>
<h4 id="局部闭集-locally-closed"><a href="#局部闭集-locally-closed" class="headerlink" title="局部闭集(locally closed)"></a>局部闭集(locally closed)</h4><p>一个集合 $Z$ 称为 locally closed 如果 $\forall z \in Z, \quad \exists U_z$  使得 $U_z \cap Z$ 是开邻域 $U_z$ 中的闭集. 这等价于说 $Z$ 是拓扑空间 $X$ 中某个开集和闭集的交. 特别地, 开集和闭集都是 locally closed.</p>
<h4 id="Noetherian-空间中-constructible-集"><a href="#Noetherian-空间中-constructible-集" class="headerlink" title="Noetherian 空间中 constructible 集"></a>Noetherian 空间中 constructible 集</h4><p>设 $X$ 是一个 Noetherian 空间, 称集合 $Z \subseteq$ 是一个 constructible 集, 如果它是有限个 locally close 集合的并.<br>(非 Noetherian 空间中也可以定义 constructible 集, 但是很复杂)<br>显然 constructible 集关于交并差都是封闭的.</p>
<p>设 $X$ 是一个 Noetherian 空间, 称集合 $Z \subseteq$ 是一个 pro-constructible(对应的 ind-constructible)集, 如果它是任意一族 constructible 集的交(对应的并).</p>
<p><strong>constructible 集</strong> 判定方法, Noetherian 空间 $X$ 的子集 $Z$ 称为 constructible 集的充要条件是:<br>对任意不可约闭子集 $X_0 \subseteq X$, 若 $X_0 \cap Z$ 在 $X_0$ 中稠密, 则 $X_0 \cap Z$ 包含 $X_0$ 中某个非空开集.<br><strong>Proof</strong>: 必要性: 若 $Z$ 是 constructible 集, 则</p>
<script type="math/tex; mode=display">
X_0 \cap Z = \bigcup _{i=1} ^m (U_i \cap F_i)</script><p>其中 $U_i$ 是 $X$ 中开集, $F_i$ 是 $X$ 中不可约闭子集(这是可以做到的是因为 Noetherian 空间中闭集都可以写成有限个不可约闭集的并), 且 $U_i \cap F_i$ 是非空的(如果空就直接踢掉了). 则 $\bar{U_i \cap F_i} = F_i$(这是因为否则 $\bar{U_i \cap F_i} \cup (c(U_i) \cap F_i) = F_i$, 但是 $F_i$ 是不可约闭集). 因此</p>
<script type="math/tex; mode=display">
X_0 = \bar{X_0 \cap Z} = \bigcup _{i=1} ^m F_i</script><p>因此必有某个 $F_i = X_0$. 从而 $U_i \cap X_0 = U_i \cap F_i$ 是 $X_0$ 中的一个非空开集.<br>充分性: 我们对 $\bar{Z}$ 进行应用所谓的超限数学归纳. 首先, $\emptyset$ 是 constructible 集, 其次假设 $\bar{Z}$ 中所有满足条件且 $\bar{Z’} \subset \bar{Z}$(严格包含)的 $Z’$ 都是 constructible 集. 我们证明此时 $Z$ 也是 constructible 集:<br>设 $\bar{Z} =  F_1 \cup \dots \cup F_r$ 是 $\bar{Z}$ 的不可约分解. 那么 $\bar{F_1 \cap Z} =  F_1$(毕竟不可约闭集). 因此, 由条件存在 $F_1$ 中的真子集 $F_1’$ 使得 $\emptyset \neq F_1 - F_1’ \subseteq Z$. 此时定义 $F^{\star} = F_1’ \cap F_2 \cap cdots \cap F_r$. 那么 $Z = (F_1 - F_1’) \cup (Z \cap F^{\star})$. 由于 $F_1 - F_1’$ 是 locally closed, 又因为 $Z \cap F^{\star}$ 满足条件: 若 $X_0$ 是不可约闭集且 $X_0 = \bar{Z \cap F^{\star} \cap X_0} \subseteq \bar{F^{\star}} = F^{\star}$, 从而 $Z \cap F^{\star} \cap X_0 = Z \cap X_0$ 从而包含 $X_0$ 中的一个非空开集. 并且 $\bar{Z \cap F^{\star}} \subseteq F^{\star} \subset Z$. 由数学归纳知 $Z \cap F^{\star}$ 是 constructible 集. 从而 $Z = (F_1 - F_1’) \cup (Z \cap F^{\star})$ 是 constructible 集.</p>
<blockquote>
<p>以上结果对一般地 Noetherian 空间都成立.</p>
</blockquote>
<h4 id="考察上述定义在-Spec-A-上的具体表现"><a href="#考察上述定义在-Spec-A-上的具体表现" class="headerlink" title="考察上述定义在 $Spec(A)$ 上的具体表现"></a>考察上述定义在 $Spec(A)$ 上的具体表现</h4><p><strong>$Spec(A)$ 中的不可约闭集</strong>: 设 $F$ 是 $Spec(A)$ 中的闭集, 则 $F$ 不可约当且仅当, $F = V(p)$, 其中 $p \in Spec(A)$, 可以看出此时 $p$ 由 $F$ 唯一决定。<br>充分性由 $p \in V(p)$ 显然.<br>必要性. $F = V(I)$. 若 $I$ 不是素理想, 则存在 $a, b \notin I, ab \in I$, 即$F = (F \cap V(a)) \cup (F \cap V(b))$. 矛盾于 $F$ 不可约.设 $\phi: A \to B$ 是环同态, 设 $X = Spec(A), Y = Spec(B)$, 由自然的 $f: Y \to A$. 那么 $f(Y)$ 在 $X$ 中稠密, 当且仅当 $\ker(\phi) \subseteq nil(A)$. 特别地, 当 $A$ reduce 时, $f(Y)$ 在 $X$ 中稠密, 当且仅当 $\phi$ 是单同态.<br>证明 $\bar{f(Y)} = V(I)$, 其中 $I = \bigcap_{p \in Y} \phi^{-1}(p) = \phi^{-1}(\bigcap_{p \in Y} p) = \phi^{-1}(nil(B))$. 显然 $\ker(\phi) \subseteq I$.<br>若 $f(Y)$ 在 $X$ 中稠密, 则 $V(I) = X$. 因此 $I \subseteq nil(A)$, 从而  $\ker(\phi) \subseteq nil(A)$. 另一方面, 若 $\ker(\phi) \subseteq nil(A)$, 则 $I = \phi^{-1}(nil(B)) \subseteq nil(A)$. 从而 $\bar{f(Y)} = X$.</p>
<blockquote>
<p>之前提到了, $Spec$ 是环范畴到拓扑范畴的逆变函子, 现在是说, 这个拓扑空间的一些性质可以与环的一些性质有一个对应关系, 这个函子保持了很好的性质.</p>
</blockquote>
<p>之前关于 constructible 集的定义都是在 Noetherian 空间中考虑的, 因此我们下面考虑的环一般是 Noetherian 环:</p>
<p><strong>(Chevalley)</strong> 设 $A$ 是 Noetherian 环, $B$ 是 $A$ 上的有限生成代数(从而也是 Noetherian 环). 设 $\phi: A \to B$ 是自然映射, 记 $X = Spec(A), Y = Spec(B)$ 则 $f: Y \to X$. 则 $f$ 将 $Y$ 中 constructible 集 映成 $X$ 中的 constructible 集.</p>
<blockquote>
<p>先证明 $f(Y)$ 是 constructible 集, 在利用下面的引理.</p>
</blockquote>
<p>另一方面设 $A$ 是 Noetherian 环, $X’$ 是 $X = Spec(A)$中的 constructible 集, 那么存在 $A$ 的有限生成代数 $B$ 使得 $Spec(B)$ 在 $Spec(A)$ 中的像恰好是 $X’$.</p>
<blockquote>
<p>对于 $X’ = D(a) \cap V(I)$, 然后考虑 $B = \lbrace 1,a,a^2,\cdots \rbrace ^{-1} (A/I)$, 然后考虑 constructible 集.</p>
</blockquote>
<p><strong>pro-constructible 集</strong> 设 $A$ 是 Noetherian 环, $\phi: A \to B$, $\bar{\phi}(Spec(B))$ 是 $Spec(A)$ 中的 pro-constructible 集.</p>
<h4 id="f-spec-B-to-Spec-A-成为-开-闭-连续映射"><a href="#f-spec-B-to-Spec-A-成为-开-闭-连续映射" class="headerlink" title="$f: spec(B) \to Spec(A)$成为(开,闭)连续映射"></a>$f: spec(B) \to Spec(A)$成为(开,闭)连续映射</h4><p>设$A$是 Noetherian 环, $B$ 是 $A$ 上的有限生成代数, 假设它们之间的自然映射 $\phi: A \to B$ 满足 Going-down 条件, 则对应的自然映射 $f: Spec(B) \to Spec(A)$ 是开(连续)映射.</p>
<blockquote>
<p>设 $U$ 是 $Spec(B)$ 中开集, 则 $f(U)$ 是 constructible 集, 再由 Going-down 条件知道 $Spec(A) - f(U)$ 是闭集.</p>
</blockquote>
<p>设 $\phi: A \to B$ 满足 Going-up 条件, 且 $B$ 是 Noetherian 环, 则 $f: Spec(B) \to Spec(A)$ 是闭映射.</p>
<h3 id="Noetherian-环上的-Associated-Primes"><a href="#Noetherian-环上的-Associated-Primes" class="headerlink" title="Noetherian 环上的 Associated Primes"></a>Noetherian 环上的 Associated Primes</h3><p>给定一个 Noetherian 环上的模 $M$, 我们称 $A$ 的一个素理想为 $M$ 的 associated prime, 如果它满足下面等价的条件:</p>
<ol>
<li>$\exists x \in M$ 使得 $Ann(x) = p$;</li>
<li>$M$ 包含一个子模同构于 $A/p$.</li>
</ol>
<p>我们把 $M$ 中所有的 associated prime ideal 记为 $Ass(M)$. 有时也用 $Ass_A(M)$ 来防止歧义.</p>
<blockquote>
<p>由下面三个结论说明, $Ass(M)$ 确实是 $M$ 的一个重要不变量.</p>
<p>(本节)环默认为 Noetherian 环.</p>
</blockquote>
<h4 id="Ann-x-全体中的极大元在-Ass-M-中"><a href="#Ann-x-全体中的极大元在-Ass-M-中" class="headerlink" title="$Ann(x)$ 全体中的极大元在 $Ass(M)$ 中"></a>$Ann(x)$ 全体中的极大元在 $Ass(M)$ 中</h4><p>设 $p$ 是 $\lbrace Ann(X) \mid 0 \neq x \in M \rbrace$. 则 $p \in Ass(M)$</p>
<p>由上, 显然可知道 $Ass(M) = \emptyset \Longleftrightarrow M=0$. 即 $Ass(M)$ 是元素是十分丰富的. $M$ 中的零因子是 $Ass(M)$ 中元素的并.</p>
<h4 id="Ass-M-与局部化可交换"><a href="#Ass-M-与局部化可交换" class="headerlink" title="$Ass(M)$ 与局部化可交换"></a>$Ass(M)$ 与局部化可交换</h4><p>给定一个乘闭子集 $S$, 记 $A’ = S^{-1}A, M’ = S^{-1} B$, 则</p>
<script type="math/tex; mode=display">
Ass_A(M’) = f(Ass_{A’}(M’) = Ass_A(M) \cap \lbrace p \mid p \cap S = \emptyset \rbrace</script><p>其中 $f: Spec(A’) \to Spec(A)$ 为自然映射.</p>
<h4 id="Supp-M-的极小元全体等于-Ass-M-的极小元全体"><a href="#Supp-M-的极小元全体等于-Ass-M-的极小元全体" class="headerlink" title="$Supp(M)$ 的极小元全体等于 $Ass(M)$ 的极小元全体"></a>$Supp(M)$ 的极小元全体等于 $Ass(M)$ 的极小元全体</h4><p>$Ass(M) \subset Supp(M)$ 且 $Supp(M)$ 中的极小元在 $Ass(M)$ 中(从而 $Supp(M)$ 的极小元全体等于 $Ass(M)$ 的极小元全体).<br><strong>Proof</strong>: 设 $p \in Ass(M)$, 则由正合列 $0 \to A/p \to M$, 从而 $0 \to A_p/pA_p \to M_p$ 正合. 由 $A_p/pA_p \neq 0$, 从而 $M_p \neq 0$, 从而 $p \in Supp(M)$.<br>设 $p \in Supp(M)$, 由于局部化和 $Ass(M)$ 可交换, $p \in Ass_A(M)$ 等价于  $pA_p \in Ass_{A_p}(M_p)$. 因此, 我们不妨设 $(A, p)$ 是局部环, $M \neq 0$. 且对任意 $q \subset p, M_q = 0$, 即 $Supp(M) = \lbrace p \rbrace$. 由于 $Ass(M)$ 非空, 且包含于 $Supp(M)$ 中, 因此 $p \in Ass(M)$.</p>
<blockquote>
<p>设 $I$ 是 $A$ 的理想, 则 $Ass(A/I)$ 中的极小元全体为包含 $I$ 的极小素理想全体. 从而 $\bigcap _{p \in Ass(A/I)} p = \sqrt{I}$</p>
</blockquote>
<p>若 $0 \to M’ \to M \to M’’$ 是 $A$-模正合列, 则 $Ass(M) \subset Ass(M’) \cup Ass(M’’)$<br><strong>Proof</strong>: 设 $p \in Ass(M)$, 则存在 $N \subseteq M$ 使得 $N \simeq A/p$. 若 $N \cap M’ = 0$(本质上是和 $f(M’)$ 的交). 则 $N$ 同构于 $M’’$ 的一个子模, 因此 $p \in Ass(M’’)$. 若 $N \cap M’ \neq 0$, 则任取 $0 \neq x \in N \cap M’$, 则 $Ann(x) = p$.</p>
<p>设 $M \neq 0$ 是 Noetherian 环上的有限生成模, 则存在(长为 $n$ 的)子模链 $(0) = M_0 \subset \cdots \subset M_{n-1} \subset M_n = M$ 使得 $M_i / M_{i-1} = A/p_i$, 其中 $p_i \in Spec(A)$. 从而 $Ass(M) \subset \lbrace p_1 \cdots p_n \rbrace$ 是有限集.<br><strong>Proof</strong>: 由 $M \neq 0$ 则 $Ass(M) \neq \emptyset$, 选择 $M_1 \subseteq M$, 使得 $M_1 \simeq A/p_1$, 若 $M_1 \neq M$, 再对 $M/M_1$ 做同样的事情, 由于 $M$ 是 Noetherian 的, 因此次过程在有限步后终止. 又因为</p>
<script type="math/tex; mode=display">
Ass(M) \subseteq Ass(M_1) \cup Ass(M_2/M_1) \cup \cdots \cup Ass(M_n /M_{n-1})</script><p>再由 $Ass(M_i/M_{i-1}) = Ass(A/p_i)=p_i$ 知结论成立.</p>
<h3 id="Primary-Decomposition-准素分解"><a href="#Primary-Decomposition-准素分解" class="headerlink" title="Primary Decomposition(准素分解)"></a>Primary Decomposition(准素分解)</h3><blockquote>
<p>本节设 $M$ 是 Noetherian 环 $A$ 上的模.</p>
</blockquote>
<p>称一个 $A$-模是 <strong>co-primary</strong> 如果它仅有一个 associated prime ideal. $N \subseteq M$ 称为 $M$ 的 primary 子模, 如果 $M/N$ 是 co-primary. 若 $Ass(M/N) = \lbrace p \rbrace$, 则称 $N$ 为 $p$-primary 或称 $N$ 属于 $p$(的 primary submodule).</p>
<h4 id="co-primary-等价刻画"><a href="#co-primary-等价刻画" class="headerlink" title="co-primary 等价刻画"></a>co-primary 等价刻画</h4><p>$M$ 是 co-primary 的, 当且仅当 $M \neq 0$, 且若 $a \in A$ 是 $M$ 的零因子, 则 $a$ 在 $M$ 上 locally nilpotent($\forall x \in M, \exists n$, such that  $a^n x = 0$).<br><strong>Proof</strong>: 若 $Ass(M) = \lbrace p \rbrace$, 则对任意 $x \in M$, $Ass(Ax) \subseteq Ass(M) = \lbrace p \rbrace$, 若 $Ass(Ax) = \emptyset$(取 $n = 1$ 即可), 若 $Ass(Ax) =  \lbrace p \rbrace$. 因此 $p$ 是 $Supp(Ax) = V(Ann(x))$ 中唯一的极小元素. 即 $p = \sqrt{Ann(x)}$.<br>另一方面, 定义 $p = \lbrace a \in A \mid a \text{在} M \text{上 locally nilpotent} \rbrace$. 它显然是一个理想. 对任意 $q \in Ass(M)$, 存在 $x \in M$  使得 $q = Ann(x)$. 因此 $p \subseteq \sqrt{q} = q$. 另一方面由于 $p$ 为所有 associated prime 理想的并, 因为 $q \subseteq p$. 从而 $Ass(M) = \lbrace p \rbrace$.</p>
<blockquote>
<p>当 $M = A/q$ 时, 上述条件恰好就是 $q$ 为准素理想的定义.</p>
</blockquote>
<h4 id="p-primary-的交依然是-p-primary"><a href="#p-primary-的交依然是-p-primary" class="headerlink" title="p-primary 的交依然是 p-primary"></a>p-primary 的交依然是 p-primary</h4><p>设 $p$ 是 $A$ 的素理想, $Q_1, Q_2$ 是 $M$ 的 $p$-primary 子模. 则 $Q_1 \cap Q_2$ 也是 $M$ 的 $p$-primary 子模.</p>
<blockquote>
<p>由 $0 \to M / Q_1 \cap Q_2 \to M/Q_1 \oplus M/Q_2$ 显然</p>
</blockquote>
<h4 id="准素分解闪亮登场"><a href="#准素分解闪亮登场" class="headerlink" title="准素分解闪亮登场"></a>准素分解闪亮登场</h4><p>设 $N$ 是 $M$ 的一个子模, 我们称 $N = Q_1 \cap \cdots \cap Q_r$ 是 $N$ 的一个准素分解, 如果 $Q_i$ 是 $M$ 中的 primary 子模. 我们称一个准素分解是 irredundant 如果每个准素子模都不能去掉, 并且 $Ass(M/Q_i)$ 各不相同. 对于任意准素分解, 我们都可以通过有限次剔除之后使得它的每一个准素子模都不可去掉, 而如果有两个准素子模属于相同的 associated prime $p$, 则我们可以把它们交起来构成一个新的准素子模, 从而可知</p>
<blockquote>
<p>任意准素分解都可以化成 irredundant 准素分解.</p>
</blockquote>
<p>设 $N = Q_1 \cap \cdots \cap Q_r$ 是 $N$ 的一个 irredundant 准素分解, 若 $Q_i$ 属于 $p_i$. 则 $Ass(M/N) = \lbrace p_1 \cdots p_r \rbrace$.<br><strong>Proof</strong>: 由自然单同态 $0 \to M/Q_1 \oplus \cdots \oplus M/Q_r$. 因此 $M/N \subseteq \cup Ass(M/Q_i) = \lbrace p_1 \cdots p_r \rbrace$. 另一方面 $(Q_2 \cap \cdots \cap Q_r)/N$ 同构于 $M/Q_1$ 的子模, 从而 $Ass(Q_2 \cap \cdots \cap Q_r)/N) = \lbrace p_1 \rbrace$. 从而 $p_1 \in Ass(M)$. 其它的类似.</p>
<p>设 $N$ 是 $M$ 的一个 $p$-primary 子模. 设 $q$ 是一个理想. 若 $p \subseteq q$,  则 $N = M \cap N_q$, 反之 $N_q = M_q$.<br><strong>Proof</strong>: 由于 $Ass(M/N) = \lbrace p \rbrace$. 若 $p \subseteq q$, 则 $A-q$ 中无 $M/N$ 的零因子, 即 $M/N \to (M/N)_q = M_q / N_q$ 是单射, 从而 $N = M \cap N_q$. 反之 $Ass(M_q/N_q) = Ass(M/N) \cap \lbrace \text{包含于} p \text{的素理想} \rbrace = \emptyset$. 从而 $M_q/N_q = 0$.</p>
<blockquote>
<p>推论 1: 若 $N = Q_1 \cap \cdots \cap Q_r$ 是 $N$ 的一个 irredundant 准素分解, 其中 $p_1$ 是 $Ass(M/N)$ 中的极小素理想. 则 $Q_1 = M \cap N_{p_1}$ 由 $N$ 和 $p_1$ 决定.<br>推论 2: 设 $I$ 是 Noetherian 环 $A$ 的理想 $N = \sqrt{I}$(有限生成). 则存在 $n \in \mathbb{N}$ 使得 $N^n \subseteq I$. 特别地若 $Q$ 是 $R$ 的 $p$ 准素理想, 则存在 $n \in \mathbb{N}$ 使得 $P^n \subseteq Q \subset P$.</p>
</blockquote>
<p><strong>准素分解</strong> 设 $M$ 是(Noetherian 环) $A$-模. 对每个 $p \in Ass(M)$, 我们可以选取 $p$-primary 子模 $Q(p)$, 使得</p>
<script type="math/tex; mode=display">
(0) = \bigcap_{p \in Ass(M)} Q(p)</script><p><strong>Proof</strong>: 给定一个 $p \in Ass(M)$, 我们考虑 $M$ 的一些子模构成的集合:  $\mathfrak{N} = \lbrace N \subseteq M \mid p \notin Ass(N) \rbrace \neq \emptyset$( $(0)$ 在其中). 由 Zorn 引理可知其存在极大元 $Q(p) \neq M$. 由 $Q(p)$ 的极大性, 知道 $Ass(M/Q(p) = \lbrace p \rbrace$. 从而</p>
<script type="math/tex; mode=display">
Ass(\bigcap_{p \in Ass(M)} Q(p)) = \bigcap_{p \in Ass(M)} Ass(Q(p)) = \emptyset</script><p>由上可知, 若 $M$ 有限生成, 则将上面定理应用于 $M/N$, 再由 $Ass(M/N)$ 是有限集, 从而 $N$ 有 primary decomposition.</p>
<h3 id="分次环和分次模"><a href="#分次环和分次模" class="headerlink" title="分次环和分次模"></a>分次环和分次模</h3><p><strong>分次环</strong>：称 $A = \bigoplus _{n \geq 0} A_n$ 是分次环, 如果 $A_n$ 是 $A$ 的加法子群, 且 $A_n A_m \subseteq A_{m+n}$. 我们称 $A_n$ 中的非零元素 $x$ 为 $n$ 次齐次元, 并记作 $\deg x = n$.</p>
<blockquote>
<p>$A_0$ 是 $A$ 的子环.<br>例子: $A = F[x_1, \cdots x_m]$, 其中 $A_i$ 是 $i$ 次单项式生成的子空间, 此时 $A$ 成为了分次环.</p>
</blockquote>
<p><strong>分次模</strong>：称分次环 $A = \bigoplus _{n \geq 0} A_n$ 上的模 $M$ 称为分次 $A$-模, 如果 $M = \bigoplus _{n \geq 0} M_n$ 满足 $M_n$ 是加群直和, 且 $A_n M_m \subseteq M_{m+n}$</p>
<p>设 $A = \bigoplus _{n \geq 0} A_n$, 则</p>
<ol>
<li>环 $A$ 是 Noetherian 当且仅当 $A_0$ 是 Noetherian, 且 $A$ 作为 $A_0$ 代数式有限生成的.</li>
<li>若环 $A$ 是 Noetherian, $M_A$ 是有限生成分次 $A$-模, 则对任意 $n, M_n$ 是有限生成 $A_0$-模.</li>
</ol>
<p><strong>Proof</strong>: </p>
<ol>
<li>充分性显然, $A_+ = \bigoplus _{n \geq 1} A_n$ 是 $A$ 的一个理想, 且 $A/A_+ \simeq A_0$ 是环同构, 于是 $A_0$ 是 Noetherian 环. 由 $A_+$ 作为理想是有限生成的. 设 $A_+ = Au_1 + \cdots + Au_m$, 其中每个 $u_i$ 都是齐次元. 下面用数学归纳法证明 $A = A_0[u_1,\cdots,u_m]$, 从而 $A$ 是有限生成 $A$-代数. 显然 $A_0 \subseteq A_0[u_1,\cdots,u_m]$. 设 $n &gt; 0, 0 \neq u \in A_n \subseteq A_+$, 从而可设 $u = \sum_{i=1} ^m a_i u_i$, 通过比较次数, 不妨设 $a_i$ 都是齐次元, 且 $\deg a_i + \deg u_i = n$. 于是 $\deg a_i &lt; n$. 由归纳假设 $a_i \in A_0[u_1, \cdots, u_m]$. 从而 $u \in A_0[u_1, \cdots, u_m]$, 即 $A_n \subseteq A_0[u_1, \cdots, u_m]$, 证毕.</li>
<li>由于 $A=A_0[u_1, \cdots, u_m]$, 其中 $u_i$ 为齐次元. 设 $M = Ay_1 + \cdots Ay_t$. 其中每个 $y_i$ 都是 $M$ 中的齐次元. 对任意 $0 \neq m \in M_n$, 记 $m = \sum_{i=1}^t a_i y_i$, 其中 $a_i$ 是齐次元. 且 $\deg a_i + \deg y_i = n = \deg m$, 另一方面, 对任意 $i$, $A$ 中阶为 $n-\deg y_i$ 的”单项式”(作为 $u_1, \cdots, u_m$ 的单项式)只有有限个, 又 $M_n$ 是 $\lbrace f_i y_i \mid f_i \text{是} A \text{阶为} n - \deg y_i \text{单项式} \rbrace$ 的 $A_0$ 线性组合. 所以 $M_n$ 是有限生成 $A_0$-模.</li>
</ol>
<h4 id="次模的-Poincare-数"><a href="#次模的-Poincare-数" class="headerlink" title="次模的 Poincare 数"></a>次模的 Poincare 数</h4><p>设 $A$ 是分次 Noetherian 环, 且设 $A_0$ 是 Artinian 环. 如果 $M_A$ 是有限生成分次 $A$-模, 则由上面结论知, 每一个 $M_n$ 都是有限生成 $R_0$-模, 从而是有限长的. 记作 $l(M_n)$. 记 $P(M,t) = \sum_{n=0}^{\infty} l(M_n)t^n \in \mathbb{Z}[[t]]$, 称为 $M$ 的 Poincare 级数.</p>
<p>引理: 设 $A$ 是 Artin 环, 若 $0 \to M_0 \to M_1 \to \cdots \to M_s \to 0$ 是有限生成 $A$-模正合列. 则 $\sum_{i=1} ^s l(M_i) = 0$<br><strong>Proof</strong>: $s=0,1$ 时显然, $s=2$ 时, 由 $0 \to M_0 \to M_1 \to M_2 \to 0$, 则有 $l(M_1)=l(M_0)+l(M_2)$. 对于 $M_i \to M_{i+1}$ 有分解: $M_i \to \text{Im} M_i \to 0$ 以及 $0 \to \text{Im} M_i \to M_{i+1}$. 于是有: $l(M_k) = l(\text{Im} M_{k-1} + l(\text{Im} M_k)$. 累加可得到结论.</p>
<p>(Hilbert-Serre) 设 $A$ 是分次 Noetherian 环, $A_0$ 是 Artinian 环, 若 $A = A_0[x_1, \cdots x_m]$, 其 $deg x_i = e_i &gt; 0$, 则对任意有限生成分次 $A$-模 $M$, 存在某个多项式 $f(t) \in \mathbb{Z}[t]$, 使得 $P(M,t)$ 为</p>
<script type="math/tex; mode=display">
\frac{f(t)}{\prod_{i=1}^m (1-t^{e_{i}})}</script><p>的有理展开.<br><img src= "/img/loading.gif" data-lazy-src="Hilbert.png" alt="证明过程"></p>
<p><strong>(Hilbert-Serre)多项式</strong> 设 $A$ 是分次 Noetherian 环, $A_0$ 是 Artinian 环, 若 $A = A_0[x_1, \cdots x_m]$, 其 $deg x_i = 1$, 则对任意有限生成分次 $A$-模 $M$, 存在次数不超过 $m-1$ 的多项式 $\bar{l}(t) \in \mathbb{Q}[t]$, 使得 $n \gg 0$ 时, $\bar{l}(t) = l(M_n)$.<br><strong>Proof</strong>: 应用之前的结果, 以及 $\frac{1}{(1-t)^k}$ 的展开.</p>
<p>命题: 设 $f(x) \in \mathbb{Q}[x]$ 是一个 $n$ 次多项式. 则 $f(x)$ 在 $n+1$ 个相邻的整数取整数值当且仅当 $f(x)$ 是 $C_x ^0 , C_x ^1, \cdots, C_x ^n$ 的整线性组合.<br><strong>Proof</strong>: 设 $f(x) = a_0 C_x ^0 + a_1 C_x ^1 + \cdots + a_n C_x ^n, a_i \in \mathbb{Q}$. 则 $f(x+1) - f(x) = a_1 C_x ^0 + \cdots + a_n C_x ^{n-1}$ 在 $n$ 个相邻的位置取整值. 由归纳假设可知 $a_1, \cdots a_n \in \mathbb{Z}$, 从而 $a_0 \in \mathbb{Z}$.</p>
<h4 id="ring-of-filtration"><a href="#ring-of-filtration" class="headerlink" title="ring of filtration"></a>ring of filtration</h4><p>我们定义环$A$的 filtration 为理想降链:</p>
<script type="math/tex; mode=display">
A = J_0 \supseteq J_1 \supseteq J_2 \supseteq \cdots</script><p>满足$J_n J_m  \subseteq J_{n+m}$.</p>
<p>给定一个 filtration, 我们可以定义一个分次环 $A’$(容易验证)</p>
<script type="math/tex; mode=display">
A’ = \oplus_{n=0} ^{\infty} J_n / J_{n+1}</script><p>特别地, 给定环 $A$ 的理想 $I$, 它的幂定义了一个 filtration, 称为 $I$-adic filtration, 对应的分次环记作 $gr^I(A)$.</p>
<p>若 $I$ 是 Noetherian 环 $A$ 的一个理想, 则 $gr^I(A)$ 也是 Noetherian.<br><strong>Proof</strong>: 由于 $I$ 有限生成, $I = a_1 A + \cdots a_r A$, $A/I$ Noetherian, 所以 $gr^I(A) = A/I[\bar{a_1}, \cdots, \bar{a_r}]$ 为 Noetherian.</p>
<h4 id="module-of-filtration"><a href="#module-of-filtration" class="headerlink" title="module of filtration"></a>module of filtration</h4><p>设 $M$ 是 $A$-模, $I$ 是 $A$ 的理想, 定义 $M$ 的 filtration 为子模降链:</p>
<script type="math/tex; mode=display">
M = M_0 \supseteq M_1 \supseteq M_2 \supseteq \cdots \quad (\star)</script><p>我们称 $(\star)$ 为 $I$-admissible 如果对任意 $n$ 成立 $IM_n \subseteq M_{n+1}$. $I$-adic 若 $M_n = I^n M$, essential $I$-adic 若 $(\star)$ 是 $I$-admissible 且存在 $n_0$, 当 $n &gt; n_0$ 时, $M_{n+1} = IM_n$.</p>
<p><strong>filtration topology</strong> 给定 $M$ 的一个 filtration $(\star)$, 我们可以定义 $M$ 上的拓扑: 对任意 $x \in M$, $x$ 的领域基为 $\lbrace x +M_n \mid n&gt;0 \rbrace$.</p>
<blockquote>
<p>显然上述拓扑是 Hausdorff 的当且仅当 $\bigcap M_n = (0)$.</p>
</blockquote>
<p>若上述 filtration $(\star)$ 是 $I$-adic 的, 则称上述拓扑为 $I$-adic 拓扑. 显然一个 essential $I$-adic 拓扑也定义了 $M$ 上的一个 $I$-adic 拓扑.</p>
<h4 id="Rees-环"><a href="#Rees-环" class="headerlink" title="Rees 环"></a>Rees 环</h4><p>设 $I$ 是 $A$ 的理想. 记 $T(I) =  A + Ix  + I^2x^2 + \cdots \leq A[x]$.<br>称 $T(I)$ 为由理想 $I$ 决定的 Rees 环可看作是 $A[x]$ 的子代数</p>
<p>引理: 若 $A$ 是 Noetherian. 则 $T(I)$ 是 Noetherian.<br><strong>Proof</strong>: $I = a_1 A + \cdots + a_r A$. 于是作为 $A[x]$ 的 $A$ 子代数. $T(I) = A[a_1 x, \cdots, a_r x]$ 是 $A[x_1, \cdots, x_r]$ 的商代数, 由 Hilbert 基定理, $T(I)$ 是 Noetherian 环。</p>
<h4 id="Rees-模"><a href="#Rees-模" class="headerlink" title="Rees 模"></a>Rees 模</h4><p>对于 $M_A$, $A[x] \otimes_A M$ 是 $A[x]$-模, 其中元素可以唯一表示 $\sum_i x^i \otimes m_i$(和为有限和). 另一方面 $M[x] = \lbrace \sum_i m_i x^i \text{ (有限和) } \mid m_i \in M \rbrace$. 于是 $M[x]$ 可自然地看做 $A[x]$-模. 并且作为 $R[x]$-模, 有同构</p>
<script type="math/tex; mode=display">
M[x] = R[x] \otimes _R M, \quad \sum_i m_i x^i \mapsto \sum_i x^i \otimes m_i</script><p>记 $T_I(M) = M + MIx + MI^2x^2 \cdots \leq M[x]$. 作为 $T(I)$-模, $T_I(M)$可由 $M$ 生成, $M = \sum_{j=1} ^s m_jA$ 是有限生成 $A$-模, 则 $T_I(M) = \sum_{j=1} ^s m_j T(I)$是有限生成 $T(I)$-模. 从而若 $A$ 是 Noetherian, $M_R$ 是有限生成模, 则 $T_I(M)$ 是 Noetherian $T(I)$-模.</p>
<h4 id="Artin-Rees-引理"><a href="#Artin-Rees-引理" class="headerlink" title="Artin-Rees 引理"></a>Artin-Rees 引理</h4><p>设 $I$ 是 Noetherian 环 $A$ 的理想, $M$ 是有限生成 $A$-模. $M_1, M_2$ 是 $M$ 的子模. 则存在 $k \in \mathbb{N}$ 使得对任意 $n \geq k$,</p>
<script type="math/tex; mode=display">
I^n(M_1 \cap M_2) \subseteq I^nM_1 \cap M_2 = I^{n-k}(I^k M_1 \cap M_2) \subseteq I^{n-k}(M_1 \cap M_2)</script><p><strong>Proof</strong>: 只需证明存在 $k$ 使得对任意 $n \geq k$, $I^nM_1 \cap M_2 \subseteq I^{n-k}(I^k M_1 \cap M_2)$(其它都包含关系显然). 考虑 Rees 环 $T(I)$ 及 Rees 模 $T_I(M)$, 以及 $T_I(M)$ 的子模 $N = M_1 \cap M_2 + (IM_1 \cap M_2)x + \cdots + (I^n M_1 \cap M_2)+ \cdots$. 由 $T_I(M)$ 是 Noetherian 模, $N_{T(I)}$是有限生成模. 不妨设 $N =  T(I)u_0 + T(I)u_1 x + \cdots T(I) u_k x^k$, 其中 $u_j \in I^j M_1 \cap M_2$. 对任意 $n \geq k, u \in I^n M_1 \cap M_2$ 我们有 $ux^n  \in (I^n M_1 \cap M_2)x^n \subseteq N$. 于是存在 $f_j \in T(I)$, 使得 $ux^n = \sum_{j=1} ^k f_j u_j x^j$. 比较 $x^n$ 的系数, 得到 $u = \sum_{j=1} ^k f_j’ u_j$. 其中 $f_j’ \in I^{n-j}$. 由于</p>
<script type="math/tex; mode=display">
I^{n-j}(I^jM_1 \cap M_2 = I^{n-k}I^{k-j}(I^jM_1 \cap M_2 \subseteq I^{n-k}(I^k M_1 \cap M_2)</script><p>从而 $u \in I^{n-k}(I^k M_1 \cap M_2)$. 证毕.</p>
<blockquote>
<p>取 $M_1 = M, M_2 = N \leq M$ 我们可以得到:<br>设 $I$ 是 Noetherian 环 $A$ 的理想, $N$ 是有限生成模 $M$ 的子模, 则存在 $k$ 使得 $n \geq k$ 时, </p>
<script type="math/tex; mode=display">
I^n N \subseteq I^n M \cap N = I^{n-k}(I^k M \cap N) \subset I^{n-k}N</script></blockquote>
<p><strong>Krull 交定理</strong>：设 $I$ 是 Noetherian 环 $A$ 的理想, $M$ 是有限生成 $A$-模, 记 $I^w M = \cap {n=1} ^{\infty} I^n M$, 则 $I(I^w M) = I^w M$, 从而 $I^w M = \lbrace x \in M \mid \exists b \in I, x = bx \rbrace$.<br>取 $M_1 = M, M_2 = I^w M$, 则存在 $k$, 使得当 $n \geq k$ 时</p>
<script type="math/tex; mode=display">
I^w M =  I^n M \cap I^w M = I^{n-k}(I^k M \cap I^w M) = I^{n-k} (I^w M)</script><p>所以 $I^w M = I(I^w M)$. 显然 $\lbrace x \in M \mid \exists b \in I, x = bx \rbrace \subseteq I^w M$. 另一方面 $I^w M   = I(I^w M)$ 当且仅当 $I + Ann(I^w M) = A$. 这是存在 $b \in I$, 使得 $1-b \in Ann(I^w M)$. 即对任意 $x \in I^w M , x=bx$.</p>
<blockquote>
<p>当 $A$ 是 Noetherian 整环时, $I^w M = \cap {n=1} ^{\infty} I^n M =(0)$<br>当 $I \subseteq J(A)$ 时, $I^w M = \cap {n=1} ^{\infty} I^n M =(0)$<br>特别地, 当 $A$ 是 Noetherian, $\cap {n=1} ^{\infty} J^n = 0$.<br>当 $A$ 不是 Noetherian 环时, 上述结果可能不成立, 例如实数 $\mathbb{R}$ 上在 $0$处无穷次可导的函数全体 $A$. $J$ 是在 $A$ 中在 $0$ 处取值为 $0$ 的函数全体($A$的唯一极大理想), 则 $e^{-\frac{1}{x^2}} \in A$</p>
<p>非交换环有一个著名的 Jacobson 猜想: $R$ 是左右 Noetherian 环, 则 $\cap_{n=1} ^{\infty} J(R) = 0$.</p>
</blockquote>
<h3 id="Dimension-Theroy"><a href="#Dimension-Theroy" class="headerlink" title="Dimension Theroy"></a>Dimension Theroy</h3><p>设 $A$ 是环, $n+1$ 个素理想构成的序列 $p_0 \supset p_1 \supset \cdots \supset p_n$ 称为长为 $n$ 的素理想链. 对任意 $p \in Spec(A)$, 满足 $p = p_0$ 的最长素理想链的称为 $p$ 的高度, 记作 $ht(p)$. 显然 $ht(p) = 0$表 示 $p$ 为 $A$ 的极小素理想.<br><strong>理想的高度</strong>：设 $I$ 为 $A$ 的真理想, 定义 $I$ 的高度为包含 $I$ 的所有素理想高度的最小值.</p>
<script type="math/tex; mode=display">
ht(I) = \inf \lbrace ht(p) \mid p \supset I \rbrace = ht(\sqrt{I})</script><p><strong>环的 Krull 维数</strong>：$A$ 的维数定义为最长的素理想链的长度.即</p>
<script type="math/tex; mode=display">
\dim(A) = \sup \lbrace ht(p) \mid p \in Spec(A) \rbrace</script><p>PID has Dimension $\leq 1$.<br><strong>Proof</strong>: 若 $(p) \supset (q) \supset (0)$. 则存在 $b \neq 0$ 使得$q = pb$, 从而 $(p)(b) \subset (q)$, 所以 $(b) \subseteq (q)$, 所以存在 $c$ 使得 $b = cpb$, 因此 $cp = 1$(domain 中), 从而$(p)=A$. 证毕.</p>
<p>由上述定义可知: 对任意 $p \in Spec(A), ht(p) = \dim(A_p)$, 对任意理想 $I$,  $\dim(A/I) + ht(I) \leq \dim(A)$.</p>
<p><strong>模的 Krull 维数</strong>：设 $M \neq 0$ 是 $A$-模. 定义 $M$ 的维数为:</p>
<script type="math/tex; mode=display">
\dim(M) = \dim(A/Ann(M))</script><p>当 $M = 0$ 时, 记 $\dim(M) = -1$.</p>
<p>若 $M \neq 0$ 是 Noetherian 环 $A$ 上的有限生成模, 则下列条件等价:</p>
<ol>
<li>$M$ 是有限长的.</li>
<li>环 $A/Ann(M)$ 是 Artinian.</li>
<li>$\dim(M) = 0$.</li>
</ol>
<p>由 Noetherian 环成为 Artin 环的充要条件知 $2 \leftrightarrow 3$. 再由有限生成 Artinian 模是有限长的可知 $2 \to 1$. 现在证明 $1\to 3$: 我们不妨考虑 $Ann(M) = (0)$ 的情形, 若 $l(M)$ 有限, 若 $\dim(A) &gt; 0$, 则存在极小素理想 $p$ 不是极大素理想. 由于 $M$ 是有限生成的, 且 $Ann(M)=(0)$, $M_p \neq 0$, 即 $p \in Supp(M)$ 是极小素理想, 因此 $p \in Ass(M)$. 即 $M$ 中包含一个同构于 $A/p$ 的子模. 由于 $\dim(A/p) &gt; 0$, 我们有 $l(A/p) = \infty$(这是因为有限长, 则为 Artinian, 从而维数为 0), 从而矛盾于 $l(M)$ 有限长.</p>
<h4 id="Noetherian-半局部环"><a href="#Noetherian-半局部环" class="headerlink" title="Noetherian 半局部环"></a>Noetherian 半局部环</h4><p>众所周知的几个关于维数的等价刻画本来是在 Noetherian 局部环中考虑的, 这里可以推广到 Noetherian 半局部环.</p>
<p>设 $A$ 是 Noetherian semi-local 环, $\mathfrak{m} = J(A)$. $A$ 的理想被称为<strong>ideal of definition(IOD)</strong>，如果存在 $k&gt;0$ 使得 $\mathfrak{m}^k \subseteq I \subseteq \mathfrak{m}$.</p>
<blockquote>
<p>当 $A$ 是局部环时, IOD 就是 $J$-准素理想.</p>
</blockquote>
<p>$I$ 是 IOD 的等价定义</p>
<ol>
<li>$I \subseteq \mathfrak{m}$ 且 $A/I$ 是 Artinian.</li>
<li>$I \subseteq \mathfrak{m}$ 且 $\dim(A/I)=0$.<br><strong>Proof</strong>: $1 \leftrightarrow$ 显然, 若 $I$ 是 IOD, 即存在 $k&gt;0$ 使得 $\mathfrak{m}^k \subseteq I subseteq \mathfrak{m}$. 从而包含 $I$ 的素理想必然是极大理想, 从而 $\dim(A) = 0$. 另一方面, 若 $I \subseteq \mathfrak{m}$ 且 $A/I$ 是 Artinian. 则 $J(A/I) = \mathfrak{m}/I$ 幂零, 从而 $\mathfrak{m}^n \subseteq I$.<blockquote>
<p>由于此时 $A/I$ 是 Artinian, 所以就可以由 Poincare 数, 以及 Hilbert-Serre 多项式. 完美的一 P.</p>
</blockquote>
</li>
</ol>
<p>设 $I$ 是 IOD, $M$ 是一个有限生成 $A$-模. 设 $A^{\star} = gr^I(A) = \otimes I^n / I^{n+1}$，$M^{\star} = gr^I(M) = \otimes I^n M / I^{n+1} M$</p>
<p>设 $I = A x_1 + \cdots Ax_r$. 那么 $A^{\star}$ 是 $B=A/I[X_1, \cdots, X_r]$ 的同态像. 因此 $F_{M^{\star}}(n) = l(I^n M/ I^{n+1} M)$ 是关于 $n$ 的次数不超过 $r-1$ 的多项式(由 Hilbert-Serre 的结果). 从而<br>​</p>
<script type="math/tex; mode=display">
\chi(M, I;n) \triangleq l(M/ I^{n+1} M) = \sum_{j=1} ^ {n-1}F_{M^{\star}}(j)</script><p>是一个次数不超过 $r$ 的多项式.<br>对于不同的 IOD $I’$, 存在 $s, s’$ 使得 $(I’)^s \subseteq I, I^{s’} \subseteq I’$. 从而 $deg chi(M, I;n) = chi(M, I’;n)$. 即 $chi(M, I;n)$ 是 $M$ 的一个不变量, 记作 $d(M)$.</p>
<blockquote>
<p>若有一个 IOD 被 $r$ 个元素生成, 则 $d(M) \leq r$.</p>
</blockquote>
<p>引理 0: 设 $I$ 是 Noetherian 半局部环 $A$ 的一个 IOD, 给定有限生成模的一个短正合列: $0 \to M’ \to M \to M’’ \to 0$. 则 $d(M) = \max(d(M’),d(M’’))$ 更进一步, 当 $n \gg 0$ 时, $\chi(M,I;n) - \chi(M’,I;n) - \chi(M’’,I;n)$ 的次数小于 $d(M’)$</p>
<p><strong>Proof</strong>: 由于 $l(M’’/I^n M’’) = l(M/M’+I^n M) \leq l(M/I^M)$, 从而 $d(M’’) \leq d(M)$. 更进一步, $\chi(M,I;n)-\chi(M’’,I;n) = l(M’+I^n M/I^n M) = l(M’/M’ \cap I^n M)$. 因此由 Artin-Rees 引理, 存在 $r$ 使得 $M’ \cap I^n M \subseteq I^{n-r} M’$, 从而 $l(M’/I^n M’) \geq l(M’/M’ \cap I^n M) \geq l(M’/I^{n-r} M’)$. 从而 $\chi(M,I;n)-\chi(M’’,I;n)$ 与 $\chi(M’,I;n)$ 有相同的最高次项.</p>
<p><strong>引理 1</strong>: 设 $A$ 是 Noetherian 半局部环, 则 $d(A) \geq dim(A)$<br>对 $d(A)$ 进行数学归纳. 若 $d(A)=0$, 则存在 $k$ 使得 $\mathfrak{m}^k = \mathfrak{m}^{k+1} \cdots$. 由 <strong>Krull 交定理</strong> 知 $\mathfrak{m}^k=(0)$. 从而 $l(A)$ 是有限长的, $\dim(A)=0$.<br>若 $d(A) &gt; 0$. 不妨设 $r = \dim(A)&gt;0$, 设 $p_0 \supset \cdots p_r = p$ 是长为$r$ 的素理想链. 任取 $x \in p_{r-1} \backslash p$. 则 $\dim(A/xA+p) \geq r-1$. 再由正合序列</p>
<script type="math/tex; mode=display">
0 \to A/p \xrightarrow{x} A/p \to A/xA+p \to 0</script><p>我们有 $d(A/xA+p) &lt; d(A/p) \leq d(A)$(这个严格小是因为上面”更进一步”的结论). 因此, 由数学归纳 $r-1 \leq \dim(A/xA+p) \leq d(A/xA+p) &lt; d(A)$, 证毕.</p>
<blockquote>
<p>上述引理表明 Noetherian 半局部环的维数有限, 且对于任意 Noetherian 及其素理想 $p, ht(p) = \dim(A_p)$ 有限, 从而 <strong>Noetherian 环满足素理想的降链条件</strong>, 当然 Noetherian 也可以由无限 Krull 维数, 例如: <img src= "/img/loading.gif" data-lazy-src="NagataNoether.png" alt="Nagata example"> <img src= "/img/loading.gif" data-lazy-src="NoetherJudge.png" alt="补充"></p>
</blockquote>
<p><strong>引理 2</strong>: 设 $M \neq 0$ 是 Noetherian 半局部环 $A$ 上的有限生成模. $x \in J(A)$. 则</p>
<script type="math/tex; mode=display">
d(M) \geq d(M/xM) \geq d(M)-1</script><p>取 IOD $I \ni x$. 则 $\chi(M/xM,I;n) = l(M/xM+I^n M) = l(M/I^nM) - l(xM + I^n M/I^n M)$ 且 $xM + I^n M /I^n M \simeq xM/xM \cap I^n M \simeq M/(I^n M:x)$, 又因为 $I^{n-1} \subseteq (I^n M:x)$ 从而</p>
<script type="math/tex; mode=display">
\chi(M/xM,I;n) \geq l(M/I^nM) - l(M/I^{n-1}M) = \chi(M,I;n) - \chi(M,I;n-1)</script><p><strong>引理 3</strong>: 设 $M \neq 0$ 是 Noetherian 半局部环 $A$ 上的有限生成模. 设 $\dim(A) = r$. 那么存在 $r$ 个元素 $x_1, \cdots, x_r \in J(A)$ 使得 $l(M/x_1 M + \cdots x_r M) \leq \infty$.<br><strong>Proof</strong>: 应用数学归纳法, 并说明在 $J(A)$ 不包含在 $Ann(M)$ 的任意极小素理想即可.</p>
<p><strong>维数等价定理</strong>：设 $M \neq 0$ 是 Noetherian 半局部环 $A$ 上的有限生成模. 则 $d(M) = dim(M)$ 为使得 $l(M/x_1 M + \cdots x_r M) \leq \infty$ 的最小的 $r$. 其中 $x_1, \cdots x_r \in M$.<br>若 $l(M/x_1 M + \cdots x_r M) \leq \infty$ 则由引理 2 知, $d(M) \leq r$. 当 $r$满足条件的最小值, 由引理 3 知, $r \leq \dim(M)$. 从而只需证明 $\dim(M) \leq d(M)$. 取 $M$ 的一个子模链 $M = M_1 \supset M_2 \supset \cdots \supset M_{k+1} = 0$. 使得 $M/M_{i+1} \simeq A/p_i, p_i \in Spec(A)$. 那么 $p_i \supseteq Ann(M)$. 且 $Ass(M) \subseteq \lbrace p_1, \cdots, p_k \rbrace$(这些之前就证明过了). 从而 $Supp(M) = V(Ann(M))$. 包含 $Ann(M)$ 的极小素理想是 $Supp(M)$ 的极小素理想, 从而在 $Ass(M)$ 中, 从而在 $\lbrace p_1, \cdots, p_k \rbrace$. 即 $Ass(M) = \lbrace p_1, \cdots, p_k \rbrace$. 因此(其中第一个等号要对 $M$ 的降链应用引理 0)</p>
<script type="math/tex; mode=display">
d(M) = \max d(A/p_i) \geq \max \dim(A/p_i) = \dim(A/Ann(M)) = \dim(M)</script><p><strong>广义 Krull 维数定理</strong>：$I=(a_1, \cdots, a_r)$ 是 Noetherian 环 $A$ 的理想. 则任意包含 $p$ 的极小素理想 $p$ 的高度不超过 $r$. 特别地, $h(I) \leq r$.<br><strong>Proof</strong>: 由于 $pA_p$ 是 $A_p$ 中包含 $IA_p$ 的唯一素理想, 因此 $\dim(A_p/IA_p)=0$. 从而环 $A_p/(a_1 A_p + \cdots a_rA_p)$ 是 Artinian. 因此 $ht(p) = \dim(A_p) \leq r$.</p>
<h4 id="Noetherian-局部环和-regular-local-ring-正则局部环"><a href="#Noetherian-局部环和-regular-local-ring-正则局部环" class="headerlink" title="Noetherian 局部环和 regular local ring(正则局部环)"></a>Noetherian 局部环和 regular local ring(正则局部环)</h4><p>设 $(A, \mathfrak{m},k)$ 是维数为 $d$ 的 Noetherian 局部环. 此时 IOD 和属于 $\mathfrak{m}$ 的准素理想是一回事. 我们知道 IOD 的生成元个数至少为 $d$ 并且存在 IOD 的生成元个数恰好为 $d$, 若 $\lbrace x_1, \cdots, x_d \rbrace$ 生成了一个 IOD 则称为 <strong>system of parameters</strong>(SOP). 若一个 SOP 生成了唯一极大理想 $\mathfrak{m}$. 则我们称 $A$ 为 <strong>正则局部环</strong></p>
<p>由于 $\mathfrak{m}$ 的极小基个数等于 $\text{rank}_k \mathfrak{m}/\mathfrak{m}^2$. 因此一般地我们有</p>
<script type="math/tex; mode=display">
\dim(A) \leq \text{rank}_k \mathfrak{m}/\mathfrak{m}^2</script><p>等号取得, 当且仅当 $A$ 是 Noetherian 局部环.</p>
<p>设$(A, \mathfrak{m})$是 Noetherian 局部环, $\lbrace x_1, \cdots, x_d \rbrace$ 是一个 $SOP$. 则</p>
<script type="math/tex; mode=display">
\dim(A/(x_1, \cdots, x_i) = d-i = \dim(A) - i</script><p>设 $A$ 是 Noetherian 环, 则 $\dim A[x_1, \cdots, x_n] = \dim A + n$.<br><strong>Proof</strong>: 对 $B = A[x]$ 证明即可. 对任意 $p \in Spec(A)$, 选择 $P$ 为满足 $P \cap A = p$ 中极大元. 则 $ht(P/pB) = 1$. 又 $ht(P) = ht(p) + ht(P/pB) = ht(p)+1$. 再由 $Spec(B) \to Spec(A)$ 是满的. 因此 $\dim(B) = \dim(A) + 1$.</p>
<p>推论: 设 $k$ 是域, 则 $\dim k[x_1, \cdots, x_n] = n$. 理想 $(x_1, \cdots, x_i)$ 是高度为 $i$ 的素理想.<br><strong>Proof</strong>: 由于 $(0) \supset (x_1) \supset (x_1,x_2) \supset \cdots \supset (x_1, \cdots, x_i)$ 是长为 $n$ 的素理想链. 在由 $\dim k[x_1, \cdots, x_n] = n$ 知结论成立.</p>
<h2 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h2><h4 id="M-regular-sequence"><a href="#M-regular-sequence" class="headerlink" title="$M$-regular sequence"></a>$M$-regular sequence</h4><p>我们称 $a_1, \cdots, a_r$ 是一个 <strong>$M$-regular sequence</strong>: 如果它满足:</p>
<ol>
<li><p>$\forall 1 \leq i \leq r, a_i$ 不是 $M/(a_1, \cdots, a_{i-1})M$ 的零因子;</p>
</li>
<li><p>$(a_1, \cdots, a_r)M \neq M$.</p>
</li>
</ol>
<blockquote>
<p>上述定义与 $a_1, \cdots, a_r$ 的次序有关, 例如 $k$ 为域, $A=k[x, y,z], a_1 = X(Y-1), a_2 = Y, a_3= Z(Y-1)$ 是 $A$-regular sequence, 但 $a_1, a_3, a_2$不是.</p>
</blockquote>
<p>类似地, 可以定义一个理想 $I$ 上的(极大) $M$-regular sequnence.</p>
<p><strong>引理 1</strong>: 假设 $a_1, \cdots, a_r$ 是 $M$-regular 且</p>
<script type="math/tex; mode=display">
a_1 \xi_1 + \cdots a_r \xi_r = 0</script><p>则 $\xi_i \in (a_1, \cdots, a_r)M$.</p>
<p><strong>引理 2</strong>: 假设 $a_1, \cdots, a_r$ 是 $M$-regular, 则 $a_1 ^{n_1} + \cdots a_r ^{n_r}$ 也是.</p>
<p>若 $a_1, a_2, \cdots \in A$ 是一个 $M$-regular sequence. 则由严格子模升链 $a_1 M \subset (a_1, a_2)M \subset \cdots$. 因此有理想严格升链 $a_1 \subset (a_1, a_2) \subset \cdots$. 从而若 $A$ 是 Noetherian 环, 则 $M$-regular sequence 的长度总是有限的, 因此每个理想 $I$ 上 $M$-regular sequence 都可以推展为一个极大 $M$-regular sequence.</p>
<p>定理: 设 $M$ 是 Noetherian 环 $A$ 上的有限生成模. $I$ 是 $A$的理想, 满足 $IM \neq M$. $n$ 为给定正整数. 则下列条件等价:</p>
<ol>
<li>$\text{Ext}_A ^i(N, M) = 0 (i&lt;n)$ 对任意满足 $Supp(N) \subseteq V(I)$ 的有限生成 $A$-模成立;</li>
<li>$\text{Ext} _A ^i(A/I, M) = 0 (i&lt;n)$;</li>
<li>存在一个满足 $Supp(N) = V(I)$ 的有限生成模 $N$ 使得 $\text{Ext}_A ^i(N, M) = 0 (i&lt;n)$;</li>
<li>$I$ 中存在长度为 $n$ 的 $M$-regular sequence $a_1, \cdots, a_n$.</li>
</ol>
<p><strong>Proof</strong>: $1 \to 2 \to 3$ 显然, $3 \to 4$: 我们有 $Ext_A ^0 (N,M) = \hom_A (N,M) = 0$. 若 $I$ 中无元素是 $M$-regular, 则 $I$ 包含在 $Ass(M)$ 全体的 (Noetherian 所以有限)并中, 从而 $I$ 包含于某个素理想 $P$ 中, 从而由单射 $A/P \to M$. 在 $P$ 处作局部化, 我们有 $\hom_{A_P}(k, M_P) \neq 0$, 其中 $k = A_P / P A_P$. 由于 $P \in V(I) = Supp(N)$. 从而 $N_P \neq 0$, 从而由 <strong>NAK lemma</strong> $N \otimes k = N_P / PN_P \neq 0$. 从而 $\hom(N \otimes k, k) \neq 0$. 从而 $\hom_{A_P}(N_P, M_P) \neq 0$. (三个映射的复合, 第一个满第三个单). 然而它 $\hom_A(N,M)=0$ 在 $P$ 处局部化的结果, 矛盾. 从而 $\exists a_1 \in I$, 若 $n&gt;1$, 取 $M_1 = M/a_1 M$. 由模的短正合列</p>
<script type="math/tex; mode=display">
0 \to M \xrightarrow{a_1} M \to M_1 \to 0</script><p>得到同调群的长正合列:</p>
<script type="math/tex; mode=display">
\cdots \to Ext_A ^i (N,M) \to Ext_A ^i (N,M_1) \to Ext_A ^{i+1} (N,M) \to \cdots</script><p>这说明 $Ext_A ^i(N,M_1) =0 (i&lt;n-1)$,  因此 $a_1^r$ 也零化 $Ext_A^i(N,M)$. 从而 $Ext_A(N,M) = 0 (i &lt;n)$</p>
<p>我们将上述 $I$ 中最长的 $M$-regular 序列称为 $I$-depth of $M$. 记作 $depth_I(M)$. 上述定理表明 </p>
<script type="math/tex; mode=display">
depth_I(M) = \min \lbrace i \mid Ext_A ^i(A/I,M) \neq 0 \rbrace</script><p>当 $(A, \mathfrak{m})$ 是(Noetherian 局部环时), 我们用 $depth(M), depth_A(M)$ 来表示 $depth_{\mathfrak{m}}(M)$ 称作 $M$ 的深度.</p>
<p>对任意 $P \in Spec(A)$, $depth M_P = 0 \Longleftrightarrow PA_P \in Ass_{A_P}(M_P) \Longleftrightarrow P \in Ass(M) \to depth_p(M) = 0$. 一般地, 由于局部化函子正合, 因此 $depth_{A_P} (M_p) \geq depth_P (M)$</p>
<p>若 $M = 0$, 定义 $depth_I(M) = 0$; 若 $IM = M \neq 0$, 定义 $depth_I(M) = \infty$.</p>
<h4 id="Grade"><a href="#Grade" class="headerlink" title="Grade"></a>Grade</h4><p>设 $M$ 是 Noetherian 环 $A$ 上的有限生成模. 定义 $M$ 的 garde 为:</p>
<script type="math/tex; mode=display">
grade M = \inf \lbrace i \mid Ext_A ^i (M,A) \neq 0 \rbrace</script><p>由上面定义知:</p>
<script type="math/tex; mode=display">
grade M = depth_I(A), \quad I = Ann(M)</script><p>同理, 由定义知: $grade M  \leq proj.dim M$</p>
<p>对于 $A$ 中任意理想 $I$, $depth_I(A)$ 为 $I$ 中最长的 $A$-sequence 序列 $a_1, \cdots, a_r$ 的长度. 又此时 $ht(a_1, \cdots, a_r) = r$. 从而 $depth_I(A) \leq ht(I)$</p>
<p><strong>引理 1</strong>: 设 $M \neq 0 ,N$ 是 Noetherian 环 $A$ 上的有限生成模, 若 $grad M = k$, $proj. dim N = l &lt; k$. 则 $Ext_A ^i(M,N) = 0 (i &lt; k-l)$<br><strong>Proof</strong>: 对 $l$ 数学归纳, $l=0$ 时, $N$ 为自由 $A$-模的直和因子, 因此结论成立. $l&gt;0$ 时, 由正合列: $0 \to N’ \to L \to N \to 0$, 其中 $L$ 自由, 于是$\dim N’ = l-1$. 由归纳法得证.</p>
<p><strong>引理 2</strong>: (<strong>Ischebeck</strong>) 设 $(A, \mathfrak{m})$ 是 Noetherian 局部环, $M \neq 0 \neq N$ 是有限生成 $A$-模. 若 $depth M = k, \dim N = r$. 则</p>
<script type="math/tex; mode=display">
Ext _A ^i (N,M) = 0 \quad (i< k-r)</script><p><strong>Proof</strong>: 对 $r$ 归纳法证明.(并不简单, 都是用模的短正合列, (再由投射分解, 得到复形的短正合列, 从而)导出同调群之间的长正合列, 然后应用数学归纳得出结论)</p>
<p>定理: 设 $(A,\mathfrak{m})$ 是 Noetherian 半局部环, 且 $M \neq 0$ 是有限生成 $A$-模. 那么对任意 $p \in Spec(A), \quad depth M \leq \dim(A/p)$.<br><strong>Proof</strong>: 由于 $\hom(A/p,M) \neq  0$, 上面引理反证即可.</p>
<p><strong>引理 3</strong>: 设 $M,N$ 是局部环 $(A,\mathfrak{m},k)$ 上的有限生成模, 则</p>
<script type="math/tex; mode=display">
M \otimes_A N \neq 0 \Longleftrightarrow M \neq 0 \neq N</script><p>若 $M \neq  0 \neq N$, 则由 <strong>NAK lemma</strong> 知: $M \otimes k =  M/\mathfrak{m}M \neq 0 \neq N \otimes k$. 由于 $k$ 是域. $(M \otimes N) \otimes k = (E \otimes k) \otimes_k  (F \otimes k) \neq  0$. 从而 $M \otimes N \neq 0$.</p>
<p><strong>引理 4</strong>: 设 $E,F$ 是环 $A$ 上的有限生成模, 则 $Supp(E \otimes F) = Supp(E) \cap Supp(F)$.<br><strong>Proof</strong>: 对任意 $p \in Spec(A,\quad (E \otimes F)_p = (E_p \otimes_{A\p} F_p)$.<br>由引理 3, $(E \otimes F)_p \neq 0 \Longleftrightarrow E_p \neq 0 \neq F_p$.</p>
<p><strong>引理 5</strong>: 设 $M \neq 0$ 是 Noetherian 局部环 $A$ 上的有限生成模, $a_1, \cdots, a_r$ 是 $M$-regular 序列. 那么</p>
<script type="math/tex; mode=display">
\dim M/(a_1, \cdots, a_r)M =  \dim M -r</script><p><strong>Proof</strong>: 首先由于此时 $\dim M = d(M)$, 我们有 $\dim M/(a_1, \cdots, a_r)M \geq \dim M -r$, 另一方面, 若 $x$ 是 $M$-regular 元, 那么由引理 4 $Supp(M/xM) = Supp(M) \cap Supp(A/xA) = Supp(M) \cap V(x)$. 由因为 $x$ 不在 $Supp(M) = V(Ann(M))$ 的极小素理想中. 从而</p>
<script type="math/tex; mode=display">
\dim(M/xM) = \dim(A/Ann(M)+xA) < \dim(A/Ann(M)) = \dim(M)</script><p><strong>引理 6</strong>: 设 $M$ 是 Noetherian 环 $A$ 上的有限生成模, $I$ 是 $A$的理想, 则</p>
<script type="math/tex; mode=display">
depth_I(M) = \inf \lbrace depth M_p \mid p \in V(I) \rbrace</script><p><strong>Proof</strong>: 将等式右边记作 $n$. 若 $n=0$. 则存在 $P \supseteq I$ 使得 $M_P = 0$. 从而 $I \subseteq p \in Ass(M)$. 从而 $depth_I(M) = 0$. 若 $0 &lt; n &lt; \infty$. 此时 $I$ 不包含于任何 $M$ 的 associated 素理想中, 因此存在 $M$-regular 元 $a \in I$. 记 $M’ = M/aM$. 则由 depth 和 $M$-regular 的关系(上面定理)知  $depth (M’)_P = depth M_P/aM_P = depth M_P -1, \text{ for } P \supset I$. 且 $depth_I(M’) = depth_I(M)-1$. 从而归纳法知结论成立, 当 $n = \infty$ 时, 对任意 $P \in V(I), \quad PM_P = M_P$. 若 $IM \neq M$, 对任意 $P \in Supp(M/IM) = V(I) \cap Supp(M)$, 我们有 $(M/IM)_P \neq 0$. 若 $P$ 是 $Supp(M/IM)$ 中的极小素理想, 则 $Supp_{A_P}(M/IM)_P = \lbrace PA_P \rbrace$. 因此 $(M/IM)_P = M_P/IM_P$ 在 $M_P$ 中 coprimary. 又因为 $P$ 是 $M_P$ 的零因子且有限生成, 所以存在 $s&gt;0$ 使得 $P^s \subseteq IM_P$. 因此 $PM_P \neq M_P$ 矛盾. 从而 $IM = M, \quad depth_I(M) = \infty$.</p>
<h3 id="Cohen-Macaulay-Rings"><a href="#Cohen-Macaulay-Rings" class="headerlink" title="Cohen-Macaulay Rings"></a>Cohen-Macaulay Rings</h3><p>设 $M$ 是 Noetherian 环 $A$ 上的有限生成模, 当 $M\neq 0$ 时, $\hom(M,M) \neq 0$, 从而由引理 2(Ischebeck) 知 $depth M \leq \dim M$. 我们称 $M$ 是<strong>Cohen-Macaulay</strong>(C.M.), 如果 $M = 0$ 或 $depth M = \dim M$. 若 $A$ 作为 $A$-模是 $C.M.$, 则称 $A$ 是 $C.M.$环.</p>
<p>设 $(A,\mathfrak{m})$ 是局部环, $M$ 是有限生成 $A$-模. 则:</p>
<ol>
<li>若 $M$ 是 C.M. 模, $p \in Ass(M)$, 则 $depth(M) = \dim(A/P)$. 从而 $Ass(M)$ 中元素没有包含关系.</li>
<li>若 $a_1, \cdots, a_r$ 是 $\mathfrak{m}$中的 $M$-regular 序列, 取 $M’ = M/(a_1, \cdots, a_r)M$. 则 $M$ 是 C.M. 当且仅当 $M’$ 是 C.M.</li>
<li>若 $M$ 是 C.M. 模, 则对任意 $P \in Spec(A)$, $A_P$ 模 $M_P$ 是 C.M. 模, 且当 $M_P \neq 0$ 时, $depth_P(M) = depth _{A_P} M_P = \dim M_P$</li>
</ol>
<p><strong>Proof</strong>:<br>1) 由于 $Ass(M) \neq 0$, 所以 $M \neq 0$, 因此 $depth(M) = \dim M$. 又因为 $P \in Supp(M)$, 我们有 $\dim M \geq \dim A/P \geq depth M$. 证毕.</p>
<p>2) 由 <strong>NAK lemma</strong>, 我们有 $M = 0 \Longleftrightarrow M’ = 0$. 若 $M \neq 0$. 则由引理 5 知 $\dim M’=\dim M -r$. 由 $depth$ 的 $M$-regular 序列刻画知, $depth M’ = depth M - r$.</p>
<p>3) 我们假定 $M_P \neq 0$. 此时 $P \supseteq Ann(M)$. 我们有 $\dim M_P \geq depth_{A_P} M_P \geq depth_P(M)$. 对 $depth_P(M)$ 数学归纳, 若 $depth_P(M) = 0$, 则 $P$ 包含于某个 $P’ \in Ass(M)$. 因为 $Ann(M) \subseteq P \subseteq P’$. 由 1)的结论, 包含 $Ass(M)$ 中的素理想是包含 $Ann(M)$ 的极小素理想, 从而 $P = P’$. 从而 $\dim M_P = 0$. 若 $depth_P(M)&gt;0$, 取一个 $M$-regular 元 $a \in P$, 记 $M_1 = M/aM$. 由于局部化函子是正合的, $a$ 也是 $M_P$-regular. 因此 $\dim (M_1)_P = \dim M_P/aM_P = \dim M_P-1$ 且 $depth_P(M_1) = depth_P(M) - 1$. 由 2) $M_1$ 是 C.M. 从而由归纳法, $\dim (M_1)_P = depth_P(M_1)$, 证毕.</p>
<p>引理 7: 设 $(A, \mathfrak{m})$ 是 C.M. 局部环, 则对任意序列 $a_1, \cdots, a_r \in \mathfrak{m}$, 下列条件等价:</p>
<ol>
<li>$a_1, \cdots, a_r$ 是 $A$-regular 序列</li>
<li>$ht(a_1, \cdots, a_i) = i (1 \leq i \leq r)$</li>
<li>$ht(a_1, \cdots, a_r) = r$</li>
<li>存在 $a_{r+1} \cdots a_n \in \mathfrak{m}, (n = \dim A)$ 使得 $\lbrace a_1, \cdots a_n \rbrace$ 是 SOP.</li>
</ol>
<p><strong>Proof</strong>: $1 \to 2$: 由广义 Krull 定理: $ht(a_1, \cdots, a_i) \leq i$, 再由 $a_1, \cdots, a_r$ 是 $A$-regular 序列知 $ht(a_1, \cdots, a_i) \geq i$. $2 \to 3$ 显然, $3 \to 4$: 若 $\dim A = r$ 则结论是平凡的. 若 $\dim A &gt; r$, 则可以找到 $a_{r+1} \in \mathfrak{m}$ 不在包含 $(a_1, \cdots, a_r)$ 的极小素理想中, 从而 $ht(a_1, \cdots, a_{r+1}) = r+1$. 于是一直这样进行下去即可. $4 \to 1$: 只需证明每个 SOP $x_1, \cdots, x_n$ 都是 $A$-regular 序列. 若 $P \in Ass(A)$, 则 $\dim A/P = n$. 因此 $x_1 \notin P$(否则它在 $A/P$ 下的像怎么生成 $\mathfrak{m}/P$). 因此 $x_1$ 是 $A$-regular. 记 $A’ = A/(x_1)$. 则 $A’$ 是 C.M. 维数为 $n-1$ 局部环. 由归纳法结论成立.</p>
<p>设 $I$ 是 C.M. 局部环 $(A, \mathfrak{m})$ 的真理想, 则</p>
<ol>
<li>$ht(I) = depth_I(A) = \dim A - \dim(A/I)$</li>
<li>对任意素理想 $p \subset q, ht(q) = ht(p) + ht(q/p)$.<br><strong>Proof</strong>: 1. $ht(I) = r$. 我们可以选择 $a_1, \cdots, a_r \in I$ 使得 $ht(a_1, \cdots, a_i) = i \quad 1 \leq i \leq r$. 由引理 7, $a_1, \cdots, a_r$ 是 $I$ 中 $A$-regular 序列. 从而 $ht(I) \leq depth_I(A)$. 另一方面, 若 $b_1, \cdots, b_s$ 是 $I$ 中 $A$-regular 序列, 则 $ht(b_1, \cdots, b_s) = s \leq ht(I)$. 因此 $ht(I) = depth_I(A)$. 由于 $ht(I) = \inf \lbrace ht(P) \mid P \in V(I) \rbrace$, $\dim(A/I) = \sup \lbrace \dim A/P \mid P \in V(I) \rbrace$. 若 $ht(P) = \dim(A) - \dim(A/P)$, 对任意 $P \in Spec(A)$ 成立, 那么 $ht(I) = \dim A - \dim(A/I)$ 显然也成立. 由于 $A_P$ 是 C.M. 环, $ht(P) = \dim(A_P) = depth_P(A)$. 从而我们可以找 $P$ 中一个 $A$-regular 序列 $a_1, \cdots, a_r$. $A/(a_1, \cdots, a_r)$ 是维数为 $n-r$ 的 C.M. 环, $P$ 是包含 $a_1, \cdots, a_r$ 的极小素理想. 从而 $\dim(A/P) - n-r$(由上面的性质).</li>
<li>若 $p supset q$ 是 $A$ 的素理想, 则 $A_q$ 是 C.M. 环, 从而 $\dim A_q = ht pA_q + \dim A_q / pA_q$. 即 $ht(q) = ht(p) + ht(q/p)$.</li>
</ol>
<p><strong>Cohen-Macauly Ring</strong> 称一个 Noetherian 环 $A$ 是 Cohen-Macaulay 如果对任意 $A_P \in Spec(A)$, $A_P$ 是 C.M. local ring. 实际上只要在对 $A_P \in \omega(A)$ 成立即可.</p>
<p>设 $A$ 是 Cohen-Macaulay 环, 则多项式环 $A[x_1, \cdots, x_n]$ 也是 Cohen-Macaulay 环.</p>
<h2 id="To-be-Continue"><a href="#To-be-Continue" class="headerlink" title="To be Continue"></a>To be Continue</h2>]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>第一次校运动会 + 山地半程马拉松</title>
    <url>/maoshanMarathon2017/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">日常表白 zly</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="18bf13e2bec1fd13f57b7ab4cd97f91ecdf1586962894b4aa487517dd480ee6d">010b98dc5bd6c4293af1e30087aa0bbd2c8f23083857701b8012ad7103bda0c7c5cb1b450020ec279a5b5292f15e6295091639c3627acebd29896ea0ca446b3ad0a913d216973768a62825eac708c3bd0e06088135a26e0b0eb55907f3861ce8537c1062f7dc9f0862b3b302b8f5548f50074d24e8d9b292b90ca057b48e29e5ae00f312177967b017c0b4615515b8fcfc942a09eca7fa6957a7a5d6b7a07d008d2a00a5fa22dd84b38bba070a301ad4e3f88a9f2e3157b6900d4052a8ecd17be280870b04d3f471cc8e9f704d55966fe3212474f46b90efcf052ff86ae0a757bb223f5d3eadb197d237b838445b93a072d52b639eab6f616be5e3913ae26ab9240297664ed963f2035f1f28c9c0473259c04b6b8586fb6bc635dcafac5ae0079fcbe901199d9e755cfe771665ccfc02f0b6022e385cc97cdc080be564c32539ea00ae98eb8ac4a61afa9ce5bd2c2926825b083ffe802bb94b41cc8199cb5cddb80c19b4e12bd8796472b15af3535fd0d9e6e74b20ee163db26d91f17891297f0480c0cf287941c926e648f62265f72e04fc0e69c35437f0b0972f88435c7514882305ab8e98ff9dfa532431bb047db47e246093d3c54326949fce3fbbca35b17ecc0907b0562bcaf89bc1cd624ea6c75ab54b61366929615e298fba71f25ebb9129df1059f3db9e7063f0f2013d3176277172d5ec1717aa0d33c16685017c9c78e843afe47cea9477eef4e4028033d21628b6dee0c8926c16303d8c8537468713a67c5e1ca965169c21020ec722cbf0e4dae43bb7eec44c8500ee224cabb3db782cdb30968a420befae390aaef066a1065f6c1e31bd14a6491075501e488be3dd64f0d95c6c4c0addcee02fa818ad34e852243ff08b66fd73a3cd2bf5ad6a9ebdd41968f9c297e59eb06b275cb2d2f4c778ecd346251ce40c3e4128cdaf3b57dbab435f34e9e834a00e9a6a49a99748d3f2b338b5ec67e231d3e4ef57e984143b1c2bc63eb1e91b97df0ad1299c2467eb7f86a9c8d7c07eecbb6fdf8349b4c1729ddc1568beb7dd4ec3731fea76306c464800c06c007c651327b8077c3566c76ce2fff57bf617a67992a89b0cb62e08a8b0b60304796c5e60bd909e23a948ddd9f02af243d545de3878f2230ad8e45df564af31458ed41e15739835e6552edfc056a54d2595aef7e5a696cb9299c10eb26d65e0d3b6b545fc0366ee540f5676e1a17efe18be39f08a4f38f4ee75ed9b6d98aeed8e8ffabafd38d5e16d75bf3de040775fa66dcfe4716964b1b506adbfdfca585ed9f409da9f0d0726fb21fb8388cc49112c9af637d8bf06875ee8b9b2ba64152e7d3b748d6cca6d33dafdf07aab09325c2c13b8a2fb9e4ef4e786847b77b7a5be8bfdb288c17ef4d821fc4739bd0f30203bbefba3cf189e20678704a5a9eab94adceef83f36d299eeedcde4185381cfd2447b5f4f552b1dd2bd6386b430266498c04e813d03388bcd2a9912cd473bc796daa1c177b3f6285d3f82c767ddb7c1793c6579cfbb5ada799d819b387c291a068ad70966e430a30624f227a4cd716d6f483c2c476642b83821a525a006a082959ca256b3a7df07d6a7c77d9ce4b37f07db2d6ccce277aad991d32b6a6edd27a75012ca938bcfd9a1f618c47e6f5224bccd29507f2ec357d95e82ccbf8fd9b81f82aa069a4d54391086e7dc2d994fc1e90de34719907245e1cf504f5f1d8254bd8ca975357dd789dae3d7cf86d4f3d080e3a91005acf3a59c844ad4a8b152461b5933837b7f25ee57bd7a29c14ece6b94d9904db63d0489bf7715d0f513b7b7fc0027895f1394dfde8cb84d0702f8a857f22bd1d75bb1e274fb1de9a607193dcebe6fe7b843e3af900b7c97d24cd02c4721d61e3bd2f45b4e163309551b733323c4f03e57236ee5208fff563553a19b1bc6e9b45cb9f425a8f2a3a67e707b58ee3003e56850074d2694eddc4fba86760c9c85a7c64eabc984cf0b1adb60556df22daedd0435f3d47e2521fd43017a5243fdcec82834d915471e1ed4f80a8828fd90ced230f21e5e5a0db0b094b530a6e0bcdb78abe0e4fa4adb1ca7271460db2670840190a0b5fa2d5840d8f781b0dad21e55744c0af767d71784681e81d4f79fa783e67baebcc32fe6dcdd1d5b61364e8d51f38362483bbf5a72a53e725f85cc9aa2243b0677d1cad9223c2496b3ed82f3917b1f6a248b577de90b51f1c5630d11f5f73f67b201336a43f522bb14921056213bca3dd2644510481b027bf545e6071a64ac613f88d657bb6a4f6d1297a057859383da522c5114977928e9a6415e9611f37e0dbf923d9af0d9d218cfeb69deeae3a8815e9d947e31cefa4b25ce7885d261ae2964fe488f6456b7eeb0d936273c00112122a41908c47f7efcf391b7f8dd063843698b0f4262a2e31e6c3fb651031a0b83eb3d279ca7149250a0c931a40ff4e5afa8a0644ddbe5dd3faa60148bde4684fa8a10928246e4157d686743be905841433c39f7711a8fde4c6c28544f0e898ed04ae7bc67f888689d1d4c4e16b29c7d528f3336bfb52f826e73c275baccdfb25a62b7a2d345cbe943abace97953a3042b424a043021446cafd4ba697b8f98cdcbe35424dde989e54ce5794fbdb6b0eb63a1b070a3a66f12ce43d919ce1640e653b0fd937054de2db48ad12984f200d8e142e184d8d7d1da1e98194358502fc9d98595ba2c90df90df436cc6457abf37e8c3cecdd32d9af58058d9c98c2597f5985780e2f02e6531b6bce94f9e6176c310afeb4cfe6c41a80861a6ff4f0226b39712823cbc57ba983844bc0d6cf3294ec1c7fce34903a4e41fd75d4b06c0ad6bfd7bc3497757dc24e4fa9d1a255c641910fd12be17c3238276d0b2f652dc7d28b605e78160e9b2ebf25363be7c394e24e114887aecc5fab629717dd39b3b446c44e061c7d3765050d17fed96ccf653df097a98f77a014e67081513da4969e7ec2e7bb1527e088dc2f9401bdceae214dea998cce0026a01e0d461a2238d7f629fa2abadb1d8daef26dc7c0edb506f9ac5e7347c916eb1f93e755cf5146c9339df57760ae6338b8344bd18612c0099def5bc68b34b436f85b70a3a3a67d8b1b42ace70a968cc221d9c3faf8542c39544fc683ba6b556014a8b79cdf49acc8cd5e8a616b64ac724c15c1211159979cb0ce8fe16a2cf5cbbc83d1aeb6611e9193779df3af4d0ad559c61b6a0ffdf29707efd73b82fc7ada4f2be537d1830d8dd2ecc0d178d16a5c20877b9ebdac4b99744594d352d2962c5b74584f7e36cede5d84fd65411b832bc87816f9a1d69b1fceddf0af814ae20a8514fbcaeeeebce773b7e6498c9979ba039225c63ff2e22e61e23d50fa88ce1849c45944a7307ce974d613e63cbba0c5a16906b2117c03bd3dbd72d25b91f2ed7c8e820405e3bb04d9c0b74035bad09b62d1a6f1ad9d71756b2232e5a149a5a368c9411753f9959bb6f744b67bbddd390b5b359c7d26540122147acb1cc3e502c2a7129a04491369f94c406d35c34b6ca931d020886712add9b0d215ec636675a7d120885d71cba1a7a989bc61010b84f0ecc08a6080161532d1d578aa99d8a811aea47eb4404be93a254f564157d8ee091422e2d1c1e4e91a3c3f2d6da0cb32fe73a9cde18b50bcb70c2794692bb36f707ed4d5eae6ac37b1fe0dff2e6fe6271969b81f553e1986c05d66437fffcf442445a3a61c5a22538c3e26092e57109b842f25d27abc6b3b772a6c7eb3c723ec2dd97760642edb654e8fe9b9e802e797839e544d3c6dfc68a139ecd9c03c62639908343f353f68375702dd1b01356d0a2b74bd45b3521f718421669c2d93e1c7ba2fe80ebd0c2a29bd250b5dc867e5413f0387d63aa5dcbf76c2f41886c0e33fb0b01</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Encrypt</tag>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>《Lecture on Modules and Rings》读书笔记</title>
    <url>/LectureOnModuleAndRing/</url>
    <content><![CDATA[<p>为了把看过的知识变成自己的东西，在此理一下思路（导师建议学的东西记录一下，不然以后过不了多久又忘了，花了时间就要有收获）</p>
<a id="more"></a>
<h2 id="自由模"><a href="#自由模" class="headerlink" title="自由模"></a>自由模</h2><p>给定一个环 $R$，其上(右)自由模</p>
<script type="math/tex; mode=display">
F_R = R^{(I)} = \bigoplus_{i \in I} R_i, \quad R_i = R</script><p>有两种等价刻画：</p>
<ol>
<li><p>$F_R$ 有一组基 $\lbrace e_i : i \in I \rbrace \subset F$ 使得 $F_R$ 上任意元素都可以唯一的写成 $e_i$ 的 $R$-线性组合</p>
</li>
<li><p>$F_R$ 有一组基 $\lbrace e_i : i \in I \rbrace \subset F$ 满足“universal property”: 对 $M_R$ 中任意 $\lbrace m_i : i \in I \rbrace$ 有唯一的 $R$ 模同态 $f: R_R \to M_R$ 使得 $f(e_i) = m_i ,i \in I$</p>
<blockquote>
<p>$R^I$ 表示 $R$ 的 $I$ 次积, 当指标集 $I$ 有限时, 积与直和(余积)等价,此时 $R^{(I)}$ 通常写成 $R^n$</p>
</blockquote>
</li>
</ol>
<h3 id="IBN-Invariant-Basis-Number-性质"><a href="#IBN-Invariant-Basis-Number-性质" class="headerlink" title="IBN (Invariant Basis Number) 性质"></a>IBN (Invariant Basis Number) 性质</h3><p><strong>Generation Lemma</strong> 表明，对任意模，若 ${e_i : i \in I}$ 是其一族极小生成集，且 $I$ 是无限集，则 $M$ 不能由基数小于 $I$ 的集合生成。</p>
<p>由 <strong>Generation Lemma</strong> 可知，若 $R^{(I)} = R^{(J)}$,且 $I$ 无限，那么 $|I| = |J|$，但是当 $I$ 有限时，结论并不一定成立，例如 $R = End(_kV)$,其中 $V$ 为可数无穷维空间，则 $R \simeq R^2$. 因此提出 <strong>IBN​</strong> 的概念：</p>
<p><strong>IBN (Invariant Basis Number)</strong> 称环 $R$ 满足 <strong>IBN</strong> 性质，如果对任意</p>
<script type="math/tex; mode=display">
m,n \in \mathbb{N}, R^m \simeq R^n \Longrightarrow m=n</script><p>由定义不难看出，$R$ 不满足 IBN 性质，当且仅当, 存在 $R$ 上 $m×n$ 矩阵 $A$ 和 $n×m$ 矩阵 $B$ 使得</p>
<script type="math/tex; mode=display">
AB = I_n, BA =I_m</script><p>因此 IBN 性质是对称概念.</p>
<blockquote>
<p>由 IBN 上述等价定义知 $f: R \to S \neq 0$ 为环同态，则 $S$ 满足 IBN 性质可推出 $R$ 满足 IBN 性质。</p>
</blockquote>
<p>由上面的结论又可以给出很多满足 IBN 性质的例子：<br>Divison rings, local rings, semilocal rings, nonzero commutative rings, finite rings.</p>
<h3 id="stably-finiteness"><a href="#stably-finiteness" class="headerlink" title="stably finiteness"></a>stably finiteness</h3><p>称环 $R$ 为 stably finite，如果对任意 $n$</p>
<script type="math/tex; mode=display">
R^n \simeq R^n \oplus N \Longrightarrow N=0</script><p>等价定义: </p>
<ol>
<li>对任意 $n$, $R^n$ 是 hopfian</li>
<li>对任意 $n$, $M_n(R)$ 是 Dedekind-finite 的.</li>
</ol>
<p>由 2 可知 stably finite 是对称概念.</p>
<blockquote>
<p>由 $Mn(R)$ Dedekind-finite 可知:<br>若 $g:R→S$ 是嵌入(单射)同态(不要求幺元映成幺元), 那么若$S$  stable finite, 则 $R$ 也是.</p>
</blockquote>
<p>由上可知:</p>
<script type="math/tex; mode=display">
\prod _{i \in I} R _i \quad \text{ stably finite } \iff R _i \quad \text{ stably finite for all } i</script><p><strong>例子</strong>: Commutative Rings, Noetherian Rings</p>
<p><strong>性质</strong>:<br>若环 $R$ 不是 stably finite, 我们可以做一个最大的商环 $\bar{R}$ 使得 $\bar{R}$ stably finite.<br>$\bar{R}$可以如下构造, 并可以说明它确实 stably finite.<br>设 $T$ 为所有形式 $I-YX$ ( 方阵$X$,$Y$满足$XY = I$的中元素生成的理想。可以证明: $\bar{R} = R/T$</p>
<p>自然地, 我们要问啥时候 $\bar{R} = 0$? 这当且仅当存在 $C,D \in M_m(R)$,行向量$x$,列向量$y$ 使得</p>
<script type="math/tex; mode=display">
x(I-DC)y = 1</script><h3 id="rank-condition"><a href="#rank-condition" class="headerlink" title="rank condition"></a>rank condition</h3><p>称环 $R$ 满足 rank condition, 如果对任意 $n$, $R_n$ 中生成元的个数都大于$n$.<br>等价定义 1: 任意满同态 $f: R^m \to R^n$可推出 $m \geq n$.<br>等价定义 2: 环 $R$ 不满足 rank condition, 当且仅当, 存在 $n&gt;k \geq 1$, 那么存在 $n \times k$ 矩阵 $A$ 和 $k×n$ 矩阵 $B$使得$AB=I_n$</p>
<blockquote>
<p>由上面等价定义 2 知道 rank condition 是个对称的概念.</p>
</blockquote>
<p>若有环同态 $f:R→S$, 其中 $S$ 满足 rank condition, 那么 $R$ 也满足.</p>
<p>rank condition 与 stably finite 以及 IBN 之间的关系 $R \neq 0$:</p>
<script type="math/tex; mode=display">
\text{stably finite} \Longrightarrow \text{rank condition} \Longrightarrow \text{IBN}</script><p>套用一下定义,以及它们各自的等价定义,逆反命题就可以证明.</p>
<blockquote>
<p>stably finite 与 rank conditon 的密切联系</p>
</blockquote>
<p>对任意环 $R$, 下面结果等价:</p>
<ol>
<li>$R$ 满足 rank condition</li>
<li>$\bar{R} \neq 0$</li>
<li>$R$ 有一个非零 stably finite 的同态像 </li>
<li>对任意 $n \in \mathbb{N}, \quad C,D \in M_n(R)$，若 $CD=I_n$, 则对任意行向量 $x$ 和列向量 $y$, $x(I-DC)y \neq 1$</li>
</ol>
<p>这里难点在于 1 推出 4, 可以用反证法, 用增广矩阵得到</p>
<script type="math/tex; mode=display">
\begin{pmatrix} C \\ x(I-DC) \end{pmatrix} \left(D ,(I-DC)y \right) = \begin{pmatrix} CD & 0 \\ 0 & x(I-DC) \end{pmatrix} = I_{m+1}</script><blockquote>
<p>在 simple ring 中 stably finite 等价于 rank condition</p>
</blockquote>
<h3 id="strong-rank-condition"><a href="#strong-rank-condition" class="headerlink" title="strong rank condition"></a>strong rank condition</h3><p>称环 $R$ 满足 right strong rank condition, 如果对任意 $n$, $R^n$ 中任意线性相关的元素个数不超过 $n$.<br>等价定义 1: 任意单同态 $f: R^m \to R^n$ 可推出 $m \leq n$<br>等价定义 2: 任意 $m$个未定元 $n &lt; m$ 个方程的线性方程组在 $R$ 中必有非零解.(用线性相关的定义可知)</p>
<blockquote>
<p>实际上 strong rank condition 不是对称概念, 所以严格上, 我们要指出 left, right.</p>
</blockquote>
<p>由 (strong) rank condition 的等价定义可知:</p>
<blockquote>
<p>由于 $R^n$ 是自由$R$- 模,因此,可以推出 right strong rank condition 可推出 rank condition.</p>
</blockquote>
<p><strong>注意</strong> right strong rank condition 不像之前的满足 $f: R \to S$, 满足”性质”, 则 $R$ 满足”性质”.</p>
<p>$A \times B$ 满足 (right) strong rank condition (RSRC) 当且仅当 $A$ 或者 $B$ 满足 RSRC </p>
<p>由上面性质知道, stably finite 和 strong rank condition 是两个独立的概念, 彼此不搭嘎. 例如: </p>
<ol>
<li>$R = \mathbb{Q} &lt; x, y&gt;$ 是 stably finite, 但不满足 RSRC.</li>
<li>而由上面性质知道, 我们只要构造一个满足 RSRC 和一个不满足 stably finite 的积即可.</li>
</ol>
<p>满足 RSRC 的例子:<br>Noetherian rings, Commutative Rings.</p>
<blockquote>
<p>最后给出一个线性无关的等价定义:</p>
</blockquote>
<p>$u_1,\cdots,u_m$ 在 $M = R^n$ 中线性无关, 当且仅当</p>
<script type="math/tex; mode=display">
0 \neq u_1 \wedge \cdots \wedge u_m \in \bigwedge ^m (M)</script><h3 id="总结图"><a href="#总结图" class="headerlink" title="总结图"></a>总结图</h3><p>自由模下的关系(任意箭头一般都不可逆):</p>
<p><img src= "/img/loading.gif" data-lazy-src="MRing1.png" alt="MRing1"></p>
<p>一般地, Dedekind finite + Rank condition 依然无法推出 stably finite. 例如:</p>
<p>设 $R$ 为由元素$s,t,u,v;w,x,y,z$ 生成的 $k$ 代数,设 $A = \begin{pmatrix} s &amp; u \\ t &amp; v \end{pmatrix}, B = \begin{pmatrix} x &amp; y \\ z &amp; w \end{pmatrix}$ ,其中生成元满足关系: </p>
<script type="math/tex; mode=display">
AB=I_2</script><p>由此可知, $R$ 是 domain, 但是一般地, $BA \neq I_2$ 因此 $M_2(R)$ 不是 Dedekind finite 的. 因此 $R$ 不满足 stably finite 条件.<br>定义 $f: R \to k$ 为 $f(s)=f(v) = f(x) = f(w) = f(1) = 1$, $f(u) = f(t) = f(y) = f(z) = 0$. 因此由 $k$ 满足 rank condition, so is $R$.</p>
<h2 id="投射模"><a href="#投射模" class="headerlink" title="投射模"></a>投射模</h2><h3 id="投射模的定义"><a href="#投射模的定义" class="headerlink" title="投射模的定义"></a>投射模的定义</h3><p>称一个右 $R$-模 $P$ 为 projective module（投射模）,如果<br>对任意 $R$ 模满同态 $g:B\to C$ 和任意 $R$ 模同态 $h:P\to C$,存在 $R$ 模同态 $h’: P \to B$ 使得 $h = gh’$</p>
<blockquote>
<p>由定义显然自由模都是投射模.</p>
</blockquote>
<p>等价定义: 从右模范畴到 Abel 范畴 $\hom(P,-)$ 的函子是 exact functor(正合函子).<br>由定价定义易知:</p>
<script type="math/tex; mode=display">
\bigoplus_{i \in I} P_i \text{ 投射当且仅当 } P_i, i\in I \text{ 投射 }</script><p>由之前说明的自由模都是投射模可知以下条件等价</p>
<ol>
<li>$P_R$ 投射</li>
<li>$P_R$ 是某个自由 $R$ 模的直和因子</li>
<li>任意满同态 $B_R\to P_R$ 可裂</li>
</ol>
<p>由此可知:(Eilenberg’s Trick) 若 $P_R$ 投射,则存在自由模 $F_R$ 使得 $P \oplus F \simeq F$</p>
<blockquote>
<p>Proof: 由 $P_R$ 投射模, 所以存在 $Q_R$ 使得 $P \oplus F \simeq F$ 为自由模, 取 $F$ 为 $E$ 的可数直和即可.</p>
</blockquote>
<p>不是投射 $\mathbb{Z}$ 模的例子:</p>
<script type="math/tex; mode=display">
\mathbb{Z} / 2 \mathbb{Z}, \quad M = \mathbb{Z} \times \mathbb{Z} \times \cdots</script><p>一个有趣的结果:<br>设 $P = \mathbb{Z} \oplus \mathbb{Z} \oplus \cdots \subset M$, 则 $\hom_{\mathbb{Z}}(M/P,\mathbb{Z}) = 0$<br>证明关键点在于 $M = A_2 + A_3$, 其中 $A_k = \lbrace (k a_1,k^2 a_2,\cdots,k^n a_n,\cdots): a_i \in \mathbb{Z} \rbrace$,<br>然后说明 $A_k\in P$, 且 $f(M)=f(A_2)+f(A_3) \subset f(P)$ 即可.    </p>
<h3 id="Dual-Basis-对偶基"><a href="#Dual-Basis-对偶基" class="headerlink" title="Dual Basis(对偶基)"></a>Dual Basis(对偶基)</h3><p>$P_R$ 是投射模, 当且仅当它有对偶基, 即存在一族元素 $\lbrace a_i: i\in I \rbrace \subset P$ 和线性函数 $\lbrace f_i: i \in I \rbrace \subset P^{\star} = \hom(P,R)$ 使得对任意 $a \in P$, 只有有限个 $f(a_i)$ 非零, 且 $a = \sum a_i f_i (a)$.</p>
<p>对任意 $R$-模 $M_R$, $M^{\star} = \hom(M,R)$ 是左 $R$-模, $M^{\star \star} = \hom(M^{\star} ,R)$ 是右 $R$-模, 我们有自然的右模同态, $\epsilon: M \to M^{\star \star}$ 定义为: $\epsilon(a) = \hat{a}$, 其中 $\hat{a} (f) = f(a)$ 为求值函数.</p>
<blockquote>
<p>特别地, 当 $M_R$ 是投射的, $\epsilon$ 是单同态, $M_R$ 是有限生成投射时, $\epsilon$为同构.</p>
</blockquote>
<p>例: $e \in R$ 为幂等元, 则 $R = eR \oplus (1-e)R$, 所以, $P = eR$ 为有限生成投射模.</p>
<h3 id="Invertible-Modules-and-Fractional-Ideals-可逆模-可逆理想"><a href="#Invertible-Modules-and-Fractional-Ideals-可逆模-可逆理想" class="headerlink" title="Invertible Modules and Fractional Ideals(可逆模,可逆理想)"></a>Invertible Modules and Fractional Ideals(可逆模,可逆理想)</h3><blockquote>
<p>此小节中默认 $R$ 为交换环</p>
</blockquote>
<p>很大一类的交换环上的投射模是由环扩张 $S \supset R$ 得到的.<br>现在, 给定(交换)环扩张 $S \supset R$. 考虑模 $S$ 的 $R$-子模, 设 $P,Q$ 为模 $S$ 的 $R$-子模, 定义:</p>
<script type="math/tex; mode=display">
PQ = \lbrace \sum p_i q_i : p_i \in P, q_i \in Q \rbrace, \quad Q:P = \lbrace s \in S: sP \in Q \rbrace,\quad P^{-1} = \lbrace s \in S : sP \subset R \rbrace = R:P</script><p>注意到 $P^{-1}$ 依赖于环扩张 $S$ 的选取.</p>
<p>由上面定义,我们立即有下面引理(条件 <code>1,2</code> 等价):</p>
<ol>
<li>存在 $S$ 的 $R$-子模 $Q$ 使得 $PQ = R$</li>
<li>$PP^{-1} = R$</li>
</ol>
<p>由于上述定价,我们把满足条件的 $P$ 称为 <strong>Invertible  $R$-submodule</strong> of $S$<br>在此条件下,我们有:</p>
<ol>
<li>$P$ 是有限生成投射 $R$-模 (利用 $\sum p_i q_i = 1$)</li>
<li>任意 $R$-子模 $M \in S$, 自然映射 $f: P \otimes _R M \to PM$ 是 $R$-模同构</li>
<li>$P^{\star} \simeq P^{-1}$ (因此 $P^{\star}$ 可以成 $S$ 的子模)</li>
<li>$P_R$是自由模,当且仅当存在$s \in R$使得$P = sR$(此时$s$必然是$s$中的可逆元)<blockquote>
<p>结论 4 经常用于说明一个模是投射模但不是自由模.</p>
</blockquote>
</li>
</ol>
<p>下面有一个很精彩的例子:<br>设$R \subset S$ 为交换环, $g \in S$满足 $g^2,g^3 \in R$, 即 $g^n \in R$ 对 $n&gt;1$ 成立. 定义$P_r = (1+rg, g^2)$, 那么</p>
<script type="math/tex; mode=display">
P_r P_s = (1+rg,g^2)(1+sg,g^2) = (1+(r+s)g+rsg^2,g^2+sg^3,g^2+rg^3,g^4)</script><p>显然上面集合包含 $g^2(1+(r+s)g+rsg^2)-rsg^4 = g^2 +(r+s)g^3$,<br>因此包含 $rg^3,sg^3,g^2,1+(r+s)g$, 因此</p>
<script type="math/tex; mode=display">
P_r P_s = (1+(r+s)g,g^2,rg^3,sg^3)</script><p>再由 $g^3(1+(r+s)g) - (r+s)g^2g^2 = g^3$ 可知: </p>
<script type="math/tex; mode=display">
P_r P_s = (1+(r+s)g,g^2) = P_{r+s}</script><p>因此 $P_r P_{-r} = P_0 = (1, g^2) = R$, 即 $\lbrace P_r: r \in R \rbrace$ 是一族 Invertible $R$-submodule of $S$(因此投射), 且 $P^{\star} = P_r^{-1} = P_{-r}$. $P_r$ 是 $R$-free 当且仅当 $u(1+rg) \in R$ 对所有的 $u \in U(R[g])$</p>
<blockquote>
<p>之前说过 $P^{-1}$ 依赖于 $R$ 的扩张 $S$ 的选取,现在我们在 $R$ 的所有 regular element(正则元)这个乘闭子集 $C_R$ 上做局部化得到环 $K$, 那么自然映射此时是单同态, 因此局部化得到的环可以看做 $R$ 的扩张(由 $R$ 唯一决定). 且对任意 $k \in K$, 都存在 regular element $u$ 使得 $u_k \in R$.</p>
</blockquote>
<p>称 $K$ 的 $R$-子模为 <strong>fractional ideal(分次理想)</strong> 通常记为 $\mathfrak{A}$</p>
<p>引理: 对任意 fractional ideal $\mathfrak{A} \subset K$ 且 $\mathfrak{A} \cap C_R \neq \emptyset$, 则有 $\hom(\mathfrak{A}, K) \simeq K$.</p>
<p>Proof: 作映射 $\lambda : K \to \hom_R(\mathfrak{A},K)$ 为: $\lambda(k)(a) = ka$, 证明单满即可.</p>
<p>对任意 fractional ideals $\mathfrak{A},\mathfrak{B} \subset K$, 我们也有类似引理的证明: 当 $\mathfrak{A} \cap C_R \neq \emptyset$</p>
<script type="math/tex; mode=display">
\hom_ R(\mathfrak{A},\mathfrak{B}) \simeq \mathfrak{B}:\mathfrak{A}</script><blockquote>
<p>特别地, 若 $\mathfrak{A} \cap C_R \neq \emptyset$, 则 $\mathfrak{A}^{\star} = \mathfrak{A} ^{-1} = R:\mathfrak{A}$.</p>
</blockquote>
<p>对任意 fractional ideal $\mathfrak{A} \subset K$, 下面等价:</p>
<ol>
<li>$\mathfrak{A}$ 是 invertible module($\mathfrak{A} \mathfrak{A}^{-1} = R$)</li>
<li>$\mathfrak{A}$ 是投射模,且 $\mathfrak{A} \cap C_R \neq \emptyset$</li>
<li>$\mathfrak{A}$ 是有限生成投射模,且 $\mathfrak{A} \cap C_R \neq \emptyset$<blockquote>
<p>此条件下 $\mathfrak{A}$ 自由模当且仅当 存在 $s \in K$ 使得 $\mathfrak{A} = sR$(此时 $s \in U(K)$)</p>
</blockquote>
</li>
</ol>
<p>由上可知: 若 $R \neq K$, 则 $K$ 不是投射模.</p>
<p>Proof: 如果是, 那么必然有限生成投射, 因此</p>
<script type="math/tex; mode=display">
K= \sum _{i=1} ^n R c _i d _i ^{-1} (c _i \in R, d _i \in C _R)</script><p>那么 $d = d_1 \cdots d_n \subset U(K)$, 我们有 $K = dK \subset R$ 矛盾于条件.</p>
<blockquote>
<p>因此 $\mathbb{Q}_{\mathbb{Z}}$ 不是投射模.</p>
</blockquote>
<h3 id="交换环上的-Picard-Group"><a href="#交换环上的-Picard-Group" class="headerlink" title="交换环上的 Picard Group"></a>交换环上的 Picard Group</h3><p>实际上, 第二小节和第三小节中的 Invertible Module 都是”秩为 1”的有限生成投射模, 对于交换环, 秩的概念定义如下:</p>
<p>由于若 $P,Q$ 为$R$-模, $P \otimes Q$ 也是 $R$-模, 且当 $P,Q$ 投射时, $P \otimes Q$ 也是投射模.</p>
<p>当 $P$ 是有限生成投射$R$-模时, 对于 $R$ 的任意素理想 $\mathfrak{p}$, 在其上局部化得到 $P_{\mathfrak{p}} = P \bigotimes_{R} R_{\mathfrak{p}}$ 也是有限生成投射的. 由于 $R_{P}$ 交换局部环, 因此 $P_{\mathfrak{p}}$ 是自由的(交换局部环上有限生成投射模是自由模).因此就有秩, 也就是说我们有从 $R$ 的素谱到 $\mathbb{Z}$(带离散拓扑)的一个连续映射. 当这个映射是常值映射时(这要求 $R$ 中无非平凡幂等元),就称这个常值为投射模 $P$ 的秩.</p>
<blockquote>
<p>注意到若 $rk(P)=n,rk(Q)=m$ 那么 $rk(P^{\star})=n, rk(P \otimes Q) = mn$</p>
</blockquote>
<p><strong>引理</strong> 设 $R \subset S$ 为交换环, 那么在任意 $S$ 的可逆 $R$-子模都是秩为 1 的投射模.</p>
<p>Proof: 用一个 Invertible Module(可逆模)的定义, 以及成为自由模的条件, 即可证明.</p>
<p>设 $Pic(R)$ 为 $R$ 上所有秩为 1 的有限生成投射模的同构等价类. 将 $P$ 的等价类记作 $[P]$<br>我们定义乘法(满足结合律, 交换律):</p>
<script type="math/tex; mode=display">
[P][Q] = [P \otimes Q]</script><p>$[R]$ 成为 $Pic(R)$ 中的幺元, $[P]^{-1} = [P^{\star}]$.<br>即 $Pic(R)$ 关于上述乘法构成 Abelian group. 称为交换环 $R$ 的 Picard group.</p>
<blockquote>
<p>实际上 “Pic” 还是交换环范畴到 Abelian group 范畴的函子.</p>
</blockquote>
<p>具体到 $R \subset K$, $K$ 中所有 invertible fractional ideals 是 $R$ 上秩为 1 的有限生成投射模(记为 $I_{R}$) 但是一般地 $R$ 上所有秩为 1 的有限生成投射模并不一定同构与某个 invertible fractional ideal.</p>
<p><strong>定理</strong> 对自然映射 $f: R \to K$, 我们有正合列</p>
<script type="math/tex; mode=display">
 1 \to U(R) \to U(R) \to I_{R} \to Pic(R) \to Pic(K)</script><h3 id="semi-Hereditary-Rings"><a href="#semi-Hereditary-Rings" class="headerlink" title="(semi)Hereditary Rings"></a>(semi)Hereditary Rings</h3><p>在交换环中, Dedekind (domain) ring 定义为交换整环 $R$, 所有理想都是 Invertible Ideal(或者说投射的). 这说明 $R$ 必然是 Noetherian domain. 因此 Dedekind ring 也可以定义为 Noetherian domain 中整闭的 Krull 维数为小于等于 1 的环, 也可以定义为满足每个理想都是一些素理想的有限积的交换整环.</p>
<p>把上述 Dedekind ring 推广到非交换的情形, 我们有如下 <strong>Hereditary ring</strong> 的定义:<br>A ring $R$ 称为右(左)Hereditary ring, 如果它的每个右(左)理想都是投射的, 如果它既为左又右,那么就成为 Hereditary ring.</p>
<p><strong>Kaplansky’s Theorem</strong> 设 $R$ 为 right Hereditary ring. 任意 $R$-自由模的子模 $P$ 都同构于 $R$ 的一些理想的直和. 特别地, $P$ 是投射的.</p>
<p>由于每个模都可以看成自由模的同态像, 投射模是某个自由模的直和因子, 又由 Kaplansky 定理知:</p>
<ol>
<li>在一个 right hereditary $R$ 上, 一个 $R$-模 $P_R$ 投射, 当且仅当它能嵌入到一个自由模中.</li>
<li>环 $R$ 投射, 当且仅当, 每个投射 $R$-模的子模都是投射的.</li>
<li>若环 $R$ 是 PRID(principal right ideal domain), 那么每个自由 $R$-模的子模都是自由的.</li>
</ol>
<p>类似于 Hereditary ring 的定义, 我们称一个环 $R$ 为 <strong>semihereditary ring</strong>: </p>
<p>$R$ 称为右(左)semihereditary ring, 如果 $R$ 的每个 f.g.(finitely generate 有限生成)右(左)理想都是投射 $R$ 右(左)模. 如果既左又右, 称为 semihereditary ring.<br>我们称交换的 semihereditary ring 为 Prufer ring.</p>
<p>类似于 <strong>Kaplansky’s Theorem</strong> 我们有 $R$ 为 right semihereditary ring. 任意 $R$-自由模的有限生成子模 $P$ 都同构与有限个 $R$ 的理想的直和.</p>
<blockquote>
<p>right semihereditary 的等价刻画:</p>
</blockquote>
<p>$R$ 为 right semihereditary ring 当且仅当投射右 $R$ 模的有限生成子模都是投射的.</p>
<p>例子:</p>
<ol>
<li>Semisimple ring is hereditary.</li>
<li>PRID is right hereditary, 例如 $D[x]$, 其中 $D$ 是 division ring.</li>
<li>$M_n(R)$ is semihereditary, 其中 $R$ 为 Dedekind ring.</li>
<li>von Neumann regular ring is semihereditary.</li>
<li>$\begin{pmatrix} \mathbb{Z} &amp;  \mathbb{Q} \\ 0 &amp; \mathbb{Q} \end{pmatrix}$ 是 right hereditary, left semihereditary, but not left hereditary. Note that this example is also left artinain but not right Noetherian.</li>
</ol>
<h3 id="Hereditary-Artinian-Ring"><a href="#Hereditary-Artinian-Ring" class="headerlink" title="Hereditary Artinian Ring"></a>Hereditary Artinian Ring</h3><p>Hereditary Artinian ring 十分的重要(因为简单 0.0), 一般一个概念加上 Artinian 条件就会变得特别简单, 例如 Artinian commutative domain is field.</p>
<p>设 $J = rad R$ 为环 $R$ 的 Jacobison radical. 若 $R$ 是 Artinian ring. 以下结论等价:</p>
<ol>
<li>$R$ is right hereditary.</li>
<li>$J$ 作为右 $R$-模是投射的.</li>
<li>对任意幂等元 $e$, $eJ$ 是投射右 $R$-模.</li>
<li>$R$ 的任意极大右理想都是投射右 $R$-模.<blockquote>
<p>证明难度还是有的, 要用到任意有限生成 Artinian 模都是有限长的.</p>
</blockquote>
</li>
</ol>
<p>例子:</p>
<p>设 $R$ 是 divison ring $D$ 上的 $n \times n$ 上三角矩阵全体, 则 $R$ 是 hereditary Artinian ring.</p>
<h3 id="Trace-Ideal"><a href="#Trace-Ideal" class="headerlink" title="Trace Ideal"></a>Trace Ideal</h3><p>Definition: 对任意 $P_R$, 定义 $tr(P) = \sum im(f)$ 其中, $f$ 跑遍 $P^{\star}$. 容易看出 $T = tr(P)$ 是 $R$ 的理想, 称为 Trace Ideal. 它满足:<br>若 $P_R$ 是投射的, 则 $PT = P, T^2 = T, ann(P) = ann_r(T)$<br>特别的, 若 $P_R$ 是有限生成投射的, 那么其对偶基 $\lbrace a_i f_i \rbrace_{1\leq i \leq n}$. 那么 $tr(P)$ 可由有限集 $\lbrace f_j(a_i) \rbrace$ 生成.<br>另外,若 $tr(P) = R$, 我们称 $P$ 是生成子.</p>
<p><strong>引理</strong> 设 $T$ 是交换环 $R$ 的有限生成幂等理想, 则存在幂等元 $e \in R$ 使得 $T=eR$.<br>Proof: 关键在于把 $T$ 写成 $T = \sum_{i=1} ^n Tx_i$</p>
<p>由上述引理和 $T = Tr(P)$ 的性质, 不难证明下面定理:<br><strong>定理</strong> 设 $P_R$ 是交换环 $R$ 有限生成投射模, 那么存在幂等元 $e$ 使得 $T=Tr(P)=eR, N = ann(P) = (1-e)R$, 特别地, $R = T \otimes N$, 投射模 $P_R$ 是 faithful(忠实的)当且仅当 $T = R$.<br>当 $R$ 无非平凡幂等元时, 则 $P \neq 0$ 是(有限生成投射)生成子. </p>
<blockquote>
<p>定理中条件缺一不可, 且幂等元 $e$ 可以根据有限对偶基显式表达出来.</p>
</blockquote>
<p>Trace ideal 的应用:<br><strong>引理</strong> 设 $R \subset S$ 是环(不要求交换), 则 $R$ 是 $S_R$ 的直和因子, 当且仅当, $Tr(S_R) = R$.<br>Proof: 若 $R$ 是 $S_R$ 的直和因子, 则 $Tr(S_R) \supset Tr(R_R) = R$, 所以 $Tr(S_R) = R$.<br>若 $Tr(S_R) = R$, 那么存在 $f_i \in S_R^{\star},s_i \in S, (1 \leq i \leq n)$ 使得 $\sum f_i(s_i) = 1$.<br>定义映射 $\lambda: S \to R$ 为: $\lambda(s) = f(s_i s)$. 为环同态, 且在 $R$ 上限制为恒等映射.(因此 $R$ 是 $S_R$ 的直和因子).</p>
<p><strong>定理</strong> 设 $R \subset S$, 其中 $R$ 是交换环, $S$  是 f.g. 右 $R$-模. 则 $R$ 是 $S_R$ 的直和因子.<br>Proof: 由 $ann(S_R) = 0$, 在由上面引理即证。</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>2017 横店马拉松</title>
    <url>/hengDianMarathon2017/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">日常表白 zly</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="f23ac8c1235d88f0476c7a3b36b424664b2bcd8fa71cb253588c1aa9ef98f7c6">f4647356fba07bf28b4b6a3e7b03b38f4628766f98ae0424ccbd481648acbe8d8e1a1a201c2ee8266a97cd27c77d0c7ae8343e85c556bc585af85269b33afbc2a1b9f85c50484bd25d762aa292c3e67a1a1e0d6b0eae21d996a3ba75104199754f52cd4fdb5ea7354b80a3f21b708e4072509d0c0737413c01b3b7e6715bd3bc4b4a938c6354736f246d21daa1e82838e1e3dbf36d43a9b90ceff1eb11e6966db9f3e694537b41fc46555bd4523491be08cb99295c142442ef0982d91f96ce75543494d7ebfade9e020b9284a6ccde05891807db3913bb3442b1f2ad9a5b7271956b0bfd6325db5e4c63348a53203fc6129fb5574cce3061b7ed41c9357582966e615c2f17ba12376ad721c011e9f926906c193fc0fb2bb6fb5e32c923be676ffa83cb51223d88b860c139c4bfec42599c652f1047665dcf11499e0b4f3f5ea75921d73423a7f487fba61ac3ab276da1d532716aa72118646326780caea5d8359342120dddae58da865754729b9d0e39f9dcb568dcf606c224efee88660ac99f53f550fc0257d2b86571dfbafdf8bbd04b2998deb1a67bb0a2394eb60e71a0ba187909c5e7e41cd60239e2dd617174fe2017224c5ef2248f54032175205851693f5ce06232dfc98a6113b2ca128417133883e459c5f02711073345000581f83466fa927bcb54222dda8c569f8ae5916f58374c751dcd17ab303f455ab93bafb69408c9ae6ad3611615ad4b054951eed1352d10614250677d16219fb80823334c10f14238d9bdc2caa52b009be35f496ef1c995b69543c6c4550714e9e30bc357dee92212c874a6812a1160ceb9ca2099e43492bbd212d3c1251b46e2e7ccbbf6128a31c4f040b2c1889ee4aa386b4f14c83f1d6ffa541ca36006b62b354e7acf5d55e84ee8beadd9937316c868d70f6da46509a2c7d7413afea4d614da7a6ba9bf3e30fc5210b67f5395947860d719f48d49061234eaf6ed43f9478f426fedb4a3810b938f189da27b8b76769fb1c7f785275679cde0daabd7b3da613edeba650be3a8b7b01068b7707f009402b92961e94f1529f8766d66416e47000a15482129f16c79d7f5b60b69dc9bbc5384c8364410021f28f9a47630cabf344d2b8bdf30e785cc238565530358b776fd78a329975cfcd9fc5f71c001577b9897c3b05ecd0fb890637b46857682b6b99d83ff16581f003c8603190d1f80292970620b33cbac80a7d80f2f28a4a383e654624ec53ca5e32dcb7b834f152d0ad1d75679ed4e428efee34bf48f85cca17ca680bedde196427f1a1d3abb9793ccbe10e478b7577b2ad0bcd1d166f30491f8764fa9511c4cfe93673f4d5629b31ebc27666024a115ba60deba08cb9d1dd1f79fc168f0011fb4fc9c87e0c22f4bbb9a676ad750c042d22f71714a6cdd8c96a7dcf484657769eac71ba120e560138d8be47f82f0afb4d7b64177136c9cedc3a06642b90ae72f50a0dd004dcb6421305f0963b93670018e2e9c7bacd8e979d8f713603b52722e9680758e0866fcd13a964aef9118525e089e5536af69f96cc31495a1d7b053385b735f2ce2048ce301e414d14b2c2e3183252029620e5d85e3a5a038140b308f20ffc8acae3f9ff03a189bf0f645a261c204ab710ecce3e7e68e7b1970688e04bc9757ec71fcfabe7cb3b9706dbd8145b8f1d68a2cd77d5dcdf8588564709ed5894ff0ed3ab2a5b7d905aa0ddd13840ffb3e807b11125e7d00653339de0d8305b391247847bdfba872609528e2784b4f6283920b650ca0f625d3cbe3a2325e1f31fef03b45d0c6649f3ab2e66a3f91ac4554bfae5ed8847954f3f8728abdf237d1c748ace0cef18bd5ad32eb35430357c8a16be38a4f54b17ceb2eb3a720e3a7d206c5e9ebb7cb1e94444f6e2547fb3082bab2b76fd641f7f4553f730133608c709fb9e5a86322384026c9d381c0f79138f1427cfd773a7782075f64b0eaf7bb11aaa2c29b5544a3746ccf11fa7bc04cf33dc417d6369f8330e27c2248e454abd8efe0067851022d5ce0aeae5a4046132ed033f1bef723c476cb974141a224ebb2556a6d0dbe45d0027b688525d37c48d21859fb5b0275428139d52d0cade210f149fcedca838e20d8c0f7d6633eca25a2052a21d712ef70d9548c08adf0b817346cb22cdd23c27d95170bed2e80a46b2117052b9689780e76d6f865fec29b30f66d2b7fbf771da9ab944c0d772d6c5429305e030cbbb0dc8b613069a16f2e8ded597f88b959134d39bdfc398d4333ed35f3f3fc8326d1a07d5be4610df74ff190ffc32b2dca09bbe262f7b4f0abf788bfa6e001dff1e45d5fd4ab666ffd501b181e3d0791960cd1025d2d174adda1041d1558530c582a17a7b2959b631a383f801e7bd30d1312bbe04b0dd63aead6652725530d9dcbe6f3d41f1a6375e8bc4e86e852082ea73e90063c30587a4cb5ef592714dee050ed8d2fa324eab921c84bf73335bc0da8c3f62e4e02e30e6ae391764fbc4f28f7c3e778caa08c8eada0c51b25724bd452a9729bcf6c562dfa94bab98d0cc4420e5cd0448c637935fbf8eab434e1c767c587c474f7e09bec01458416eb18b3511f917dda8fb4ae8a7a00e2b59af88b9a4412dbaa9b8530ba6140b2f5c527137d3b693f968630493a07f7d9749ade7dea1aa774ccfd1803ec6dea06591b9679b628c5e3431fa3ce612b022a016eacf40837bca0c418758987bc5a8e539087c4c92dc92a14aab72ce3690737a21f67bf63fe9297d954bd1a842cfd038cd7d0d812104ebc49e385848eeb74295181c6e3d39c38f9e80bcb426646e1fe94ad69847a5540a557cea96a6dad7ac62e35dea7dc92db075d0cdbd2139c3653128d66bdd89427cacaa3d0e42ec4bdad83a72bc19a7881e029a3485b6a0f6c2899d800fbf3dc71cabb66857afa887c3a795fe4af2453fc95676d497fe21b5ad205fd4eef5440419294a3a660062dcd962667da541d02fbc2f3fd00468a596972afc00223c5b8bea33a52d8c0db0384b659840883dacd6e5b6f610890d496cc67a357ab966a5e7a62b00c5817f18f4072d897b8363018a35ca7eb07caa826449ae4541550b3502d74c09d8b92075f88c9c9a467ca00e3ecc8a3e5095531a87a7f290a1540d2aa6a4292e2385da8b007bd89e9dac231a53eb03dcaeb863a262067d40b2d34fc1d5a54f0a579dcba1275848c279fcb64f326caa738b16a88afc18d9573c78b92a9a4ddaacf82aef7379e2961e267817fd6673db46d868e406c593d1be830bc80f6a68e512026952609be28d79acd30c768456d66d8d24839ed92b4907dda0516d349f4ddeef8a2250cd192ee948147036a76ac3716a8672cfcb84e84e423300989601377e388a5d5fb2d287c8487d1deff3102ea307ad2e512b946401060c9d44573fe94a5ef1b9f91477ca6952767e6368ca22268f1d7de61c4f318b53310971336040f006f3e01727e54606305cda2bc7dd3be96d536142a07754d1b93099cd23748c33fea09142b48d30b0e1d0e17771ac3a5cd0f84094e7b939b8fcc804bc1cc6761ec2d44c953b37b65126b3a4d4ac7326fd0db6d039f4ce533f515e48fa1ddc624f0e1ce658a890e593fda448281e3adf01690bb3b2b3b50dbcd29346d1b0d4f51ff7544231547631dce7e20508135ce5d6265fc414614c9d875447a2f40e2deb4ac7c8cc23b03db0b6a92a5fa3957be549b86010c01f7b346ddcc0b9fa4495dc67434585d5e6f8589efaad5eb6aae76af76428d95bf6834223c29494fe34514d5c4efab0e0d851f11d5547a34add0b0d56f8bb488ffaa2ba5810b623781609e5d46cf596c0f1dbfbd890778a1b78e921f0e3f002c7e890015805ce662f810687c30f8c743cba22d9ade687ccb356b5e5f5603eed66fc520c5de53cba5e0fe825085570d31b231f64edfd6f7d15ed49a167d1c57401617a9b29d1fca7845d7890e4f12582d4b882932608a6fff54b205421fbc6d66dd1b183cc3ff08baf67831b6f0531f583eb66ceb8a09c0a1eeea55860432f02308bc380076cadde0f4dc15b065cc2da35ac589f54baf4149745e773101eed709a4821fde73453790760841136e72c58f4393a45e88e01f13212578e7a828a3984e4a2b90a56cffb36bb353116b45551bd16f624efb80b0dc3ec6a1a75ed46eecd1a5710046de618751bcaed877fe1d484cbc4a7840194eb884fd555031f3312251c9b6656af0ac2cbd2a96034aa694053ca4c72b8819ccb9881a38100184c22f9f7d7f2de92457430fd32f74c31e16ce969fb571597240d380d39d82ab6f31535f6e4b537a757255b69bf011c99b4a938d4347d11e981e8990db6410a082a52a5fdd38d4e27642d3abead5509b0e6c9543df00f0765425bbf9bf2d44f830e8f0d09bd2442dcaedd0781acebac3e76c2159ed07f7318bfd0948c78fda776bd892a60dc292c31c6e829fe6fef8b1484fbd1117fcf7abeae43dc7f518b97efd6a9b0278b2b703447be1d9f730a421e8da19fc6310030729b38468cfc99ed1b1cb863059c6e846f203b3b1da912ea94a6901af</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Encrypt</tag>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>非交换环概念框架图</title>
    <url>/graphOfNoncommutativeRing/</url>
    <content><![CDATA[<p>最近在看 T.Y.Lam（林节玄）的书，深知非交换环的小技巧深不见底，不过仔细品味了一番之后也觉得十分有趣。最后给一张各种概念之间的关系，每一种概念都有很多等价定义，概念之间关系的推导也十分微妙，充满了技巧性。</p>
<a id="more"></a>
<p><img src= "/img/loading.gif" data-lazy-src="0.png" alt="noncommutaiveRings"></p>
<p>上面带 <code>=</code> 号的条件是说在此条件下，两个概念等价。<br>推理的细节，以及各个概念的定义为这里就不写了。</p>
<blockquote>
<p>有兴趣可以查阅 GTM 131 T.Y.Lam《A First Course in Noncommutative Rings》</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>与单个矩阵交换的矩阵全体</title>
    <url>/matrixCommuteWithOne/</url>
    <content><![CDATA[<p>这个结果还是有些重要的所以记录一下，但是呢？我太懒了，直接截图吧 0.0</p>
<a id="more"></a>
<p><img src= "/img/loading.gif" data-lazy-src="m1.png" alt="m1"></p>
<p><img src= "/img/loading.gif" data-lazy-src="m2.png" alt="m2"></p>
<p><img src= "/img/loading.gif" data-lazy-src="m3.png" alt="m3"></p>
<p><img src= "/img/loading.gif" data-lazy-src="m4.png" alt="m4"></p>
<p><img src= "/img/loading.gif" data-lazy-src="m5.png" alt="m5"></p>
<p>总体问题还是很复杂，但是特殊情形十分简单：</p>
<blockquote>
<p>若方阵的特征多项式是最小多项式，那么与它交换的矩阵必然是 它的多项式。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>幂零矩阵的一个充要条件</title>
    <url>/nilpotentMatrix/</url>
    <content><![CDATA[<p>前几天一个学弟告诉我，关于复数域上幂零矩阵 $A$ 的一个充要条件：</p>
<script type="math/tex; mode=display">
A = AB-BA, \quad \exists B \in M_n(\mathbb{C})</script><p>特此记录。</p>
<a id="more"></a>
<p>证明分几个小步骤：</p>
<ol>
<li><p>必要性对若当块成立，若$A$为（上三角）若当块，那么取 $B=diag \lbrace 0,1,⋯,n−1 \rbrace$ 即可，若 $A$ 为分块若当块（若当标准型），那么取对应的分块 $B$ 即可。又由于</p>
<script type="math/tex; mode=display">
P^{-1}AP = P^{-1}APP^{-1}BP - P^{-1}BP P^{-1}AP</script><p>因此，由对若当标准型成立,可知道对一般形式成立。</p>
</li>
<li><p>$tr(A^k) = 0, 1 \leq k \leq n$ ，则$A$ 幂零。</p>
<p>由若当标准型可知，只需证明：</p>
<script type="math/tex; mode=display">
\begin{cases} x_1 + x_2 + \cdots + x_n = 0 \\ 
x_1 ^ 2 + x_2 ^ 2 + \cdots + x_n ^2 = 0 \\ 
\cdots  \\ 
x_1 ^ n + x_2 ^n + \cdots + x_n ^n  = 0 
\end{cases}</script><p>推出，$x_1 = x_2 = \cdots x_n = 0$ ，不妨设</p>
<script type="math/tex; mode=display">
\begin{cases} x_1 t_1 + x_2 t_2 + \cdots + x_r t_r = 0 \\ 
x_1 ^ 2 t_1  + x_2 ^ 2 t_2 + \cdots + x_r ^2 t_r= 0 \\ 
\cdots  \\ 
x_1 ^ r t_1 + x_2 ^r t_2 + \cdots + x_r ^r t_r = 0 
\end{cases}</script><p>其中 $x_i$ 互不相同，那么，假设 $r&gt;1$ 则由 Vandemode 行列式不为 0 知， $t_i = 0$ 矛盾，因此 $r=1$， 此时 $x_i=0$。</p>
</li>
<li><p>$C=AB-BA$ 且 $AC=CA$ 则，$C$ 幂零。</p>
<script type="math/tex; mode=display">
\forall k,tr (C^k) = tr(C^{k-1}AB - C^{k-1}BA) =tr(C^{k-1}AB) - tr(AC^{k-1}B) = 0</script><p>因此由上面结论知，$C$ 幂零</p>
</li>
<li><p>综合上述结论，充分性显然。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Kaplansky 定理</title>
    <url>/kaplanskyTheorem/</url>
    <content><![CDATA[<p>(非交换)环中有一个有趣的（Kaplansky）定理说：</p>
<blockquote>
<p>如果环 $R$ 中元素 $a$ 有不止一个右逆，那么 $a$ 有无数多个右逆。</p>
</blockquote>
<p><strong>像极了出轨只有零次，或者无数次。</strong></p>
<a id="more"></a>
<blockquote>
<p>(Kaplansky) Suppose an element $a$ in a ring $R$ has more than one right inverse. Show that $a$ has infinitely many right inverses.</p>
</blockquote>
<h2 id="Kaplansky-若环-R-中元素-a-有不止一个右逆，那么它有无数个右逆"><a href="#Kaplansky-若环-R-中元素-a-有不止一个右逆，那么它有无数个右逆" class="headerlink" title="(Kaplansky) 若环 $R$ 中元素 $a$ 有不止一个右逆，那么它有无数个右逆"></a>(Kaplansky) 若环 $R$ 中元素 $a$ 有不止一个右逆，那么它有无数个右逆</h2><p>证明：（反证法）设 $a$ 的所有右逆构成的集合为 $A = \lbrace x \in R \mid a x = 1 \rbrace$.</p>
<p>若 $A$ 有限，不妨设 $A = \lbrace x_1,x_2,\cdots,x_n \rbrace, (n&gt;1)$ , 则</p>
<script type="math/tex; mode=display">
a(1- x_i a + x_1) = a-(a x_i) a + a x_1 = 1</script><p>并且, 若 $1 - x_i a + x_1 = 1 - x_j a + x_1$, 即 $x_i a = x_j a,$ 那么 $x_i = x_i(a x_i)=(x_j a) x_j$, 也就是说   </p>
<script type="math/tex; mode=display">
A = \lbrace x_1,x_2,\cdots,x_n \rbrace =  \lbrace 1- x_1 a + x_1,1- x_2 a + x_1,\cdots,1- x_n a + x_1 \rbrace</script><p>所以存在 $k$ 使得 $1 - x_k a + x_1 = x_1$，即 $x_k a = 1$ 所以对任意 $1 \leq i \leq n$,</p>
<script type="math/tex; mode=display">
x_i = (x_k a) x_i = x_k (a x_i) = x_k</script><p>即所有 $x_i$ 都相同，矛盾与 $A$ 中元素个数大于 1，证毕。</p>
<h2 id="等价叙述：-如果环-R-中元素-a-有右逆而没有左逆，那么-a-有无穷多个右逆"><a href="#等价叙述：-如果环-R-中元素-a-有右逆而没有左逆，那么-a-有无穷多个右逆" class="headerlink" title="等价叙述： 如果环 $R$ 中元素 $a$ 有右逆而没有左逆，那么 $a$ 有无穷多个右逆"></a>等价叙述： 如果环 $R$ 中元素 $a$ 有右逆而没有左逆，那么 $a$ 有无穷多个右逆</h2><blockquote>
<p>通俗的讲就是，如果你喜欢一个不喜欢你的人，那你不仅仅只喜欢这个人。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Zariski Topology on  $k^n$</title>
    <url>/zariskiTopologyOnKn/</url>
    <content><![CDATA[<p>$k^n$ 最常见的拓扑自然是欧式拓扑，但是下面介绍的 Zariski 拓扑也是十分重要和“常见”的拓扑，并且它也保持了很多自然的性质，又有其独特的地方，值得了解一番。</p>
<blockquote>
<p>详见 Jacobson《Basic Algebra 2》</p>
</blockquote>
<a id="more"></a>
<h2 id="Zariski-Topology"><a href="#Zariski-Topology" class="headerlink" title="Zariski Topology"></a>Zariski Topology</h2><p>给定一个交换环 $A$ ,$Spec(A)$  表示 $A$ 理想全体构成的集合，带上一个 Zariski topology，拓扑中闭集为所有形式</p>
<script type="math/tex; mode=display">
V(I)=\lbrace P \in Spec(A) | I \subset P \rbrace , I \subset A</script><p>的集合，那么它必然会满足拓扑关于闭集的公理。</p>
<h3 id="k-n-上的-Zariski-拓扑"><a href="#k-n-上的-Zariski-拓扑" class="headerlink" title="$k^n$ 上的 Zariski 拓扑"></a>$k^n$ 上的 Zariski 拓扑</h3><p>由于 $k^n=\lbrace(a_1,a_2,\cdots,a_n)| a_i \in k \rbrace$  到 $k$ 的多项式函数与 $k[x_1,x_2,\cdots,x_n]$ 同构。所有 $k^n$ 上的拓扑</p>
<p>本质上是由交换环 $k[x_1,x_2,\cdots,x_n]$ 的 Zariski 拓扑所确定。</p>
<script type="math/tex; mode=display">
V(S)=\lbrace (a_1,a_2,\cdots,a_n) \in k^n | f(a_1,a_2,\cdots,a_n) = 0 , \forall f \in S \rbrace</script><ol>
<li><p>$V(k[x_1,x_2,\cdots,x_n]) = \emptyset$</p>
</li>
<li><p>$V(\emptyset)=k[x_1,x_2,\cdots,x_n]$</p>
</li>
<li><p>$\cap_{i \in I} V(S_i) = V(\cup_{i \in I} S_i)$</p>
</li>
<li><p>$V(S) = V(I(S))$</p>
</li>
<li><p>$V(I_1) \cup V(I_2) = V(I_1 I_2)$</p>
</li>
</ol>
<p>所以，上述 $V(S)$ 全体作为闭集构成了 $k^n$ 的一个拓扑，称为 $k^n$ 上的 Zariski 拓扑。</p>
<h3 id="性质（设-k-是代数闭域）"><a href="#性质（设-k-是代数闭域）" class="headerlink" title="性质（设 $k$ 是代数闭域）"></a>性质（设 $k$ 是代数闭域）</h3><ol>
<li><p>拓扑基： $k^n$ 中开集有形式 $k^n \setminus V(S) = \cup_{f \in S} O_f$ 其中 $O_f = k^n \setminus V(f)$ 为开集。<br>因此 ${O_f|f \in k[x_1,x_2,⋯,x_n]}$ 构成了 $k^n$ 上的拓扑集</p>
</li>
<li><p>$k^a$ 是 $T_1$空间。</p>
</li>
<li><p>$k^n$ 是不可约空间，即有限个非空开集交集非空。</p>
</li>
<li><p>$k^n$ 多项式映射在 Zariski 拓扑下连续。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>玩具：HC6800-ES 开发版</title>
    <url>/singleChip/</url>
    <content><![CDATA[<p>这里记录一些我的新玩具: <code>51单片机</code> 的基础常识，作为初学者，下文必然是错误百出。</p>
<blockquote>
<p>很久没更新博客了,毕竟很久没写程序了。数学类的嵌套的定义又太多，很不好写。</p>
</blockquote>
<a id="more"></a>
<h2 id="新玩具"><a href="#新玩具" class="headerlink" title="新玩具"></a>新玩具</h2><p>这次淘宝买的新玩具是：HC6800-ES V2.0 开发版，内部单片机是 STC89C52。见下图</p>
<p><img src= "/img/loading.gif" data-lazy-src="HC6800.png" alt="HC6800"></p>
<p>作为小白看了一下视频，但是呢，感觉视频什么的太慢，还是看书看手册来的爽。安装好单片机版 C 语言的 IDE Keil4 以及烧录软件之后，装一下开发版驱动，就可以在不知道单片机原理的情况下轻松的控制单片机了。例如什么 LED 灯闪烁，跑马灯，等等很基础的程序。</p>
<p>下面是单片机的管脚图和说明：</p>
<p><img src= "/img/loading.gif" data-lazy-src="89C52.png" alt="89C52"></p>
<p><img src= "/img/loading.gif" data-lazy-src="STC89C52_1.png" alt="STC89C52_1"></p>
<p><img src= "/img/loading.gif" data-lazy-src="STC89C52_2.png" alt="STC89C52_2"></p>
<p>从图上看知道 P0,P1,P2,P3 是重要的 I/O 口，例如我们把 P2 接到 LED 灯，那么给低电平 0，就可以使灯亮。还有 P0，P1 不仅可以作为 I/O 口，还可以作为地址，计时器、计数器来用。还有 P3，等等。由于我用的是开发版，每个口接什么基本上已经固定了，用的时候查相应的官方资料就行了。它也提供了很多程序例子，因此还是很好掌握的，只是要记点东西才能灵活操作它。</p>
<h2 id="HC6800-ES-VS2-0-常见管脚接法"><a href="#HC6800-ES-VS2-0-常见管脚接法" class="headerlink" title="HC6800-ES-VS2.0 常见管脚接法"></a>HC6800-ES-VS2.0 常见管脚接法</h2><ol>
<li><p>P2 口 8 个位接了 8 个 LED 灯，至 0 灯亮。</p>
</li>
<li><p>P1.5 接了蜂鸣器。循环至 0 至 1 发声。</p>
</li>
<li><p>P3.0 ~ P3.3 接了独立键盘（不过开发版上竟然接反了 K1 和 K2），使用按键的时候要软件消除抖动，一般延迟 10ms 来完成。</p>
</li>
<li><p>通过 P1 的数据，来判断矩阵键盘按的键。（见下图)  <img src= "/img/loading.gif" data-lazy-src="keyboard.png" alt="keyboard"></p>
</li>
</ol>
<ol>
<li><p>数码管使用 P0, 通过 LSA=P2.2, LSB=P2.3, LSB=P2.4 的 0-1 指来控制显示的地方。</p>
</li>
<li><p>常用定时器和中断标程。</p>
</li>
</ol>
<h2 id="1602-液晶显示"><a href="#1602-液晶显示" class="headerlink" title="1602 液晶显示"></a>1602 液晶显示</h2><p>这个虽然很复杂，但是生产该显示屏的会提供<code>lcd.h</code>和<code>lcd.c</code>然后我们只要先初始化 LCD：<code>LcdInit()</code>再执行字节输出函数：<code>LcdWriteData(char c)</code>即可。</p>
<h2 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h2><p>程序功能: 按下 k1 键 LED 跑马灯，K2 蜂鸣器发生，K3 数码管显示 1-8。由于不会中断，所以跑马灯写的很挫。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u8;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> led P2</span></span><br><span class="line">sbit k1=P3^<span class="number">1</span>;</span><br><span class="line">sbit k2=P3^<span class="number">0</span>;</span><br><span class="line">sbit k3=P3^<span class="number">2</span>;</span><br><span class="line">sbit LSA=P2^<span class="number">2</span>;</span><br><span class="line">sbit LSB=P2^<span class="number">3</span>;</span><br><span class="line">sbit LSC=P2^<span class="number">4</span>;</span><br><span class="line">sbit <span class="built_in">beep</span>=P1^<span class="number">5</span>;</span><br><span class="line">u8 beepS,i,ledState = <span class="number">0</span>,DigState = <span class="number">0</span>;</span><br><span class="line">u8 code smgduan[<span class="number">17</span>]=&#123;<span class="number">0x3f</span>,<span class="number">0x06</span>,<span class="number">0x5b</span>,<span class="number">0x4f</span>,<span class="number">0x66</span>,<span class="number">0x6d</span>,<span class="number">0x7d</span>,<span class="number">0x07</span>,</span><br><span class="line">					<span class="number">0x7f</span>,<span class="number">0x6f</span>,<span class="number">0x77</span>,<span class="number">0x7c</span>,<span class="number">0x39</span>,<span class="number">0x5e</span>,<span class="number">0x79</span>,<span class="number">0x71</span>&#125;; <span class="comment">//显示0~F的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay</span><span class="params">(u16 t)</span></span>&#123; 	<span class="comment">//  每次约10us</span></span><br><span class="line">	<span class="keyword">while</span>(t--);	</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ledState = <span class="number">1</span>;</span><br><span class="line">	led=<span class="number">0xfe</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i!=<span class="number">7</span>;++i)&#123;</span><br><span class="line">		led = _crol_(led,<span class="number">1</span>);</span><br><span class="line">		<span class="built_in">delay</span>(<span class="number">50000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ledStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	ledState = <span class="number">0</span>;</span><br><span class="line">	led = <span class="number">0xff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DigDisplay</span><span class="params">()</span></span>&#123;</span><br><span class="line">	DigState = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">switch</span>(i)&#123;	 <span class="comment">//位选，选择点亮的数码管</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">0</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">0</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第0位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">1</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">0</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第1位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">2</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">1</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第2位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">3</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">1</span>;LSC=<span class="number">0</span>; <span class="keyword">break</span>;<span class="comment">//显示第3位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">4</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">0</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第4位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">5</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">0</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第5位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">6</span>):</span><br><span class="line">				LSA=<span class="number">0</span>;LSB=<span class="number">1</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第6位</span></span><br><span class="line">			<span class="keyword">case</span>(<span class="number">7</span>):</span><br><span class="line">				LSA=<span class="number">1</span>;LSB=<span class="number">1</span>;LSC=<span class="number">1</span>; <span class="keyword">break</span>;<span class="comment">//显示第7位	</span></span><br><span class="line">		&#125;</span><br><span class="line">		P0=smgduan[i];	<span class="comment">//发送段码</span></span><br><span class="line">		<span class="built_in">delay</span>(<span class="number">50000</span>); 	<span class="comment">//间隔一段时间扫描	</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DigStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">	DigState = <span class="number">0</span>;</span><br><span class="line">	P0 = <span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">keyPress</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(k1==<span class="number">0</span>)&#123;		<span class="comment">// 检测k1是否按下</span></span><br><span class="line">		<span class="built_in">delay</span>(<span class="number">1000</span>);<span class="comment">//消除抖动 一般大约10ms</span></span><br><span class="line">		<span class="keyword">if</span>(k1==<span class="number">0</span>)&#123;	<span class="comment">//再次判断按键是否按下</span></span><br><span class="line">			<span class="keyword">if</span>(ledState==<span class="number">0</span>)	ledStart();</span><br><span class="line">			<span class="keyword">else</span>	ledStop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k1);	 <span class="comment">//检测按键是否松开</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k2==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(k2==<span class="number">0</span>)&#123;</span><br><span class="line">			beepS=<span class="number">10</span>;</span><br><span class="line">			<span class="keyword">while</span>(beepS&lt;<span class="number">200</span>)&#123;</span><br><span class="line">				<span class="built_in">beep</span>=~<span class="built_in">beep</span>;</span><br><span class="line">				<span class="built_in">delay</span>(beepS);</span><br><span class="line">				++beepS;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k3==<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="built_in">delay</span>(<span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span>(k3==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(DigState == <span class="number">0</span>)	DigDisplay();</span><br><span class="line">			<span class="keyword">else</span>	DigStop();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(!k3);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)	keyPress();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>五引理</title>
    <url>/fiveLemma/</url>
    <content><![CDATA[<p>在同调代数中，Five lemma，Snake lemma，Nine lemma （五引理，蛇形引理，马蹄引理）都是重要的引理。这里介绍一下 五引理。其实它的一般形式是有两个四引理得出的。</p>
<a id="more"></a>
<p>以下范畴为：Abel 范畴(这里仅在模范畴中考虑，此时 monic 即为单同态，epic 即为满同态)。</p>
<h2 id="五引理"><a href="#五引理" class="headerlink" title="五引理"></a>五引理</h2><p>若下交换图中每一行都正合且 $f$ epic, $q$ monic, $g,p$ isomorphism, then $h$ is isomorphism.<br><img src= "/img/loading.gif" data-lazy-src="fivelemma.png" alt="五引理"></p>
<h2 id="五引理的特殊形式"><a href="#五引理的特殊形式" class="headerlink" title="五引理的特殊形式"></a>五引理的特殊形式</h2><p>若下交换图中每一行都正合且 $f, h$ isomorphism,then $g$ is isomorphism.<br><img src= "/img/loading.gif" data-lazy-src="fivelemmaS.png" alt="五引理特殊形式"></p>
<h2 id="两个四引理及其证明"><a href="#两个四引理及其证明" class="headerlink" title="两个四引理及其证明"></a>两个四引理及其证明</h2><ol>
<li><p>若下交换图中每一行都正合且 $f$ epic，$p$ monic, $g$ monic, then $h$ is monic.<br><img src= "/img/loading.gif" data-lazy-src="fourlemma1.png" alt="四引理1"><br>$\forall c \in C$, 若 $h(c) = 0$, 则 $pw(c)＝w’h(c)=0$, 因为 $p$ monic, 因此 $w(c)=0$, 又由行正合知，$\exists b \in B$ 使得 $v(b)=c$，因此 $v’g(b)=hv(b)=h(c)=0$, 由行正合知, $ \exists a’ \in A’ $ 使得 $u’(a’)=g(b)$，由 $f$ epic 知 $\exists a \in A$ 使得 $f(a) = a’$. 因此 $gu(a) = u’f(a)=g(b)$. 又由 $g$ monic 知， $b = u(a)$. 因此 $c = vu(a) = 0$. 证毕。</p>
</li>
<li><p>若下交换图中每一行都正合且 $g$ epic，$q$ monic, $p$ epic,then $h$ is epic.<br><img src= "/img/loading.gif" data-lazy-src="fourlemma2.png" alt="四引理2"><br>$\forall c’ \in C’$, 因为 $p$ epic, 知 $\exists d \in D$ 使得 $p(d) = w’(c’)$, 所以 $qs(d) = s’p(d) = s’w’(c’) = 0$, 又 $q$ monic, 因此 $s(d) = 0$, 由行正合知, $\exists c \in C$，使得 $w(c) = d$.因此 $w’(c’-h(c))=w’(c’)-w’h(c)=p(d)-pw(c)=0$. 由行正合知，$\exists b’ \in B’$ 使得 $v’(b’) = c’ - h(c)$, 又由 $g$ epic 知 $\exists b \in B$ 使得 $g(b) = b’$ 因此 $hv(b)= v’g(b) - v’(b’)=c’-h(c)$. 即 $c’=h(v(b)+c)$. 证毕。</p>
</li>
</ol>
<p>四引理记忆方法： 左满右单，两满夹一满，两单夹一单。</p>
<blockquote>
<p>显然上述两个四引理显然可推出五引理。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>SG 函数之取石子博弈</title>
    <url>/nimSgFunction/</url>
    <content><![CDATA[<p>在 2002 年张一飞写过一篇论文 <a href="NimGame.pdf">《由感性认识到理性认识－透析一类博弈游戏的解答过程》</a> 从此开启了这类博弈问题的大门，留下学习笔记。</p>
<a id="more"></a>
<h2 id="取石子游戏"><a href="#取石子游戏" class="headerlink" title="取石子游戏"></a>取石子游戏</h2><p>$A,B$ 两人面对若干堆石子，按照如下规则取石子</p>
<ol>
<li>每步至少取一枚石子</li>
<li>每步只能在某一堆取走部分或者全部石子</li>
<li>谁无法按照规则取石子，谁就是输家</li>
</ol>
<p>首先抛开问题，我们先从一般的入手。</p>
<p>我们可以用一个 $n$ 元组 $(a_1,a_2,\cdots,a_n)$ 表示一个局面 $S$。显然 <strong>改变 $n$ 元组的顺序仍然是一个局面。</strong></p>
<p>一个局面 $n$ 元局面 $(a_1,a_2,\cdots,a_n)$ 和一个 $m$ 元局面 $(b_1,b_2,\cdots,b_m)$ 之和显然就是一个 $m + n$ 元局面 $(a_1,a_2,\cdots,a_n,b_1,b_2,\cdots,b_m)$。类似的一个局面也可以有多种分解。</p>
<p>对于局面 $S$，若先行者有必胜策略，则称 “$S$ 胜”；<br>对于局面 $S$，若后行者有必胜策略，则称 “$S$ 负”。</p>
<p>如果局面 $S$ 胜，则必然存在取子方式 $S \to T$，且 $T$ 负；<br>如果局面 $S$ 负，则对任意取子方式 $S \to T$，有 $T$ 胜。</p>
<p>局面分解理论，若 $S = A + B$ 则下面结论显然</p>
<ol>
<li>若 $A,B$ 一胜一负，则 $S$ 胜</li>
<li>若 $A,B$ 全为负，则 $S$ 负</li>
<li>若 $A,B$ 全为胜，则 $S$ 无法判断（还需要进一步信息才能确定）</li>
<li>若 $A=B$，则 $S$ 负</li>
<li>空局面是负局面</li>
</ol>
<p>因此根据上面的分解理论，可以将一个局面进行化简。例如 $(2,2,2,7,9,9)$ 可以化简成 $(2,7)$</p>
<p>而局面分解的关系，很容易让人联想到整数的位运算－异或。</p>
<p>对于上面取石子问题，每一个局面都可以分解成只有一堆石子的局面。<br>对一个局面，定义一个函数 $f$，然后把它们异或是不是，然后判断是非为 0，作为是否胜的充要条件.这样做是否可行呢？先对原始例子进行实验。</p>
<p>函数 $f$：若局面 $S$ 只有一堆石子，设 $S={a}$，则定义 $f(a) = a$。<br>设局面 $S = (a_1,a_2,\cdots,a_n)=(a_1)+(a_2)+\cdots (a_n)$，则 $f(S) = f(a_1) \oplus f(a_2) \oplus \cdots \oplus f(a_n)$<br><strong>我们断言</strong>：对于一个局面 $S$，若 $f(S) = 0$，则 $S$ 负，否则，$S$ 胜。</p>
<p>下面证明上面的结论。<br>引理：$a_1 \oplus a_2 \oplus \cdots \oplus a_n = p \neq 0$，则必存在 $1 \leq k \leq n$，使得 $a_k \oplus p &lt; a_k$。这是因为我们看 $p$ 的最高位，有奇数个$a_k$在此位置非零, 那么与 $p$ 异或后，这一位就从 $1$ 变为 $0$，证毕。</p>
<p>若 $f(S) = 0$，则无论先行者如何取子 $S \to T$，都有 $f(T) \neq 0$。<br>若 $f(S) \neq 0$，则先行者存在一种取法 $S \to T$, 使得 $f(T) = 0$。这是因为由引理 $a_1 \oplus a_2 \oplus a_n = p \neq 0$，存在 $1 \leq k \leq n$，使得 $x = a_k \oplus p &lt; a_k$。那么我们在第 $k$ 堆取走 $a_k - x$ 个石子，那么 $a_1 \oplus \cdots a_{k - 1} \oplus x \oplus a_{k + 1} \cdots \oplus a_n = p \oplus p = 0$，证毕。</p>
<h3 id="必胜策略代码"><a href="#必胜策略代码" class="headerlink" title="必胜策略代码"></a>必胜策略代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个正数组，以 0 结尾，输出下一步的必胜策略:"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) a.emplace_back(n);</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) s ^= x;</span><br><span class="line">	<span class="keyword">if</span> (s == <span class="number">0</span>) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"必败，随便选择一个合理策略吧，等待对手失误吧"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="keyword">if</span> (x ^ s &lt;= x) &#123;</span><br><span class="line">			x ^= s;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"以下是下一步的一个必胜策略:\n"</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这说明了上述想法的可行性。下面把这种思想推广成一般的 SG（Sprague-Grundy）函数的情形</p>
<h2 id="SG-函数"><a href="#SG-函数" class="headerlink" title="SG 函数"></a>SG 函数</h2><p>当对石子的取法进行限制时，例如每次最多能去 $m$ 个，或每次最少取 $l$ 个等，此时再令 $f(x) = x$ 就不合适了。那么应该选择怎样的 $f$ 呢。显然 $f$ 必须满足：</p>
<ol>
<li>若 $f(S) = 0$, 则无论先行者如何取子 $S \to T$，都有 $f(T) \neq 0$</li>
<li>若 $f(S) \neq 0$, 则先行者存在一种取子 $S \to T$，使得 $f(T) = 0$。</li>
</ol>
<p>我们用 $(S) = \lbrace S_1, S_2, \cdots S_k \rbrace$ 表示 $S$ 的下一个可能的局面，定义 $g(S) = \lbrace f(S_1),f(S_2), \cdots f(S_k) \rbrace$，则它必然满足 $f(S) \doteq \text{ MEX } g(S)$</p>
<blockquote>
<p>注意上述 $f$ 的值域是整数，$g(S)$ 是整数集的子集。其中 $MEX(A \subseteq \mathbb{N})$ 为不在 $A$ 中最小正整数。</p>
</blockquote>
<p>若最多取 $m$ 个没有其它的限制条件，可以取 $f(x) = x \mod m + 1, S = (a_1, \cdots, a_n), f(S) = f(a_1) \oplus \cdots \oplus f(a_n)$</p>
<blockquote>
<p>对 SG 感性的理解为，连续最长从赢到输的步数。这样所有的例子都通了！</p>
<p>可以参考 <a href="https://codeforces.com/gym/102538/problem/E" target="_blank" rel="noopener">300iq Contest 3E Easy Win</a> 测试。</p>
<p>两人轮流取，第 $k$ 次最少取 $1$ 最多取 $k$，<a href="https://codeforces.com/blog/entry/85311#comment-730625" target="_blank" rel="noopener">我在 Codeforces 上写了解答</a>，这个可以变形。</p>
</blockquote>
<p>假设有 $n$ 堆，每堆有 $x_i$, 并且限制，每次至少取 $l_i$，最多取 $r_i$. 问先手还是后手有必胜策略</p>
<blockquote>
<p>经过一番思考，比较 $l_i = 1$ 的 case 可知，若 $l_i \leq x_i \mod (l_i + r_i)$，则此回合有必胜策略。否则必败，此时我们定义 $sg_i(x_i) = 0$，否则我们定义 $sg_i(x_i) = \lfloor \frac{x_i \mod (l_i + r_i)}{l_i} \rfloor$。然后最后答案就是 $s = sg_1(x_1) \oplus \cdots \oplus sg_n(x_n) \neq 0$。若 $s \neq 0$， 先手有必胜策略：先手可以让 s 变成 0，然后后手无论如何操作，先手让它们的和为 $l_i + r_i$, 然后所有的堆个数都小于超过 $l_i + r_i$ 然后再类似之前的讨论即可。因为如果第 i 堆必败，那么剔除这个堆不会影响最后胜负情况，反之必然满足 $l_i \leq x_i \mod (l_i + r_i) \leq r_i$</p>
</blockquote>
<p>因为每次取至少取 $l_i$，因此本质上第 i 堆现在的个数就是 $sg_i(x_i)$，根据之前的讨论，得知最后的结论。类似地，我们也可以给出代码（这个问题可以做交互题）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"欢迎来到石子游戏，请输入石子的堆数"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	std::vector&lt;int&gt; a(n), l(n), r(n);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入石子个数，最少取石子个数，最大取石子个数"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> sg = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; l[i] &gt;&gt; r[i];</span><br><span class="line">		sg ^= a[i] % (l[i] + r[i]) / l[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sg != <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">			<span class="keyword">int</span> t = a[i] % (l[i] + r[i]) / l[i];</span><br><span class="line">			<span class="keyword">if</span> (sg ^ t &lt;= t) &#123;</span><br><span class="line">				a[i] -= t * l[i];</span><br><span class="line">				<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"第 "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" 堆中取 "</span> &lt;&lt; l[i] * t &lt;&lt; <span class="string">" 个"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"当前石子情况为："</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"当前无必胜策略，随便取一个合理的取法，等待对手失误吧"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当 <code>l[i]</code> 和 <code>r[i]</code> 可变时，也可以考虑，暂时不在此说了。</p>
</blockquote>
<h2 id="有向无环图上-SG-问题"><a href="#有向无环图上-SG-问题" class="headerlink" title="有向无环图上 SG 问题"></a>有向无环图上 SG 问题</h2><p>在一个有向无环图中，只有一个起点，上面有一个棋子，两个玩家轮流沿着有向边推动棋子，不能走的玩家判负。</p>
<blockquote>
<p>来自 <a href="https://oi-wiki.org/math/game-theory/" target="_blank" rel="noopener">OI-wiki</a></p>
</blockquote>
<p>对于状态 $x$ 和 它的 $k$ 个后继状态 $y_1, y_2, \cdots, y_k$，定义 SG 函数：</p>
<script type="math/tex; mode=display">
SG(x) = mex \{SG(y_1), SG(y_2),\cdots, SG(y_k) \}</script><p>而对于由 $n$ 个有向图游戏组成的组合游戏，设它们的起点分别为 $s_1, \cdots, s_n$，先手必胜当且仅当 $SG(s_1) \oplus \cdots \oplus SG(s_n) \neq 0$。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// n 个节点，0 为起点，m 条有向边，确保无环。</span></span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">e</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">		<span class="keyword">int</span> x, y;</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		e[x].emplace_back(y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sg</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="built_in">std</span>::function&lt;<span class="keyword">int</span>(<span class="keyword">int</span>)&gt; dfs = [&amp;](<span class="keyword">int</span> u) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (sg[u] != <span class="number">-1</span>) <span class="keyword">return</span> sg[u];</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> v : e[u]) S.insert(dfs(v));</span><br><span class="line">		sg[u] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span> (S.<span class="built_in">find</span>(sg[u]) != S.<span class="built_in">end</span>()) ++sg[u];</span><br><span class="line">		<span class="keyword">return</span> sg[u];</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">return</span> dfs(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> nroot;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; nroot;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (nroot--) &#123;</span><br><span class="line">		ans ^= SG();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (ans ? <span class="string">"先手赢"</span> : <span class="string">"后手赢"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以做到二维平面上有障碍点集，又可以做一个题目了。</p>
<p>注意到上述问题，堆与堆之间是相互独立的，如果不独立，那就很难考虑了。</p>
</blockquote>
<h2 id="不公平取石子的游戏"><a href="#不公平取石子的游戏" class="headerlink" title="不公平取石子的游戏"></a>不公平取石子的游戏</h2><p>在 <a href="https://ac.nowcoder.com/acm/contest/9753/B" target="_blank" rel="noopener">NewCoder</a> 上有个不公平的游戏：A 每次能取 <code>[1, p]</code> 个石子，B 能取 <code>[1, q]</code> 个石子，A 先。</p>
<p>显然 $p = q$ 时，就是之前的经典问题。只需考虑 <code>n % (p + q)</code> 即可。若 $p &gt; q$，那么 A 必胜，因为此时 $p &gt;= q + 1$，所以有必胜策略，若 $p &lt; q$，只有 A 取完则赢，否则必输。</p>
<p>有 <code>m</code> 堆，</p>
<ul>
<li>$p &gt; q$，若存在 $a_i$ 使得 $a_i &gt; q$ 或 $a_1 \oplus \cdots \oplus a_m \neq 0$，则 A 必赢。</li>
<li>$p &lt; q$，若存在大于一个 $a_i$ 使得 $a_i &gt; p$，$A$ 必输。若所有 $a_i \leq p$ 那么就等于无限制。所以我们只需考虑，有唯一的一个 $a_i &gt; p$ 的情形，$x = \oplus \cdots a_{i-1} \oplus a_{i + 1} \cdots \oplus a_m$，若 $x \leq p$ 且 $x + 1 \leq a_i \leq x + p$，则 $A$ 必赢。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> watch(x) std::cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; std::endl</span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//freopen("in","r",stdin);</span></span><br><span class="line">	<span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">	<span class="keyword">int</span> n, p, q;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; q;</span><br><span class="line">	<span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> sg = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> &amp;x : a) <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">if</span> (p &gt; q) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="keyword">if</span> (a[i] &gt; q) &#123;</span><br><span class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"first player win"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) sg ^= x;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) sg ^= x % (<span class="number">1</span> + p);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> cnt = <span class="number">0</span>, ai = <span class="number">0</span>; </span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) <span class="keyword">if</span> (x &gt; p) &#123;</span><br><span class="line">			++cnt;</span><br><span class="line">			ai = x;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) sg ^= x;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> x : a) sg ^= x;</span><br><span class="line">			sg ^= ai;</span><br><span class="line">			sg = (sg &lt;= p &amp;&amp; ai &gt;= sg + <span class="number">1</span> &amp;&amp; ai &lt;= sg + p);</span><br><span class="line">		&#125; <span class="keyword">else</span> sg = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; (sg ? <span class="string">"first player win"</span> : <span class="string">"second player win"</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="无限制取石子问题的反问题"><a href="#无限制取石子问题的反问题" class="headerlink" title="无限制取石子问题的反问题"></a>无限制取石子问题的反问题</h2><p>一堆石子谁先取到最后一个谁输！，该问题在  已经介绍了。做法：</p>
<p>首先剔除所有的 0，以及偶数个 1，并不会影响局面的胜负。空局面认为是胜。若此时堆的个数为 1，那么 $a_1 = 1$ 为输局面，其它为赢局面。如果堆数 $n &gt; 1$。那么 $a_1 \oplus \cdots \oplus a_n = 0$ 为输局面，否则为赢局面。（首先对 $n = 2$ 数学归纳证明，然后对一般的 n 数学归纳证明。</p>
<h2 id="有顺序堆的取石子问题"><a href="#有顺序堆的取石子问题" class="headerlink" title="有顺序堆的取石子问题"></a>有顺序堆的取石子问题</h2><p>例题：<a href="https://codeforces.com/problemset/problem/1382/B" target="_blank" rel="noopener">1382B</a>。即看那一步有必赢且必输的策略。</p>
<p>如果此题加限制条件，每次最多取 $m$ 个，那么答案就是第一个 $\mod (m + 1)$ 大于 1 的数。但是要注意 取模后为 0 的情形。</p>
<h2 id="每次可取多堆"><a href="#每次可取多堆" class="headerlink" title="每次可取多堆"></a>每次可取多堆</h2><p>例题：<a href="https://codeforces.com/contest/1451/problem/F" target="_blank" rel="noopener">1451F</a></p>
<p>更多博弈问题可见：<a href="https://codeforces.com/problemset?tags=games" target="_blank" rel="noopener">Codeforces-game</a></p>
<h2 id="sg-函数是因子个数-1"><a href="#sg-函数是因子个数-1" class="headerlink" title="sg 函数是因子个数 + 1"></a>sg 函数是因子个数 + 1</h2><p>例题：<a href="https://codeforces.com/gym/102911/problem/C" target="_blank" rel="noopener">codeforce gym 102911C</a>，从 $n$ 中取 $k$ 个满足 $k &gt; 0$ 且 $n - k$ 是 $n$ 的因子。设 $n = p_1 ^{s_1} \cdots p_r^{s_r}$， 则 $sg(n) = s_1 + \cdots s_r + 1$。</p>
<h2 id="一堆，相邻之间有限制"><a href="#一堆，相邻之间有限制" class="headerlink" title="一堆，相邻之间有限制"></a>一堆，相邻之间有限制</h2><p>$n$ 个元素，每次最少取 $1$，最多取 $m$ ($m \geq 2$)，且相邻两个的和不能为 $m + 1$。谁无法取谁输。</p>
<p>结论 <code>n % (m + 2) == 0</code> 则先手必输，反之先手必赢。</p>
<p>证明：<br>首先不难看出若 $n \leq m + 1$ 时，先手必赢，$n = m + 2$ 时，先手必输。</p>
<ul>
<li>若第一步先手取 <code>1</code>，那么后手取 <code>m - 1</code>，此时先手不能取 <code>2</code>（所以先手无法取完），若第二步先手取 <code>1</code>，那么后手取 <code>1</code>回到最初的情况（那么剩下的数为 $n - m - 2$ 又满足 <code>n % (m + 2) == 0</code>)。若第二步先手取 <code>3</code>，那么后手取 $m - 1$ （此时又回到了第一步的情况，再继续考虑第二步即可）。若 第二步先手取 $x$($x \geq 4$), 后手取 $m + 4 - x$ 就回到了最初的情况。 </li>
<li>若第一步先手取了 <code>x</code> ($x \geq 2$) 那么后手取 $m + 2 - x$ 即可。</li>
</ul>
<p>反之 <code>k = n % (m + 2)</code>, $k \neq 0$，若 $k \leq m$，那么先手取 $k$ 即可。否则 $k = m + 1$, 那先手取 $m$，此时后手不能取 $1$，因此后手取完之后，剩下的数依然满足 $n \mod (m + 2) \neq 0$。</p>
<h2 id="二分图博弈"><a href="#二分图博弈" class="headerlink" title="二分图博弈"></a>二分图博弈</h2><p><a href="https://www.cnblogs.com/LLCSBlog/p/13882635.html" target="_blank" rel="noopener">别人写的挺好</a></p>
<p>例题：<a href="https://codeforces.com/gym/102832/problem/H" target="_blank" rel="noopener">102832H</a></p>
<p>先手必胜当且仅当任何一个最大匹配方案都包含初始状态。</p>
<p>判定: 不加入初始节点，跑一遍最大流，加入初始节点，再跑一次最大流，有变化所以先手必赢。</p>
<p>另外如果先手可选择初始状态（进入算一次），那么先手输当且仅当图是完全匹配。</p>
<h2 id="位置博弈"><a href="#位置博弈" class="headerlink" title="位置博弈"></a>位置博弈</h2><p>只能朝着几个方向走，走出区域者输</p>
<p>例题：<a href="https://codeforces.com/contest/1451/problem/D" target="_blank" rel="noopener">1451D</a></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>运筹学</tag>
      </tags>
  </entry>
  <entry>
    <title>正约数个数 $d(n)$</title>
    <url>/numberOfdivisors/</url>
    <content><![CDATA[<p>codeforce 上有 <a href="http://codeforces.com/contest/235/problem/E" target="_blank" rel="noopener">一道题</a> 。 rng_58 用一个奇妙的公式解决了这个问题。并且给出了公式的证明，这里给出另一个比较好的证明。</p>
<a id="more"></a>
<h2 id="d-n-的一个公式"><a href="#d-n-的一个公式" class="headerlink" title="$d(n)$ 的一个公式"></a>$d(n)$ 的一个公式</h2><p>按照公式，我们有 $d(n) = \sum_{i \mid n} 1$。其实这个公式可以推广为</p>
<script type="math/tex; mode=display">
d(n_1 \cdots n_m) = \sum_{i_1 \mid n_1} \cdots \sum_{i_m \mid n_m} 1, \; \gcd(i_s,i_t)=1,1 \leq  s < t \leq m</script><p><strong>Proof</strong>： 数学归纳法证明：$m=1$ 时结论显然。<br>设结论对 $m-1$ 成立。</p>
<script type="math/tex; mode=display">
\begin{aligned}
d(n_1 \cdots n_m) &= \sum_{i \mid n_1 \cdots n_m} 1 =  \sum_{d \mid n_m} \sum_{i \mid n_1 \cdots n_m , \gcd(i,n_m)=d} 1 \\
&= \sum_{d \mid n_m} \sum_{\frac{i}{d} \mid n_1 \cdots n_{m-1} , \gcd(\frac{i}{d},\frac{n_m}{d})=1} 1 \\
&= \sum_{d \mid n_m} \sum_{i \mid n_1 \cdots n_{m-1} , \gcd(i,d)=1} 1 
\end{aligned}</script><p>由数学归纳法知，原结论成立。</p>
<h2 id="上面公式的一个应用"><a href="#上面公式的一个应用" class="headerlink" title="上面公式的一个应用"></a>上面公式的一个应用</h2><script type="math/tex; mode=display">
\sum_{i_1 = 1} ^{n_1} \cdots \sum_{i_m = 1} ^{n_m} d(n_1 \cdots n_m) = \sum_{\gcd(i_s,i_t)=1,1 \leq  s < t \leq m } \lfloor \frac{n_1}{i_1} \rfloor \cdots  \lfloor \frac{n_m}{i_m} \rfloor</script><h4 id="m-2-的另一个公式"><a href="#m-2-的另一个公式" class="headerlink" title="$m=2$ 的另一个公式"></a>$m=2$ 的另一个公式</h4><p>令 $F(n) = \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor $，则显然</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum_{i=1} ^n \sum_{j=1,\gcd(i,j)=1} ^m \lfloor \frac{n}{i} \rfloor \lfloor \frac{m}{j} \rfloor &= \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor \sum_{t \mid i} \mu(t) \sum_{1 \leq j \leq m, t \mid j} \lfloor \frac{m}{j} \rfloor \\
&= \sum_{i=1} ^n \lfloor \frac{n}{i} \rfloor \sum_{t \mid i} \mu(t) F(\lfloor \frac{m}{t} \rfloor) \\
&= \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) \sum_{1 \leq i \leq n, t \mid i} \lfloor \frac{n}{i} \rfloor \\
&= \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) F(\lfloor \frac{n}{t} \rfloor)
\end{aligned}</script><p>即</p>
<script type="math/tex; mode=display">
\sum_{i=1} ^n \sum_{j=1} ^m d(ij) =  \sum_{t} \mu(t) F(\lfloor \frac{m}{t} \rfloor) F(\lfloor \frac{n}{t} \rfloor)</script><h3 id="这说明我们可以在-O-n-log-n-复杂度内计算此问题"><a href="#这说明我们可以在-O-n-log-n-复杂度内计算此问题" class="headerlink" title="这说明我们可以在 $O(n \log n)$ 复杂度内计算此问题"></a>这说明我们可以在 $O(n \log n)$ 复杂度内计算此问题</h3><p>可是 $m&gt;2$ 就比较麻烦了。</p>
<h4 id="f-n-sum-i-1-n-d-i-sum-i-1-lfloor-frac-n-i-rfloor"><a href="#f-n-sum-i-1-n-d-i-sum-i-1-lfloor-frac-n-i-rfloor" class="headerlink" title="$f(n) = \sum_{i=1} ^n d(i) = \sum_{i=1} \lfloor \frac{n}{i} \rfloor$"></a>$f(n) = \sum_{i=1} ^n d(i) = \sum_{i=1} \lfloor \frac{n}{i} \rfloor$</h4><p>上面这个公式有趣的是,若要求单个的 $f(n)$ 用后面一个可以在 $O(\sqrt{n})$ 复杂度解决，而如果要求 $f(1),\cdots,f(n)$ 则可以用前面一个公式在 $O(n \log n)$ 复杂度解决。</p>
<h3 id="codeforce-235"><a href="#codeforce-235" class="headerlink" title="codeforce 235"></a><a href="http://codeforces.com/contest/235/problem/E" target="_blank" rel="noopener">codeforce 235</a></h3><p>求解:</p>
<script type="math/tex; mode=display">
\sum_{i=1}^a \sum_{j=1}^b \sum_{k=1}^c d(ijk)</script><p>如果令 $f(n) = \sum_{i=1} ^n d(i),g(n)=\sum_{i \mid n} \mu(i) f(\lfloor \frac{c}{i} \rfloor)$<br>那么</p>
<script type="math/tex; mode=display">
\sum_{i=1}^a \sum_{j=1}^b \sum_{k=1}^c d(ijk) = \sum_{t} \mu(t) \lfloor \frac{a}{it} \rfloor \lfloor \frac{b}{it} \rfloor g(ijt^2)</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2002</span>;</span><br><span class="line"><span class="keyword">int</span> f[N],g[N*N];</span><br><span class="line"><span class="keyword">bool</span> ip[N];</span><br><span class="line"><span class="keyword">int</span> mu[N],p[N],nt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_mu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mu[<span class="number">1</span>]=<span class="number">1</span>;ip[<span class="number">2</span>]=<span class="literal">true</span>;p[<span class="number">0</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   ip[i]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>,cnt = <span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(ip[i])&#123;</span><br><span class="line">            p[cnt++] = i;</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>,t;j&lt;cnt&amp;&amp;(t= i * p[j])&lt;N;++j)&#123;</span><br><span class="line">            ip[t] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % p[j] == <span class="number">0</span>)   <span class="keyword">break</span>;</span><br><span class="line">            mu[t] = -mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">4</span>)  mu[i]=-mu[i&gt;&gt;<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        sum += (j-i+<span class="number">1</span>)*(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)       f[i]=getsum(i);    init_mu();</span><br><span class="line">    <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(mu[i]==<span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line">        nt[last]=i;</span><br><span class="line">        last = i;</span><br><span class="line">    &#125;</span><br><span class="line">    nt[last]=N;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getg</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = a*b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i)   g[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&amp;&amp;i&lt;=c;i=nt[i])&#123; <span class="comment">// n^2 \log n</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i,t=mu[i]*f[c/i];j&lt;=n;j+=i)   g[j]+=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getf</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;++j)&#123;</span><br><span class="line">            res+=(a/i)*(b/j)*g[i*j*d];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c))&#123;</span><br><span class="line">        getg(a,b,c);</span><br><span class="line">        <span class="keyword">int</span> ab = <span class="built_in">min</span>(a,b);</span><br><span class="line">        LL res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ab;i=nt[i])&#123;</span><br><span class="line">            res+=mu[i]*getf(a/i,b/i,i*i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">int</span>(res%(<span class="number">1</span>&lt;&lt;<span class="number">30</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>C 语言中函数 scanf 和 printf</title>
    <url>/scanfAndPrintInC/</url>
    <content><![CDATA[<p>在 C 语言中最常用的函数应该就是 scanf，printf 吧。对于大量输入输出时 C++ 也常用 scanf 和 print 代替 cin 和 cout。然而我们学习 C 语言最先接触的 scanf 和 printf 其实我们并不完全了解。<del>弃用</del></p>
<a id="more"></a>
<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h2><p>按照 <a href="http://www.cplusplus.com/reference/cstdio/scanf/?kw=scanf" target="_blank" rel="noopener">C++ reference</a> 的介绍，scanf 的原型为<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span>;</span><br><span class="line"><span class="comment">// format = %[*][width][length]specifier</span></span><br></pre></td></tr></table></figure></p>
<p>其中上面的 <code>[*]</code> 表示输入的东西被忽略，<code>[width]</code> 表示最大输入长度，而 <code>[length</code> 表示是类型的一种延伸，可以是 <code>hh, h, l, ll, j, z, t, L</code> 中的一种。例如<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%3ld"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input : 12345</span></span><br><span class="line"><span class="comment">// output: 123</span></span><br></pre></td></tr></table></figure></p>
<p>specifier 是必选项 它可以是 <code>i,d,u,o,x,f,e,g,a,c,s,p,n,%​</code>。还有两个特殊的 <code>[characters]</code> 和 <code>[^characters]</code>。上面的参数就不过多说了。特别要强调的是这两个特殊的。<br><code>[characters]</code> 表示只接受 <code>[characters]</code> 中的字符；<code>[^characters]</code> 表示只不接受<code>[characters]</code> 中的字符。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">100</span>],a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[1-9A-Z]"</span>,s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%[^b]"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input : 123AaBbCc</span></span><br><span class="line"><span class="comment">// output: 123A</span></span><br><span class="line"><span class="comment">// output: aB</span></span><br></pre></td></tr></table></figure>
<h3 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h3><p>在使用下面语句进行输入时遇到空白符(whitespace)会结束输入的。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br></pre></td></tr></table></figure><br>whitespace 可以使用 <code>int isspace(int c);</code> 判断。有这些字符有：</p>
<h3 id="scanf-典型例子"><a href="#scanf-典型例子" class="headerlink" title="scanf 典型例子"></a>scanf 典型例子</h3><ol>
<li>有时我们明确知道输入为 <code>(a,b)​</code> 这种类型，我们可以这样做<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"(%d, %d)"</span>, &amp;a, &amp;b);</span><br></pre></td></tr></table></figure></li>
<li>输入字符包含除回车之外的字符<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, str);</span><br></pre></td></tr></table></figure></li>
<li>只输入小写字母和数字<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[0-9a-z]"</span>, str);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="scanf-返回值"><a href="#scanf-返回值" class="headerlink" title="scanf 返回值"></a>scanf 返回值</h3><ol>
<li>正整数：表示正确输入参数的个数</li>
<li>0：输入不匹配，无法正确输入任何值</li>
<li>EOF（一般为-1）为读到文件结尾或在 terminal 中输入了 <code>ctrl + z</code></li>
</ol>
<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><p>print 的原型为<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span>;</span><br><span class="line">%[flags][<span class="built_in">width</span>][.precision][length]specifier</span><br></pre></td></tr></table></figure></p>
<p>specifier 和 scanf 的类似就不多说了。<code>[length] [width]</code>同理。<code>[.precision]</code> 一看就懂<br><code>[flags]</code> 可选有 <code>\-,\+,\#,0</code>。其中</p>
<ol>
<li><code>-</code> 表示在给定宽度内向左靠齐。默认向右见下例子</li>
<li><code>+</code> 表示即使是非负数，前面也要加正号</li>
<li><code>#</code> 目前不清楚用法</li>
<li><code>0</code> 就是在不足宽度的时候补 0</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">123.45678</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%+10.4f "</span>, a);</span><br><span class="line"><span class="keyword">int</span> t =<span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d "</span>,t);</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">printf</span>(x&amp;<span class="number">1</span>?<span class="string">"%d is odd"</span>:<span class="string">"%d is even"</span>,x);</span><br><span class="line"><span class="comment">// output: +0123.4568 0100 123 is odd</span></span><br></pre></td></tr></table></figure>
<h3 id="神器：sscanf-和-sprintf"><a href="#神器：sscanf-和-sprintf" class="headerlink" title="神器：sscanf 和 sprintf"></a>神器：sscanf 和 sprintf</h3><p>不多说了，举个例子说明问题吧<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">/* sscanf example */</span></span><br><span class="line">    <span class="keyword">char</span> sentence []=<span class="string">"Rudolph is 12 years old"</span>;</span><br><span class="line">    <span class="keyword">char</span> str [<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">sscanf</span> (sentence,<span class="string">"%s %*s %d"</span>,str,&amp;i);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"%s -&gt; %d\n"</span>,str,i);</span><br><span class="line">    <span class="comment">/* sprintf example */</span></span><br><span class="line">    <span class="keyword">char</span> <span class="built_in">buffer</span> [<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> n, a=<span class="number">5</span>, b=<span class="number">3</span>;</span><br><span class="line">    n=<span class="built_in">sprintf</span> (<span class="built_in">buffer</span>, <span class="string">"%d plus %d is %d"</span>, a, b, a+b);</span><br><span class="line">    <span class="built_in">printf</span> (<span class="string">"[%s] is a string %d chars long\n"</span>, <span class="built_in">buffer</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// output: </span></span><br><span class="line"><span class="comment">// Rudolph -&gt; 12</span></span><br><span class="line"><span class="comment">// [5 plus 3 is 8] is a string 13 chars long</span></span><br></pre></td></tr></table></figure></p>
<h3 id="最后说一个比较诡异但是可以理解的事情"><a href="#最后说一个比较诡异但是可以理解的事情" class="headerlink" title="最后说一个比较诡异但是可以理解的事情"></a>最后说一个比较诡异但是可以理解的事情</h3><blockquote>
<p>sacnf 输入 float 和 double 时分别用 <code>%f,%lf</code>。<br>printf 输出 float 和 double 时用的都是 <code>%f</code>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>输出源代码的 C++ 代码</title>
    <url>/printSelfWithCpp/</url>
    <content><![CDATA[<p>我们可以把计算机看成一个函数，将一份代码映成一段输出，那么输出为代码本事就是数学中不动点。任意语言都有很多相应版本的这种程序，原理都是类似的，我自己写的 C++ 代码如下：</p>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">a[<span class="number">0</span>]=<span class="string">"#include&lt;iostream&gt;"</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="string">"#include&lt;string&gt;"</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="string">"using namespace std;"</span>;</span><br><span class="line">a[<span class="number">3</span>]=<span class="string">"string a[10];"</span>;</span><br><span class="line">a[<span class="number">4</span>]=<span class="string">"int main()&#123;"</span>;</span><br><span class="line">a[<span class="number">5</span>]=<span class="string">"for(int i=0;i&lt;5;++i) cout&lt;&lt;a[i]&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">6</span>]=<span class="string">"for(int i=0;i&lt;10;++i) cout&lt;&lt;char(97)&lt;&lt;char(91)&lt;&lt;i&lt;&lt;char(93)&lt;&lt;char(61)&lt;&lt;char(34)&lt;&lt;a[i]&lt;&lt;char(34)&lt;&lt;char(59)&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">7</span>]=<span class="string">"for(int i=5;i&lt;10;++i) cout&lt;&lt;a[i]&lt;&lt;endl;"</span>;</span><br><span class="line">a[<span class="number">8</span>]=<span class="string">"return 0;"</span>;</span><br><span class="line">a[<span class="number">9</span>]=<span class="string">"&#125;"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;++i) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i) <span class="built_in">cout</span>&lt;&lt;<span class="keyword">char</span>(<span class="number">97</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">91</span>)&lt;&lt;i&lt;&lt;<span class="keyword">char</span>(<span class="number">93</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">61</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">34</span>)&lt;&lt;a[i]&lt;&lt;<span class="keyword">char</span>(<span class="number">34</span>)&lt;&lt;<span class="keyword">char</span>(<span class="number">59</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;<span class="number">10</span>;++i) <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码原理和步骤：</p>
<ol>
<li>先把头写好，定义好数组，记作头部</li>
<li>开始对数组赋值一直赋值到头部，然后空几行</li>
<li>把头用数组打印出来，再讲数组全部打印出来，再将后面的部分打印出来</li>
<li>再去空的几行，做数组赋值，赋值的时候后面的每一行</li>
</ol>
<blockquote>
<p>注意代码中特殊字符需要转义，不然就很尬了，而且代码不能用 tab 缩进</p>
<p>后来我又写了一篇：<a href="/printSelfWithPy/" title="用 Python 打印自身的代码">用 Python 打印自身的代码</a></p>
<p>文件打印就太没水平了，这里就不给出了</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>自然数方幂和快速算法</title>
    <url>/fastPowSumOfNaturalNumber/</url>
    <content><![CDATA[<p>之前写过 <a href="/formulaOfPowSumOfNaturalNumber/" title="自然数方幂和公式">自然数方幂和公式</a>， 这次写的目的是因为上次是从数学上完美的解决了这个问题，这次我们要从计算上完美的解决这个问题，当然这归功于我看到的一份 <a href="http://codeforces.com/profile/sgtlaugh" target="_blank" rel="noopener">sgtlaugh</a> 的代码。经过解读体会到其中的奥秘，特此记录。一句话，简直不敢相信。</p>
<blockquote>
<p>如果有人说他能在 $O(k)$ 时空复杂度求解 $\sum_{i=1}^n i^k$，你肯定会说这怎么可能别忽悠我了，那我只能说，因为你没看过这篇博文。</p>
</blockquote>
<a id="more"></a>
<h2 id="首先预处理，-O-k-复杂度-求-sum-i-1-n-i-k-其中-n-leq-k"><a href="#首先预处理，-O-k-复杂度-求-sum-i-1-n-i-k-其中-n-leq-k" class="headerlink" title="首先预处理，$O(k)$ 复杂度 求 $\sum_{i=1}^n i^k$ 其中 $n \leq k$"></a>首先预处理，$O(k)$ 复杂度 求 $\sum_{i=1}^n i^k$ 其中 $n \leq k$</h2><p>我之前一直以为要用 $k \log k$ 的复杂度才能解决这个问题，其实我们只需对所有素数 $p$ 计算 $p^k$ 即可。对于一般的 $i$ 我们先预处理 其最小素因子 $sp[i]$。计算 $sp[i]^k \cdot (i/sp[i])^k$ 即可（具体可见最后代码）。由于素数的阶为 $O(\frac{k}{\log k})$ 因此整个复杂度即为 $O(k)$。</p>
<h2 id="再由-Lagrange-插值多项式得出最终答案"><a href="#再由-Lagrange-插值多项式得出最终答案" class="headerlink" title="再由 Lagrange 插值多项式得出最终答案"></a>再由 Lagrange 插值多项式得出最终答案</h2><p>因为我们知道 $\sum_{i=1} ^n i^k$ 一定是一个关于 $n$ 的次数为 $k+1$ 的多项式。因此，我们只需计算其在 $0,\cdots,k+1$ 上的取值，用 Lagrange 插值多项式即可知道答案。</p>
<blockquote>
<p>对于一个次数不超过 $n$ 的多项式 $f(x)$，其在不同位置 $x_0,\cdots,x_n$ 的取值唯一决定了这个多项式:</p>
</blockquote>
<script type="math/tex; mode=display">
f(x) = \sum_{i=0} ^n f(x_i) \prod_{j=0,j \neq i} ^n \frac{x-x_j}{x_i - x_j}</script><h3 id="具体到本问题，我们取-x-n-m-k-1-x-i-i-那么"><a href="#具体到本问题，我们取-x-n-m-k-1-x-i-i-那么" class="headerlink" title="具体到本问题，我们取 $x=n, m=k+1, x_i=i$ 那么"></a>具体到本问题，我们取 $x=n, m=k+1, x_i=i$ 那么</h3><script type="math/tex; mode=display">
f(n) = \sum_{i=0} ^m (-1)^{m-i} f(x_i) {n \choose i}  {n-i-1 \choose m-i }</script><h2 id="例题：Codeforces-622F"><a href="#例题：Codeforces-622F" class="headerlink" title="例题：Codeforces 622F"></a>例题：Codeforces 622F</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span>+<span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> sp[N],p[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spf</span><span class="params">()</span></span>&#123; <span class="comment">// samllest prime factor</span></span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;p[cnt++]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i+=<span class="number">2</span>)   sp[i]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i+=<span class="number">2</span>)   sp[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    p[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt; cnt &amp;&amp; p[j]&lt;=sp[i] &amp;&amp; i * p[j] &lt; N; ++j) &#123;</span><br><span class="line">            sp[i * p[j]] = p[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">pow_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=x*x%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">LL inv[N],AP[N],AS[N],f[N];</span><br><span class="line"><span class="function">LL <span class="title">getpowsum</span><span class="params">(LL n,<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// mod &gt; k</span></span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> n%mod;</span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="number">2</span>) spf();</span><br><span class="line">    <span class="keyword">int</span> nk=k+<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    f[i]=pow_mod(i,k,mod);</span><br><span class="line">        <span class="keyword">else</span>    f[i]=f[sp[i]]*f[i/sp[i]]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(f[i]&gt;=mod)   f[i]-=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=nk)    <span class="keyword">return</span> f[n];</span><br><span class="line">    LL tmp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk;++i)    tmp=tmp*i%mod;</span><br><span class="line">    inv[nk] = pow_mod(tmp,mod<span class="number">-2</span>,mod);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) inv[i]=inv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line">    AP[<span class="number">0</span>]=AS[nk]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)   AP[i]=AP[i<span class="number">-1</span>]*(n+<span class="number">1</span>-i)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) AS[i]=AS[i+<span class="number">1</span>]*(n-i<span class="number">-1</span>)%mod;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)&#123; <span class="comment">// because f(i)=0</span></span><br><span class="line">        LL x = f[i]*AP[i]%mod*AS[i]%mod*inv[i]%mod*inv[nk-i]%mod;</span><br><span class="line">        <span class="keyword">if</span>((nk-i)&amp;<span class="number">1</span>) res-=x; <span class="comment">// be careful</span></span><br><span class="line">        <span class="keyword">else</span>        res+=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (res%mod+mod)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;getpowsum(n,k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>实际上我们可以不求 $\mod p$ 后的答案，利用大数类得到标准答案，但是这时因为数字实在太大，每次乘法的用时过大，因此仅适合 $k&lt;n$ 的情况</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cpp_int f[N];</span><br><span class="line"><span class="function">cpp_int <span class="title">getpowsum</span><span class="params">(LL n,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)    <span class="keyword">return</span> cpp_int(n);</span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>]!=<span class="number">2</span>) spf();</span><br><span class="line">    <span class="keyword">int</span> nk=<span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=nk+<span class="number">1</span>;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sp[i]==i)    f[i]=<span class="built_in">pow</span>(cpp_int(i),k);</span><br><span class="line">        <span class="keyword">else</span>    f[i]=f[sp[i]]*f[i/sp[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=nk;++i)  f[i]+=f[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=nk)   <span class="keyword">return</span> f[n];</span><br><span class="line">    cpp_int res = <span class="number">0</span>,tl=<span class="number">1</span>,tr=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=nk<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)    tr=tr*(n-i<span class="number">-1</span>)/(nk-i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=nk;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>((nk-i)&amp;<span class="number">1</span>)    res -= f[i]*tl*tr;</span><br><span class="line">        <span class="keyword">else</span>            res += f[i]*tl*tr;</span><br><span class="line">        tl = tl*(n-i)/(i+<span class="number">1</span>);</span><br><span class="line">        tr = tr*(nk-i)/(n-i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实如果我们知道最终的上界，求出多个 $\mod p$ 后的答案，再用中国剩余定理貌似很不错。</p>
</blockquote>
<h3 id="该方法可以推广成求-sum-i-1-n-f-i-k-，其中-f-x-是多项式。具体分析即可"><a href="#该方法可以推广成求-sum-i-1-n-f-i-k-，其中-f-x-是多项式。具体分析即可" class="headerlink" title="该方法可以推广成求 $\sum_{i=1}^n f(i)^k$，其中 $f(x)$ 是多项式。具体分析即可"></a>该方法可以推广成求 $\sum_{i=1}^n f(i)^k$，其中 $f(x)$ 是多项式。具体分析即可</h3><p>这种情况一般很难再做到 $O(k)$ 时间复杂度，而变成了 $O(k \log k) \deg f$ 复杂度。</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>最长递增子序列与连续子序列最大和</title>
    <url>/nondecraseSubsequence/</url>
    <content><![CDATA[<blockquote>
<p><strong>已被历史淘汰</strong></p>
</blockquote>
<p>最长递增子序列最常规的做法是 $O(n^2)$ 的动态规划的做法（很容易想到不多说了）。这里可以维护一个单调的数列使其复杂度降至 $O(n \log n)$。相应的最长递减、不升、不降子序列完全类似，相应修改即可。另外，这个问题让我想起另一个降低复杂度的经典例子：连续子序列最大和。从 $O(n^3)$ 到 $O(n^2)$ 再到 $O(n)$.<br><a id="more"></a></p>
<h2 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h2><h3 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h3><p>我们用数组 $a$ 表示原始数列。用 $b[k]$ 表示长度为 $k$ 的不降子序列中尾数最小值。那么显然数组 $b$ 是单调递增的。初始状态 $b[1]=a[1],k=1$</p>
<h3 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h3><p>若 $a[i]&gt;b[k]$，则 $k=k+1,b[k]=a[i]$；否则,找到二分最小的 $j$ 使得 $b[j] \geq a[i]$ 然后 $b[j]=a[i]$。最终答案就是 $k$。</p>
<h3 id="例题：POJ-2533"><a href="#例题：POJ-2533" class="headerlink" title="例题：POJ 2533"></a>例题：POJ 2533</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// longest increasing subsquence for 0 ~ n-1</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    b[<span class="number">0</span>]=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[k]) b[++k]=a[i];</span><br><span class="line">        <span class="keyword">else</span>    b[lower_bound(b,b+k,a[i])-b]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// lower_bound(first,end,val) 表示在单增 [frist,end) 中首次大于等于 val 的位置</span></span><br><span class="line"><span class="comment">// upper_bound(first,end,val) 表示在单增 [frist,end) 中首次大于 val 的位置</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N= <span class="number">1003</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,LIS(a,n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="记录子序列的做法"><a href="#记录子序列的做法" class="headerlink" title="记录子序列的做法"></a>记录子序列的做法</h3><p>由于同学的需要，这里给出加强版：记录子序列<br>首先我们定义一下变量，$a,b$ 已经说过，用 $c[i]$ 表示 $b[i]$ 元素所在的位置。$p[i]$ 表示 $i$ 前面一个元素所在位置。那么最后的子序列就是以 $b[k]$ 所在位置为结尾位置,再用 $p[i]$ 来回溯得到的序列（见代码）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N= <span class="number">1003</span>;</span><br><span class="line"><span class="keyword">int</span> a[N],c[N],p[N],sa[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LIS</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// longest increasing subsquence for 0 ~ n-1</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    b[<span class="number">0</span>]=a[<span class="number">0</span>];c[<span class="number">0</span>]=<span class="number">0</span>;p[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;b[k])&#123;</span><br><span class="line">            p[i]=c[k];</span><br><span class="line">            c[++k]=i;</span><br><span class="line">            b[k]=a[i];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = <span class="keyword">int</span>(lower_bound(b,b+k,a[i])-b);</span><br><span class="line">            b[tmp]=a[i];</span><br><span class="line">            c[tmp]=i;</span><br><span class="line">            p[i]=tmp&gt;<span class="number">0</span>?c[tmp<span class="number">-1</span>]:i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x = c[k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">        sa[i]=a[x];</span><br><span class="line">        x=p[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=n;++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,a+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> k = LIS(n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;sa[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="连续子序列最大和"><a href="#连续子序列最大和" class="headerlink" title="连续子序列最大和"></a>连续子序列最大和</h2><p>$O(n^3)$ 实在不值一提。$O(n^2)$ 就是先预处理前 $m$ 项和。这里具体讲两种 $O(n)$ 的做法。</p>
<ol>
<li>遍历序列对 $s$ 进行累加，如果 $s&lt;0$，将 $s$ 重置为 $0$,每次更新 $s$ 的最大值。最后便能求出最大值(注意序列中全为负数的情况)</li>
<li>设 $dp[i]$ 表示尾为 $i$ 的最大和。那么 $dp[i]=\max (dp[i-1],a[i])$ 。</li>
</ol>
<p>上述两种做法本质上是一致的，做法 2 可能更好理解。并且其实实现的时候我们没必要去用数组标记。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MSCS</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// maximal sum of continue subsquence,mind overflow</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r=a[<span class="number">0</span>],s=a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i!=n;++i)&#123;</span><br><span class="line">        s = <span class="built_in">max</span>(s,<span class="number">0</span>);</span><br><span class="line">        s += a[i];</span><br><span class="line">        r = <span class="built_in">max</span>(r,s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>快速数论变换（FNT）</title>
    <url>/fastNumberTranslation/</url>
    <content><![CDATA[<p>快速数论变换（FNT）是环 $\mathbb{Z}/ m \mathbb{Z}$ 上的 Fourier 变换（FFT）。<br>至于 快速 Fourier 变换是怎样的有什么用处，这里就不多说了，可参考 <a href="http://blog.miskcoo.com/2015/04/polynomial-multiplication-and-fast-fourier-transform#i-15" target="_blank" rel="noopener">这里</a>。</p>
<a id="more"></a>
<h2 id="NFT-的核心问题"><a href="#NFT-的核心问题" class="headerlink" title="NFT 的核心问题"></a>NFT 的核心问题</h2><p>无论是 FNT 还是 FFT 其本质其关键就是寻找一个 $w$ 使得 $w^{2^n} = 1$。在复数域中这个问题是显然的，而在一个环那就不那么简单了，这里我们考虑环 $R = \mathbb{Z}/ m \mathbb{Z}$。$R$ 为域当且仅当 $m$ 为素数。我们的问题是：</p>
<ol>
<li>我们选取 $R$ 中找比较大（满足我们的需求）的 $n$ 使得 $w^{2^n} = 1$ ；</li>
<li>找出对应的“原根“；</li>
<li>类似 FFT 的处理</li>
<li>应用时各种可能出错的情形，最常见的是溢出,还有只适用于数据范围不超过 P 的非负整数。</li>
</ol>
<h2 id="NFT-问题解决"><a href="#NFT-问题解决" class="headerlink" title="NFT 问题解决"></a>NFT 问题解决</h2><p>  为使得分析问题更为简单，我们考虑在 $m = p$ 为素数的情形，此时，我们有 $2^n \mid p-1$ 即 $p = k \cdot 2^n + 1$ 为(Fermat)素数，例如：</p>
<ol>
<li>$p=479 \times 2^{21} +1 = 1004535809,g = 3$</li>
<li>$p= 13 \times 2^{20} + 1 = 13631489,g = 15$</li>
<li>$p= 17 \times 2^{27} + 1 = 2281701377,g=3$<br>更多常数选择可见 <a href="http://blog.miskcoo.com/2014/07/fft-prime-table" target="_blank" rel="noopener">这里</a>。</li>
</ol>
<p>最终我们选择了 $FM = 1004535809$ 它的优势在于,它的两倍不超过 int 它的乘积不超过 long long 很有利于我们的运算，如果使用刚好不超过 long long 的数使用时很容易出现溢出并不方便。并且它恰好比较大。避免了做完 FFT 出现溢出。另外它可以取到的最大的 $N &gt; 2e6$ 也很不错。例如现在如果我们要做 $2^k$， $k \leq 21$ 的 NFT。那么我们取 $w = g^{\frac{p-1}{2^k}}$ 即可。</p>
<h2 id="HDU-1402"><a href="#HDU-1402" class="headerlink" title="HDU 1402"></a>HDU 1402</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">132005</span>;</span><br><span class="line"><span class="keyword">char</span> sa[N&gt;&gt;<span class="number">1</span>],sb[N&gt;&gt;<span class="number">1</span>];</span><br><span class="line">LL a[N],b[N];</span><br><span class="line"><span class="function">LL <span class="title">pow_mod</span><span class="params">(LL x,LL n,LL p)</span></span>&#123;</span><br><span class="line">    LL r=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x%p;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=x*x%p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(LL *x,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> t=i,k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;loglen;++j,t&gt;&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            k=(k&lt;&lt;<span class="number">1</span>)|(t&amp;<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;i) swap(x[i],x[k]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> LL FM = <span class="number">479</span>&lt;&lt;<span class="number">21</span>|<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nft</span><span class="params">(LL *x,<span class="keyword">int</span> len,<span class="keyword">int</span> loglen,<span class="keyword">bool</span> isInverse)</span></span>&#123;</span><br><span class="line">    LL g = pow_mod(<span class="number">3</span>,(FM<span class="number">-1</span>)&gt;&gt;loglen,FM);</span><br><span class="line">    <span class="keyword">if</span>(isInverse)&#123;</span><br><span class="line">        g=inv(g,FM);</span><br><span class="line">        LL invlen = pow_mod(len,FM<span class="number">-2</span>,FM);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)&#123;</span><br><span class="line">            x[i]=x[i]*invlen%FM;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    change(x,len,loglen);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> <span class="built_in">step</span>=<span class="number">2</span>;<span class="built_in">step</span>&lt;=len;<span class="built_in">step</span>&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> half = <span class="built_in">step</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        LL wn = pow_mod(g,len/<span class="built_in">step</span>,FM);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i+=<span class="built_in">step</span>)&#123;</span><br><span class="line">            LL w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&lt;i+half;++j)&#123;</span><br><span class="line">                LL t=(w*x[j+half])%FM;</span><br><span class="line">                x[j+half]=(x[j]-t+FM)%FM;</span><br><span class="line">                x[j]=(x[j]+t)%FM;</span><br><span class="line">                w = w*wn%FM;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,sa,sb))&#123;</span><br><span class="line">        <span class="keyword">int</span> alen=(<span class="keyword">int</span>)<span class="built_in">strlen</span>(sa);</span><br><span class="line">        <span class="keyword">int</span> blen=(<span class="keyword">int</span>)<span class="built_in">strlen</span>(sb);</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">1</span>,loglen=<span class="number">0</span>,tmp=alen+blen+<span class="number">3</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;tmp)&#123;</span><br><span class="line">            len&lt;&lt;=<span class="number">1</span>;++loglen;</span><br><span class="line">        &#125;</span><br><span class="line">        clr(a,<span class="number">0</span>);clr(b,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=alen;++i)    a[i]=sa[alen-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=blen;++i)    b[i]=sb[blen-i<span class="number">-1</span>]-<span class="string">'0'</span>;</span><br><span class="line">        nft(a,len,loglen,<span class="number">0</span>);</span><br><span class="line">        nft(b,len,loglen,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=len;++i)&#123;</span><br><span class="line">            a[i] = a[i]*b[i]%FM;</span><br><span class="line">        &#125;</span><br><span class="line">        nft(a,len,loglen,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(cnt&lt;len)&#123;</span><br><span class="line">            a[cnt+<span class="number">1</span>]+=a[cnt]/<span class="number">10</span>;</span><br><span class="line">            a[cnt]%=<span class="number">10</span>;++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt=alen+blen;</span><br><span class="line">        <span class="keyword">while</span>(cnt&gt;<span class="number">1</span>&amp;&amp;a[cnt<span class="number">-1</span>]==<span class="number">0</span>)    --cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=cnt<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>((<span class="keyword">int</span>)a[i]+<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>$\pi(x)$ 的计算</title>
    <url>/computationOfPiX/</url>
    <content><![CDATA[<p>$\pi(x)$ 表示不超过 $x$ 的素数个数。容易看出可以在 $O(N)$ 时间复杂度，$O(N)$ 空间复杂度离线预处理求出小于 $N$ 的素数全体。但是如果 $N=10^{14}$ 或者更大，这种做法必然是不现实的。因此下面给出高效的求解方法…</p>
<blockquote>
<p>再读一次还是觉得很巧妙，一步一步走向更优。</p>
</blockquote>
<a id="more"></a>
<p>理论基础: 参考潘承洞《数论基础》和 <a href="COMPUTING pix THE MEISSEL, LEHMER, LAGARIAS,MILLER, ODLYZKO METHOD.pdf">ams 上的一篇论文</a>，<a href="Computing pix the combinatorial method.pdf">另一篇论文</a></p>
<h2 id="psi-x-s"><a href="#psi-x-s" class="headerlink" title="$\psi(x,s)$"></a>$\psi(x,s)$</h2><p>$\psi(x,s)$ 表示不超过 $x$ 且能不能被前 $s$ 个素数整除的正整数个数。即</p>
<script type="math/tex; mode=display">
\psi(x,s) = \sum_{n \leq x} \sum_{d|(n,m_s)} \mu(d) = \sum_{d|m_s} u(d)\lfloor \frac{x}{d} \rfloor</script><p>其中 $m_s = p_1 \cdots p_s$ 为前 $s$ 个素数的积。</p>
<p>另一方面，显然我们有</p>
<script type="math/tex; mode=display">
\psi(x,s) = \psi(x,s-1) - \psi(\frac{x}{p_s},s-1)</script><h2 id="pi-x"><a href="#pi-x" class="headerlink" title="$\pi(x)$"></a>$\pi(x)$</h2><p>我们知道一个数 $n&gt;1$ 是素数当且仅当不存在素数 $p \leq \sqrt{n}$ 使得 $p \mid n$。因此当 $s \geq \pi(\sqrt{x})$ 时，</p>
<script type="math/tex; mode=display">
\psi(x,s) = \pi(x) - s + 1</script><h2 id="P-k-x-s"><a href="#P-k-x-s" class="headerlink" title="$P_k(x,s)$"></a>$P_k(x,s)$</h2><p>设 $P_k(x,s)$ 为 <strong>不超过 $x$ 且每个素因子都大于 $p_s$ 且素因子(按重根计)个数为 $k$</strong> 的整数个数（方法属于 Lehmer）。<br>进一步设 $P_0(x,s)=1$。则</p>
<script type="math/tex; mode=display">
\psi(x,s) = \sum_{k=0} ^{\infty} P_k(x,s)</script><p>显然 $P_1(x,s) = \pi(x)-s$。</p>
<p>若 $\pi(\sqrt[3]{x}) \leq s \leq \pi(\sqrt{x})$ 则 $P_k(x,s)=0,k \geq 3$ 此时</p>
<script type="math/tex; mode=display">
\psi(x,s) = 1 + \pi(x)-s + P_2(x,s)</script><p>其中</p>
<script type="math/tex; mode=display">
P_2(x,s) = \sum_{k=s+1}^{\pi(\sqrt{x})} \left( \pi(\frac{x}{p_k}) - k + 1 \right)</script><blockquote>
<p>注意到上式中 $\frac{x}{p_k} &lt;  x^{\frac{2}{3}}$ </p>
</blockquote>
<h2 id="pi-x-的计算公式"><a href="#pi-x-的计算公式" class="headerlink" title="$\pi(x)$ 的计算公式"></a>$\pi(x)$ 的计算公式</h2><script type="math/tex; mode=display">
\pi(x) = \psi(x,s) + \frac{(\pi(\sqrt{x})+s-2)(\pi(\sqrt{x})- s+1)}{2} - \sum_{k=s+1}^{\pi(\sqrt{x})} \pi(\frac{x}{p_k})</script><blockquote>
<p>取上面 $s = \pi(\sqrt[3]{x}) $<br>因此问题最终转化成求 $\psi(x,\pi(\sqrt[3]{x}))$。它可以利用</p>
</blockquote>
<ol>
<li>$\psi(x,0) = \lfloor x \rfloor$</li>
<li>$\psi(x,s) = \psi(x,s-1) - \psi(\frac{x}{p_s},s-1)$</li>
</ol>
<p>至此问题貌似就这么解决了。但是由于这个递归会使得程序效率大大降低，因此需要一些预处理操作。</p>
<ol>
<li>若 $x&lt;p_s$ 则 $\psi(x,s) ＝ 1$ </li>
<li>给定一个小整数 M，预处理出 $\psi(x,s)$,其中 $x &lt; q=p_1 \cdots p_s,\quad s&lt;=M$<br>则 $\psi(x,s) = \psi(x \mod q,s) + \lfloor \frac{x}{q} \rfloor \psi(q,s)$</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e8</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">1</span>;p[<span class="number">1</span>]=<span class="number">2</span>;isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)   isp[i]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isp[i])  p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>,t=(N<span class="number">-1</span>)/i + <span class="number">1</span>;j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j)&#123;</span><br><span class="line">			isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM+<span class="number">1</span>][M+<span class="number">1</span>],sz[M+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	initprime();</span><br><span class="line">	pi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isp[i])  pi[i]=pi[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>  pi[i]=pi[i<span class="number">-1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	sz[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=PM;++i)  phi[i][<span class="number">0</span>]=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)&#123;</span><br><span class="line">		sz[i]=p[i]*sz[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=PM;++j)&#123;</span><br><span class="line">			phi[j][i]=phi[j][i<span class="number">-1</span>]-phi[j/p[i]][i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">primephi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s &lt;= M)  <span class="keyword">return</span> phi[x%sz[s]][s]+(x/sz[s])*phi[sz[s]][s];</span><br><span class="line">	<span class="keyword">if</span>(x/p[s] &lt;= p[s])  <span class="keyword">return</span> primepi(x)-s+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;N &amp;&amp; x/p[s]/p[s] &lt;= p[s])&#123;</span><br><span class="line">		<span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">		LL ans = pi[x]-LL(s2x+s<span class="number">-2</span>)*(s2x-s+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=s2x;++i)&#123;</span><br><span class="line">			ans+=pi[x/p[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> primephi(x,s<span class="number">-1</span>)-primephi(x/p[s],s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> pi[x];</span><br><span class="line">	<span class="keyword">int</span> ps2x = pi[<span class="keyword">int</span>(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">	<span class="keyword">int</span> ps3x = pi[<span class="keyword">int</span>(cbrt(x+<span class="number">0.2</span>))];</span><br><span class="line">	LL ans = primephi(x,ps3x) + LL(ps2x+ps3x<span class="number">-2</span>)*(ps2x-ps3x+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =ps3x+<span class="number">1</span>,ed = ps2x;i&lt;=ed;++i)&#123;</span><br><span class="line">		ans -= primepi(x/p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	LL n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n=98765432109876 = 9.8*10^13 用时 38s, N 大点，耗时会小点</span></span><br><span class="line">		<span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;primepi(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="lehmer-计算公式"><a href="#lehmer-计算公式" class="headerlink" title="lehmer 计算公式"></a>lehmer 计算公式</h2><blockquote>
<p>我自己写的代码没有上面的快，两种计算各有优势</p>
</blockquote>
<p>令 $s = \pi(\sqrt[4]{x}), t= \pi(\sqrt[3]{x})$。则，对任意 $i&gt;3, P_i(x,s) = 0$,</p>
<script type="math/tex; mode=display">
\begin{array}{rl}
\psi(x,s) &= 1 + \pi(x) - s + P_2(x,s) + P_3(x,s) \\
&= 1+ \pi(x) - s  + P_2(x,s) + \sum_{k=s+1}^{t} P_2(\frac{x}{p_k},k-1) \\
\end{array}</script><p>即：</p>
<script type="math/tex; mode=display">
\pi(x) = \psi(x,s)-1+s-P_2(x,s) - \sum_{k=s+1}^{t} P_2(\frac{x}{p_k},k-1)</script><blockquote>
<p>注意到 $\frac{x}{p_k} &lt; \sqrt{x}$ ，所以最后一个式子可以用下式求，最后计算复杂度在于 $P_2(x,s)$ </p>
</blockquote>
<script type="math/tex; mode=display">
\sum_{k=s+1}^{t} P_2(\frac{x}{p_k},k-1) = \sum_{k=s+1}^{t}  \sum_{j=k}^{\pi(\sqrt{\frac{x}{p_k}})} \pi(\frac{x}{p_k p_j}) - j+1</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e8</span>+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p[N],pi[N];</span><br><span class="line"><span class="keyword">bool</span> isp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initprime</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">1</span>;p[<span class="number">1</span>]=<span class="number">2</span>;isp[<span class="number">2</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)   isp[i]=<span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;i+=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isp[i])  p[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>,t=(N<span class="number">-1</span>)/i + <span class="number">1</span>;j &lt;= cnt &amp;&amp; p[j] &lt; t; ++j)&#123;</span><br><span class="line">			isp[i * p[j]] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%p[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> PM = <span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span>*<span class="number">7</span>*<span class="number">11</span>*<span class="number">13</span>*<span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> phi[PM+<span class="number">1</span>][M+<span class="number">1</span>],sz[M+<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	initprime();</span><br><span class="line">	pi[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;N;++i)&#123;</span><br><span class="line">		<span class="keyword">if</span>(isp[i])    pi[i] = pi[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">else</span> pi[i]=pi[i<span class="number">-1</span>];    </span><br><span class="line">	&#125;</span><br><span class="line">	sz[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=PM;++i)  phi[i][<span class="number">0</span>]=i;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;++i)&#123;</span><br><span class="line">		sz[i]=p[i]*sz[i<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=PM;++j)&#123;</span><br><span class="line">			phi[j][i]=phi[j][i<span class="number">-1</span>]-phi[j/p[i]][i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lehmerpi</span><span class="params">(LL x)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">P_2</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>;</span><br><span class="line"><span class="function">LL <span class="title">primephi</span><span class="params">(LL x, <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(s &lt;= M)  <span class="keyword">return</span> phi[x%sz[s]][s]+(x/sz[s])*phi[sz[s]][s];</span><br><span class="line">	<span class="keyword">if</span>(x/p[s] &lt;= p[s])  <span class="keyword">return</span> lehmerpi(x)-s+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(x/p[s]/p[s] &lt;= p[s] &amp;&amp; x&lt;N)&#123;</span><br><span class="line">		<span class="keyword">int</span> s2x = pi[(<span class="keyword">int</span>)(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>))];</span><br><span class="line">		LL ans = pi[x]-(s2x+s<span class="number">-2</span>)*(s2x-s+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=s2x;++i)&#123;</span><br><span class="line">			ans+=pi[x/p[i]];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ans;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> primephi(x,s<span class="number">-1</span>)-primephi(x/p[s],s<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">P_2</span><span class="params">(LL x,<span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ps2x = lehmerpi(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>));</span><br><span class="line">	LL ans = LL(s-ps2x)*(ps2x+s<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=s+<span class="number">1</span>;i&lt;=ps2x;++i)&#123;</span><br><span class="line">		ans += lehmerpi(x/p[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">lehmerpi</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x&lt;N) <span class="keyword">return</span> pi[x];</span><br><span class="line">	<span class="keyword">int</span> ps3x = lehmerpi(<span class="keyword">int</span>( cbrt(x+<span class="number">0.2</span>) ));</span><br><span class="line">	<span class="keyword">int</span> ps4x = lehmerpi(<span class="keyword">int</span>( <span class="built_in">sqrt</span>(<span class="built_in">sqrt</span>(x+<span class="number">0.2</span>)) ));</span><br><span class="line">	LL ans = primephi(x,ps4x) + ps4x<span class="number">-1</span> - P_2(x,ps4x);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i =ps4x+<span class="number">1</span>;i&lt;=ps3x;++i)&#123;</span><br><span class="line">		ans -= P_2(x/p[i],i<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	init();</span><br><span class="line">	LL n;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123; <span class="comment">// n=98765432109876 = 9.8*10^13 用时 42s, N 大点，耗时会小点</span></span><br><span class="line">		<span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;lehmerpi(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Time used: "</span>&lt;&lt;difftime(time(<span class="number">0</span>),now)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="稳定简洁的-DP-做法"><a href="#稳定简洁的-DP-做法" class="headerlink" title="稳定简洁的 DP 做法"></a>稳定简洁的 DP 做法</h2><p>我们令 $dp(x,s) = \psi(x,s)+s-1$ 它的意义是，$2～x$ 中被前 $s$ 个素数筛完后的伪素数个数。因此我们有 $dp(0,0)=0,dp(x,0)=x-1,x&gt;1,dp(x,\pi(\sqrt{x})) = \pi(x)$ 且有状态转移</p>
<script type="math/tex; mode=display">
dp(x,s) = dp(x,s-1)-dp(\frac{x}{p_s},s-1)+s-1</script><p>因为 $dp(p_{s-1},s-1) = s-1$，最后一项可以写成 $dp(p_{s-1},s-1)$。虽然上面需要二维数组，但是实际上我们可以优化成一维数组的情况。因为</p>
<script type="math/tex; mode=display">
dp(x,s) = dp(x,s-1)-dp(\frac{x}{p_s},s-1)+ dp(p_{s-1},s-1)</script><p>另外我们也不可能开 $O(n)$ 的数组，但是可以利用一种黑科技开 $O(\sqrt{n})$ 的数组即可达到我们的目的。<br>即我们用 $L[x]$ 表示 $dp(x,s)$ 用 $R[x]$ 表示 $dp(\frac{n}{x},s)$。</p>
<blockquote>
<p>若$L[m]!=L[m-1]$ ，则说明 $m$ 不能被前 $s$  个素数整除是第 $s+1$ 个素数。</p>
<p>我们需要的是 $R[1]$</p>
</blockquote>
<p>上述做法的时间复杂度为 $O(\frac{n}{\log n})$ 且常数特别小，代码十分简洁。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span>+<span class="number">2</span>;</span><br><span class="line">LL L[N],R[N];</span><br><span class="line"><span class="function">LL <span class="title">primepi</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    LL rn = (LL)<span class="built_in">sqrt</span>(n+<span class="number">0.2</span>);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=rn;++i)   R[i]=n/i<span class="number">-1</span>;</span><br><span class="line">    LL ln = n/(rn+<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=ln;++i)   L[i]=i<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL p=<span class="number">2</span>;p&lt;=rn;++p)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L[p]==L[p<span class="number">-1</span>])    <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(LL i=<span class="number">1</span>,tn=<span class="built_in">min</span>(n/(p*p),rn);i&lt;=tn;++i)&#123;</span><br><span class="line">            R[i] -= (i*p&lt;=rn?R[i*p]:L[n/(i*p)])-L[p<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(LL i=ln;i&gt;=p*p;--i)&#123;</span><br><span class="line">            L[i] -= L[i/p]-L[p<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;  <span class="comment">// n=98765432109876 = 9.8*10^13 用时 193s</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;primepi(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这个骚方法还目前还没有找到其它的应用 0.0</p>
<p>主要还没法对它用树状数组</p>
</blockquote>
<h2 id="求第-n-个素数的方法"><a href="#求第-n-个素数的方法" class="headerlink" title="求第 n 个素数的方法"></a>求第 n 个素数的方法</h2><ul>
<li>根据概率分布找到大致界限</li>
<li>再牛顿梯度法（或者二分查找）使得 $\pi(m)= n$ </li>
<li>素数判断递减 $m$ 直到 $m$ 为素数</li>
<li><a href="/nthPrimeNumber/" title="参考这里">参考这里</a>
</li>
</ul>
<h2 id="psi-x-s-计算太慢了，需要优化"><a href="#psi-x-s-计算太慢了，需要优化" class="headerlink" title="$\psi(x,s)$ 计算太慢了，需要优化"></a>$\psi(x,s)$ 计算太慢了，需要优化</h2><blockquote>
<p>理论依据见此 <a href="countPrime.zip">压缩包</a></p>
</blockquote>
<p>我们知道，若 $\pi(\sqrt[3]{x}) \leq s \leq \pi(\sqrt{x})$ 则</p>
<script type="math/tex; mode=display">
\psi(x,s) = 1 + \pi(x)-s + P_2(x,s)</script><p>其中</p>
<script type="math/tex; mode=display">
P_2(x,s) = \sum_{k=s+1}^{\pi(\sqrt{x})} \left( \pi(\frac{x}{p_k}) - k + 1 \right) =  \sum_{k=s+1}^{\pi(\sqrt{x})} \left( \psi(\frac{x}{p_k},s)+ s - k \right)</script><blockquote>
<p>注意到上式中 $\frac{x}{p_k} &lt;  x^{\frac{2}{3}} $ </p>
</blockquote>
<p>我们之前的操作本质是递归让 $x,s$ 变小，通过打表预处理来加速递归使得满足一定的效率需要。</p>
<p>现在我们来直接计算得到我们的答案。</p>
<h3 id="符号约定"><a href="#符号约定" class="headerlink" title="符号约定"></a>符号约定</h3><p>取定整数 $\sqrt[3]{x} \leq y = x^{\frac{1}{3}+\epsilon }&lt; \sqrt{x}, z = \frac{x}{y}, s = \pi(y)$ ，约定 $p, q$ 是素数。 预处理 $y$ 以内的数组：<code>isp[], p[], mu[], pi[]</code> ，对 $[1,z]$ 内的 $\psi(x,s)$ 用树状数组（可以在我的博客网站搜索：<code>树状数组</code>）维护（注意到这需要 $O(z)$ 的内存，单次维护不现实，所以我们可以一段段的维护，保证每一段的长度为 $2^{\lfloor \log_2(y) \rfloor +1}$ 来提高效率）</p>
<blockquote>
<p>做完上面的预处理后，我们发现 $P_2(x,s)$ 可以直接计算了。</p>
</blockquote>
<h3 id="psi-x-s-直接计算"><a href="#psi-x-s-直接计算" class="headerlink" title="$\psi(x,s)$  直接计算"></a>$\psi(x,s)$  直接计算</h3><p>在本博文的最开始有：</p>
<script type="math/tex; mode=display">
\psi(x,s) = \sum_{n \leq x} \sum_{d|(n,p)} \mu(d) = \sum_{d|p} u(d)\lfloor \frac{x}{d} \rfloor</script><p>其中 $p$ 为前 $s$ 个素数的积。</p>
<blockquote>
<p>但是最右边本质上有很多项，所以直接算，其实复杂度特别高。</p>
</blockquote>
<p>我们还有递归公式：</p>
<script type="math/tex; mode=display">
\begin{array}{cl}
\psi(x,s) &= \psi(x,s-1) - \psi(\frac{x}{p_s},s-1) \\
&= \psi(x,s-2) - \psi(\frac{x}{p_{s-1}},s-2) - \psi(\frac{x}{p_s},s-2)  + \psi(\frac{x}{p_sp_{s-1}},s-2) 
\end{array}</script><p>可以一直分解下去，如果一直分解下去就可以得到最上面的公式了。</p>
<p>所以我们约定：对于节点 $\mu(n) \psi(\frac{x}{n},b)$ ，如果满足</p>
<ul>
<li>原始节点： $b = c, n \leq y$  </li>
<li>特殊节点：$n &gt; y$  </li>
</ul>
<p>就不再分解。这也等价于说 如果  $n &lt; y$ 且 $b&gt;c$  就分解。因为一开始 $n=1,b=a&gt;c$。而且 $n$ 会增大，$b$ 会减小，所以节点一定会有限步内，落入上述两种框架中的一种。并且 <strong>特殊节点的父节点 $-\mu(n) \psi(\frac{x}{\frac{n}{p_{d+1}}},b+1)$</strong> 必然满足 $\frac{n}{ p_{d+1} } \leq y <n$  且 $b+1>c$。综上：</p>
<blockquote>
<p>以前设置 $c = 7$，但是后来发现没必要，$c=0$ 就挺好。</p>
</blockquote>
<script type="math/tex; mode=display">
\psi(x,s) = \sum_{n=1} ^y \mu(n) \lfloor \frac{x}{n} \rfloor +  \sum_{\frac{n}{\delta(n)} \leq y < n} \mu(n) \psi(\frac{x}{n}, \pi(\delta(n))-1) = S_0 + S</script><p>$S_0$ 很好处理，计算 $S$： 对 $p = \delta(n)$ 一起求：</p>
<script type="math/tex; mode=display">
S = - \sum_{p \leq y} \sum_{\begin{array}{c} \delta(m) >p \\ m \leq y < mp \end{array}} \mu(m) \psi(\frac{x}{mp},\pi(p)-1)</script><p>注意到：$\frac{x}{mp} &lt; z$ ，所以我们已经可以把 $\psi(x,s)$ 直接计算出来了。</p>
<blockquote>
<p>但是我们可以避免很多计算来提高效率。于是我们有下列一系列的操作</p>
</blockquote>
<ul>
<li>$p \geq \sqrt{y}$，则 $m$ 为素数 ，且此时 $mp &gt; p^2 \geq y$ (若 $m$ 为合数，则 $m \geq \delta(m) ^2 &gt;p^2 \geq y$ 矛盾)</li>
<li>$\frac{x}{mp} &lt; p$ 时，$\psi(\frac{x}{mp},\pi(p)-1) = 1$</li>
<li>$\sqrt{\frac{x}{mp}} &lt; p$ 时，$\psi(\frac{x}{mp},\pi(p)-1) = \pi(\frac{x}{mp}) - \pi(p) +2$</li>
<li>$\sqrt{y} &lt; \sqrt{z} &lt;  x^{\frac{1}{4}}  &lt; x^{\frac{1}{3}} &lt; y$</li>
</ul>
<h4 id="由此对-S-分段计算"><a href="#由此对-S-分段计算" class="headerlink" title="由此对$S$分段计算"></a>由此对$S$分段计算</h4><script type="math/tex; mode=display">
S_1 = - \sum_{\sqrt[3]{x} < p \leq y} \sum_{\begin{array}{c} \delta(m) >p \\ m \leq y < mp \end{array}} \mu(m) \psi(\frac{x}{mp},\pi(p)-1)</script><script type="math/tex; mode=display">
S_2 = - \sum_{\sqrt{z} < p \leq \sqrt[3]{x}} \sum_{\begin{array}{c} \delta(m) >p \\ m \leq y < mp \end{array}} \mu(m) \psi(\frac{x}{mp},\pi(p)-1)</script><script type="math/tex; mode=display">
S_3 = - \sum_{\sqrt{y} < p \leq \sqrt{z}} \sum_{\begin{array}{c} \delta(m) >p \\ m \leq y < mp \end{array}} \mu(m) \psi(\frac{x}{mp},\pi(p)-1)</script><script type="math/tex; mode=display">
S_4 = - \sum_{p \leq \sqrt{y}} \sum_{\begin{array}{c} \delta(m) >p \\ m \leq y < mp \end{array}} \mu(m) \psi(\frac{x}{mp},\pi(p)-1)</script><p>由限制关系式，我们化简 $S_1, S_2, S_3$</p>
<script type="math/tex; mode=display">
\begin{array}{cl}
S_1 &= - \sum_{\sqrt[3]{x} < p \leq y} \sum_{p<q \leq y} \mu(q) \psi(\frac{x}{pq},\pi(p)-1) \\
&=  \sum_{\sqrt[3]{x} < p < q \leq y} 1 \\
&= {\pi(y)-\pi(\sqrt[3]{x}) \choose 2} 
\end{array}</script><script type="math/tex; mode=display">
\begin{array}{cl}
S_2 &= - \sum_{\sqrt{z} < p \leq \sqrt[3]{x}} \sum_{p<q \leq y} \mu(q) \psi(\frac{x}{pq},\pi(p)-1) \\
&=  \sum_{\sqrt{z} < p \leq \sqrt[3]{x}} \sum_{p<q \leq y} \pi(\frac{x}{pq}) - \pi(p) +2 \\
&= \sum_{\sqrt{z} < p \leq \sqrt[3]{x}} \sum_{p<q \leq y} \pi(\frac{x}{pq}) + \sum_{\sqrt{z} < p \leq \sqrt[3]{x}} (\pi(p)-\pi(y))(\pi(p)-2)
\end{array}</script><script type="math/tex; mode=display">
\begin{array}{cl}
S_3 &= - \sum_{\sqrt{y} < p \leq \sqrt{z}} \sum_{p < q \leq y} \mu(q) \psi(\frac{x}{pq},\pi(p)-1) \\
&=  \sum_{\sqrt{y} < p \leq \sqrt{z}}  \sum_{p < q \leq y} \psi(\frac{x}{pq},\pi(p)-1)
\end{array}</script><blockquote>
<p>$S_2$ 也可以用 $S_3$ 的式子求，只是效率不高。</p>
<p>$S_2$ 中 $\frac{x}{pq}, p&lt;y$，即可以直接求。</p>
</blockquote>
<p><strong>当然了还可以继续细化，但是我嫌麻烦就不想再细化了！</strong></p>
<blockquote>
<p>也就是现在的核心就是树状数组分段维护数据，然后每一段的总值要用数组存起来就好了。然后用这个数据结果计算 $S_2,S_3,S_4,P_2(x,s)$，然后就大功告成了 0.0</p>
<p>用 $\psi(x,s)$ 计算 $\pi(x)$，还是用 $\pi(x)$ 计算 $\psi(x,s)$ ，这是一个问题。</p>
<p>用树状数组维护的时候会有一个很大的问题就是：求和式中 每此动 $p$ 整个维护就要从 $1 \to p$ 重新维护一次很麻烦。这个问题没解决所以我不想写代码。 </p>
<p>想把 $\frac{x}{pq}$ 的所有可能的值单调递增排列但是又不现实。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>环的 Zariski 拓扑(素谱)</title>
    <url>/zariskiTopologyOfRing/</url>
    <content><![CDATA[<p>设 $A$ 是(交换)环。令 $X$ 为 $A$ 的素理想全体，定义 $V(E)$ 为 $A$ 中包含 $E$ 的素理想全体，则将所有 $V(E)$ 看做闭集，它满足拓扑空间三条公理，即构成了拓扑，该拓扑称作 Zariski 拓扑，这个拓扑空间叫做环 $A$ 的素谱，记作 $Spec(A)$。<br>有了拓扑，我们自然要考虑：</p>
<ol>
<li>集合的内部、闭包</li>
<li>拓扑的基，拓扑的分离性，紧性</li>
<li>空间的连通性，不可约性</li>
<li>拓扑空间的连续函数等等概念</li>
</ol>
<p>在这个具体拓扑下的样子。</p>
<a id="more"></a>
<h2 id="Zariski-拓扑"><a href="#Zariski-拓扑" class="headerlink" title="Zariski 拓扑"></a>Zariski 拓扑</h2><p>要证明 $T = \lbrace V(E),E \subset A \rbrace$ 作为闭集确实构成了一个拓扑，即证明 $\emptyset \in T,X \in T$，且 $T$ 中任意并，有限交运算是封闭的。而显然我们有</p>
<ol>
<li>$V(0)=X,V(A)=\emptyset$</li>
<li>$\cap_{i \in I} V(E_i) = V(\cup_{i \in I}E_i)$</li>
<li>为说明 $V(E_1) \cap V(E_2) \in T$ 我们需要一些准备工作。</li>
</ol>
<p>设 $I(E)$ 为由 $E$ 生成的理想，定义</p>
<script type="math/tex; mode=display">
\sqrt{\alpha} = \lbrace x\in A : x^n \in \alpha \rbrace</script><p>则显然我们有</p>
<ol>
<li>$\alpha \subset \sqrt{\alpha} = \sqrt{\sqrt{\alpha}}$</li>
<li>$\sqrt{\alpha \beta} = \sqrt{\alpha \cap \beta} = \sqrt{\alpha} \cap \sqrt{\beta}$</li>
<li>$\sqrt{\alpha}=(1) \Leftrightarrow \sqrt{\alpha}$</li>
<li>$\sqrt{\alpha+\beta} = \sqrt{ \sqrt{\alpha}+\sqrt{\beta} }$</li>
<li>若 $p$ 是素理想，$\sqrt{p} = p$。</li>
<li>$V(E)=V(I(E))=V(\sqrt{I(E)})$</li>
<li>$V(\alpha \cap \beta)=V(\alpha \beta)=V(\alpha) \cup V(\beta)$</li>
<li>$\cap_{p \in V(\alpha)} p = \sqrt{\alpha}$ </li>
<li>$V(E_1) = V(E_2) \Leftrightarrow \sqrt{I(E_1)} = \sqrt{I(E_2)}$</li>
</ol>
<p>因此，$V(E_1) \cap V(E_2) = V(I(E_1)) \cap V(I(E_2)) = V(I(E_1) \cap I(E_2)) \in T$。这说明它确实满足拓扑空间的三条公理。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>有了拓扑之后，我们自然用具体的例子来看一下，这个拓扑大致长什么样子。<br>考虑 $Spec(\mathbb{Z})$ ，此时 $X = \lbrace (p) : p\text{ is prime } \rbrace \cup (0)$。可以看出，包含 $(0)$ 闭集仅有 $X$，除 $(0)$ 外，$X$ 中的单点集全是闭集。因此 $Spec(\mathbb{Z})$ 不是 $T_1$ 空间，由此可见，一般地，$Spec(A)$ 不是 $T_1$ 空间，即此拓扑的分离性很差。</p>
<h2 id="内部和闭包"><a href="#内部和闭包" class="headerlink" title="内部和闭包"></a>内部和闭包</h2><p>因为在一般的拓扑理论中我们有 $A^{o} = \overline{A^c} ^c$，因此，我们只需搞清楚 $A^{o}$ 和 $\overline{A}$中任意一个即可，我们考虑闭包($\overline{A}$)。对于 $Y \subset X$。若 $Y \subset V(E)$ 则 $\forall \; p \in Y, E \in p$,即 $ E \in \cap_{p \in Y} p$。因此 $Y \subset V(\cap_{p \in Y}) \subset V(E)$。因此 $\overline{Y} = V(\cap_{p \in Y})$。<br>特别地，</p>
<ol>
<li>$\overline{\lbrace p_x \rbrace} = V(p_x)$</li>
<li>$\overline{\lbrace p_x \rbrace} = \lbrace p_x \rbrace \Leftrightarrow p_x$ 是极大理想。</li>
<li>$p_y \in \overline{\lbrace p_x \rbrace} \Leftrightarrow p_x \subset p_y$</li>
<li>$X$ 是 $T_0$ 空间（$p_y \notin \overline{\lbrace p_x \rbrace}$ 或者 $p_x \notin \overline{\lbrace p_y \rbrace}$）。</li>
</ol>
<p>因此，这样就很清楚为何在之前的例子$Spec(\mathbb{Z})$中除$(0)$外单点集都是闭集了。有了之前的结论我们再看一下其他的例子。<br>$Spec(\mathbb{R})$：此时 $X = \lbrace 0 \rbrace$ 只有一个元素拓扑是平凡的。<br>因为 若 $A$ 为域,则 $A[x]$ 为 ED 为 PID，其素理想为 $(f)$ 不可约多项式。且 PID 中非零素理想就是极大理想。<br>$Spec(\mathbb{C}[x])$: 此时 $X = \lbrace (x+t): t \in \mathbb{C} \rbrace \cup \lbrace (0) \rbrace$<br>$Spec(\mathbb{R}[x])$: 此时 $X = \lbrace (x+t): t \in \mathbb{R} \rbrace \cup \lbrace (x^2+ax+b): a,b \in \mathbb{R},a^2 &lt; 4b \rbrace \cup \lbrace (0) \rbrace$</p>
<h2 id="基，紧性"><a href="#基，紧性" class="headerlink" title="基，紧性"></a>基，紧性</h2><p>由于 $V(\cup_{i \in I}E_i) = \cap_{i \in I} V(E_i)$ 我们定义 $X_E = X \setminus V(E)$。则 $X_E = \cup_{f \in E} X_f$ 这说明 $X_f,f \in A$ 确实构成了 $X$ 的一组基。$X_f$ 表示不包含 $f$ 的素理想全体。</p>
<ol>
<li>$X_f \cap X_g = X_{fg}$</li>
<li>$X_f = \emptyset \Leftrightarrow f$ 是幂零的。</li>
<li>$X_f = X \Leftrightarrow f$ 是单位。</li>
<li>$X_f = X_g \Leftrightarrow \sqrt{(f)} = \sqrt{(g)}$</li>
</ol>
<h3 id="X-是拟紧的"><a href="#X-是拟紧的" class="headerlink" title="$X$ 是拟紧的"></a>$X$ 是拟紧的</h3><blockquote>
<p>这里的拟紧,实际上就是一般点集拓扑学中的紧，在代数中紧这个概念是拟紧＋Hausdorff。</p>
</blockquote>
<p>我们只需证明：若 $\cup_{f \in S} X_f = X$ 则存在有限并使上式成立。实际上，</p>
<script type="math/tex; mode=display">
\cup_{f \in S} X_f = X \Leftrightarrow V(I(S))=V(S) = \emptyset</script><p>因此 $I(S)=A$，即 $1 = \sum_{i=1}^n a_i s_i$。所以$I(s_1,\cdots,s_n) = A$，即 $\cup_{i=1}^n X_{s_i} = X$。证毕。</p>
<h3 id="X-f-是拟紧的"><a href="#X-f-是拟紧的" class="headerlink" title="$X_f$ 是拟紧的"></a>$X_f$ 是拟紧的</h3><p>我们只需证明：若 $X_f \subset \cup_{g \in S} X_g$，则存在有限并使上式成立。实际上，</p>
<script type="math/tex; mode=display">
X_f \subset \cup_{g \in S} X_g  \Leftrightarrow V(\sqrt{I(S)}) = V(S) \subset V(f)</script><p>因此 $f \in \sqrt{I(S)}$，即 $f^m = \sum_{i=1}^n a_i s_i$。所以 $f^m \in I(s_1,\cdots,s_n)$即。$X_f \subset \cup_{i=1}^n X_{s_i}$。证毕。</p>
<h3 id="任意开集-Y-subset-X-是拟紧的当且仅当-Y-可以写成有限多个-X-f-的并"><a href="#任意开集-Y-subset-X-是拟紧的当且仅当-Y-可以写成有限多个-X-f-的并" class="headerlink" title="任意开集 $Y \subset X$ 是拟紧的当且仅当 $Y$ 可以写成有限多个 $X_f$ 的并"></a>任意开集 $Y \subset X$ 是拟紧的当且仅当 $Y$ 可以写成有限多个 $X_f$ 的并</h3><p>Proof: 由 $X_f$ 是拟紧的知道，“$\Leftarrow$” 是显然的。<br>“$\Rightarrow$” 是因为存在$E \subset A$ 使得</p>
<script type="math/tex; mode=display">
Y = X_E = \cup_{f \in E} X_f</script><p>是 $Y$ 的一个开覆盖，由于是拟紧的，因此可以写成有限个 $X_f$ 的并，证毕。</p>
<blockquote>
<p>以上结论来自 Atiyah <strong>An Introduction to Coummutative Algebra</strong> 习题。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>李代数</title>
    <url>/lieAlgebra/</url>
    <content><![CDATA[<p>近期在整理 Lie Algebra 课的笔记，还是很喜欢这门课的，主要是本科时候矩阵玩的特别 6，然后 Lie Algebra 可以认为是矩阵的推广版本。里面的证明技巧性相当强。我之所以喜欢数学很大程度与数学技巧有关。但是我的导师说，这些虽然很有技巧，但是你花时间都是可以处理的，会技巧没什么了不起，脑袋稍微好一点就能做这种事，长期技巧的训练其实意义并不大，应该更关注数学内部的东西，具体说就是一个代数对象的结构，分类，不变量，对象之间的同构。一个概念有哪些等价形式，与其它概念之间的关系，搞清楚这些更为重要，它们的证明只要大致知道怎么过来的就行。我们并不要把证明的细节放在心中，因为我们已经经过了多年的训练，相信我们通过大致步骤就能给出详细的证明，只是花的时间多少罢了。当然初学一个东西，去抠它的细节是无可厚非的。<br><strong>以上纯属废话 0.0</strong></p>
<a id="more"></a>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>交换环 $K$ 上的模 $L$，以及一个运算 $L \times L \to L,(x,y) \mapsto [x,y]$ 称为 $x,y$ 的 Lie 括号，或交换子，并称 $L$ 是 $K$ 上的 Lie Algebra，如果满足如下公理。<br>L1. $[\cdot,\cdot]$ 是双线性的；<br>L2. $[x,x]=0$ 对任意 $x \in L$ 成立；<br>L3. $[x,[y,z]]+[y,[z,x]]+[z,[x,y]]=0$ (Jacobi 恒等式)</p>
<p>若 $[L,L]=0$ 则上面结论显然成立，此时称为 Abelian Lie Algebra。</p>
<blockquote>
<p>我们通常并不考虑 Abelian Lie Algebra。并且要求交换环 $K$ 是域 $F$，很多时候还要求 $F$ 是特征为 0 的代数闭域，另外我们大多考虑 $L$ 是 $F$ 上的有限维线性空间。</p>
</blockquote>
<p>子，理想，商，同态，表示等一系列的概念和其它代数结构几乎一致。可以划入范畴中。另外单，半单，Radical 等这些概念也于环里面的类似，就不赘述了。</p>
<h2 id="样板-Lie-Algebra"><a href="#样板-Lie-Algebra" class="headerlink" title="样板 Lie Algebra"></a>样板 Lie Algebra</h2><p>若 $V$ 是 $F$ 上有限维线性空间，$End V$ 表示 $V$ 到 $V$ 的线性变换全体按照元素的复合构成了 $F$ 上的线性空间且 $\dim End V = (\dim V)^2$。也构成了 $End V$ 是一个结合 $F$-代数。而任何结合代数都可以诱导一个 Lie 代数： $[x,y]=xy - yx$ 。为了强调 Lie 结构，我们用 $\mathbb{gl}(V)$ 代替 $End V$，称为 general linear algebra。它在 Lie 代数中充当的角色很类似于置换群在群中的角色。我们知道半单 Lie 代数同构于 $\mathbb{gl}(V)$ 的一个子 Lie 代数。</p>
<h2 id="导子和伴随表示"><a href="#导子和伴随表示" class="headerlink" title="导子和伴随表示"></a>导子和伴随表示</h2><p>我们称一个 $F-$代数 $A$（可以非结合）也可以借助导子(derivation)诱导一个 Lie 代数，称一个导子是指一个线性映射 $\delta: A \to A$ 满足 $\delta(ab)=\delta(a)b+a\delta(b)$。易知导子 $Der A$ 全体构成了 $End A$ 的一个子空间，由于 $[\delta,\delta’] \in Der A$，因此 $Der A$ 构成了 $\mathbb{gl}(V)$的一个子 Lie 代数。<br>由于 Lie 代数 $L$ 也是 $F$-代数,因此我们也可以定义 $Der L$。这里的导子本质上就是 Jacobi 恒等式的变形。<br>定义 $ad_x: L \to L,y \mapsto [x,y]$，实际上 $ad_x \in Der L$。$L \to Der L,x \mapsto ad_x$ 称为 $L$ 的伴随表示(adiont representation)。</p>
<h2 id="可解和幂零"><a href="#可解和幂零" class="headerlink" title="可解和幂零"></a>可解和幂零</h2><p>对于给定 Lie 代数 $L$，我们有理想降链<br>$L^{(0)} = L,L^{(1)}=[L^{(0)},L^{(0)}],\cdots,L^{(i)}=[L^{(i-1)},L^{(i-1)}],\cdots$。若存在 $n$ 使得 $L^{(n)} = 0$ 则称 $L$ 可解(slovable)。</p>
<ol>
<li>若$L$ 可解，$L$ 的子代数和同态像可解</li>
<li>$I$ 是 $L$ 的可解理想，若 $L/I$ 可解，则 $L$ 可解。</li>
<li>$I,J$ 是 $J$ 的可解理想，则 $I+J$ 也是。</li>
</ol>
<p>由上述性质可知，$L$ 有唯一的极大可解理想。即为 $Rad L$,若 $Rad L =0$ 则称之为<strong>半单</strong>的，等价于 $L$ 无非零 Abelian 理想(充分性显然，必要性是因为 $Rad L$ 可解，考虑最后一个非 0 项必然是 Abelian 理想矛盾)。另外 我们称 $x \in End V$ 半单，若 $x$ 的极小多项式无重根。</p>
<p>对于给定 Lie 代数 $L$，我们有理想降链<br>$L^0 = L,L^1=[L, L^0],\cdots,L^i=[L, L^{i-1}],\cdots$。若存在 $n$ 使得 $L^{n} = 0$ 则称 $L$ 幂零(nilpotent)。</p>
<ol>
<li>若$L$ 幂零，$L$ 的子代数和同态像幂零。</li>
<li>若 $L/Z(L)$ 幂零。则 $L$ 幂零。</li>
<li>若 $L$ 幂零且非 0，则 $Z(L) \neq 0$。</li>
</ol>
<p>显然由于 $L^{(i)} \subset L^i$ 因此幂零一定可解，但是反之则不尽然，例如 $\mathbb{gl}(V)$ 中对应的上三角矩阵全体构成的 Lie 代数。由 Lie 定理的推论知：</p>
<blockquote>
<p>$L$ 可解的充要条件是 $[L,L]$ 幂零。 </p>
</blockquote>
<h3 id="ad-nilpotent"><a href="#ad-nilpotent" class="headerlink" title="ad-nilpotent"></a>ad-nilpotent</h3><p>$L$ 是一个 Lie 代数，$x \in L$, 称 $x$ ad-nilpotent 是指 $ad_x$ 幂零。<br>易知若 $x$ 幂零，则 $ad_x$ 幂零，但是反之不尽然。然而我们有 <strong>Engel 定理</strong>：</p>
<h3 id="L-幂零当且仅当-ad-L-幂零"><a href="#L-幂零当且仅当-ad-L-幂零" class="headerlink" title="$L$ 幂零当且仅当 $ad L$ 幂零"></a>$L$ 幂零当且仅当 $ad L$ 幂零</h3><h2 id="一些重要结果"><a href="#一些重要结果" class="headerlink" title="一些重要结果"></a>一些重要结果</h2><p>这里罗列一些定理实际上就是搞清楚 Lie 代数中的一些问题和一些好的性质。</p>
<p><strong>THM1</strong>. 设 $L$ 是 $\mathbb{gl}(V)$ 的子代数($L$ 中的元素可理解为矩阵)，$V$ 是有限维的，若 $L$ 中元素都幂零，则存在 $v \in V$ 使得 $L(v) = 0$.<br>上面结果是讲，$L$ 中元素都幂零，则 $L$ 有公共的 $0$ 特征向量。证明是很有技巧性的。构造一个 codemension 为 1 的子代数，并证明它是 $L$ 不变子空间。然后数学归纳法完成证明。上面定理还说明我们可以取定一组基使 $L$ 同时严格上三角。</p>
<p><strong>THM2</strong>. 若 $L$ 幂零，$K$ 是 $L$ 的非零理想,则 $K \cap Z(L) \neq 0$</p>
<p><strong>THM3</strong>. 设 $L$ 是 $\mathbb{gl}(V)$ 可解子代数，$V$ 是有限维的，则存在 $L$ 存在公共特征向量。</p>
<p>上面定理还说明我们可以取定一组基使得 $L$ 同时上三角。</p>
<p><strong>THM4</strong>. 若 $x \in EndV$，则存在唯一的分解 $x = x_s+x_n$，其中 $x_s$ 是半单的， $x_n$ 是幂零的，且 $x_s,x_n$ 都能表示成 $x$ 的无常数项的多项式。将其称之为 Jordan-Chevally 分解。</p>
<p><strong>THM5</strong>. 若 $x$ 半单，则 $ad_x$ 半单。若 $x=x_s+x_n$ 是 Jordan-Chevally 分解，则 $ad_x = ad_{x_s} + ad_ {x_n}$  也是。$Der A$ 包含其元素的 半单部分和幂零部分。</p>
<p><strong>THM6</strong>. $A \subset B \subset End V $，令 $M = \lbrace x \in \mathbb{gl}(V) \mid [x,B] \subset A\rbrace$。若 $x \in M$ 满足，$Tr(xy)=0$ 对任意 $y\in M$ 成立，则 $x$ 幂零。</p>
<p><strong>THM7</strong> $L \subset \mathbb{gl}(V)$，$V$ 是有限维的, 则 对任意 $x \in [L,L],\;y \in L$ 有 $Tr(xy)=0$ 当且仅当 $L$ 可解。</p>
<p><strong>THM8</strong> 设 $L$ 是 Lie 代数，对任意 $x \in [L,L],\;y \in L$ 有 $Tr(ad_x ad_y)=0$ 则 $L$ 可解。</p>
<p><strong>THM9</strong> 若 $L$ 是半单的，则 $L$ 可唯一写成单子理想的直和且 $L=[L,L],Z(L)=0$ 且 $L$ 的理想和同态像都是半单的。</p>
<p><strong>THM10</strong> $ad L$ 是 $Der L$ 的理想，且若 $L$ 是半单的，则 $ad L = Der L$。</p>
<h2 id="To-be-continue"><a href="#To-be-continue" class="headerlink" title="To be continue"></a>To be continue</h2>]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵的 Jordan 分解</title>
    <url>/jordanDecompositionOfMatrix/</url>
    <content><![CDATA[<p>最近在整理李代数（Lie Algebra） 内容时，里面提到了 Jordan 分解，这里就详细介绍并证明几个相关结果。</p>
<ol>
<li>若矩阵 $A,B$ 可交换，则它们有公共特征向量。</li>
<li>若矩阵 $A,B$ 可以对角化，则它们可以同时对角化，当且仅当 $A,B$ 交换</li>
<li>每一个矩阵 $A$ 都可以唯一分解成 $A=B+C$, 其中 $B$ 可对角化（半单部分），$C$ 幂零。且 $B,C$ 都可以写成 $A$ 的无常数项的多项式。</li>
</ol>
<a id="more"></a>
<p>下面证明这三个结果并给出说明其意义。</p>
<h2 id="若矩阵-A-B-可交换，则它们有公共特征向量"><a href="#若矩阵-A-B-可交换，则它们有公共特征向量" class="headerlink" title="若矩阵 $A,B$ 可交换，则它们有公共特征向量"></a>若矩阵 $A,B$ 可交换，则它们有公共特征向量</h2><p><strong>证明</strong>：我们设 $V$ 为 $n$ 阶列向量全体。设 $\lambda$ 为 $B$ 的一个特征值。设 </p>
<script type="math/tex; mode=display">
W = \lbrace x \in V \mid Bx = \lambda x \rbrace</script><p>则对任意 $x \in W$,</p>
<script type="math/tex; mode=display">
B(Ax) = A(Bx)=A(\lambda x)=\lambda(Ax)</script><p>即 $Ax \in W$。即 $W$ 是 $A$ 的不变子空间，因此，$A$ 在 $W$ 中有特征值 $\mu$ 对应的特征向量 $v$ 即为所求。</p>
<h2 id="若矩阵-A-B-可以对角化，则它们可以同时对角化，当且仅当-A-B-交换"><a href="#若矩阵-A-B-可以对角化，则它们可以同时对角化，当且仅当-A-B-交换" class="headerlink" title="若矩阵 $A,B$ 可以对角化，则它们可以同时对角化，当且仅当 $A,B$ 交换"></a>若矩阵 $A,B$ 可以对角化，则它们可以同时对角化，当且仅当 $A,B$ 交换</h2><p><strong>证明</strong>：$\rightarrow$ 是显然的。现证 $\leftarrow$ 若 $A,B$ 交换。<br>由条件知，存在可逆矩阵 $P$ 使得 $P^{-1}AP = diag(a_1 E_{n_1},\cdots,a_s E_{n_s})$。由 $A,B$ 交换知，$P^{-1}AP P^{-1}BP = P^{-1}BP P^{-1}AP$。因此</p>
<script type="math/tex; mode=display">
P^{-1}BP = \left(\begin{matrix} 
B_1 \\  & B_2 \\ & & \ddots \\ & & & B_s 
\end{matrix}\right)</script><p>因为 $B$ 可对角化，因此 $B$ 的最小多项式无重根。所以 $B_i$ 的最小多项式也无重根。因此 $B_i$ 可对角化，存在可逆矩阵 $Q_i$ 使得 $Q_i^{-1}B_iQ_i$ 为对角阵。令 $Q = diag(Q_1,\cdots,Q_s)$，$T=PQ$，则 $T^{-1}BT$ 为对角阵。</p>
<script type="math/tex; mode=display">
T^{-1}AT = diag(Q_1^{-1},\cdots,Q_s^{-1})diag(a_1 E_{n_1},\cdots,a_s E_{n_s}) diag(Q_1,\cdots,Q_s) = diag(a_1 E_{n_1},\cdots,a_s E_{n_s})</script><h2 id="Jodan-分解"><a href="#Jodan-分解" class="headerlink" title="Jodan 分解"></a>Jodan 分解</h2><p>每一个矩阵 $A$ 都可以唯一分解成 $A=B+C$, 其中 $B$ 可对角化，$C$ 幂零。且 $B,C$ 都可以写成 $A$ 的无常数项的多项式。</p>
<p>证明：首先对任意矩阵，我们有 Jordan 标准型：对任意矩阵 $A$，存在可逆矩阵 $P$ 使得</p>
<script type="math/tex; mode=display">
P^{-1} A P = \left(\begin{matrix} J_1(\lambda_1) \\  & J_2(\lambda_2) \\ & & \ddots \\ & & & J_s(\lambda_s) \end{matrix}\right) = \left(\begin{matrix} \lambda_1 E_{n_1} \\  & \lambda_2 E_{n_2} \\ & & \ddots \\ & & & \lambda_s E_{n_s} \end{matrix}\right) + \left(\begin{matrix} J_1(0) \\  & J_2(0) \\ & & \ddots \\ & & & J_s(0) \end{matrix} \right)</script><p>由于 $J_i(\lambda_i)$ 的化零多项式为 $f_i(\lambda) = |\lambda I_i -  J_i(\lambda_i)|$。由中国剩余定理知。存在多项式 $f(\lambda)$ 满足 $f(\lambda) = \lambda_i (mod \; f_i),i=1,\cdots,s$ 且 $f(\lambda)= 0 (mod \lambda)$。此时</p>
<script type="math/tex; mode=display">
P^{-1} f(A) P = \left(\begin{matrix} \lambda_1 E_{n_1} \\  & \lambda_2 E_{n_2} \\ & & \ddots \\ & & & \lambda_s E_{n_s} \end{matrix}\right)</script><p>令 $B=f(A)，C=A-B$ 即为所求。上面的 $B,C$ 是唯一的，因为，若存在 $B_1,C_1$ 也满足上述条件，则 $A,B,C,B_1,C_1$彼此交换，$B-B_1 = C_1 - C$ 是幂零的，因此 $B=B_1,C=C_1$。</p>
<p>对于 Jordan 分解，我们可以将一个矩阵分为所谓的半单部分和幂零部分，而由第二条结论知道，如果 $A_1,A_2$ 可交换，那么 $A_1+A_2$ 的半单部分即为 $B_1+B_2$。或者说的更明了一点就是，如果 $A,B$ 可交换，且可以对角化，则 $A+B$ 也可以对角化。</p>
<blockquote>
<p>想到写这些完全是因为李代数忘掉 Lie 括号本身就是一个线性空间。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>有限整环是域</title>
    <url>/finiteDomainIsField/</url>
    <content><![CDATA[<p>有限整环是域，这是一个相当深刻的定理，被称为 Wedderburn’s little theorem。介绍如下。<br><a id="more"></a></p>
<h2 id="有限整环是体"><a href="#有限整环是体" class="headerlink" title="有限整环是体"></a>有限整环是体</h2><p>设 $D$ 是有限整环（不要求交换），下证 $D$ 是体。<br>证明：对任意 $0 \neq a \in D$，考虑 $a,a^2,a^3,..,a^n,…$ 由于 $D$ 是有限环，因此存在 $n,r &gt; 0$ 使得 $a^{n+r} = a^n$ 即 $a^n(a^r-1)=0$ 由于 $D$ 是整环，$a \neq 0$，因此 $a^r =1$ ，所以 $a$ 可逆，证毕。</p>
<h2 id="有限体是域"><a href="#有限体是域" class="headerlink" title="有限体是域"></a>有限体是域</h2><p>设 $K$ 是有限体。$Z$ 是它的中心，即</p>
<script type="math/tex; mode=display">
Z = \lbrace z \in K \mid \forall x \in K, xz = zx \rbrace</script><p>则，$Z$ 是域。令 $|Z|=q$，则 $K$ 是 $q$ 元域上的有限维向量空间，设维数为 $n$，则 $|K|=q^n$。我们需要证明 $K=Z$, 即证明 $n=1$。<br>对任意 $a \in K$，令 $N(a) = \lbrace x \in K \mid ax = xa \rbrace$ ，这显然是 $K$ 的一个子体。并且包含 $Z$。因此 $N(a)$ 也是 $Z$ 上的有限维向量空间。从而 $N(a)=q^{n(a)},n(a) \geq 1$。由于 $K^{\star}$ 为 $q^n-1$ 阶乘法群，$N(a)^{\star}$ 为 $K^{\star}$ 的 $q^{n(a)}-1$ 阶子群，因此 $q^{n(a)}-1 \mid q^n-1$，因此 $n(a) \mid n$。<br>将乘法群 $K^{\star}$ 中的元素分成共轭类，从群论的角度，与 $a \in K^{\star}$ 共轭的元素有 $[K^{\star} :N(a)^{\star}] = \frac{q^n-1}{q^{n(a)}-1}$，从而每个共轭类取一次，共轭类集合记作$X$，我们有</p>
<script type="math/tex; mode=display">
q^n - 1 = q-1 + \sum_{\overline{a} \in X} \frac{q^n-1}{q^{n(a)}-1}</script><p>我们需要证明的是当 $n&gt;1$ 时上式不成立。为此我们先介绍<strong>分圆多项式</strong>的知识。</p>
<script type="math/tex; mode=display">
P_n(x) = \prod_{1 \leq r \leq n,(r,n)=1} (x-e^{\frac{2 \pi i r}{n}})</script><p>即 $P_n(x)$ 是以全部 $n$ 次本原单位复根（共 $\phi(n)$ 个）为根的首一多项式。易知</p>
<script type="math/tex; mode=display">
x^n -1 = \prod_{d \mid n} P_d(n)</script><p>由数论函数的 <a href="/dirichletProduct/" title="Mobius 变换">Mobius 变换</a>，(取对数或指数来切换乘积和相加)可知</p>
<script type="math/tex; mode=display">
P_n(x) = \prod_{d \mid n} (x^d-1)^{\mu(n/d)}</script><p>于是 $P_n(x)=f(x)/g(x)$ 其中 $f(x),g(x)$ 都为 $\mathbb{Z}[x]$ 中的首一多项式。另一方面，按照定义，$P_n(x) \in \mathbb{C}[x]$ ，从而在 $\mathbb{C}[x]$ 中 $g(x) \mid f(x)$。比较系数易知，$P_n(x)$ 为 $\mathbb{Z}[x]$ 中首一多项式。</p>
<p>因为对任意 $d \mid n,0&lt;d&lt;n,P_n(x)$ 的每个根都是 $x^n-1$ 的根，但不是 $x^d-1$ 的根，从而 </p>
<script type="math/tex; mode=display">
P_n(x) \mid \frac{x^n-1}{x^d-1}</script><p>因此 $P_n(q) \mid q-1$, 但当 $n&gt;1$ 时，</p>
<script type="math/tex; mode=display">
|P_n(q))| > (q-1)^{\phi(n)} \geq q-1</script><p>矛盾，证毕。</p>
<blockquote>
<p>这个定理也可以表述为：一个有限环，如果它不是域，那么它必然存在零因子。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>华罗庚恒等式</title>
    <url>/huaIndentity/</url>
    <content><![CDATA[<p>华罗庚恒等式有两个，都看似奇怪但都有其深刻的应用(数学内部的)</p>
<ol>
<li><p>若在一个环中 $a,b,1-ab$ 都可逆，则</p>
<script type="math/tex; mode=display">
\left( (a-b^{-1})^{-1} - a^{-1} \right)^{-1} = aba - a</script></li>
<li><p>若在一个环中</p>
<script type="math/tex; mode=display">
a = \left( b^{-1} - (a-1)^{-1}b^{-1}(a-1) \right) \left (a^{-1} b^{-1}a-(a-1)^{-1}b^{-1}(a-1) \right)^{-1}</script></li>
</ol>
<p>上面两个恒等式直接验算即知，可是华老当初怎么想到这两个很奇怪的恒等式呢，怎么导入的，有什么应用呢？</p>
<a id="more"></a>
<p>当然以下也只是我的个人猜测加上 Wikipedia 的一些参考。</p>
<h2 id="在环中-1-ba-可逆当且仅当-1-ab-可逆"><a href="#在环中-1-ba-可逆当且仅当-1-ab-可逆" class="headerlink" title="在环中,  1-ba 可逆当且仅当 1-ab 可逆"></a>在环中,  1-ba 可逆当且仅当 1-ab 可逆</h2><script type="math/tex; mode=display">
(1-ba)^{-1} = 1+ b(1-ab)^{-1}a</script><p>上面恒等式直接证明是显然的，应用却 666，6 到要吐。<br>问题在于为什么想到这样奇怪的式子呢？思路怎么来的呢？<br>我们知道，当 $0&lt;x&lt;1$ 时，</p>
<script type="math/tex; mode=display">
\frac{1}{1-x} = \sum_{n=0}^{\infty} {x^n}</script><p>因此，形式上我们有</p>
<p>讲上述不等式应用到矩阵形式即可得到 Sherman–Morrison 恒等式</p>
<h2 id="在环中，若-a-b-ab-1-可逆，则"><a href="#在环中，若-a-b-ab-1-可逆，则" class="headerlink" title="在环中，若 $a,b,ab-1$ 可逆，则"></a>在环中，若 $a,b,ab-1$ 可逆，则</h2><p>由上面恒等式我们知道 </p>
<script type="math/tex; mode=display">
(ab-1)^{-1} = a(ba-1)^{-1}b - 1</script><p>因此</p>
<script type="math/tex; mode=display">
\begin{aligned} (a-b^{-1})^{-1} &= \left((ab-1)b^{-1} \right)^{-1} \\
&= b\left( a(ba-1)^{-1}b - 1 \right) \\
&= ba(ba-1)^{-1}b - b  \\
&= (ba-1)^{-1}b
\end{aligned}</script><p>注意到 </p>
<script type="math/tex; mode=display">
\begin{aligned}  (ba-1)^{-1}b - a^{-1} &= (ba-1)^{-1}baa^{-1} - a^{-1} \\
&= (ba-1)^{-1}a^{-1} \\
&= (aba-a)^{-1} 
\end{aligned}</script><p>因此，华罗庚等式 1： $ \left( (a-b^{-1})^{-1} - a^{-1} \right)^{-1} = aba - a$ 得证。</p>
<h2 id="一个重要恒等式"><a href="#一个重要恒等式" class="headerlink" title="一个重要恒等式"></a>一个重要恒等式</h2><script type="math/tex; mode=display">
b^{-1} - a^{-1} = ( b+b(a-b)^{-1}b )^{-1}</script><p>上面恒等式与逆算子连续性有关系。<br>证明：</p>
<script type="math/tex; mode=display">
\begin{aligned}  (b^{-1} - a^{-1})^{-1} &= (1-ba^{-1})^{-1}b \\
&=(1+b(1-a^{-1}b)^{-1}a^{-1})b \\
&= b+b(a-b)^{-1}b
\end{aligned}</script><h2 id="华罗庚恒等式-2-证明"><a href="#华罗庚恒等式-2-证明" class="headerlink" title="华罗庚恒等式 2 证明"></a>华罗庚恒等式 2 证明</h2><script type="math/tex; mode=display">
\begin{aligned} 
a \left( a^{-1}b^{-1}a - (a-1)^{-1} b^{-1}(a-1) \right) &=
(b^{-1}a- a(a-1)^{-1} b^{-1} (a-1) \\
&= ( 1-a(a-1)^{-1} )b^{-1}a + (a-1+1) (a-1)b^{-1} )^{-1} \\
&= -(a-1)^{-1}b^{-1}a + b^{-1} + (a-1)b^{-1} \\
&= b^{-1} - (a-1)^{-1} b^{-1}(a-1) 
\end{aligned}</script><h2 id="华罗庚恒等式的意义"><a href="#华罗庚恒等式的意义" class="headerlink" title="华罗庚恒等式的意义"></a>华罗庚恒等式的意义</h2><ol>
<li>华罗庚第一个恒等式可以用来证明一个 Hua’s Theorem：除环间中保持加法和幺元以及逆元的映射必然是除环间的同态或者反同态。</li>
<li>华罗庚第二个恒等式可以证明 Cartan-Brauer-Hua Theorem 即一个除环的真子除环的单位群如果是原除环的单位群的正规子群，则该子除环一定包含于除环的中心。</li>
</ol>
<h2 id="最后用一句广为流传的话结尾"><a href="#最后用一句广为流传的话结尾" class="headerlink" title="最后用一句广为流传的话结尾"></a>最后用一句广为流传的话结尾</h2><blockquote>
<p>龙生龙，凤生凤，华罗庚的学生会打洞（矩阵打洞）</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Fermat 平方和定理</title>
    <url>/fermatSqureSumTheorem/</url>
    <content><![CDATA[<p>Fermat 平方和定理的表述为：奇质数能表示为两个平方数之和的充分必要条件是该质数被 4 除余 1（必要性显然）。这个结论首次由 Euler 在 1747 年给出证明。详细叙述如下：</p>
<a id="more"></a>
<p>为方便起见,记</p>
<script type="math/tex; mode=display">
A = \lbrace a^2 + b^2 \mid a,b \in \mathbb{Z} \rbrace</script><p>证明分五步完成</p>
<ol>
<li><p>$(a^2+b^2)(c^2+d^2)=(ac \pm bd)^2 +(ad \mp bc)^2 $</p>
<p> proof: 计算即知。</p>
</li>
<li><p>若 $a^2+b^2 \mid c^2+d^2$, $a^2+b^2$ 为素数，则</p>
<script type="math/tex; mode=display">
 \frac{c^2+d^2}{a^2+b^2} \in A</script><p> <strong>proof</strong>: 由于 $(ac-bd)(ac+bd) = (a^2+b^2)c^2-(c^2+d^2)b^2$ 因此 $(a^2+b^2) \mid (ac-bd)(ac+bd)$ 而 $(a^2+b^2)$ 是素数，因此必然整除其中一个。假设 $(a^2+b^2)|(ac-bd)$，则由 1 知 $(a^2+b^2)｜(ad+bc)$ 因此</p>
<script type="math/tex; mode=display">
 \frac{c^2+d^2}{a^2+b^2}=(\frac{ac - bd}{a^2+b^2})^2 +(\frac{ad + bc}{a^2+b^2})^2</script><p> ​类似的，假设 $(a^2+b^2) \mid (ac＋bd)$ 则有</p>
<script type="math/tex; mode=display">
 \frac{c^2+d^2}{a^2+b^2}=(\frac{ac + bd}{a^2+b^2})^2 +(\frac{ad - bc}{a^2+b^2})^2</script></li>
<li><p>$x \mid a^2+b^2,x \notin A$，则 $\exists y| \frac{a^2+b^2}{x}$ 使得 $y \notin A$</p>
<p> 反证：设 $a^2+b^2 = x p_1 p_2 \cdots p_n$ 则 $\forall y| \frac{a^2+b^2}{x},y \in A$ 则由 2，经过 $n$ 次除法，最终 $x \in A$ 矛盾。</p>
</li>
<li><p>若 $(a,b)=1$ 则 $\forall x | a^2+b^2 \Rightarrow x \in A$</p>
<p> 假设 $\exists x| a^2+b^2,x \notin A$ 则，我们设 $a = mx + c,b = mx + d$,其中 $|c|,|d| \leq \frac{x}{2}$。则<br> $a^2+b^2=(mx+c)^2+(mx+d)^2=tx+(c^2+d^2)$，因此 $x \mid c^2+d^2$。又 $(a,b)=1$ ，因此 $((c,d),x)=1$。因此不妨设 $(c,d)=1$（否则，两边同除它的平方）则 $\exists z, zx = c^2+d^2 \leq \frac{x^2}{2}$。即 $z\leq \frac{x}{2}$。由引理 3 知道 $z$ 有一个因子 $w \notin A$。即我们由 $x \mid a^2+b^2,x \notin A$ 得到了 $w \mid c^2+d^2, w \notin A ,w \leq  \frac{x}{2}$ 这样一直下去必然会在有限步结束，矛盾，即必然有 $x \in A$ 。</p>
</li>
<li><p>若素数 $p=4n+1$，则 $p\in A$。</p>
<p> 由 Fermat 小定理知 $1,2^{4n},\cdots,(4n)^{4n}$ 除以 $p$ 模 1.因此 $2^{4n}－1,3^{4n}－2^{4n},\cdots,(4n)^{4n}-(4n-1)^{4n}$ 都是 $p$ 的倍数。这些差都有分解</p>
<script type="math/tex; mode=display">
 a^{4n} - b^{4n} = (a^{2n}+b^{2n})(a^{2n}-b^{2n})</script><p> 由于上述 $a,b$ 相差为 1，必然互素，因此若 $p|a^{2n}+b^{2n}$ 则由 4 命题得证。否则 $2^{2n}-1,3^{2n}-2^{2n},\cdots,(2n)^{2n}-(2n-1)^{2n}$ 都是 $p$ 的倍数。<br> 因此 1.对上面式子做 $2n$ 阶差得到 $(2n)!$ 是 $p$ 的倍数，显然是不可能的。<br> 或者 2.由于上面序列的前 $d$ 项和 $d^{2n}-1$ 是 $p$ 的倍数，因此素数 $p$ 无原根，矛盾与原根存在定理。</p>
<blockquote>
<p>$1^k,2^k, \cdots, k^k, (k+1)^k$ 的 $k$ 阶差为 $k!$</p>
</blockquote>
</li>
</ol>
<h2 id="用现代语言，Fermat-平方和定理也可以表达为"><a href="#用现代语言，Fermat-平方和定理也可以表达为" class="headerlink" title="用现代语言，Fermat 平方和定理也可以表达为"></a>用现代语言，Fermat 平方和定理也可以表达为</h2><blockquote>
<p>奇素数 $p$ 在 $\mathbb{Z}[i]$ 中不可约元当且仅当 $p  \equiv 3 \mod 4$</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>自然底数 e 的由来</title>
    <url>/naturalBase/</url>
    <content><![CDATA[<p>自然底数 $e$ 之所以重要，我想很大程度上是因为，指数函数 $f(x)=e^x$ 是“唯一”(在常数倍意义下)满足导数等于本身的函数。因此 $e$ 被叫做自然底数。</p>
<a id="more"></a>
<p>然而，$e$ 的定义可以由一个常见的重要数列极限来定义。即</p>
<script type="math/tex; mode=display">
e \doteq \lim _{n \to \infty}(1+\frac{1}{n})^n</script><p>那么为什么右边极限存在呢，我们来仔细分析。<br>令 </p>
<script type="math/tex; mode=display">
a_n = (1+\frac{1}{n})^n ,\; b_n =(1+\frac{1}{n})^{n+1}</script><p>则，由<a href="/meanInequation/" title="均值不等式">均值不等式</a>易知：</p>
<script type="math/tex; mode=display">
a_n = (1+\frac{1}{n})^n \cdot 1 \leq [\frac{n(1+\frac{1}{n})+1}{n+1}]^{n+1} =a_{n+1}</script><p>且</p>
<script type="math/tex; mode=display">
\frac{1}{b_n} = (\frac{n}{n+1})^n \cdot 1 \leq [\frac{(n+1)\frac{n}{n+1}+1}{n+2}]^{n+2} = \frac{1}{b_{n+1}}</script><p>因此 $2 = a_1 \leq a_n \leq b_n \leq b_1 = 4$。由于单调有界序列必有极限，不妨把这个极限记作 $e$ 且由上面推理知 $2 &lt; e &lt; 4$。</p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><script type="math/tex; mode=display">
f_n = (1+\frac{1}{n})^{n+c},\quad g_n = (1+\frac{1}{n})^{n+d}</script><p>那么满足$f_n \leq e &lt; g_n$ 的最大的$c=\frac{1}{ln⁡2}−1$，最小的$d = \frac{1}{2}$，详细证明</p>
<p><img src= "/img/loading.gif" data-lazy-src="0.png" alt="0"></p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>均值不等式的证明</title>
    <url>/meanInequation/</url>
    <content><![CDATA[<p>初中就学过最简单的均值不等式 $\frac{a+b}{2} \geq \sqrt{ab},a ,b \geq 0$。它的证明只需配方就知道了，这里介绍一下一般的均值不等式:</p>
<script type="math/tex; mode=display">
\frac{ \sum_{i=1} ^n a_i}{n} \geq \sqrt[n]{\Pi_{i=1}^n a_i }</script><a id="more"></a>
<p><strong>Proof</strong>：当 $n=1$ 时结论是平凡的，$n=2$ 时配方即知。$n=2^k$时不难用数学归纳法知，结论成立，下面主要看 $2^{k-1} &lt;n&lt; 2^k$的情况：<br>令 $A = \frac{ \sum_{i=1} ^n a_i}{n} $ 则，应用 $2^k$ 时的结论</p>
<script type="math/tex; mode=display">
\frac{ \sum_{i=1} ^n a_i + (2^k-n)A }{2^k} \geq\sqrt[2^k]{\Pi_{i=1}^n a_i A^{2^k -n}}</script><p>化简可得到结论。</p>
<blockquote>
<p>上述证明简单优美，第一次在陈纪修《数学分析》上册看到这个优美的方法。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>最强装逼题目 0.0</title>
    <url>/zhuangbility/</url>
    <content><![CDATA[<p>数学老师想好了两个自然数 $m,n$ 满足 $2 \leq m \leq n \leq 100$ ,他把 $m,n$ 的和 $s$ 告诉了 $S$ 同学，把 $m,n$ 的积 $p$ 告诉了 $P$ 同学，他们都是聪明诚实的学生。进行了下面对话<br>$S$: 我不知道 $m,n$ 的值，但我知道你也不知道。<br>$P$: 现在我知道了。<br>$S$: 现在我也知道了。<br>请问 $m,n$ 的值。</p>
<a id="more"></a>
<ol>
<li><p>由第一句话，我们知道 $s \geq 6$,且 $p$ 中无大于或者等于 53 的质因数。但是 $S$ 是如何知道的呢，可见 $s \leq 54$。对 数 $6 \to 54$ 逐一检查发现，除了$A = \lbrace 11,17,23,27,29,35,37,41,47,51,53 \rbrace$的其他元素外，其余每个数都可以表示成两个素数的和，因此从第一句话知道，$ s \in A$。</p>
</li>
<li><p>刚刚推理 $P$ 同学当然也能完成。由于 $A$ 中的元素全是奇数，因此，若 $p = 2^k \cdot (2v+1), k \geq 0, v \geq 0$ 或者 $p = 2^k \cdot (2v+1)(2j+1), k \geq 0, v \geq 0, j \geq 0$ 则 $P$ 同学就能确定的知道答案。</p>
</li>
<li><p>$S$ 同学最后也知道了 $m,n$ 的值，说明在 $s$ 所有分解 $s = m+ n, 2 \leq m \leq n \leq 100$ 中，且有一种满足 $xy = 2^k v$。<br> 检查 $11 = 4+7 = 3+8$, $23 = 4 + 19 = 7+16$, $27 = 4+23 = 8+19$, $35=4+31=16+19$, $37 = 8+29 = 5+32$, $47= 4 + 43 = 16+31$, $51 = 4+47 = 8+43$。<br> 又因为 </p>
<script type="math/tex; mode=display">
29 = 4 + 25 = 13 +16,\; 41 = 4+37 = 16 + 25,\; 53 = 16 +37 = 21 + 32</script><p>其中 $4 \times 25 = 100 = 20 \times 5$, $20+5 =25 \notin A$, $16 \times 25 = 400 = 80 \times 5$, $80+5 =85 \notin A$, $21 \times 32 = 672 = 7 \times 96$ ,$ 7+96 =103 \notin A$。<br>因此，只可能 $s=17$</p>
<script type="math/tex; mode=display">
17 = 2+15 = 3+14 = 4+13 = 5+12 = 6+11 = 7 +10 = 8+9</script><p>其中只有 $17 =4 + 13$ 满足 $P$ 的断言，因此 $m = 4,n=13$。</p>
</li>
</ol>
<blockquote>
<p>此题是我高三（2011 年）在《奥赛金牌之路》中所见，实在很吊，一直铭记于心,特此记录。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>整数集上的一种特殊拓扑</title>
    <url>/specialTopologyOnNaturalNumber/</url>
    <content><![CDATA[<p>在《Proofs from THE BOOK》里素数无限的六种证明的第五种讲到了一种用点集拓扑学知识证明的方法，其中引入了整数集上的一种奇特拓扑。</p>
<a id="more"></a>
<h2 id="特殊拓扑的定义"><a href="#特殊拓扑的定义" class="headerlink" title="特殊拓扑的定义"></a>特殊拓扑的定义</h2><p>对 $a,b \in \mathbb{Z},b&gt;0$，令</p>
<script type="math/tex; mode=display">
N_{a,b} = \lbrace a + nb \colon n \in \mathbb{Z} \rbrace</script><p>我们称集合 $O \subset \mathbb{Z}$ 是开集，若 $O = \emptyset$，或者 $\forall a \in O,\exists b&gt;0,st. N_{a,b} \subset O$,容易验证这样定义的开集族全体构成了 $\mathbb{Z}$ 上的拓扑。</p>
<h3 id="上述拓扑的性质"><a href="#上述拓扑的性质" class="headerlink" title="上述拓扑的性质"></a>上述拓扑的性质</h3><p>每个 $N_{a,b}$ 都是既开又闭的。这是由于</p>
<script type="math/tex; mode=display">
N_{a,b} = \mathbb{Z} \setminus \cup_{i=1}^{b-1} N_{a+i,b}</script><p>又由</p>
<script type="math/tex; mode=display">
\mathbb{Z} \setminus \lbrace -1,1 \rbrace = \cup_{p \in P} N_{0,p}</script><p>其中 $P$ 是素数集。</p>
<h3 id="上述拓扑的应用"><a href="#上述拓扑的应用" class="headerlink" title="上述拓扑的应用"></a>上述拓扑的应用</h3><p>若素数只有有限个，即 $P$ 是有限集，则 $\lbrace -1,1 \rbrace$ 是开集，矛盾。</p>
<p>上述方法脑洞大，形式简洁，不愧是 <a href="0.pdf">《Proofs from THE BOOK》</a></p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>相对公平的席位分配</title>
    <url>/fairAssignment/</url>
    <content><![CDATA[<p>“公平”的席位分配首先本来就是不可能的，公平一般是无法达到的，我们只是尽量降低不公平度，那么我们怎么衡量不公平度呢。就像评价一个人，有不同的指标，不公平度也是一样，这里介绍一种相对合理易于接受，且好判断的方法。</p>
<a id="more"></a>
<h2 id="问题表述"><a href="#问题表述" class="headerlink" title="问题表述"></a>问题表述</h2><p>某学校三个系部学生共 200 名,(甲系 100,乙系 60,丙系 40)代表会议共 20 席,按比例分配三个系分别为 10、6、4 席。但是情况变为下列情况怎样分配才是最公平的,现因学生转系三系人数为 103、63、34 。</p>
<ol>
<li>问 20 席该如何分配 ? </li>
<li>若增加 21 席又如何分配 ?</li>
</ol>
<p>显然，因为无法整除无论如何分配都不公平。下面说一下几种策略。</p>
<p><strong>策略一</strong>： 按班级人数比例乘以总人数，小数点大的分得多余的一个位子。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">某校</th>
<th style="text-align:right">甲系</th>
<th style="text-align:right">乙系</th>
<th style="text-align:right">丙系</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">共 200 人</td>
<td style="text-align:right">103</td>
<td style="text-align:right">63</td>
<td style="text-align:right">34</td>
</tr>
<tr>
<td style="text-align:center">人数比例</td>
<td style="text-align:right">51.3</td>
<td style="text-align:right">31.5</td>
<td style="text-align:right">17</td>
</tr>
<tr>
<td style="text-align:center">20 席位</td>
<td style="text-align:right">10.3</td>
<td style="text-align:right">6.3</td>
<td style="text-align:right">3.4</td>
</tr>
<tr>
<td style="text-align:center">实际分配</td>
<td style="text-align:right">10</td>
<td style="text-align:right">6</td>
<td style="text-align:right">4</td>
</tr>
<tr>
<td style="text-align:center">21 席位</td>
<td style="text-align:right">10.82</td>
<td style="text-align:right">6.62</td>
<td style="text-align:right">3.57</td>
</tr>
<tr>
<td style="text-align:center">实际分配</td>
<td style="text-align:right">11</td>
<td style="text-align:right">7</td>
<td style="text-align:right">3</td>
</tr>
</tbody>
</table>
</div>
<p>按照上述策略，会出现席位增多而 <strong>丙系的席位却减少了一个的不合理现象</strong>，说明此方法并不合理。</p>
<h2 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h2><p>假设只有 A、B 两个单位分配席位的情况，设两方人数 $m_1,m_2$ ,分配到的席位为 $n_1,n_2$。</p>
<ol>
<li><p>$\frac{n_1}{m_1} = \frac{n_2}{m_2}$ 公平，但是一般是不满足的。</p>
</li>
<li><p>$\frac{n_1}{m_1} &gt; \frac{n_2}{m_2}$ 对 A 不公平。</p>
</li>
<li><p>$\frac{n_1}{m_1} &lt; \frac{n_2}{m_2}$ 对 B 不公平。</p>
</li>
</ol>
<p>绝对不公平度</p>
<script type="math/tex; mode=display">
d = \left| \frac{n_1}{m_1} - \frac{n_2}{m_2} \right|</script><p>  但这样做还是有不足，例如<br>  某两个单位的人数和席位为 $n_1=n_2=10,m_1=120,m_2=100$ 算得  $d=2$.<br>  另两个单位的人数和席位为 $n_1=n_2=10,m_1=1020,m_2=1000$ 算得 $d=2$。<br>  但是显然，第二种情况更公平，但是（绝对）不公平度却是一样的不合理</p>
<p>相对不公平度</p>
<ol>
<li>若 $\frac{n_1}{m_1} &lt; \frac{n_2}{m_2}$ 则<script type="math/tex; mode=display">
r_A(n_1,n_2) = \frac{ \frac{n_2}{m_2} - \frac{n_1}{m_1} }{ \frac{n_2}{m_2} } = 1 - \frac{n_1 m_2}{m_1 n_2}</script></li>
</ol>
<ol>
<li>若 $\frac{n_1}{m_1} &gt; \frac{n_2}{m_2}$ 则<script type="math/tex; mode=display">
r_B(n_1,n_2)  = \frac{ \frac{n_1}{m_1} - \frac{n_2}{m_2} }{ \frac{n_1}{m_1} } = 1 - \frac{n_2 m_1}{m_2n_1}</script>我们的目标是让$r_A,r_B$(每种分配只会有一个)最小。</li>
</ol>
<h3 id="策略二"><a href="#策略二" class="headerlink" title="策略二"></a><strong>策略二</strong></h3><p>假设当前 $\frac{n_1}{m_1} &lt; \frac{n_2}{m_2}$ 对 A 不公平。新增了一个席位。</p>
<ol>
<li>若 $\frac{n_1 + 1}{m_1} \leq  \frac{n_2}{m_2}$ 则 A 加 1 席 </li>
<li>否则此时<ul>
<li>若分配给 A，则对 B 的不公平值(相对):<script type="math/tex; mode=display">
r_B(n_1+1,n_2) = 1 - \frac{n_2 m_1}{m_2 (n_1 + 1)}</script></li>
<li>若分配给 B，则对 A 的不公平值(相对):<script type="math/tex; mode=display">
r_A(n_1,n_2+1) = 1 - \frac{n_1 m_2}{m_1(n_2 + 1)}</script></li>
</ul>
</li>
</ol>
<p>我们定义 $Q_i = \frac{m_i ^2}{n_i(n_i+1)}$，那么分配给 B 等价于 $r_A(n_1,n_2+1)&lt;r_B(n_1+1,n_2)$ 等价于$Q_1 &lt; Q_2$。即我们应该将席位分配给 $Q$ 值较大者。</p>
<blockquote>
<p>讲 $Q_i$ 定义成 $Q_i = \frac{n_i(n_i+1)}{m_i ^2}$ ，然后找最小的比较合理，不过这样会有小数点太长，所以没这么做</p>
</blockquote>
<h3 id="模型求解"><a href="#模型求解" class="headerlink" title="模型求解"></a>模型求解</h3><p>先按照平均原则取整之后。分出了 19 席：$n_1=10,n_2=6,n_3=3$，第 20 席：</p>
<script type="math/tex; mode=display">
Q_1 = \frac{103^2}{10 \times 11 } \approx 96.4 \; , \;Q_2 = \frac{63^2}{6 \times 7} \approx 94.5 \; , \;Q_3 = \frac{34^2}{3 \times 4} \approx 96.3</script><p>则分配：$n_1=11,n_2=6,n_3=3$<br>第 21 席：$Q_1=80.4, Q_2 = 94.5, Q_3 = 96.3$<br>则分配：$n_1=11,n_2=6,n_3=4$.</p>
<blockquote>
<p>相对不公平度有很多变种，从而 <strong>策略二有很多变种</strong>（最后计算发现都一样）</p>
<p>莫非策略二就是天选之子 0.0</p>
</blockquote>
<h2 id="本文参考文库-1和文库-2，修改了其中的错误"><a href="#本文参考文库-1和文库-2，修改了其中的错误" class="headerlink" title="本文参考文库 1和文库 2，修改了其中的错误"></a>本文参考<a href="http://wenku.baidu.com/view/396d4f6aaf1ffc4ffe47ac52.html?re=view" target="_blank" rel="noopener">文库 1</a>和<a href="http://wenku.baidu.com/view/312ef3274b35eefdc9d33304.html?re=view" target="_blank" rel="noopener">文库 2</a>，修改了其中的错误</h2><blockquote>
<p>其实作为分配者，如果你倾向 X，那你就选择让 X 收益最多的策略，反正 <strong>策略一</strong> 看上去也挺合理的，实在不行的话，再强行找花头…</p>
</blockquote>
<p>由于席位分配问题确实是一个经典问题，故在此记录。</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>运筹学</tag>
      </tags>
  </entry>
  <entry>
    <title>二次剩余和 Gauss 互反律</title>
    <url>/quadraticResidueAndGaussReciprocity/</url>
    <content><![CDATA[<p>从二次剩余问题，引入 Legendre 符号，由此一步步导出 Gauss 互反律，最后延伸到 Jacobi 符号，整个步骤确实连贯优美，脍炙人口。<br><a id="more"></a></p>
<p>寒假回家好好调整了一下状态，回学校后感觉还不错，效率也蛮高。发现理图虽然比较破，但是还是很不错的，哈哈哈。每次读潘承洞先生的《数论基础》都觉得受益匪浅，我把自己很喜欢的部分写入到该文中。</p>
<h2 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h2><p>考虑如下形式二次同余式</p>
<script type="math/tex; mode=display">
x^2 \equiv  a \; \mod \; p</script><p>其中 $p$ 是奇素数，$a$ 是非负整数。若上述方程有解，则称 $a$ 是 $p$ 的二次剩余，记作 $a\; R \; p$，否则称 $a$ 是 $p$ 的二次非剩余，记作 $a \; \overline{R}\; p$ 。$p=2$ 时就没啥意思了，所以 <strong>仅考虑奇素数。</strong></p>
<p>经过简单推理很容易发现，在模 $p$ 的简化系中，二次剩余与二次非剩余各占一半。且容易知道，$1^2,2^2,\cdots,(\frac{p-1}{2})^2$ 都是 $p$ 二次剩余。</p>
<h2 id="Legendre-符号"><a href="#Legendre-符号" class="headerlink" title="Legendre 符号"></a>Legendre 符号</h2><script type="math/tex; mode=display">
\left( \frac{a}{p} \right) = \left\{ \begin{array}{cc} 1, & a\; R\; p \\
0, & p \mid a \\
-1, & a\; \overline{R}\; p. \end{array} \right.</script><h3 id="定理-1-quad-frac-a-p-p-1-equiv-a-frac-p-1-2-mod-p"><a href="#定理-1-quad-frac-a-p-p-1-equiv-a-frac-p-1-2-mod-p" class="headerlink" title="定理 1: $ \quad -(\frac{a}{p}) (p-1)! \equiv a^{\frac{p-1}{2}} \mod p $"></a>定理 1: $ \quad -(\frac{a}{p}) (p-1)! \equiv a^{\frac{p-1}{2}} \mod p $</h3><p><strong>Proof</strong>: 对于 $p \mid a$ 的情形，结论显然。下面考虑 $(p,a)=1$ 的情形，令</p>
<script type="math/tex; mode=display">
 S = \lbrace 1,2,\cdots,p-1 \rbrace</script><p>对任意的 $ x \in S $ 必存在唯一的 $ y \in S $ 为下面同余式的解</p>
<script type="math/tex; mode=display">
yx \equiv a \; \mod p</script><p>当 $ (\frac{a}{p}) = -1 $ 时，同余式 $ x^2 = a \; \mod p$ 无解，所以 $y \neq x $ .因此集合 $S$ 中的元素可以分成 $\frac{p-1}{2} $ 对，我们就有</p>
<script type="math/tex; mode=display">
(p-1)! \equiv a^{\frac{p-1}{2}} \;\mod p</script><p>当 $ (\frac{a}{p}) = 1 $ 时，同余式 $ x^2 = a \; \mod p $有两个解 $x_0$ 和 $p - x_0$.在$S$中去掉这两个数外剩下$p-3$个数分出 $\frac{p-3}{2}$对，则有</p>
<script type="math/tex; mode=display">
(p-1)! \equiv a^{\frac{p-3}{2}}x_0(p-x_0) \equiv - a^{\frac{p-1}{2}} \; \mod p</script><p> 证毕。</p>
<h2 id="推论-2-Wilson-定理"><a href="#推论-2-Wilson-定理" class="headerlink" title="推论 2 (Wilson 定理)"></a>推论 2 (Wilson 定理)</h2><script type="math/tex; mode=display">
(p-1)! \equiv -1 \;\mod p</script><p><strong>Proof</strong>: <strong>定理 1</strong> 中取 $a=1$ 即可。</p>
<h2 id="推论-3-Euler-判别法"><a href="#推论-3-Euler-判别法" class="headerlink" title="推论 3(Euler 判别法)"></a>推论 3(Euler 判别法)</h2><script type="math/tex; mode=display">
\left( \frac{a}{p} \right ) \equiv a^{\frac{p-1}{2}} \; \mod \;p</script><p><strong>Proof</strong>: 由 <strong>定理 1</strong> 和 <strong>推论 2</strong> 显然。Euler 判别法不仅有理论价值(下面都是推论 3 的直接推论)，由于快速幂的存在，使得 Euler 判别法在计算时有相当好的效果。</p>
<h2 id="推论-4-Format-小定理-设-a-p-1-则"><a href="#推论-4-Format-小定理-设-a-p-1-则" class="headerlink" title="推论 4(Format 小定理) 设 $(a,p)=1$ ,则"></a>推论 4(Format 小定理) 设 $(a,p)=1$ ,则</h2><script type="math/tex; mode=display">
a^{p-1} \equiv 1 \;\mod p</script><h2 id="推论-5：-frac-1-p-1-frac-p-1-2"><a href="#推论-5：-frac-1-p-1-frac-p-1-2" class="headerlink" title="推论 5：$(\frac{-1}{p}) = (-1)^{\frac{p-1}{2}}$"></a>推论 5：$(\frac{-1}{p}) = (-1)^{\frac{p-1}{2}}$</h2><h2 id="推论-6：-frac-ab-p-frac-a-p-frac-b-p"><a href="#推论-6：-frac-ab-p-frac-a-p-frac-b-p" class="headerlink" title="推论 6：$(\frac{ab}{p}) =(\frac{a}{p})(\frac{b}{p}) $"></a>推论 6：$(\frac{ab}{p}) =(\frac{a}{p})(\frac{b}{p}) $</h2><h4 id="推论-6-说明，我们求-Legendre-符号，只需求-frac-2-p-frac-q-p-即可"><a href="#推论-6-说明，我们求-Legendre-符号，只需求-frac-2-p-frac-q-p-即可" class="headerlink" title="推论 6 说明，我们求 Legendre 符号，只需求 $ (\frac{2}{p}),(\frac{q}{p}) $ 即可"></a>推论 6 说明，我们求 Legendre 符号，只需求 $ (\frac{2}{p}),(\frac{q}{p}) $ 即可</h4><h2 id="定理-7：-frac-2-p-1-frac-p-2-1-8"><a href="#定理-7：-frac-2-p-1-frac-p-2-1-8" class="headerlink" title="定理 7：$(\frac{2}{p}) = (-1)^{\frac{p^2-1}{8}}$"></a>定理 7：$(\frac{2}{p}) = (-1)^{\frac{p^2-1}{8}}$</h2><p><strong>Proof</strong>: </p>
<script type="math/tex; mode=display">
2^{\frac{p-1}{2}}(\frac{p-1}{2})! = 2 \cdot 4 \cdots (p-1) \equiv (\frac{p-1}{2})!(-1)^{1+2+\cdots+\frac{p-1}{2}}\;\mod p</script><p>其中最后一个等价是因为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
p-1 \equiv (-1)^1 \mod p \\
2 \equiv (-1)^2 \mod p \\
p-3 \equiv (-1)^3 \mod p \\
\cdots
(\frac{2}{p}) \equiv 2^{\frac{p-1}{2}} \equiv (-1)^{\frac{p^2-1}{8}} \;\mod p
\end{array}</script><p>证毕。</p>
<h2 id="定理-8：-Gauss-二次互反律-设-p-q-为不同的奇素数，则有"><a href="#定理-8：-Gauss-二次互反律-设-p-q-为不同的奇素数，则有" class="headerlink" title="定理 8：(Gauss 二次互反律) 设 $p,q$ 为不同的奇素数，则有"></a>定理 8：(Gauss 二次互反律) 设 $p,q$ 为不同的奇素数，则有</h2><script type="math/tex; mode=display">
(\frac{p}{q}) (\frac{q}{p}) = (-1)^{\frac{(p-1)(q-1)}{4}}</script><blockquote>
<p>证明太长了，下次一定吧 0.0</p>
</blockquote>
<h2 id="Jacobi-符号"><a href="#Jacobi-符号" class="headerlink" title="Jacobi 符号"></a>Jacobi 符号</h2><blockquote>
<p>Jacobi 符号的引入只是为了让计算更加简洁！</p>
</blockquote>
<p> 我们在计算用 Gauss 二次互反律求 $(\frac{a}{q})$ 时，由于 $a$ 要因式分解成很多项，所以直接用不是很方便。因此我们引入 Jacobi 符号:</p>
<p>设 $Q =  q_1 \cdots q_s$ 是正奇数，其中 $q_1 \leq \cdots \leq q_s$  是奇素数（手算时候可以保证严格小于），我们定义：</p>
<script type="math/tex; mode=display">
(\frac{a}{Q}) = (\frac{a}{q_1}) \cdots (\frac{1}{q_s})</script><ul>
<li>$Q$ 为奇素数时，Jacobi 符号就是 Legendre 符号</li>
<li>$(\frac{a}{Q}) = 1$ 并不等价于 $x^2 \equiv a \mod Q$ 有解！</li>
<li>$(\frac{a}{Q})$ 是 $a$ 的可乘函数，周期为 $Q$ 的周期函数</li>
<li>当 $(a,Q)&gt;1$ 时，$(\frac{a}{Q})=0$</li>
<li>当 $(a,Q)= 1$ 时，$(\frac{a^2}{Q})=1$；特别地，$(\frac{1}{Q}) = 1$</li>
<li>$(\frac{-1}{Q}) = (-1)^{\frac{Q-1}{2}}$</li>
<li>$(\frac{2}{Q}) = (-1)^{\frac{Q^2-1}{8}}$</li>
<li>$(\frac{P}{Q}) = (-1)^{\frac{(P-1)(Q-1)}{4}} (\frac{Q}{P})$，其中 $P,Q$ 都是正奇数。</li>
<li>写程序计算时可以避免做质因数分解！！！</li>
</ul>
<blockquote>
<p>注意到 Jacobi 符号只是为了简化 Legendre 符号的计算的！</p>
</blockquote>
<h2 id="计算例子"><a href="#计算例子" class="headerlink" title="计算例子"></a>计算例子</h2><p>判断二次同余式 $x^2 \equiv 888 \mod 1999$ 是否有解。</p>
<script type="math/tex; mode=display">
\begin{aligned}
(\frac{888}{1999}) &= (\frac{4}{1999}) (\frac{2}{1999}) (\frac{111}{1999}) \\
&= (-1) ^{\frac{1999^2 -1}{8}}  (\frac{111}{1999}) \\
&= (-1)^{\frac{(1999-1)(111-1)}{4}} (\frac{1999}{111}) \\
&= -(\frac{1}{111}) = -1
\end{aligned}</script><blockquote>
<p>如果取模的数不是素数，那么就把它分解素因数，然后每个单独判断即可。</p>
</blockquote>
<h2 id="Jacobi-符号-Python-程序"><a href="#Jacobi-符号-Python-程序" class="headerlink" title="Jacobi 符号 Python 程序"></a>Jacobi 符号 Python 程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># a是整数，Q是正奇数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Jacobi</span><span class="params">(a,Q)</span>:</span></span><br><span class="line">	<span class="comment"># print(a,Q)  # 需要看过程就取消本行最前面的注释</span></span><br><span class="line">	a%=Q</span><br><span class="line">	<span class="keyword">if</span> math.gcd(a,Q) &gt; <span class="number">1</span>:  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">while</span> a%<span class="number">4</span>==<span class="number">0</span>: a//=<span class="number">4</span></span><br><span class="line">	f = <span class="keyword">lambda</span> n:<span class="number">1</span><span class="number">-2</span>*(n&amp;<span class="number">1</span>)</span><br><span class="line">	ans = <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> a%<span class="number">2</span>==<span class="number">0</span>: a//=<span class="number">2</span>;ans = f((Q**<span class="number">2</span><span class="number">-1</span>)//<span class="number">8</span>)</span><br><span class="line">	<span class="comment"># 此时a也是正奇数了</span></span><br><span class="line">	<span class="keyword">if</span> a == <span class="number">1</span>:  <span class="keyword">return</span> ans</span><br><span class="line">	<span class="keyword">return</span> ans*f((a<span class="number">-1</span>)*(Q<span class="number">-1</span>)//<span class="number">4</span>)*Jacobi(Q,a)</span><br><span class="line"></span><br><span class="line">print(Jacobi(<span class="number">888</span>,<span class="number">1999</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>自然数方幂和公式</title>
    <url>/formulaOfPowSumOfNaturalNumber/</url>
    <content><![CDATA[<p>关于自然数方幂和公式，网上的求解版本有很多种。这里介绍一种不为人知，十分简洁明了的求解方法，该公式并非原创，但是整个证明过程和方法完全原创。它的思想来源于我高中时在一本数学竞赛书中的数列例题(书名忘了…)，正因为一本本这样的书，让我大学选择了数学系，现在依然在学习数学。<br><a id="more"></a></p>
<h2 id="若-a-n-n-n-1-求其前-n-项和-S-n"><a href="#若-a-n-n-n-1-求其前-n-项和-S-n" class="headerlink" title="若 $a_n = n(n-1)$ 求其前 $n$ 项和 $S_n$"></a>若 $a_n = n(n-1)$ 求其前 $n$ 项和 $S_n$</h2><script type="math/tex; mode=display">
a_n = n(n-1) ＝ \frac{(n+1)n(n-1) -n(n-1)(n-2)}{3}</script><p>所以</p>
<script type="math/tex; mode=display">
S_n =\frac{(n+1)n(n-1)}{3}</script><blockquote>
<p>受到上面做法的启发，我们推广到一般形式：</p>
</blockquote>
<h2 id="若-a-n-A-n-p-，则其前-n-项和-S-n-＝-frac-A-n-1-p-1-p-1"><a href="#若-a-n-A-n-p-，则其前-n-项和-S-n-＝-frac-A-n-1-p-1-p-1" class="headerlink" title="若 $a_n = A_n ^p$，则其前 $n$ 项和 $S_n ＝ \frac{ A_{n+1} ^{p+1}}{p+1}$"></a>若 $a_n = A_n ^p$，则其前 $n$ 项和 $S_n ＝ \frac{ A_{n+1} ^{p+1}}{p+1}$</h2><script type="math/tex; mode=display">
a_n = A_n ^p ＝ \frac{A_{n+1} ^{p+1} -A_n ^{p+1}}{p+1}</script><p>所以</p>
<script type="math/tex; mode=display">
S_n = \frac{A_{n+1} ^{p+1}}{p+1}</script><p>由上面的结论，我们可以直奔主题了</p>
<h2 id="求-1-2-2-2-dots-n-2"><a href="#求-1-2-2-2-dots-n-2" class="headerlink" title="求 $1^2+2^2+ \dots + n^2$"></a>求 $1^2+2^2+ \dots + n^2$</h2><p>由</p>
<script type="math/tex; mode=display">
n^2 = n(n-1) + n</script><p>知</p>
<script type="math/tex; mode=display">
1^2+2^2+ \dots + n^2 = \frac{(n+1)n(n-1)}{3} + \frac{(n+1)n}{2} = \frac{n(n+1)(2n+1)}{6}</script><blockquote>
<p>同理我们可以推广上面做法</p>
</blockquote>
<h2 id="求-1-p-2-p-dots-n-p"><a href="#求-1-p-2-p-dots-n-p" class="headerlink" title="求$1^p+2^p+ \dots + n^p$"></a>求$1^p+2^p+ \dots + n^p$</h2><p>设</p>
<script type="math/tex; mode=display">
n^p = a_p A_n ^p + a_{p-1} A_n ^{p-1} + a_{p-2} A_n ^{p-2} + \cdots + a_1 A_n ^1</script><p>则</p>
<script type="math/tex; mode=display">
1^p+2^p+ \dots + n^p = \frac{a_p A_{n+1} ^{p+1}}{p+1} + \frac{a_{p-1} A_{n+1} ^{p}}{p} + \cdots + \frac{a_1 A_{n+1} ^2}{2}</script><p>因此问题的关键就转化成如何求解数组 $a_k ,k=1,2,\cdots,p$<br>我们发现当 $n＝k$ 时成立 </p>
<script type="math/tex; mode=display">
k^p = a_k A_k ^k + a_{k-1} A_k ^{k-1} + \cdots a_1 A_{k} ^1</script><p>令 $b_k = k! \cdot a_k$ 则</p>
<script type="math/tex; mode=display">
k^p = b_k + b_{k-1} C_k ^{k-1} + \cdots b_1 C_{k} ^1</script><p>即</p>
<script type="math/tex; mode=display">
k^p = \sum _{j=1} ^k b_j C _{k} ^j</script><p>应用二项式反演知（可参考：<a href="/inverseFormulaAndItsMatrixForm/" title="我的博文">我的博文</a>）</p>
<script type="math/tex; mode=display">
b_k = \sum _{j=1} ^k (-1)^{k-j} C _{k} ^j j^p</script><p>因此最终，我们有公式</p>
<script type="math/tex; mode=display">
1^p+2^p+ \dots + n^p = \sum _{k=1} ^p \; (\; \sum_{j=1} ^ {k} (-1)^{k-j} C_k^j j^p \;) \; C _{n+1} ^{k+1}</script><blockquote>
<p>妙呀，帅的呀，猛的呀，不谈了呀，哈哈哈</p>
</blockquote>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>二项式反演公式及其应用</title>
    <url>/inverseFormulaAndItsMatrixForm/</url>
    <content><![CDATA[<p>在 <a href="/dirichletProduct/" title="上一篇博文">上一篇博文</a> 中，介绍过数论中的 Mobius 反演公式，让我想起了另一个经典的反演公式：<strong>二项式反演公式</strong>。本质上反演公式就是矩阵求逆的过程。</p>
<p>只是它的逆有很简单的形式，因此才有了二项式反演公式，这个公式帮助我们队伍在 2014 年 ACM－ICPC 亚洲区域赛西安站拿银，当时 <a href="2014xian.pdf">F 题</a>答案直接算需要 $O(n^3)$ 复杂度，而利用二项式反演公式后，可以在 $O(n^2)$ 复杂度内完美解决。1A 过题，感觉超爽。</p>
<blockquote>
<p>最后简单提一下：Mobius 反演公式及其矩阵形式</p>
</blockquote>
<a id="more"></a>
<h2 id="反演公式与其矩阵形式"><a href="#反演公式与其矩阵形式" class="headerlink" title="反演公式与其矩阵形式"></a>反演公式与其矩阵形式</h2><p>由</p>
<script type="math/tex; mode=display">
\sum_{r = 1} ^n a_{n,r} f(r) = g(n)</script><p>其中 $g(n)$ 已知，解出 $f(n)$</p>
<script type="math/tex; mode=display">
f(n) = \sum_{r = 1} ^n b_{n,r} g(r)</script><p>为其反演公式，也称上面两式互为反演公式。</p>
<p>令</p>
<script type="math/tex; mode=display">
A = \left( \begin{matrix} a_{11} & &  \\
a_{21} & a_{22} & \\
\cdots & \cdots & \ddots & \\
a_{n1} & a_{n2} & \cdots & a_{nn} \\
\end{matrix} \right) 
,\qquad 
B = \left( \begin{matrix} b_{11} & &  \\
b_{21} & b_{22} & \\
\cdots & \cdots & \ddots & \\
b_{n1} & b_{n2} & \cdots & b_{nn} \\
\end{matrix} \right)</script><p>则上述反演公式本质上就是求矩阵 $A$ 的逆 $B$.</p>
<h2 id="二项式反演公式"><a href="#二项式反演公式" class="headerlink" title="二项式反演公式"></a>二项式反演公式</h2><p>若</p>
<script type="math/tex; mode=display">
g(n) = \sum_{r = s} ^n {n \choose r} f(r)</script><p>其中 $s \geq 0$ 则</p>
<script type="math/tex; mode=display">
f(n) = \sum_{r = s} ^n (-1)^{n-r} {n \choose r} g(r)</script><p><strong>Proof</strong>:  要证明反演公式，只需证明，对应的矩阵 $A$ 和 $B$ 互为逆即可. 令 $C = A \star B$ 则</p>
<script type="math/tex; mode=display">
\begin{aligned}
c_{ij} = \sum_{k=1} ^n a_{ik} b_{kj} & = \sum_{k =j} ^ i {i \choose k} (-1)^{k-j}{k \choose j} = 
\sum_{k=0} ^ {i-j} {i \choose k + j} (-1)^k {k + j \choose j} \\
& = {i \choose j} \sum_{k=0} ^ {i-j} (-1)^k {i - j \choose k} = \left\{ \begin{array}{ll} 1,& i=j \\  0,& i>j \end{array} \right.
\end{aligned}</script><p>证毕。</p>
<h2 id="二项式反演写成卷积形式便于-NFT"><a href="#二项式反演写成卷积形式便于-NFT" class="headerlink" title="二项式反演写成卷积形式便于 NFT"></a>二项式反演写成卷积形式便于 NFT</h2><p>不妨取 $s = 0$</p>
<script type="math/tex; mode=display">
\frac{g(n)}{n!} = \sum_{i + j = n} \frac{f(i)}{i} \cdot \frac{1}{j!}</script><p>等价于</p>
<script type="math/tex; mode=display">
\frac{f(n)}{n!} = \sum_{i + j = n} ^n \frac{g(i)}{i!} \cdot \frac{(-1)^{j}}{j!}</script><blockquote>
<p>也就是说二项式反演公式本质上是说：$\frac{1}{n!}$ 和 $\frac{(-1)^n}{n!}$ 互为卷积逆。</p>
</blockquote>
<h2 id="二项式反演公式的应用"><a href="#二项式反演公式的应用" class="headerlink" title="二项式反演公式的应用"></a>二项式反演公式的应用</h2><p>二项式反演公式在组合数学和数论中都有诸多应用，这里简单的提两个。</p>
<h3 id="错排问题-在-n-个数字-1-2-dots-n-形成-n-个排列-a-1a-2-dots-a-n-中满足-a-i-neq-i-的排列有多少个"><a href="#错排问题-在-n-个数字-1-2-dots-n-形成-n-个排列-a-1a-2-dots-a-n-中满足-a-i-neq-i-的排列有多少个" class="headerlink" title="(错排问题) 在 $n$ 个数字 $1, 2, \dots, n$ 形成 $n!$ 个排列 $a_1a_2 \dots a_n$ 中满足 $a_i \neq i$ 的排列有多少个"></a>(错排问题) 在 $n$ 个数字 $1, 2, \dots, n$ 形成 $n!$ 个排列 $a_1a_2 \dots a_n$ 中满足 $a_i \neq i$ 的排列有多少个</h3><p>不妨设答案为 $D_n$ ,则可以看出恰好有 $r$ 个  $a_i=i$的排列数为 $\left(\begin{matrix} n \\ r\end{matrix}\right) D_{n-r}$，因此</p>
<script type="math/tex; mode=display">
n! = \sum_{r = 0} ^n \left(\begin{matrix} n \\ r\end{matrix}\right) D_{n-r}</script><p>因此</p>
<script type="math/tex; mode=display">
D_n ＝ \sum_{r = 0} ^n (-1)^{n-r} \left(\begin{matrix} n \\ r\end{matrix}\right) r! = n! \sum_{r=0} ^n \frac{(-1)^r}{r!}</script><blockquote>
<p>当然 $D_n$ 还有递推关系式 $D_1=0,D_2 = 1$</p>
<script type="math/tex; mode=display">
D_n = (n-1) (D_{n-1} + D_{n-2}),\quad n \geq 2</script></blockquote>
<h3 id="满射个数-求-m-元集-A-到-n-元集-B-的满身的个数-g-m-n"><a href="#满射个数-求-m-元集-A-到-n-元集-B-的满身的个数-g-m-n" class="headerlink" title="(满射个数) 求 $m$ 元集 $A$ 到 $n$ 元集 $B$ 的满身的个数 $g(m,n)$"></a>(满射个数) 求 $m$ 元集 $A$ 到 $n$ 元集 $B$ 的满身的个数 $g(m,n)$</h3><p>类似于错排的思路，我们有</p>
<script type="math/tex; mode=display">
n^m = \sum_{r = 1} ^n \left(\begin{matrix} n \\ r\end{matrix}\right) g(m,r)</script><p>于是</p>
<script type="math/tex; mode=display">
g(m,n) =  \sum_{r = 1} ^n (-1)^{n-r} \left(\begin{matrix} n \\ r\end{matrix}\right) r^m</script><h2 id="Mobius-反演公式及其矩阵形式"><a href="#Mobius-反演公式及其矩阵形式" class="headerlink" title="Mobius 反演公式及其矩阵形式"></a>Mobius 反演公式及其矩阵形式</h2><p>由 Mobius 反演公式对应的矩阵我们有,若</p>
<script type="math/tex; mode=display">
a_{ij} = \left\{ \begin{array}{cc} 1, & j \mid i \\
0, & else. \end{array} \right.</script><p>则，其逆矩阵为</p>
<script type="math/tex; mode=display">
b_{ij} = \left\{ \begin{array}{cc} \mu (\frac{i}{j}), & j \mid i \\
0, & else. \end{array} \right.</script><blockquote>
<p>本文参考了<a href="http://www.douban.com/note/480023639/?type=like" target="_blank" rel="noopener">豆瓣</a>和<a href="http://wenku.baidu.com/link?url=0m3D-588KfEUvocmKGoW5X4z5SHrEKVOaqfLoTeRtJaJcG6oDEUh2QEbJmNa1p2OTkqFLCqhfhM-RsoOI2fkutlqL9q3xgJhIAic4HumI5W" target="_blank" rel="noopener">百度文库</a>以及 许胤龙，孙淑玲《组合数学引论》。</p>
</blockquote>
<h2 id="单位根反演"><a href="#单位根反演" class="headerlink" title="单位根反演"></a>单位根反演</h2><p>DFT 的本质就是单位根反演</p>
<script type="math/tex; mode=display">
\forall k,[n \mid k] = \frac{1}{n} \sum_{i=0}^{n-1} \omega_n^{ik}</script><p>一个应用的例子</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sum_{i=0}^{[\frac{n}{k}]} [x^{ik}] f(x) 
&= \sum_{i=0}^n [k \mid i] [x^i] f(x)\\
&=\sum_{i=0}^n [x^i] f(x) \frac{1}{k} \sum_{j=0}^{k-1} \omega_{k}^{ji}\\
&=\frac{1}{k} \sum_{i=0}^n a_i \sum_{j=0}^{k-1} \omega_{k}^{ij}\\
&=\frac{1}{k} \sum_{j=0}^{k-1} \sum_{i=0}^n a_i(\omega_k^j)^i\\
&=\frac{1}{k} \sum_{j=0}^{k-1} f(\omega_{k}^j)
\end{aligned}</script><blockquote>
<p>单位根反演转自：<a href="https://www.cnblogs.com/cjyyb/p/10838495.html" target="_blank" rel="noopener">https://www.cnblogs.com/cjyyb/p/10838495.html</a></p>
</blockquote>
<p>具体的例子求：$\sum_{i \in [0,n],k \mid i} \binom{n}{i} G^i$</p>
<p>计$f(x) = (G+x)^n$，则由上面公式</p>
<script type="math/tex; mode=display">
\sum_{i \in [0, n], k \mid i} \binom{n}{i} G^i = \frac{1}{k} \sum_{j=0}^{k-1} (G+\omega_{k}^j) ^n</script><p>即复杂度 $O(k \log n)$，如果要结果模一个 NFT friendly 的，那就更好了！</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>数论函数的 Dirichlet 积</title>
    <url>/dirichletProduct/</url>
    <content><![CDATA[<p>最近重温潘承洞老先生的《数论基础》(现代数学基础丛书 34)，确实是经典中的经典。以现代的眼光看数论函数，使得分析问题更加简洁本质，而这些都要归功于 Dirichlet 积的引入。</p>
<a id="more"></a>
<h2 id="常见数论函数"><a href="#常见数论函数" class="headerlink" title="常见数论函数"></a>常见数论函数</h2><p>为了更好的介绍 Dirichlet 积，先引入一些记号，数论函数是指定义于全体正整数集上的函数。</p>
<ol>
<li><p>$u(n) \equiv 1$</p>
</li>
<li><p>$e(n) = n$</p>
</li>
<li><p>$I(n) = \left\{\begin{array}{ll} 1, &amp; n=1, \\ 0, &amp; n&gt;1. \end{array} \right.$</p>
</li>
<li><p>$n$ 的所有正除数的个数 $d(n)$.</p>
<script type="math/tex; mode=display">
d(n)= \sum_{d|n} 1 = (a_1+1)(a_2+1) \cdots (a_n+1), \; n=p_1^{a_1} \cdots p_s^{a_s}</script></li>
<li><p>$n$ 的全部素因子的个数（按重数计）$\Omega(n)$</p>
<script type="math/tex; mode=display">
\begin{array}{ll} \Omega(1)=0 & \\
\Omega(n) = a_1 + a_2+ \cdots a_n, & n=p_1^{a_1} \cdots p_s^{a_s} \end{array}</script></li>
<li><p>$n$ 的不同素因子的个数 $\omega(n)$</p>
<script type="math/tex; mode=display">
\begin{array}{ll} \omega(1)=0 & \\
\omega(n) = s, & n=p_1^{a_1} \cdots p_s^{a_s} \end{array}</script></li>
<li><p>$n$ 的正除数的幂和函数 $\sigma_{\lambda}(n) = \sum_{d|n} d^{\lambda}$</p>
</li>
<li><p>所有不超过 $n$ 且和 $n$ 互素的正整数的个数 $\psi(n)$</p>
<script type="math/tex; mode=display">
\psi(n) = \sum_{ \begin{array}{c} 1 \leq d \leq n \\
(d,n)=1 \end{array} } 1</script><p>$\psi(n)$ 称之为 Euler 函数。</p>
</li>
<li><p>Mobius 函数 $\mu(n)$</p>
<script type="math/tex; mode=display">
\mu(n) = \left\{\begin{array}{ll} 1, & n=1, \\ (-1)^s, & n=p_1p_2 \cdots p_s, \; p_1 < p_2< \cdots < p_s. \\
0, & else. \end{array} \right.</script></li>
<li><p>Mangoldt 函数 $\Lambda(n)$</p>
<script type="math/tex; mode=display">
\Lambda(n) = \left\{\begin{array}{ll} \log p, & n= p^k, k \geq 1\\
0, & else. \end{array} \right.</script></li>
<li><p>Liouville 函数 $\lambda(n) = (-1)^{\Omega(n)}$</p>
</li>
<li><p>Euler 函数的推广(自创 dna0.49) $\psi _{\lambda}(n)$</p>
<script type="math/tex; mode=display">
\psi _{\lambda} (n) = \sum_{ \begin{array}{c} 1 \leq d \leq n \\
(d,n)=1 \end{array} } d^{\lambda}</script><p>当 $\lambda = 0$ 时即为 Euler 函数。</p>
</li>
<li><p>$M(n)=\sum_{i=1}^n \mu(i)$，则我们有 $\sum_{i=1} ^n M(\lfloor \frac{n}{i} \rfloor) = 1$</p>
</li>
<li><p>$N(n)=\sum_{i=1}^n \psi(i)$，我们有</p>
<script type="math/tex; mode=display">
\sum_{i=1} ^n N(\lfloor \frac{n}{i} \rfloor) = \frac{n(n+1)}{2}</script></li>
</ol>
<blockquote>
<p>上面 $M(n), N(n)$ 的计算公式见下面 <strong>广义 Dirichlet 积</strong> 以及 <a href="/algorithmsOfRootComplex/" title="这篇博文">这篇博文</a>。</p>
</blockquote>
<p>用下面的 Dirichlet 积的概念，大家就会对上面常见的数论函数有更深刻的认识。</p>
<h2 id="Dirichlet-积"><a href="#Dirichlet-积" class="headerlink" title="Dirichlet 积"></a>Dirichlet 积</h2><p>设$f(n)$,$g(n)$是两个数论函数，则</p>
<script type="math/tex; mode=display">
h(n) = \sum_{d|n} f(d)g(\frac{n}{d})</script><p>称为$f(n)$和$g(n)$的 Dirichlet 积,记作$h=f \star g$.</p>
<h3 id="定理-1-Dirichlet-积满足交换律和结合律即"><a href="#定理-1-Dirichlet-积满足交换律和结合律即" class="headerlink" title="定理 1 Dirichlet 积满足交换律和结合律即"></a>定理 1 Dirichlet 积满足交换律和结合律即</h3><ol>
<li>交换律： $f \star g = g \star f$</li>
<li>结合律： $(f\star g) \star h = f \star (g \star h)$</li>
</ol>
<h3 id="定理-2-Dirichlet-积的幺元存在为-I-n"><a href="#定理-2-Dirichlet-积的幺元存在为-I-n" class="headerlink" title="定理 2 Dirichlet 积的幺元存在为 $I(n)$"></a>定理 2 Dirichlet 积的幺元存在为 $I(n)$</h3><ul>
<li>由 <strong>定理 1</strong> 和 <strong>定理 2</strong> 知。数论函数全体关于 Dirichlet 积构成了一个含幺交换半群(Commutative Monoid)</li>
<li>由抽象代数的基本知识知道 Monoid 中的元如果存在逆元必然唯一，证明也是显然的</li>
<li>现在的问题就是这个 Monoid 那些元有逆元( Dirichlet 逆，以下简称逆)。或者说一个数论函数可逆的充要条件是什么。</li>
</ul>
<p>实际上，我们有如下结论</p>
<h3 id="定理-3-数论函数-f-可逆的充要条件是-f-1-neq-0-此时它的逆元为"><a href="#定理-3-数论函数-f-可逆的充要条件是-f-1-neq-0-此时它的逆元为" class="headerlink" title="定理 3 数论函数 $f$ 可逆的充要条件是 $f(1) \neq 0$.此时它的逆元为"></a>定理 3 数论函数 $f$ 可逆的充要条件是 $f(1) \neq 0$.此时它的逆元为</h3><script type="math/tex; mode=display">
f^{-1} (1) = \frac{1}{f(1)},\quad
f^{-1} (n) = \frac{-1}{f(1)} \sum _{d|n,\, d<n} f(\frac{n}{d})f^{-1}(d),\; n>1</script><p>证明是显然的，验算即知。</p>
<blockquote>
<p>至此从抽象的层次已经对数论函数的 Dirichlet 积有了一个清晰的认识，下面用这套语言考虑我们的常见函数</p>
</blockquote>
<h3 id="定理-4-Mobius-函数-mu-n-是-u-n-的逆，即"><a href="#定理-4-Mobius-函数-mu-n-是-u-n-的逆，即" class="headerlink" title="定理 4 Mobius 函数 $\mu(n)$ 是 $u(n)$ 的逆，即"></a>定理 4 Mobius 函数 $\mu(n)$ 是 $u(n)$ 的逆，即</h3><script type="math/tex; mode=display">
\sum_{ d|n } \mu(n) = \left\{ \begin{array}{ll}  1, & n=1, \\
0, & n>1. \end{array} \right.</script><p><strong>Proof</strong> : $n=1$ 时显然，不妨设 $n = p_1^{a_1} p_2^{a_2} \cdots p_s^{a_s} &gt; 0$ 则由 $\mu(n)$ 的定义</p>
<script type="math/tex; mode=display">
\begin{array}{ll}
\sum_{ d|n } \mu(n) & = \mu(1) + \mu(p_1) + \mu(p_2) + \cdots +\mu(p_s) + \cdots + \mu(p_1 p_2) + \cdots \\
& \quad + \mu(p_{s-1}p_s) + \cdots \mu(p_1 p_2 \cdots p_s) \\
& =  1 + {s \choose 1} (-1) + {s \choose 2} (-1)^2 + \cdots + {s \choose s} (-1)^s \\
&= (1-1)^s = 0 \end{array}</script><blockquote>
<p>由此可见，原来看上去复杂的不知所以然的 Mobius 函数本质上是恒为 1 的函数的 Dirichlet 逆元。</p>
</blockquote>
<h3 id="定义-5-若-F-f-star-u-则称-F-是-f-的-Mobius-变换，即"><a href="#定义-5-若-F-f-star-u-则称-F-是-f-的-Mobius-变换，即" class="headerlink" title="定义 5 若 $F=f \star u$ 则称 $F$ 是 $f$ 的 Mobius 变换，即"></a>定义 5 若 $F=f \star u$ 则称 $F$ 是 $f$ 的 Mobius 变换，即</h3><script type="math/tex; mode=display">
F(n) = \sum_{d|n} f(d)</script><p>显然此时我们有 $f=F * \mu$, 称 $f$ 是 $F$ 的 Mobius 反变换。<br>实际上，这就是我们常说的 Mobius 反演公式。</p>
<script type="math/tex; mode=display">
F(n) = \sum_{d|n} f(d) \Longleftrightarrow f(n) = \sum_{d|n} F(d) \mu(\frac{n}{d})</script><p>Mobius 变换的例子</p>
<ol>
<li>$I(n)$ 是 $\mu(n)$ 的 Mobius 变换</li>
<li>$d(n)$ 是 $u(n)$ 的 Mobius 变换</li>
<li>$e(n)$ 是 $\psi(n)$ 的 Mobius 变换</li>
<li>$\log n$ 是 $\Lambda(n)$ 的 Mobius 变换</li>
</ol>
<p>前两个由定义显然，后面两个证明如下。</p>
<script type="math/tex; mode=display">
n = \sum _{i=1} ^n 1 =
\sum _{d|n} \sum_{(n,i) = d} 1 =
\sum _{d|n} \sum_{(\frac{n}{d},k)=1} 1 =
\sum _{d|n} \psi(\frac{n}{d}) = \sum _{d|n} \psi(d)</script><p>因此</p>
<script type="math/tex; mode=display">
\psi(n) = \sum _{d|n} \mu(d) \frac{n}{d} = n \sum _{d|n} \frac{\mu(d)}{d}</script><p>另外我们还有一个证明方式</p>
<script type="math/tex; mode=display">
\psi(n) = \sum_{ \begin{array}{c} 1 \leq d \leq n \\
(d,n)=1 \end{array} } 1 ＝ \sum_{1 \leq d \leq n} \sum_{l|(d,n)} \mu(l) = \sum _{l|n} \mu(l) \sum _{1 \leq d \leq n , l|d} 1 = \sum _{l|n} \mu(l) \frac{n}{l}</script><blockquote>
<p>上述两种证明都是两种常用处理数论函数的技术手段。</p>
</blockquote>
<p>至于 $\log n$ 是 $\Lambda(n)$ 的 Mobius 变换的证明只需验算即知。</p>
<p>用上面所说的技术，我们来考虑一下推广的 Euler 函数 $\psi _{\lambda}$</p>
<script type="math/tex; mode=display">
\sum _{i=1} ^n i^{\lambda} =
\sum _{d|n} \sum_{(n,i) = d} i^{\lambda}  =
\sum _{d|n} d^{\lambda} \sum_{(\frac{n}{d},k)=1} k^{\lambda}  =
\sum _{d|n} d^{\lambda} \psi _{\lambda} (\frac{n}{d}) =
n^{\lambda} * \psi _{\lambda}</script><h3 id="可乘函数"><a href="#可乘函数" class="headerlink" title="可乘函数"></a>可乘函数</h3><p>寻找不变量一直是数学关心的问题，变化中的不变量，可以大大简化运算，并且反过来刻画了变化。具体说，寻找 Dirichlet 积不变量一方面对于那些不变量，可以简化它们操作，另一方面，由于 Dirichlet 积保持这些性质也就刻画了 Dirichlet 本身。其中这样的一个不变量就是可乘函数。</p>
<p>设 $f(n)$ 是定义在全体自然数上不恒为 0 的数论函数，若它满足条件</p>
<script type="math/tex; mode=display">
f(mn) = f(m) f(n), \quad (m,n)=1</script><p>则称之为可乘函数。若对任意正整数 $m,n$ 恒有</p>
<script type="math/tex; mode=display">
f(mn) = f(m) f(n)</script><p>则称之为完全可乘函数。</p>
<p>可乘函数例子： $\mu(n)$, $d(n)$.<br>完全可乘函数例子： $n^{\lambda}$, $I(n)$.</p>
<blockquote>
<p>显然(完全)可乘函数的的积，倒数(如果有意义的话)都是(完全)可乘函数。</p>
</blockquote>
<h3 id="定理-6-可乘函数-f-n-有如下性质"><a href="#定理-6-可乘函数-f-n-有如下性质" class="headerlink" title="定理 6 可乘函数 $f(n)$ 有如下性质"></a>定理 6 可乘函数 $f(n)$ 有如下性质</h3><ol>
<li>$f(1)=1$</li>
<li>$f(n)=f(p_1^{a_1}) f(p_2)^{a_2} \cdots f(p_s)^{a_s}, \quad n = p_1^{a_1} p_2^{a_2} \cdots p_s^{a_s}$</li>
<li>$f(n)$ 为完全可乘的充要条件是对任意的 $p$ 和 $k \geq 1$ 恒有<script type="math/tex; mode=display">f(p^k) = f ^k (p)</script></li>
<li>$f((m,n)[m,n])=f(m)f(n)$</li>
<li>$f$的逆元必然存在</li>
<li>$f$的 Mobius 变换也可逆</li>
</ol>
<blockquote>
<p>上述定理的证明是显然的，结论是重要的。</p>
</blockquote>
<h3 id="定理七-Dirchlet-积-保持可乘性"><a href="#定理七-Dirchlet-积-保持可乘性" class="headerlink" title="定理七 Dirchlet 积 保持可乘性"></a>定理七 Dirchlet 积 保持可乘性</h3><ol>
<li>若 $f$ 可乘, $g$ 可乘, 则 $h=f \star g$ 可乘;</li>
<li>若 $g$ 可乘, $h=f \star g$ 可乘，则 $f$ 可乘.</li>
</ol>
<p><strong>Proof</strong>:</p>
<ol>
<li>若 $f$ 可乘, $g$ 可乘, 则对任意满足 $(m,n)=1$ 的正整数 $m,n$,对于 $mn$ 的每一个正因子 $d$ 可以分解为 $d=d_1 d_2$ 的形式, 其中 $(d_1,d_2)=1, d_1|m, d_2|n$</li>
</ol>
<script type="math/tex; mode=display">
  h(mn) = \sum _{d|mn} f(d)g(\frac{mn}{d}) = \sum _{d_1|m} f(d_1)g(\frac{m}{d_1}) \sum _{d_2|n} f(d_2)g(\frac{n}{d_2}) = h(m)h(n)</script><ol>
<li>反证，若 $f$ 不可乘，则可以推出$h$不可乘即可。若 $f$ 不可乘,则必存在 $m,n$,$(m,n)=1$ 但是</li>
</ol>
<script type="math/tex; mode=display">
  f(mn) \neq f(m)f(n)</script><p>若 $mn=1$ , 则 $f(1) \neq f(1) f(1)$ 知 $f(1) \neq 1$. 因此 $h(1)=f(1)g(1)=f(1) \neq 1$ 矛盾于 $h$ 可乘。<br>我们选取满足上述性质的最小正整数 $mn$,即当 $d_1d_2&lt;mn$ 是恒有</p>
<script type="math/tex; mode=display">
f(d_1d_2) = f(d_1)f(d_2),\quad (d_1,d_2)=1</script><p>由 $h$ 的定义</p>
<script type="math/tex; mode=display">
\begin{array}{cl}
h(mn) = \sum_{d \mid mn} f(d) g(\frac{mn}{d}) &=
\sum_{d_1 \mid m} f(d_1) g(\frac{m}{d_1}) \sum_{d_2|m} f(d_2)g(\frac{n}{d_2}) - f(m)f(n) + f(mn) \\
&= h(m)h(n) - f(m)f(n) + f(mn) \neq h(m)h(n)
\end{array}</script><p>证毕。</p>
<blockquote>
<p>Dirichlet 积一般不保持完全可乘性。</p>
</blockquote>
<p>由 <strong>定理 6</strong> 和 <strong>定理 7</strong>，我们有如下推论: 若 $F$ 是 $f$ 的 Mobius 变换，则</p>
<ol>
<li><p>$f$ 可乘 $\Longleftrightarrow$ $F$ 可乘</p>
</li>
<li><p>$f$ 可乘，则</p>
</li>
</ol>
<script type="math/tex; mode=display">
F(n) = \sum_{d|n} f(d) =
    \prod _{p^a || n} (1+ f(p)+\cdots f(p^a))</script><ol>
<li>$f$ 可乘，则</li>
</ol>
<script type="math/tex; mode=display">
\sum _{d|n} \mu(d) f(d) = \prod _{p | n} (1 - f(p))</script><blockquote>
<p>上面 1 是定理 7.1 的直接推论，2 可由定理 6.2 的直接推论，3 是 2 的直接推论。由 3 我们可以得到著名的欧拉公式：</p>
</blockquote>
<script type="math/tex; mode=display">
\psi(n) = n \sum _{d|n} \frac{\mu(d)}{d} ＝ n \prod _{p|n} (1-\frac{1}{p})</script><h3 id="完全可乘的逆"><a href="#完全可乘的逆" class="headerlink" title="完全可乘的逆"></a>完全可乘的逆</h3><p>由于可乘函数满足 $f(1)=1$ 因此可乘函数的逆相对而言更加简单，并且它的逆也是可乘函数。但是计算逆的过程仍然很复杂，但是完全可乘函数的逆却特别简单。</p>
<h3 id="定理-8-设-f-可乘，则-f-完全可乘的充要条件是"><a href="#定理-8-设-f-可乘，则-f-完全可乘的充要条件是" class="headerlink" title="定理 8 设 $f$ 可乘，则 $f$ 完全可乘的充要条件是"></a>定理 8 设 $f$ 可乘，则 $f$ 完全可乘的充要条件是</h3><script type="math/tex; mode=display">
f^{-1}(n) = \mu(n)f(n)</script><h3 id="推广的-Mobius-反演公式"><a href="#推广的-Mobius-反演公式" class="headerlink" title="推广的 Mobius 反演公式"></a>推广的 Mobius 反演公式</h3><p>设 $g$ 完全可乘, $h= f \star g$ ,则 $f= h \star \mu g$，即</p>
<script type="math/tex; mode=display">
h(n) = \sum _{d|n} f(d)g(\frac{n}{d})
\quad \Longleftrightarrow \quad f(n) = \sum _{d|n} h(d)
\mu(\frac{n}{d})g(\frac{n}{d})</script><p>另上式中 $g=u$，上式就变成了 Mobius 反演公式。<br>由推广的 Mobius 反演公式，我们由</p>
<script type="math/tex; mode=display">
\sum _{i=1} ^n i^{\lambda} = n^{\lambda} \star \psi _{\lambda}</script><p>可知</p>
<script type="math/tex; mode=display">
\psi_{\lambda}(n) = (\sum _{i=1} ^n i^{\lambda}) \star \mu(n) n^{\lambda}</script><h2 id="广义-Dirichlet-积"><a href="#广义-Dirichlet-积" class="headerlink" title="广义 Dirichlet 积"></a>广义 Dirichlet 积</h2><p>考虑和式</p>
<script type="math/tex; mode=display">
G(x) = \sum_{n \leq x} f(n)H(\frac{x}{n})</script><p>其中 $f(n)$ 是数论函数，$H(x)$ 是 $(0,\infty)$上的函数。<br>我们记 $G = f o H$。特别的若$H(x)$在所有非整数点取值为$0$，则此时就是通常的 Dirichlet 积。<br>我们有以下性质：</p>
<script type="math/tex; mode=display">
f o (g o H) = (f*g) o H</script><p>若 $G = f o H$ 则 $H = f^{-1} o G$。<br>特别的，若 $G(x) = \sum_{n \leq x} H(\frac{x}{n})$, 则我们有</p>
<script type="math/tex; mode=display">
H(x) = \sum_{n \leq x} \mu(n) G(\frac{x}{n})</script><h4 id="一个技巧相当强大的公式-Q-x-sum-n-leq-x-mu-n-，显然表示不超过-x-的无平方因子的正整数个数，则"><a href="#一个技巧相当强大的公式-Q-x-sum-n-leq-x-mu-n-，显然表示不超过-x-的无平方因子的正整数个数，则" class="headerlink" title="一个技巧相当强大的公式 $Q(x)=\sum_{n \leq x} |\mu(n)|$，显然表示不超过 $x$ 的无平方因子的正整数个数，则"></a>一个技巧相当强大的公式 $Q(x)=\sum_{n \leq x} |\mu(n)|$，显然表示不超过 $x$ 的无平方因子的正整数个数，则</h4><script type="math/tex; mode=display">
Q(x) = \frac{6}{\pi^2} x + O(\sqrt{x})</script><p><strong>Proof</strong> ：显然我们有</p>
<script type="math/tex; mode=display">
\lfloor x \rfloor = \sum_{k \leq \sqrt{x}} Q(\frac{x}{k^2})</script><p>另一方面</p>
<script type="math/tex; mode=display">
Q(x) = \sum_{n \leq \sqrt{x}} Q(\frac{x}{n^2}) \sum_{d \mid n} \mu(d) =  \sum_{d \leq \sqrt{x}} \mu(d) \sum_{ k \leq \sqrt{\frac{x}{d^2}} } Q(\frac{x}{d^2k^2})</script><p>所以</p>
<script type="math/tex; mode=display">
\sum_{n \leq x} |\mu(n)| =  Q(x) =  \sum_{d \leq \sqrt{x}} \mu(d) \lfloor \frac{x}{d^2} \rfloor</script><p>根据上式</p>
<script type="math/tex; mode=display">
Q(x) = x \sum_{d=1}^{\infty} \frac{\mu(d)}{d^2} +O(\sqrt{x}) = \frac{6}{\pi^2} x + O(\sqrt{x})</script><h2 id="三个优美公式"><a href="#三个优美公式" class="headerlink" title="三个优美公式"></a>三个优美公式</h2><p>最后我用三个我很喜欢的公式结束这篇博文。</p>
<ol>
<li>$\sum_{n \leq x} d(n) = \sum_{n \leq x} \lfloor \frac{x}{n} \rfloor$</li>
</ol>
<script type="math/tex; mode=display">
\sum_{n \leq x} \lfloor \frac{x}{n} \rfloor =
\sum_{n \leq x} \sum_{l \leq x,\; n|l} 1 =
\sum_{l \leq x} \sum_{n|l} 1 =
\sum_{l \leq x} d(l) =
\sum_{n \leq x} d(n)</script><ol>
<li>$\sum _{n \leq x} \mu(n) \lfloor \frac{x}{n} \rfloor = 1$</li>
</ol>
<script type="math/tex; mode=display">
\sum _{n \leq x} \mu(n) \lfloor \frac{x}{n} \rfloor =
\sum _{n \leq x} \mu(n) \sum _{l \leq x,\; n|l} 1 =
\sum _{l \leq x} \sum _{n|l} \mu(n) = \sum _{l \leq x} I(n) = 1</script><ol>
<li>$\sum _{n=1} ^{\infty} \frac{\mu(n)}{n^2} = \frac{6}{\pi^2} $</li>
</ol>
<p><strong>Proof</strong>:</p>
<script type="math/tex; mode=display">
\sum _{n=1} ^{\infty} \frac{1}{n^2} \sum_{n=1} ^{\infty} \frac{\mu(n)}{n^2} = \sum_{n=1} ^{\infty} \frac{a_n}{n^2}</script><p>其中 $a_n = \sum _{d|n} \mu(d) = I(n)$，又由 $\sum _{n=1} ^{\infty} \frac{1}{n^2} = \frac{\pi^2}{6}$ 结论显然。</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Latex 编辑的一些文档</title>
    <url>/workWithLatex/</url>
    <content><![CDATA[<blockquote>
<p>很久之前写的，舍不得删，保持原貌吧</p>
</blockquote>
<p>This blog makes a record of my math work and will be update frequently.Click to view or download it.</p>
<a id="more"></a>
<h4 id="Here-are-PDF-version-of-my-math-work"><a href="#Here-are-PDF-version-of-my-math-work" class="headerlink" title="Here are PDF version of my math work"></a>Here are PDF version of my math work</h4><p><a href="1.pdf">Config of ACM-ICPC</a></p>
<p><a href="2.pdf">Some results about matrix</a></p>
<p><a href="3.pdf">Decomposition of 1 by 1/n</a></p>
<p><a href="4.pdf">Nowhere dense set and frist category set</a></p>
<p><a href="5.pdf">Relationship between Spectral Radius ,Numerical Radius and Spectral norm</a></p>
<p><a href="6.pdf">Some results about group</a></p>
<p><a href="7.pdf">The inverse of I-ba and I-ab</a></p>
<p><a href="8.pdf">example of function that only derivable on one point</a></p>
<p><a href="0.pdf">undergraduate graduation paper</a></p>
<h4 id="Here-are-Tex-version-of-my-math-work"><a href="#Here-are-Tex-version-of-my-math-work" class="headerlink" title="Here are Tex version of my math work"></a>Here are Tex version of my math work</h4><p><a href="1.tex">Config of ACM-ICPC.tex</a></p>
<p><a href="2.tex">Some results about matrix.tex</a></p>
<p><a href="3.tex">Decomposition of 1 by 1/n.tex</a></p>
<p><a href="4.tex">Nowhere dense set and frist category set.tex</a></p>
<p><a href="5.tex">Relationship between Spectral Radius ,Numerical Radius and Spectral norm.tex</a></p>
<p><a href="6.tex">Some results about group.tex</a></p>
<p><a href="7.tex">The inverse of I-ba and I-ab.tex</a></p>
<p><a href="8.tex">example of function that only derivable on one point.tex</a></p>
<h3 id="LaTex-is-a-wonderful-tool-for-Mathematics"><a href="#LaTex-is-a-wonderful-tool-for-Mathematics" class="headerlink" title="LaTex is a wonderful tool for Mathematics"></a>LaTex is a wonderful tool for Mathematics</h3>]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>根号复杂度的算法</title>
    <url>/algorithmsOfRootComplex/</url>
    <content><![CDATA[<p>ACMer 考虑算法时总会优先考虑时间复杂度，这里介绍几个优美的根号复杂度的算法</p>
<a id="more"></a>
<h2 id="s-n-sum-i-1-n-lfloor-frac-n-i-rfloor"><a href="#s-n-sum-i-1-n-lfloor-frac-n-i-rfloor" class="headerlink" title="$s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor$"></a>$s(n) = \sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor$</h2><p>由于 $\lfloor \frac{n}{i} \rfloor$ 的取值个数不会超过 $2\sqrt{n}$，所以可能存在 $O(\sqrt{n})$ 的算法：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getsum</span><span class="params">(LL n)</span></span>&#123; <span class="comment">// The code is simple and easy to understand</span></span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123; </span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        sum += (j-i+<span class="number">1</span>)*(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>事实上， $s(n)$ 表示图像 $xy=1$ 下方正整点的个数</p>
</blockquote>
<h2 id="sigma-k-n-sum-d-n-d-k"><a href="#sigma-k-n-sum-d-n-d-k" class="headerlink" title="$\sigma_k(n) = \sum_{d|n} d^k$"></a>$\sigma_k(n) = \sum_{d|n} d^k$</h2><ol>
<li>$\sigma_0(n)$ 表示正因子个数</li>
<li>$\sigma_1(n)$ 表示正因子之和</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">mypow</span><span class="params">(LL x,LL n)</span></span>&#123;</span><br><span class="line">    LL r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) r=r*x;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;  x=x*x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getr</span><span class="params">(LL n,LL k)</span></span>&#123;</span><br><span class="line">    LL r = <span class="number">0</span>,d;</span><br><span class="line">    <span class="keyword">for</span>(d=<span class="number">1</span>;d*d&lt;n;++d)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%d==<span class="number">0</span>)  r += mypow(d,k) + mypow(n/d,k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d*d == n) r+=mypow(d,k);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="f-k-n-sum-i-1-n-sigma-k-i"><a href="#f-k-n-sum-i-1-n-sigma-k-i" class="headerlink" title="$f_k(n) = \sum_{i=1}^n \sigma_k(i)$"></a>$f_k(n) = \sum_{i=1}^n \sigma_k(i)$</h2><script type="math/tex; mode=display">
f_k(n) = \sum_{i=1}^n \sigma_k(n) =
\sum_{i=1}^n \sum_{d|i} d^k = 
\sum_{d=1} d^k \sum_i ^n[d|i] =
\sum_{d=1} ^n d^k \lfloor \frac{n}{d} \rfloor</script><p>如果我们已经得到 $ts[n] = \sum_{i=1}^n i^k$ 类似问题一，我们有以下 C++ 代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">getf</span><span class="params">(LL n)</span></span>&#123;</span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123; </span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        sum += (ts[j]-ts[i<span class="number">-1</span>])*(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上我们有：</p>
<script type="math/tex; mode=display">
ts[n] = \left \lbrace 
\begin{array}{ll}
\frac{n(n+1)}{2} & k=1 \\
\frac{n(n+1)(2n+1)}{6} & k=2 \\
\frac{n^2(n+1)^2}{4} & k=3 \\ 
\end{array} \right.</script><p>更一般的我们有</p>
<script type="math/tex; mode=display">
1^p+2^p+ \dots + n^p = \sum _{k=1} ^p \; (\; \sum_{j=1} ^ {k} (-1)^{k-j} C_k^j j^p \;) \; C _{n+1} ^{k+1}</script><a href="/formulaOfPowSumOfNaturalNumber/" title="参考我的这篇博文">参考我的这篇博文</a>
<h2 id="g-n-sum-i-1-n-psi-i"><a href="#g-n-sum-i-1-n-psi-i" class="headerlink" title="$g(n) = \sum_{i=1}^n\psi(i)$"></a>$g(n) = \sum_{i=1}^n\psi(i)$</h2><p>这里 $\psi(n)$  是欧拉函数表示小于 $n$ 且和 $n$ 互素的数的个数。<br>Euler’s 乘积公式: </p>
<script type="math/tex; mode=display">
\psi(n) = n \prod _{p|n}( 1-\frac{1}{p} )</script><p>我们现在开始计算 $g(n)$</p>
<script type="math/tex; mode=display">
g(n) = \sum_{i=1}^n \psi(i) = \sum_{1 \leq x \leq y \leq n , \gcd(x,y)=1} 1</script><p>我们定义</p>
<script type="math/tex; mode=display">
g_k(n) = \sum_{i=1}^n \psi(i) = \sum_{1 \leq x \leq y \leq n , \gcd(x,y)=k} 1 = f_0(\lfloor \frac{n}{k} \rfloor)</script><p>并且 $\sum_{i=1}^n g_k(i) = \sum_{1 \leq x \leq y \leq n} 1 = \frac{n(n+1)}{2}$ ，于是我们知道</p>
<script type="math/tex; mode=display">
g(n) = \frac{n(n+1)}{2} - \sum_{k=2}^n f_0(\lfloor \frac{n}{k} \rfloor)</script><blockquote>
<p>其实这个算法复杂了，$g(n) = \sum_{i=1}^n \psi(i)= \frac{n \psi(n)}{2}$</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000006</span>;</span><br><span class="line">LL ans[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">-1</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">1</span>;ans[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;N&amp;&amp;ans[n]!=<span class="number">-1</span>) <span class="keyword">return</span> ans[n];</span><br><span class="line">    LL r = n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        r -= (j-i+<span class="number">1</span>)*getans(n/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) ans[n]=r;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Problem-hdu5608"><a href="#Problem-hdu5608" class="headerlink" title="Problem hdu5608"></a>Problem hdu5608</h2><p>已知 $n^2 -3n+2 = \sum_{d|n} f(d)$ 计算 $h(n) = \sum_{i=1}^n f(i) \mod 10^9+7$</p>
<p>由于</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n \sum_{d|i} f(d) = \sum_{i=1}^n f(i) \lfloor \frac{n}{i} \rfloor =  \sum_{i=1}^n h(\lfloor \frac{n}{i} \rfloor)</script><p>我们知道</p>
<script type="math/tex; mode=display">
\sum_{i=1}^n \sum_{d|i} f(d) = \sum_{i=1}^n i^2-3i+2 = \sum_{i=1}^n (i-1)(i-2) = \frac{n(n-1)(n-2)}{3}</script><p>所以</p>
<script type="math/tex; mode=display">
h(n) = \frac{n(n-1)(n-2)}{3} - \sum_{i=2}^n h(\lfloor \frac{n}{i} \rfloor)</script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#pragma comment(linker,"/STACK:10240000,10240000")</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;LL,LL&gt; PLL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> clr(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PB push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lrt rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrt rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,lrt</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rrt</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000006</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv3 = (M+<span class="number">1</span>)/<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> ans[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">        ans[i] = LL(i<span class="number">-1</span>)*(i<span class="number">-2</span>)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;++i)&#123;  <span class="comment">// Pretreatment acceleration</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i&lt;&lt;<span class="number">1</span>;j&lt;N;j+=i)&#123;</span><br><span class="line">            ans[j] -= ans[i];</span><br><span class="line">            <span class="keyword">if</span>(ans[j] &lt; <span class="number">0</span>) ans[j] += M;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;++i)&#123;</span><br><span class="line">        ans[i] += ans[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(ans[i] &gt; M)  ans[i] -= M;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> ans[n];</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator it = mp.<span class="built_in">find</span>(n); <span class="comment">//Memory search</span></span><br><span class="line">    <span class="keyword">if</span> (it != mp.<span class="built_in">end</span>())  <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">int</span> r = LL(n)*(n<span class="number">-1</span>)%M*(n<span class="number">-2</span>)%M*inv3%M;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i=j+<span class="number">1</span>)&#123;</span><br><span class="line">        j = n/(n/i);</span><br><span class="line">        r -= LL(j-i+<span class="number">1</span>)*getans(n/i)%M;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;<span class="number">0</span>) r+=M;</span><br><span class="line">    &#125;</span><br><span class="line">    mp.insert(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;(n,r));</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> T,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;getans(n)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>感谢 <a href="http://zimpha.github.io" target="_blank" rel="noopener">Zimpha</a> 提出上述算法</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>2016 年厦门马拉松</title>
    <url>/xiamenMarathon2016/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">日常表白 zly</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="ed129bf858d5e1657069cf592a7eababd7136305adabde97956142894a3144f9">a4417ccd9839412bfc6235b630b90e51e61d31baac8e539a84c553ae86cbb1014c7f7cd9443aff65abe0deebb457ef7a72353ba3afe7d0f0371e485008f5ca52125e77246bd9d0db08d5f9d4689483841e1d4df1ffd65fbb638504aa0806490c3e47cd36b9bfedd2da3874366f46b452bdc06d0319d3ae5497d5d74e4f9cbdae197e07b54bb48f181bfc6996143f136069c8552b645873a4329e3d65a9d0ef26a3f2500728a9156b9f3cb1ae382cfc2cc2a3598ef54c9fc070f5332ab28d5d1cdff8c6776e9265be2cbdc04923f61ae028242952adadb685d003a63533ebdb9e251e46686e1a640c278f6d5f168f6869ed6e793c189d8678c4717a0d1c958d64ab772982496d72d3125877cdb9e3a6d68c2a9292fb6bb2f9fa1428c0951eb4332994d9d8c08f32189fc501734f4d862ffd8ddeb77a516279d2298b31237ca93c93014884baa729018515760cdcfe262d82753d18558ada126f56849d0cc6565a8b8f97f8e33b3153d411e35a2d977752abf2f04c5a1a4085c9ecc00928a8b4582123fdb35ba1c3d325041ad6fbaa30bf33d37cc99754bcd0d8b80a8d8d58b9552e404d50944ff3ab8fe6c8079cc34d9d9af3dfa61b04c935d496080add1971dc8abe652588b7fc8b8c8343f8af7103df2865be28cb5ce40ffd2fcd613e101b0fc64e43b09d79434340d97aedfd56a547052a60312581d5af4c8b1f215f37c5bf0a63edc974353638234e230180ea9d27f5c8c033100c8eee83adba05f24dc9f8349e725656725834685767afcbc5a5c279c24c2e41f07d58ed550ba9666b4f96044cddf2ee59bc5196b91a9e0bfbd3e4ec12ad10e3572a4f2fda35670961ac3a5f777fd8cd3059fa94d2eb8cfd78a3e7263862bf2190eaa927e64e526afe0c1c5c12884c95d5fcf4b91e1d81e2f6a0dc6129db7bd6fc60fa9d5b883c0a58d9280a30367f8d8018d77be616c2542c67b7389a64973d3f713b2fa87d3cfb2e285f9145796c5f14b6449e9464913461b680da525a1247aa40a6ecfb0e222f2d30834ce5c7a63b40bdca83efb6dd9d8c561a4cd05dab443aafc2299d6718162ac637ac8354631da2ced5f2202153f21e96f7f75e15de40ee4d99a07195d1071db0bb6c887fcb152aec16546ce9dd6d1a3fc0a0473be86a114c9231b725532c418b73d9820c62b1e8882c6d49cc3662a39dabbcca1df61c12ac87269546d6c5cb8f38791c55454377bc37e1012eb749a2799271c4de44e001694516156b27bbca685b041ac6544bde34f3ae74ba9d50c7e907662769d7cf5c799a83e48b5d1536234bb5332e8c29387c449af81e88eb450a3049434ba3df50f9f4f7216525968732452ace0e923c8aa074b5702a123426d858cc8154103bbdd92b4883ca2e12663d56002be5be50f529edb5e2f74eaa45b46dd5df30ba35ebc01012bf3093543d80284e98a80a51cc8520167ce485d478dd3c8e09c723b13ff54383f6a5421ea97b55dfa5e176677694669316f107cbef2cb4f6ebb6d4f44c286f006ce13207e85729ea543fa7ecf85802e35c4307dcaed3cfb8fea24f5e4eeb6ba841f2707ca46210ad032e79f7dc882e2c7fc6ee9fb70e6c7f5328d4b54808651e96ab23aeaa26b7bd08b0f9f42752ea3a4324bb4904c803edf3023efed9f69895c0e67900c6666733210d0ff22f2edbd8ec885f128e26deb59b02d39e48effbe2128189aea77f4c44d06948a7f5775c0a652f1f1a4e5c4b5df78d2e5074dc9f0298cab06854e30ddfbda842487952ae737dbc9db7bec72d04596e91abfaa6af16403cbdcac3b5a6e3739f4ea9769489691ec55ed08f6637c80ea57655cc2cac0d229e6624a2d5846948188e514c8e6291c952de279de4aaa561fd3b66623742a66fd842ebb01bb319e9ea8a8a090b899a835f33df11cff36e1d325131cea14af056f677da89e22ed3732d7fdf9b324f79fc5610a0c3fad3a635a37d1ec4277da2f3ff9a05ee4562836aaaa7faee52d132eb919fbc9f8ce68cbfb2b8fcf78a65f2900668ddbacde127f16afe4869252a1a617ecfb9795b6b2331eae18a97152f0fab235dcf10d6a2687a7c31847b49eda081b368290329bafb9a219fa788b65c8b825ca40647a2e4f5351e083127f578bc4e815d1684adecae6b97b8ed74bd37ff80903f5423a49d4a67f43d8ab98bfa4a9e7f3d408ea858b2fc453cf11dd0d52ffc9d65a64c264547245cbf26e988573b30599571cd0d6a09c09baf91fa64cea4cbbf72c6502680935fd164f15c72ed27653335afdd45f470fec3e9ecda63ef54077d83cfa76b2e4b32bc8e642ced2edb77dfe2dfbc55440376b37ad6f99af21dc79641ce0029e5fc179700a24828ab87ab0ef0a075da9a24a6c94f6e32d18d8efbf7687f5076b1aa97ff65e838ca8fa464cb4b6a0edb0c76a7a0dfc154358749485091bae542fd2589f81e384f7e04097f741b3f5e1950002531a8849f5508fe403db1b99c6d218bfed5a0cbea661d15ef1cc970c6ead786e374758311b2955d4fed7a7b057953494f9b1f1cbb0d0cfc1151d15a5d2a3e8079634d8a517aedd88ee5d761bf18e6bf65b24bfc36fe8559c2346b102431cc38f44e8f86c00ed3c8dc1f7a39b61864b87e94da89ee4ab7c08c46bbd7bd12b7b51ff13fa0ae1df8cab3dceb823107a2673a95b238793d548e0fa3f9134ed8032e2202981ea541a67dcc1baa9d386f98b2500e83f35feb74a5897ab04a8fb1210fe269bc7b7e2b44d50af37bb78715903d5e4600763f18d8070c0c2254705d6b91af955012139b7fd5f3f61d1b9839509070143c1866afc082457e9d45979347abd854eee105d4543d775b5bf913280ccc77604913f6c7e384d00cca804cbf7b5b31114d129fbe13431bc549f981c605cbfe638e6a129975fcbcff5ede60c3f53e6cefa5afd8878bb5360120e015cd99df039bd9903e90d90cf773dfd85a7b8f66fc96ab14dcef40a740fc80a47eb715eef331869aaec80e3e377266bd49ca10e25f641f683b877b53ab159f634432a24aebdcfe1316ce207929aaff83a589b453925fc8f1d48d3900d3f6ae8abdc492c9f7fb058a245f0636971b7bb7124759d2afcad48dc0596f79cc1a3bb9eb7a7344b9eab29a5b59cb9d7db14504396db1e65863b895949865e03a362c738d24c72cc76c46adf889907fef0a169d0fb8e1fa046f109b97e24810cffc8e7a65e87795ca137135777ba8131abd089a6b66358576fe6862d3b5a866f516ad36695cc2fb7fca129131db6d7406f1d76a2ba90bea14ad4f1425a55b756460df1e0b328bd9814f7c65380edfce53128e70562693ac060e37d59e4d0fb106e3245fefa076c4f822acbf4b1e60939b4727de5af6cb243c55942628780a425616a2c84aea948996e2de8fdf0fdbd1c7c4453a1a5f997ba92d33b4429e35e03fa562da1bf935f68cb1ee542935b2446202bcbb3efcd2d0c125ccfc5dcca5d26f958c3ef0d075698e8a531c29f812d009fe9094a2ee8c91a6f38fdd2e3012579a2429e97b22f13d3be4947462133065eaef31ab3b4e2fa60795121bf9a4fcf1388fbafd47ead0c655cdddb3ffebcd7dd4ad03cd0fea25bf455c2561bdea83ae23fa48e51cbe08999b8738411ddeb192cfb125d517605f864a56caa99d46612cbe69a9c5f9872d96eae1586b7fc7d41a56212dc063a93c60a6f264bff99c714562505625508591675cebc9713d1c22e8498ec3dde55968ff8937ebfadf72eeccdb84afe282c1301ce3d8b1923ad52b8886c38d9580571efc99d03506a120311f9177bfc9f0c5837dee1bbb44b184d0ff534984dfb907b1d798aebb6dcba97b64e4a69a2c0544fe44899afec198ae8ad58df739952f76f40102ad468394112863914b8304ee2c967f98d60b1b7392e3e4fb767b2317a0809028ca8d31665d09aefe66de1ec32a58f7afadc301c20c8e31715162313a3b4e3569e14bfa076c996735a20171fb045a835c0e7f6c5733bc05169ce74b5d67b6e9d4acf2a7978d17b91136e2720724e5fbd047006d68297a59919b9dbd291ff089e34dbde924542d4efa5e8c0f88d9956d9622084adbfbd88e54940fe1c44ead8a127b2952d1f01e465dd256ede6d15a22c63225b8007f156284aead33869ea39ee87b9ace594116c7bb3351df0c9a18d0f563317357f958e46b2005fd8bcf84c43af10f85970131c4bf28decae809fbd394bd961eb149aa5d6ea5d97bccf789ddf50ed2014ed507834f13ce44a0af032b516b3185950c4d83bafee18f2fdcca5bf43e4917cbfbcf0cb77256bc1606494977f6333ce36ea70f89dfb2020038326e3cd15a435655822082afdfc2ea67888c0214342cefce01290fc2b552940a93c99e5ea2e3ca209277f93328b4cb08767a0943b9effa77e4054d2fb5790917cfe460ae5bd1201508dda15b45ae7b53786c7f4308d872654552406b23273af72951120dc6a760671c5df8e060bd8167616c0111bb977618e65863a2bb29e03ea8848b3f800daca9ad29403c71934f295c63c18ba14d540d638bf380739822017b16b8f3e9f10d4d49b4ed9a9aeb4135770792ee1642e6d1011597904ecaad879957c3f14bfc156dc9bcb2f16c7d77de28e5629b94eb75835998968ea5decb32fa5be5ba08d3545351c7fb1d1772975c5ca858403461e905f8494d2d4c069b500c482a3c5b23c1b079e75d499252f831ccc0e88f2a1c6e78e7ac5ed9605babd8f928cfd01023e3eb4ddb0fbe4d6893188f784a5a44091114361d9112546200c69958acdc5066bfb5b9c8b9f8f3d12632d8185b9edf51820f04d5e35cbdb94e671c2de1830a31b85f9c82e259fdbba682033cd2b32ca07e7edbec372b3ac9e0e0b5d4f51c04eec720d5d016d386f0f14ecda67430fcbcfea6381462d2bca9406562de2602ae49c6f8f26bed5f68f231f6ef1abdbe42547e3028b9dfa8a82205c8e3b693eb1d14e9bf94b63419c0b50e0019392965e71feb8805aeb779af6a58115d7d1f1d6e16ca80b979131e5423658d242cbf0c138f33b039d428959a39a6a26a178252cb72e3e7fd57561969d82b5976e8fbf0e373b8fe1f60cde1cb1d7e281de32d312f2cbbc0474a61efda0f3ccb1f64f0fb4692f72da2a4d6b43d3b88b5063e168b6050df007ab1ed3b8fa5cefd50f4963978ba2ac585fb209b06b81734cdb71d7628fa17a5a1e966fb101b5f05019034506fdb5d99210bd4f5148bdc46611618169f880d65d5df628afed53a71b3b13fd86d4891dd54987ef8a99c48f5df79043a70b8734f2014fa1ba21af375e569d0a7b9be98fe91572ffb0c264cf7a66c80ad10f810bfbbd8e0efc49ec9889e8bf1193b5b94ac4dc92108ad30123743a35b03ca38992d0a812c8eaee0d967c8dd9e918405b022d6a554f39664cf68bd</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Encrypt</tag>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Perron-Frobenius 理论</title>
    <url>/perronFrobeniusTheory/</url>
    <content><![CDATA[<p>1907 年 O.Perron 发现正矩阵的谱有特别有趣的性质。G.Frobenius 在 1908-1912 年间将 Perron 的工作推广到不可约非负矩阵的情形，并得到了新的进一步结果。Ferron-Frobenius 理论有很多证明方式，下面介绍 H.Wielandt 的优美证明。（一步步的读下去会发现很清晰明了简单）</p>
<blockquote>
<p>非负矩阵的谱半径（下面有定义）是它的一个特征值，并且这个特征值对应着非负特征向量。</p>
</blockquote>
<a id="more"></a>
<p>两个矩阵 $X$ 和 $Y$ 称为置换相似的，若存在一个置换矩阵 $P$ 满足 $P^TXP=Y$。设$A\in M_n$.称$A$为可约的，若 $A$ 置换相似于一个形如$\left( \begin{matrix}<br>B &amp; 0\\<br>C &amp; D<br>\end{matrix} \right)$ 其中 $B,D$ 是方阵，否则称 $A$ 不可约。</p>
<blockquote>
<p>$X \geq 0$ 表示矩阵的每个元素 $\geq 0$, （对向量，或者 $&gt;0$ 等情形类似定义即可）。</p>
<p>以下矩阵除非特别说明都是 $n \times n$ 矩阵 $n&gt;1$</p>
</blockquote>
<h2 id="引理-1-设-A-是不可约非负矩阵，-y-in-mathbf-R-n-backslash-lbrace-0-rbrace-且至少有一个分量为-0-则-I-A-y-的正分量的个数大于-y-的正分量个数"><a href="#引理-1-设-A-是不可约非负矩阵，-y-in-mathbf-R-n-backslash-lbrace-0-rbrace-且至少有一个分量为-0-则-I-A-y-的正分量的个数大于-y-的正分量个数" class="headerlink" title="引理 1 设 $A$ 是不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 且至少有一个分量为 0, 则 $(I+A)y$ 的正分量的个数大于 $y$ 的正分量个数"></a>引理 1 设 $A$ 是不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 且至少有一个分量为 0, 则 $(I+A)y$ 的正分量的个数大于 $y$ 的正分量个数</h2><p><strong>Proof</strong>： 设 $y$ 恰好有 $k$ 个正分量，$1 \leq k \leq n-1$。设 $P$ 是置换矩阵，使得$x=Py$的前$k$个分量为正，其它为 0，因为 $A$ 是非负矩阵，所以 $(I+A)y$的零分量个数不会超过 $n-k$。假设这个个数等于 $n-k$，则有 $y_i = 0 \Rightarrow (Ay)_i = 0$。即 $(PAP^Tx)_i = (PAy)_i = 0,\quad i=k+1,\cdots,n$，设 $B=PAP^T$. 则当 $k+1 \leq i \leq n$ 时，</p>
<script type="math/tex; mode=display">
(Bx)_i = \sum _{j=1} ^{n} b _{ij} x _j = 
\sum _{j=1} ^{k} b _{ij} x _j = 0</script><p>但当 $1 \leq j \leq k$ 时，$x_j &gt;0$。所以 $b_{ij}=0$, 其中 $k+1 \leq i \leq n,1 \leq j \leq k$ 矛盾于 $A$ 不可约，证毕。</p>
<h2 id="引理-2-设-A-是-n-阶不可约非负矩阵，-y-in-mathbf-R-n-backslash-lbrace-0-rbrace-则-I-A-n-1-y-gt-0"><a href="#引理-2-设-A-是-n-阶不可约非负矩阵，-y-in-mathbf-R-n-backslash-lbrace-0-rbrace-则-I-A-n-1-y-gt-0" class="headerlink" title="引理 2 设 $A$ 是 $n$ 阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}y&gt;0$"></a>引理 2 设 $A$ 是 $n$ 阶不可约非负矩阵，$y\in \mathbf{R}_+^{n} \backslash \lbrace 0 \rbrace $ 则 $(I+A)^{n-1}y&gt;0$</h2><h2 id="引理-3-设-n-gt-1-，则-n-阶非负矩阵-A-不可约当且仅当-I-A-n-1-gt-0"><a href="#引理-3-设-n-gt-1-，则-n-阶非负矩阵-A-不可约当且仅当-I-A-n-1-gt-0" class="headerlink" title="引理 3 设 $n&gt;1$，则 $n$ 阶非负矩阵 $A$ 不可约当且仅当 $(I+A)^{n-1}&gt;0$"></a>引理 3 设 $n&gt;1$，则 $n$ 阶非负矩阵 $A$ 不可约当且仅当 $(I+A)^{n-1}&gt;0$</h2><p><strong>Proof</strong>: 应用<strong>引理 2</strong>，考虑 $(I+A)^{n-1}e_j$ 即可。</p>
<h2 id="引理-4-一个不可约非负矩阵的非负特征向量是正特征向量"><a href="#引理-4-一个不可约非负矩阵的非负特征向量是正特征向量" class="headerlink" title="引理 4 一个不可约非负矩阵的非负特征向量是正特征向量"></a>引理 4 一个不可约非负矩阵的非负特征向量是正特征向量</h2><p><strong>Proof</strong>：设 $A$ 是不可约非负矩阵，$Ax=\lambda x, x \geq 0,x \neq 0$。显然 $\lambda \geq 0$ 我们有 $(I+A)x = (1 + \lambda)x$ ，因此$(1+A)x$与$x$有相同个数的正分量，有 <strong>引理 1</strong> 知 $x&gt;0$。</p>
<h3 id="Collatz-Wielandt-函数"><a href="#Collatz-Wielandt-函数" class="headerlink" title="Collatz-Wielandt 函数"></a>Collatz-Wielandt 函数</h3><p>设 $A$ 是一个非负矩阵。$A$ 的 Collatz－Wielandt 函数 $f_A \colon \mathbf{R}_+ ^n \backslash \lbrace 0 \rbrace  \to \mathbf{R}_+$ 定义为：</p>
<script type="math/tex; mode=display">
f_A(x) = \min _{ x _i \neq 0 } \frac{(Ax) _i }{x _i}</script><h2 id="引理-5-设-A-为非负不可约矩阵，则"><a href="#引理-5-设-A-为非负不可约矩阵，则" class="headerlink" title="引理 5 设 $A$ 为非负不可约矩阵，则"></a>引理 5 设 $A$ 为非负不可约矩阵，则</h2><ol>
<li>$f_A(tx) = f_A(x), \forall t &gt; 0$</li>
<li>$f_A(x) = \max \lbrace \rho | Ax-\rho x \geq 0 \rbrace$</li>
<li>设 $x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace$，记 $y = (I+A)^{n-1} x$ ,则 $f_A(y) \geq f_A(x)$。</li>
</ol>
<p><strong>Proof</strong>：(1),(2)显然。下证明(3)： 我们有$Ax- f_A(x)x \geq 0$，在等式两边左乘以$(I+A)^{n-1}$并利用$A$和$(I+A)^{n-1}$乘法可交换的性质，得到$A(I+A)^{n-1}x - f_A(x)(I+A)^{n-1}x \geq 0$ 即 $Ay - f_A(x)y\geq 0$ 再由（2）证毕。</p>
<blockquote>
<p>容易证明：$f_A$ 是有界函数，实际上，$f_A$ 非负且不超过 $A$ 的最大行和。</p>
<p>记$\Omega _n = \lbrace x \in \mathbf{R} _+ ^n | \sum _{i=1} ^n = 1 \rbrace$ 引理 5.1 说明，我们只需要在 $\Omega_n$ 上研究 $f_A$ 即可。显然$\Omega_n$是一个紧集，但是 $f_A$ 可能在 $\Omega _n$ 的边界不连续。</p>
<p>但是我们仍然有下面 <strong>引理 6</strong>。</p>
</blockquote>
<h2 id="引理-6-设-A-是非负不可约矩阵，则-f-A-在-mathbf-R-n-backslash-lbrace-0-rbrace-上可以取到最大值"><a href="#引理-6-设-A-是非负不可约矩阵，则-f-A-在-mathbf-R-n-backslash-lbrace-0-rbrace-上可以取到最大值" class="headerlink" title="引理 6 设 $A$ 是非负不可约矩阵，则 $f_A$ 在 $\mathbf{R}_{+} ^n \backslash \lbrace 0 \rbrace $上可以取到最大值"></a>引理 6 设 $A$ 是非负不可约矩阵，则 $f_A$ 在 $\mathbf{R}_{+} ^n \backslash \lbrace 0 \rbrace $上可以取到最大值</h2><p><strong>Proof</strong>: 记$\Delta = (I+A)^{n-1} \Omega _n = \lbrace y \mid y=(I+A)^{n-1} x ,x \in \Omega _n \rbrace$ 则 $\Delta$ 是一个紧集， 且有 <strong>引理 2</strong> 知 $\Delta$ 中向量都是正向量，因此 $f_A$ 在 $\Delta$ 上连续，由 Weierstrass 定理，$f_A$ 在某一点 $y^0 \in \Delta$ 取得 $f_A$ 在 $\Delta$ 上的最大值。记 $z^0 = y^0/ \sum_{i=1} ^n y_i ^0 \in \Omega_ n$。$\forall x \in \Omega_n$，记 $y=(I+A)^{n-1}x$ 利用 <strong>引理 5</strong> 可知</p>
<script type="math/tex; mode=display">
f_A(x) \leq f_A(y) \leq f_A(y^0) = f_A(z^0)</script><p>这就证明了 $f_A$ 在 $z^0$ 上取到它在 $\Omega_n$ 上的最大值。利用对$ \forall z \in R _+ ^n \backslash \lbrace 0 \rbrace $ 和 <strong>引理 6.1</strong> 有</p>
<script type="math/tex; mode=display">
f_A(z) = f_A(\frac{z}{\sum_{i=1}^n z_i}) \leq f_A(z^0)</script><p>可见 $f_A$ 在 $z^0$ 处取到它在 $R _+ ^n \backslash \lbrace 0 \rbrace$ 上的最大值。</p>
<h2 id="Perron-Frobenius-定理"><a href="#Perron-Frobenius-定理" class="headerlink" title="Perron-Frobenius 定理"></a>Perron-Frobenius 定理</h2><p><strong>矩阵 $A$ 的谱半径 $\rho(A)$ 定义成矩阵 $A$ 的所有特征值的绝对值的最大值。</strong></p>
<p>现在万事俱备了，下面开始介绍著名的 Perron-Frobenius 定理</p>
<h3 id="定理-7-Perron-Frobenius-设-A-是非负不可约矩阵，则下面结论成立"><a href="#定理-7-Perron-Frobenius-设-A-是非负不可约矩阵，则下面结论成立" class="headerlink" title="定理 7(Perron-Frobenius) 设$A$是非负不可约矩阵，则下面结论成立"></a>定理 7(Perron-Frobenius) 设$A$是非负不可约矩阵，则下面结论成立</h3><ol>
<li>$\rho(A)&gt;0$ 且 $\rho(A)$ 是矩阵 $A$ 的一个单特征值</li>
<li>$A$ 有一个对应于 $\rho(A)$ 的正特征向量</li>
<li>$A$ 的每个非负特征向量都对应于特征值 $\rho(A)$</li>
</ol>
<p><strong>Proof</strong>：由 <strong>引理 6</strong> 存在 $x^0 \in R _+ ^n \backslash \lbrace 0 \rbrace$ 满足 $f_A(x^0) \geq f_A(x), \forall x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace$ 记 $r=f_A(x^0)$，取 $u=(1,\cdots,1)^T$。因为 $A$ 不可约，没有零行，所以 $r \geq f_A(u) = \min \sum_ {i=1} ^n a _{ij} &gt; 0$</p>
<p>下面证明 $r$ 是 $A$ 的一个特征值，我们有: $Ax^0 - rx^0 \geq 0$，假设 $Ax^0 - rx^0 \neq 0$。由 <strong>引理 5.2</strong> 知 $(I+A)^{n-1}(Ax^0 - rx^0) &gt; 0$ 即 $Ay^0 - ry^0&gt; 0$ 其中，$y_0 = (I+A)^{n-1}x^0 &gt;0$。因此存在 $\epsilon &gt; 0$ 使得 $Ay^0 - (r+\epsilon)y^0&gt; 0$. 由<strong>引理 5.2</strong>，$f_A(y^0) \geq r+\epsilon &gt; r$ 这就与 $r=f_A(x^0)$ 的最大性矛盾。所以 $Ax^0=rx^0$。从而$r$是$A$的一个特征值，$x^0$ 是 $A$ 的一个特征向量。有 <strong>引理 4</strong> 知，$x^0$ 是正向量。<br>设 $\lambda$ 是 $A$ 的任何一个特征向量：$Ax=\lambda x$ 则 $|\lambda||x| \leq A|x|$，于是 $|\lambda| \leq f _ A(|x|) \leq r$ 这表明 $r = \rho(A)$。</p>
<blockquote>
<p>以下关于证明 $\rho(A)$ 是单特征值的部分可以不看</p>
</blockquote>
<hr>
<p>现证明 $\rho(A)$ 是单特征值，我们先证明 $\rho(A)$ 的几何重数是 1，设 $Ay = \rho(A) y,0 \neq y \in \mathbf{C}^n$ 则 $A|y|  \geq \rho(A)|y|$ 上面证明过程表明上式是等式（细品，走一遍没毛病）且 $|y|&gt;0$。可见 $A$ 的对应于 $\rho(A)$ 的特征向量不含零分量。设 $y$ 和 $z$ 是对应 $\rho(A)$ 的特征向量。则 $|y|&gt;0,|z|&gt;0.z_ 1 y-y_ 1 z$ 属于 $\rho(A)$ 的特征子空间，但 $z_ 1 y-y_ 1 z$ 的第一个分量为 0，所以它不可能是 $\rho(A)$ 的特征值，因此，$z_ 1 y-y_ 1 z＝0$，$y$ 和 $z$ 线性相关，所以 $\rho(A)$ 的几何重数为 1.</p>
<p>为了证明 $r=\rho(A)$ 是特征多项式 $\phi(\lambda) = det(\lambda I - A)$ 的单根，只需证明，导数 $\phi’(r) \neq 0$</p>
<p>用 $adj(X)$ 表示矩阵 $X$ 的 <a href="https://baike.baidu.com/item/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5/10034983?fr=aladdin" target="_blank" rel="noopener">伴随矩阵</a>。我们有</p>
<script type="math/tex; mode=display">
\phi'(\lambda) = \sum_{i=1}^n det[(\lambda I - A)(i|i)]
=tr[adj(\lambda I - A)]</script><blockquote>
<p>$X(i|j)$ 表示矩阵去掉第 $i$ 行和第 $j$ 列所剩下的矩阵</p>
</blockquote>
<p>记 $B(r)=adj(rI-A)$ 则 $\phi’(r) = tr B(r)$</p>
<script type="math/tex; mode=display">
(rI-A)B(r) = det(rI-A)I</script><p>因为 $r$ 的几何重数为 1，所以 $rank(rI-A)=n-1$，于是 $B(r) \neq 0$。设 $b$ 是$B(r)$的任意一个非零列，则$(rI-A)b=0$,因此 $b$ 是 $A$ 的对应于 $r$ 的特征向量，但是 $A$ 有一个对应于 $r$ 的特征向量 $x^0$，且因为 $r$ 的几何重数为 1，因此 $b$ 是 $x^0$ 的一个常数倍，从而 $b&gt;0$ 或者 $b<0$。这就证明了 $B(r)$ 的每一列要么是零列，要么是正向量，要么是负向量。考虑 $[B(r)]^T = adj(rI-A^T),r=\rho(A)=\rho(A^T)$。上面结论应用于 $[B(r)]^T$ 的列，所以 $B(r)>0$ 或者 $B(r)&lt;0$，从而 $\phi’(r)=tr[B(r)] \neq 0$，这就证明了 $\rho(A)$ 是单特征值。</p>
<hr>
<p>我们已经证明了(1),(2)。现在来证明(3)。设 $y&gt;0$ 是 $A^T$ 对应于 $\rho(A)$ 的特征向量，设 $x$ 是 $A$ 的任意一个非负特征向量：$Ax = \mu x$。则 $\mu y^T x = y^T Ax = \rho(A)y^Tx$, 因为 $y^Tx&gt;0$, 我们有 $\mu = \rho(A)$，证毕。</p>
<blockquote>
<p>由<strong>引理 4</strong>，$A$ 的非负特征向量实际上都是正向量，因此结论 3 可叙述成：在$A$ 的所有特征向量中，只有 $\rho(A)$ 有非负特征向量。上述证明还确定了以下结果：</p>
</blockquote>
<h2 id="定理-8-设-A-是不可约非负矩阵，则-rho-A-max-lbrace-f-A-x-x-in-mathbf-R-n-backslash-lbrace-0-rbrace-rbrace-gt-0-若-x-in-mathbf-R-n-backslash-lbrace-0-rbrace-f-A-x-rho-A-则-x-gt-0-是对应于-rho-A-的一个特征向量"><a href="#定理-8-设-A-是不可约非负矩阵，则-rho-A-max-lbrace-f-A-x-x-in-mathbf-R-n-backslash-lbrace-0-rbrace-rbrace-gt-0-若-x-in-mathbf-R-n-backslash-lbrace-0-rbrace-f-A-x-rho-A-则-x-gt-0-是对应于-rho-A-的一个特征向量" class="headerlink" title="定理 8. 设 $A$ 是不可约非负矩阵，则 $\rho(A) = \max \lbrace f_A(x)|x\in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace \rbrace &gt; 0$ , 若$ x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace ,f_A(x) = \rho(A)$ 则$x&gt;0$ 是对应于$\rho(A)$的一个特征向量"></a>定理 8. 设 $A$ 是不可约非负矩阵，则 $\rho(A) = \max \lbrace f_A(x)|x\in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace \rbrace &gt; 0$ , 若$ x \in \mathbf{R} _+ ^n \backslash \lbrace 0 \rbrace ,f_A(x) = \rho(A)$ 则$x&gt;0$ 是对应于$\rho(A)$的一个特征向量</h2><h2 id="定理-9-设-A-是一个非负矩阵，则-rho-A-是-A-的特征值，且-A-有一个对应于-rho-A-的非负特征向量"><a href="#定理-9-设-A-是一个非负矩阵，则-rho-A-是-A-的特征值，且-A-有一个对应于-rho-A-的非负特征向量" class="headerlink" title="定理 9. 设 $A$ 是一个非负矩阵，则 $\rho(A)$ 是 $A$ 的特征值，且 $A$ 有一个对应于$\rho(A)$的非负特征向量"></a>定理 9. 设 $A$ 是一个非负矩阵，则 $\rho(A)$ 是 $A$ 的特征值，且 $A$ 有一个对应于$\rho(A)$的非负特征向量</h2><p><strong>Proof</strong>：设$A$的阶数为$n$，定理对$n=1$是平凡地成立。下面设$n=2$，用$J$表示元素全为 1 的矩阵。<br>对于正整数 $k$，记 $A_k = A + \frac{1}{k} J$ 是一个正矩阵，由 Perron-Frobenius 定理，$A_k$ 在 $\Omega _n = \lbrace x \in \mathbf{R} _+ ^n | \sum _{i=1} ^n = 1 \rbrace$ 中有唯一一个对应于 $\rho(A_k)$ 的特征向量 $x^k$。</p>
<p>因为向量序列 $\lbrace x^k \rbrace$ 有界因此，由 Bolzano-Weierstrass 定理,$\lbrace x^k \rbrace $ 有收敛子列 $\lbrace x^{k_i} \rbrace: \lim _{i \to \infty } x^{k_i} = x$。显然 $x \in \Omega _n$ 因此</p>
<script type="math/tex; mode=display">
A _{k_i}x^{k _i} = \rho(A _{k _i}) x^{k _i}</script><p>注意到当 $i \to \infty$ 时， $A _{k_i} \to A , \rho(A _{k _i}) \to \rho(A)$ 从而得到 $Ax = \rho(A)x$，证毕。</p>
<blockquote>
<p>至此，Prron-Frobenius 定理介绍完毕。下面介绍一个非负矩阵特征值的界。</p>
</blockquote>
<h2 id="定理-10-设-A-是非负矩阵，则"><a href="#定理-10-设-A-是非负矩阵，则" class="headerlink" title="定理 10 设 $A$ 是非负矩阵，则"></a>定理 10 设 $A$ 是非负矩阵，则</h2><script type="math/tex; mode=display">
\min_{1 \leq i \leq n} r_i \leq \rho(A) \leq \max_{1 \leq i \leq n} r_i</script><script type="math/tex; mode=display">
\min_{1 \leq i \leq n} c_i \leq \rho(A) \leq \max_{1 \leq i \leq n} c_i</script><p>其中 $r_i, c_i$ 分别为 $A$ 的第 $i$ 行之和以及第 $i$ 列之和。</p>
<p><strong>Proof</strong>：设 $x$ 是 $A^T$ 的一个 Perron 向量(对应于谱半径的非负特征向量)。因为 $\rho(A^T)=\rho(A)$， 从而 $A^Tx=\rho(A)x$ 得到</p>
<script type="math/tex; mode=display">
\rho(A)x_i = \sum_{k=1}^n a_{ki}x_k \qquad i = 1,\cdots,n.</script><p>将这些等式相加得到 $\rho(A) \sum_{i=1}^n x_i =\sum_{k=1}^n r_k x_k$ 即</p>
<script type="math/tex; mode=display">
\rho(A)= \frac{\sum_{k=1}^n r_k x_k }{\sum_{i=1}^n x_i}</script><p>证毕。</p>
<h2 id="定理-11-Wielandt-设-A-是不可约非负矩阵，且-B-leq-A-则对于-B-的任何特征值-lambda-有"><a href="#定理-11-Wielandt-设-A-是不可约非负矩阵，且-B-leq-A-则对于-B-的任何特征值-lambda-有" class="headerlink" title="定理 11(Wielandt) 设$A$是不可约非负矩阵，且$|B| \leq A$ 则对于 $B$ 的任何特征值 $\lambda$有"></a>定理 11(Wielandt) 设$A$是不可约非负矩阵，且$|B| \leq A$ 则对于 $B$ 的任何特征值 $\lambda$有</h2><script type="math/tex; mode=display">
|\lambda| \leq \rho(A)</script><p><strong>Proof</strong>：设$Bx=\lambda x$ 则 $|B||x| \geq |\lambda||x|$，但是 $|B| \leq A$，所以 $|\lambda| |x| \leq |B||x| \leq A |x|$，由 <strong>引理 5.2</strong> 和 <strong>引理 8</strong> 知</p>
<script type="math/tex; mode=display">
|\lambda| \leq f_A(|x|) \leq \rho(A)</script><p>证毕。</p>
<p>根据谱半径的连续性，我们马上有如下推论</p>
<ol>
<li>若矩阵 $A$ 非负，且$|B| \leq A$，则 $\rho(B) \leq \rho(A)$</li>
<li>对任意矩阵$A$，$\rho(A) \leq \rho(|A|)$.(这个直接证明也可以)</li>
</ol>
<blockquote>
<p>本文源自詹兴致所著的《矩阵论》第六章。</p>
</blockquote>
<p>定理虽然很长但是整个过程十分优美，思路十分清晰，仔细分析每一步还是很容易看懂的，并且在证明的过程中就能体会为什么一开始要提出“非负不可约矩阵”的概念了，然后应用连续性把一些结果推广到非负矩阵。</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Schur 定理</title>
    <url>/schurTheorem/</url>
    <content><![CDATA[<p>在研究一个数学对象时，我们经常会对它进行分类。比如我们通常把数分为：实数，虚数；实数又分成有理数，无理数；当然也有按照正负来分的。还有整数分成素数（也叫质数）和合数，等等。现在我们谈谈矩阵的分类，以下默认矩阵是方的。<br><a id="more"></a></p>
<h2 id="数学中分类一般是按照等价关系划分等价类的"><a href="#数学中分类一般是按照等价关系划分等价类的" class="headerlink" title="数学中分类一般是按照等价关系划分等价类的"></a>数学中分类一般是按照等价关系划分等价类的</h2><p>所谓等价关系其实就是满足反身性，对称性，传递性的二元关系（总结一下我们等于号的全部性质就知道了）<br>矩阵中最常见的三种等价关系分别是</p>
<ol>
<li>相抵等价—-初等变换</li>
<li>合同等价—-合同变换</li>
<li>相似等价—-相似变换</li>
</ol>
<p>相抵等价完全由秩确定，合同变换我们一般只针对实对称矩阵处理。相似变化是我们讨论最多的也是最复杂的，我们总想把复杂的东西变简单，对于一个矩阵我们总想做变换把它变成最简单形式（称为标准型），相抵等价的标准型和对称矩阵合同等价的标准型都十分简单，但是很不幸的也是最幸运的是，并非所有的矩阵都可以相似于对角阵，相似变换标准型称为若尔当标准型，以纪念若尔当对矩阵相似变换所做的贡献。</p>
<p>然而今天主题并不是上面的任何一种，而是由伟大的数学家 Issai Schur 提出的酉相似，酉变换的概念和相应定理。</p>
<h2 id="任意复方阵酉相似于上三角矩阵"><a href="#任意复方阵酉相似于上三角矩阵" class="headerlink" title="任意复方阵酉相似于上三角矩阵"></a>任意复方阵酉相似于上三角矩阵</h2><h3 id="酉矩阵和酉相似"><a href="#酉矩阵和酉相似" class="headerlink" title="酉矩阵和酉相似"></a>酉矩阵和酉相似</h3><p>一个矩阵称为酉矩阵，如果它的共轭转置是它的逆。复矩阵 $A$ 与 $B$ 称为酉相似的，如果存在酉矩阵 $U$ 使得 $B=U^ \star AU$ ，这里$U^ \star$ 表示 $U$ 的共轭转置。</p>
<h3 id="定理-1-对任意复方阵-A-，存在酉矩阵-U-使得"><a href="#定理-1-对任意复方阵-A-，存在酉矩阵-U-使得" class="headerlink" title="定理 1.  对任意复方阵 $A$，存在酉矩阵 $U$ 使得"></a>定理 1.  <strong>对任意复方阵 $A$，存在酉矩阵 $U$ 使得</strong></h3><script type="math/tex; mode=display">
A = U \left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)U^\star</script><p>其中$\lambda_1,\lambda_2,\cdots,\lambda_n$ 为$A$的全部特征值。</p>
<p><strong>Proof</strong>：设 $\alpha_1$ 是$A$的特征值 $\lambda_1$ 对应的特征向量，将 $\alpha_1$ 扩充为$\mathbf{C}^n$的一组标准正交基 $P=(\alpha_1,\alpha_2,\cdots,\alpha_n)$ ，则 $A = P \left( \begin{matrix} \lambda_1 &amp; \star \\ \mathbf{0} &amp; B \end{matrix} \right)P^\star$ 。对复矩阵的阶数应用数学归纳法，存在$n-1$ 阶酉矩阵 $Q$ 使得</p>
<script type="math/tex; mode=display">
B = Q \left( \begin{matrix} \lambda_2 & \star & \star  \\
 & \ddots & \star \\
 & & \lambda_n \end{matrix} \right) Q^ \star</script><p>因此 </p>
<script type="math/tex; mode=display">
A = U \left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)U^\star</script><p>其中 $U = P \left( \begin{matrix} 1 &amp;  \\ &amp; Q \end{matrix} \right)$ 是 $n$ 阶酉矩阵，证毕。</p>
<h3 id="矩阵酉相似于对角阵当且仅当它是正规矩阵"><a href="#矩阵酉相似于对角阵当且仅当它是正规矩阵" class="headerlink" title="矩阵酉相似于对角阵当且仅当它是正规矩阵"></a>矩阵酉相似于对角阵当且仅当它是正规矩阵</h3><p>矩阵 $A$ 称为正规矩阵(<strong>normal matrix</strong>)，如果$ A^ \star A=AA^ \star $。显然酉矩阵，Hermite 阵，反 Hermite 阵都是正规矩阵。</p>
<h3 id="定理-2（Issai-Schur）矩阵-A-酉相似于对角阵的充分必要条件是-A-是正规矩阵"><a href="#定理-2（Issai-Schur）矩阵-A-酉相似于对角阵的充分必要条件是-A-是正规矩阵" class="headerlink" title="定理 2（Issai Schur）矩阵 $A$ 酉相似于对角阵的充分必要条件是 $A$ 是正规矩阵"></a>定理 2（Issai Schur）矩阵 $A$ 酉相似于对角阵的充分必要条件是 $A$ 是正规矩阵</h3><p><strong>Proof</strong>：必要性显然，下证明充分性：</p>
<p>由定理 1 知，存在酉矩阵 $U$ 使得：</p>
<script type="math/tex; mode=display">
A = U \left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)U^\star</script><p>若 $A$ 是正规矩阵，则有</p>
<script type="math/tex; mode=display">
\left( \begin{matrix} 
\overline{\lambda_1} &  &  &  \\
* & \overline{\lambda_2} &  &  \\
* & * & \ddots & \\
* & * & * &  \overline{\lambda_n}
\end{matrix} \right)

\left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)
=
\left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)
\left( \begin{matrix} 
\overline{\lambda_1} &  &  &  \\
\star & \overline{\lambda_2} &  &  \\
\star & \star & \ddots & \\
\star & \star & \star &  \overline{\lambda_n}
\end{matrix} \right)</script><p>考虑矩阵两端$(1,1)$位置得到:</p>
<script type="math/tex; mode=display">
\overline{\lambda_1}\lambda_1 ＝ \lambda_1 \overline{\lambda_1}+\sigma^2</script><p>其中$ \sigma^2 $是上三角矩阵</p>
<script type="math/tex; mode=display">
\left( \begin{matrix} 
\lambda_1 & \star & \star & \star \\
 & \lambda_2 & \star & \star \\
 & & \ddots & \star \\
 & & &  \lambda_n
\end{matrix} \right)</script><p>的第一行的非对角元绝对值之平方和，因此由 $\sigma^2$ 可知上三角矩阵的第一行非对角元全为 0，类似的考察矩阵两端 $(2,2)$ 的位置，一直到 $(n,n)$ 的位置即可知道上面矩阵是对角阵，证毕。</p>
<p>上述定理给出了酉相似于对角型的充分必要条件，而且条件十分易于判断。整个过程简洁优美。另外由于酉矩阵条件数恒定为 1，有其数值稳定性，因此经常用于实际计算中，例如 QR 方法涉及的两个矩阵变换 Househoulder 变换和 Givens 变换都是酉变换。</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
      </tags>
  </entry>
  <entry>
    <title>Cayley-Hamilton 定理</title>
    <url>/cayleyHamiltonTheorem/</url>
    <content><![CDATA[<p>大一学了矩阵之后，一直很喜欢它，因为它形式简洁优美，又不缺乏技巧，是抽象和具体的桥梁，又有其实用性，成为现代数学最基础的工具之一。个人认为，矩阵中最优美的定理非 Cayley-Hamilton 定理（矩阵的特征多项式是它的一个化零多项式）莫属了。</p>
<blockquote>
<p>交换环上的矩阵都有 Cayley-Hamilton 定理成立</p>
</blockquote>
<a id="more"></a>
<p>详细表述和证明如下：</p>
<script type="math/tex; mode=display">
\phi(\lambda)=det(\lambda I - A) = a_n \lambda^n + \cdots + a_1 \lambda + a_0</script><p>设$\lambda I - A$的 <a href="https://baike.baidu.com/item/%E4%BC%B4%E9%9A%8F%E7%9F%A9%E9%98%B5/10034983?fr=aladdin" target="_blank" rel="noopener">伴随矩阵</a> 为 $B$，则$B$中元素为关于 $\lambda$ 的次数小于 $n$ 的多项式，不妨设</p>
<script type="math/tex; mode=display">
B = \lambda^{n-1} B_ {n-1} + \cdots + \lambda B_1 + B_0</script><p>所以</p>
<script type="math/tex; mode=display">
(\lambda I - A)B = \lambda^n B_ {n-1} + \lambda^{n-1} (B_ {n-2} - AB_ {n-1})
+ \cdots + \lambda (B_0 - AB_1) - AB_0</script><p>又因为 $B$ 是 $A$ 的伴随矩阵，我们有 $(\lambda I - A)B = det(\lambda I - A) I$</p>
<p>比较系数得到：</p>
<script type="math/tex; mode=display">
\left\{ 
\begin{array}{l} 
B_ {n-1} = a_n I \\
B_ {n-2} - AB_ {n-1} = a_{n-1} I \\
\cdots \\
B_0 - AB_1 = a_1 I \\
-AB_0 = a_0 I
\end{array} \right.</script><p>对上式分别左乘$ A^n,A^{n-1},\cdots,A,I$得到：</p>
<script type="math/tex; mode=display">
\left\{ 
\begin{array}{l} 
A^n B_ {n-1} = a_n A^n \\
A^{n-1} B_ {n-2} - A^n B_ {n-1} = a_{n-1} A^{n-1} \\
\cdots \\
A B_0 - A^2 B_1 = a_1 A \\
-AB_0 = a_0 I
\end{array} \right.</script><p>再将上式相加得到最终结果</p>
<script type="math/tex; mode=display">
\phi(A)= a_ n A^n + a_{n-1} A^{n-1} + \cdots + a_1 A +
a_0 I = \mathbf{0}</script><p>上述定理优美在于从形式上，$\phi(\lambda)=det(\lambda I - A)$ 取 $\lambda = A$ 带入恰好也是 0（注意数字 0 和零矩阵的差别）<strong>虽然说这样做是完全没有道理</strong>。作为直接推论我们知道，一个 $n$ 阶方阵的任何次方都可以被它的不超过 $n$ 次的幂线性表出。</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Matrix</tag>
        <tag>特征多项式</tag>
      </tags>
  </entry>
  <entry>
    <title>仅在一点连续的函数例子</title>
    <url>/exampleOfFunctionOnlyContinueAtOnePoint/</url>
    <content><![CDATA[<p>在一元微积分中，有一个广为人知的结论：一元函数在一点可导，必在该点连续，即可导必连续。那么自然会有这样一个问题：</p>
<blockquote>
<p>一元函数在一点可导能否推出它在该点的一个小邻域连续呢？</p>
</blockquote>
<p>这个想法是很自然的，不严格的思考可能会认为应该是对的,但是它并不成立。下面给出一个反例：</p>
<script type="math/tex; mode=display">
f(x) = x^2 D(x) = \left\{ 
\begin{array}{ll} 
x^2 & x \in \mathbb{Q} \\
0 & x \notin \mathbb{Q} 
\end{array} \right.</script><p>其中 $D(x)$ 为 Dirichlet 函数。</p>
<a id="more"></a>
<p>容易验证函数 $f(x)$ 在 $x=0$ 处可导，但在 $x \neq 0$ 处不连续，从而否定了上述问题。</p>
<p>最后，类似地，我们还可以通过 Dirichlet 函数构造 $\mathbb{R}$ 上一些仅在有限个点连续的函数。也可以通过周期函数构造仅在所有整数点连续的函数。但是由 Baire 纲定理可以证明，不存在在所有有理数点连续，无理点间断的函数。最后 Riemann 函数给出了一个在所有有理数点间断，无理点连续的函数。这些反例使得人们对函数连续的概念有了更感性的认识。</p>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>计算器程序</title>
    <url>/calculatorWithC/</url>
    <content><![CDATA[<h2 id="计算器到处都有，有啥好写的呢"><a href="#计算器到处都有，有啥好写的呢" class="headerlink" title="计算器到处都有，有啥好写的呢"></a>计算器到处都有，有啥好写的呢</h2><p>我们在写程序时，对于长串计算，我们通常直接输入了，让计算机高级语言（例如 C++）给我们算就行了。但是，仔细想想这件事其实并不简单。</p>
<blockquote>
<p>最初想做这件事的原因是：我在大学想写一个带 GUI 界面的计算器，就在这里被卡住了。</p>
</blockquote>
<p>其实这是一个很有名的问题，大家有兴趣可以搜一下 <a href="http://baike.baidu.com/link?url=K67J7hWFkpdwOzjAA-nalFK4JqnnLI5TPtK1Dx7dOBn0P5WhAsq09j0e4qBI590vomEWc0w2gtCFWreeta0gr_" target="_blank" rel="noopener">逆波兰式</a></p>
<a id="more"></a>
<h2 id="逆波兰式"><a href="#逆波兰式" class="headerlink" title="逆波兰式"></a>逆波兰式</h2><p>逆波兰式即为后缀表达式，我们生活中算数表达式一般都是中序表达式。人类易于理解中序表达式，但计算机更容易处理后缀表达式。</p>
<h3 id="直奔解决方案"><a href="#直奔解决方案" class="headerlink" title="直奔解决方案"></a>直奔解决方案</h3><p>我们的做法基本分</p>
<ol>
<li>确定好符号集和它们的优先级</li>
<li>中序表达式转化成后缀表达式</li>
<li>根据后缀表达式得到最终结果</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x7fffffff</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">char</span> a)</span></span>&#123;    <span class="comment">//set priority level  </span></span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'='</span>||a==<span class="string">'('</span>)  <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'+'</span>||a==<span class="string">'-'</span>)  <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">if</span>(a==<span class="string">'*'</span>||a==<span class="string">'/'</span>)  <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">getsuffixexpression</span><span class="params">(<span class="built_in">string</span> a)</span></span>&#123;  </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; ope;  </span><br><span class="line">    ope.push(<span class="string">'='</span>);  </span><br><span class="line">    <span class="built_in">string</span> ans;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=a.<span class="built_in">size</span>();++i)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;=<span class="string">'0'</span>&amp;&amp;a[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">            ans.push_back(a[i]);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">'('</span>)&#123;  </span><br><span class="line">            ope.push(<span class="string">'('</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]==<span class="string">')'</span>)&#123;  </span><br><span class="line">            <span class="keyword">while</span>(!ope.empty()&amp;&amp;ope.top()!=<span class="string">'('</span>)&#123;  </span><br><span class="line">                ans.push_back(ope.top());  </span><br><span class="line">                ope.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            ope.pop();<span class="comment">// push left bracket  </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i]!=<span class="string">'+'</span>&amp;&amp;a[i]!=<span class="string">'-'</span>&amp;&amp;a[i]!=<span class="string">'*'</span>&amp;&amp;a[i]!=<span class="string">'/'</span>)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;  </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pre(a[i])&gt;pre(ope.top()))&#123;  </span><br><span class="line">            ope.push(a[i]);  </span><br><span class="line">            ans.push_back(<span class="string">' '</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">while</span>(pre(a[i])&lt;=pre(ope.top()))&#123;  </span><br><span class="line">                ans.push_back(ope.top());  </span><br><span class="line">                ope.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            ope.push(a[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">while</span>(ope.top()!=<span class="string">'='</span>)&#123;  </span><br><span class="line">        ans.push_back(ope.top());  </span><br><span class="line">        ope.pop();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getans</span><span class="params">(<span class="built_in">string</span> a)</span></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> b=getsuffixexpression(a);  </span><br><span class="line">    <span class="keyword">if</span>(b.empty())   <span class="keyword">return</span> INF;  </span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=b.<span class="built_in">size</span>();++i)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(b[i]==<span class="string">' '</span>)   <span class="keyword">continue</span>;  </span><br><span class="line">        <span class="keyword">if</span>(b[i]&gt;=<span class="string">'0'</span>&amp;&amp;b[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">            <span class="keyword">int</span> t=<span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">while</span>(i!=b.<span class="built_in">size</span>()&amp;&amp;b[i]&gt;=<span class="string">'0'</span>&amp;&amp;b[i]&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line">                t=t*<span class="number">10</span>+b[i++]-<span class="string">'0'</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            --i;  </span><br><span class="line">            s.push(t);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            <span class="keyword">int</span> x,y;  </span><br><span class="line">            <span class="keyword">if</span>(!s.empty())&#123;  </span><br><span class="line">                y=s.top();  </span><br><span class="line">                s.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(!s.empty())&#123;  </span><br><span class="line">                x=s.top();  </span><br><span class="line">                s.pop();  </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">                <span class="keyword">return</span> INF;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">switch</span>(b[i])&#123;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>:  </span><br><span class="line">                s.push(x+y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>:  </span><br><span class="line">                s.push(x-y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>:  </span><br><span class="line">                s.push(x*y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>:  </span><br><span class="line">                s.push(x/y);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">int</span> ans=s.top();  </span><br><span class="line">    s.pop();  </span><br><span class="line">    <span class="keyword">if</span>(s.empty()) <span class="keyword">return</span> ans;  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> INF;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;  </span><br><span class="line">    <span class="built_in">string</span> a;  </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)&#123;  </span><br><span class="line">        <span class="keyword">if</span>(getans(a)!=INF)&#123;  </span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;getans(a)&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Calculator</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到 Hexo</title>
    <url>/helloHexo/</url>
    <content><![CDATA[<p>首先要感谢给我们免费提供二级域名和云服务器的 <a href="https://github.com/" target="_blank" rel="noopener">github</a> 还有提供框架 <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>和主题 next（再见 next，你好 Butterfly：<a href="https://demo.jerryc.me/" target="_blank" rel="noopener">官方demo</a>或者 <a href="https://www.antmoe.com/posts/75a6347a/index.html" target="_blank" rel="noopener">官方配置方法</a>, <a href="https://blog.lete114.top/article/Butterfly-config.html" target="_blank" rel="noopener">魔性修改</a>）。在最后还有一些小技巧的汇总方便查阅，其中包括 mathjax，git 的配置，pip 和 npm的国内镜像加速设置。（将 win10 下 WSL Ubuntu20.04 作为唯一开发环境，将 VScode 作为唯一开发工具。） <strong>换主题了不再更新</strong>, 请移步到: <a href="/butterfly/" title="butterfly 主题配置">butterfly 主题配置</a></p>
<a id="more"></a>
<blockquote>
<p>本站 .com 域名不用备案，只需实名制即可</p>
<p>每次迁移都要处理 Github SSL，deploy Save，mathjax渲染, Nunjucks报错处理(对应修改local Search, feed)</p>
</blockquote>
<h2 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h2><ol>
<li><a href="https://tding.top/archives/7f189df5.html" target="_blank" rel="noopener">小丁教程：</a>安装 Hexo 并上传到 git 上(<a href="https://blog.csdn.net/grave2015/article/details/79961843" target="_blank" rel="noopener">这里超详细</a>）</li>
<li>注意 <strong>一定要把github上Pages功能打开</strong> 才行（最后enable HTTPs）</li>
<li>主题 <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a>安装</li>
<li>安装 nmp 和 pip 的 post_link note 国内加速</li>
<li><a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">mathjax渲染</a></li>
<li>Windows 下安装 markdown IDE: sublime3 + <a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> </li>
<li>Typora 写公式快捷键 <code>ctrl + shift + m</code></li>
<li>hexo文章加密 <a href="https://blog.csdn.net/qq_24495287/article/details/89025371" target="_blank" rel="noopener">方式1</a> 和 <a href="https://blog.csdn.net/cungudafa/article/details/104346521" target="_blank" rel="noopener">方式2</a></li>
<li><a href="https://www.itrhx.com/2019/09/16/A47-hexo-deployed-to-github-and-coding/" target="_blank" rel="noopener">部署代码到 Coding</a> 并把源代码提交到Coding（账号是手机号）</li>
<li><a href="https://www.bing.com/webmasters/sitescan?siteUrl=http://dna049.com/" target="_blank" rel="noopener">Bing 提交链接</a></li>
</ol>
<h3 id="这次大更新的说明-（2020-3-12）"><a href="#这次大更新的说明-（2020-3-12）" class="headerlink" title="这次大更新的说明 （2020/3/12）"></a>这次大更新的说明 （2020/3/12）</h3><p>因为我之前的失误，导致 markdown 源文件丢失，又因为备份更新的时间比较久，导致了我两年没有更新博客，所以这次我配置 hexo 的时候，有讲源码提交到 github 上去。可是最后我还是选择了 next5.1.4 主题，而没有更新到 next7.7.2</p>
<blockquote>
<p>老博客地址：<a href="https://dna049.github.io/" target="_blank" rel="noopener">https://dna049.github.io/</a> （绑定账号：<a href="https://github.com/dna049" target="_blank" rel="noopener">FDU校邮</a>）</p>
</blockquote>
<h4 id="这次迁移的工作量是巨大，但是很有意义的："><a href="#这次迁移的工作量是巨大，但是很有意义的：" class="headerlink" title="这次迁移的工作量是巨大，但是很有意义的："></a>这次迁移的工作量是巨大，但是很有意义的：</h4><ol>
<li>我把博文中个人生活部分加密了</li>
<li>http 升级到 https（超级简单）</li>
<li>域名 dna049.com 到 2022 年过期，记得到时候续费</li>
<li>加了百度统计，<del>leanCould 文章数量统计</del>，打赏，不蒜子统计博客访问量</li>
<li>加了 <a href="https://tding.top/archives/761b6f4d.html" target="_blank" rel="noopener">背景</a>， <a href="https://tding.top/archives/2bd6d82.html" target="_blank" rel="noopener">圆角设置</a>(<del>sidebar不是圆角很难受</del>，被 <a href="https://blog.maplesugar.space/" target="_blank" rel="noopener">枫糖</a>帮助解决)，<a href="https://github.com/MikeCoder/hexo-tag-cloud" target="_blank" rel="noopener">标签云</a>，<a href="https://www.liaofuzhan.com/posts/2114475547.html" target="_blank" rel="noopener">彩色 Tags 和 logo</a></li>
<li>加了 <a href="https://tding.top/archives/73ce4e7.html" target="_blank" rel="noopener">友链</a> 方式一（方式二容易出问题）</li>
<li>复习一下之前写的博文，熟练一下语法(markdown, C++, Python, Latex)，顺带查错</li>
<li>删除了一点现在看来没什么意思的博文</li>
<li>知道保存好自己修改过的 next 主题。</li>
<li>增加 <a href="https://tding.top/archives/567debe0.html" target="_blank" rel="noopener">RSS 功能</a>，<a href="https://zhuanlan.zhihu.com/p/64457116" target="_blank" rel="noopener">RSS 使用说明</a></li>
</ol>
<h3 id="Hexo功能介绍"><a href="#Hexo功能介绍" class="headerlink" title="Hexo功能介绍"></a>Hexo功能介绍</h3><ol>
<li>内部引用：<code></code></li>
<li>创建新文件夹： hexo new page newdir</li>
<li>hexo 中渲染 mathjax： <a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">看这里</a></li>
<li>设置 <a href="https://blog.csdn.net/qwerty200696/article/details/79010629" target="_blank" rel="noopener">文章置顶</a></li>
<li>安装主题next更新到稳定的 <a href="https://github.com/iissnan/hexo-theme-next/releases/tag/v5.1.4" target="_blank" rel="noopener">版本 5.1.4</a> 并 <a href="https://blog.csdn.net/loze/article/details/94210320" target="_blank" rel="noopener">配置</a> （不用看教程就能配置），不建议更新到最新版本很不稳定</li>
<li>显示更新时间： 找到 next 主题的 <code>_config.yml</code>在里面查找 <code>update</code> 会找到一个 <code>updated_at</code> 的属性改为 <code>true</code> 即可看到更新时间</li>
<li><a href="https://www.jianshu.com/p/d4a7daebfff7" target="_blank" rel="noopener">next中添加爱心</a></li>
<li>next主题记得设置tags文件夹下的index.md</li>
<li><a href="https://www.jianshu.com/p/79fe9fb9dfa0" target="_blank" rel="noopener"><del>next隐藏部分博文</del></a> </li>
<li><a href="https://blog.csdn.net/shuiyunxc/article/details/104150894" target="_blank" rel="noopener">next5.1.4 的问题</a></li>
<li><a href="https://www.dazhuanlan.com/2020/01/30/5e322259a87e5/" target="_blank" rel="noopener">Nunjucks 报错处理</a></li>
</ol>
<h3 id="mathjax-示例"><a href="#mathjax-示例" class="headerlink" title="mathjax 示例"></a>mathjax 示例</h3><h4 id="The-Quadratic-Formula"><a href="#The-Quadratic-Formula" class="headerlink" title="The Quadratic Formula"></a>The Quadratic Formula</h4><script type="math/tex; mode=display">
x = {-b \pm \sqrt{b^2-4ac} \over 2a}</script><h4 id="The-Lorenz-Equations"><a href="#The-Lorenz-Equations" class="headerlink" title="The Lorenz Equations"></a>The Lorenz Equations</h4><script type="math/tex; mode=display">
\begin{aligned}
\dot{x} & = \sigma(y-x) \\
\dot{y} & = \rho x - y - xz \\
\dot{z} & = -\beta z + xy
\end{aligned}</script><h4 id="The-Cauchy-Schwarz-Inequality"><a href="#The-Cauchy-Schwarz-Inequality" class="headerlink" title="The Cauchy-Schwarz Inequality"></a>The Cauchy-Schwarz Inequality</h4><script type="math/tex; mode=display">
\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)</script><h4 id="A-Cross-Product-Formula"><a href="#A-Cross-Product-Formula" class="headerlink" title="A Cross Product Formula"></a>A Cross Product Formula</h4><script type="math/tex; mode=display">
\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix}
\mathbf{i} & \mathbf{j} & \mathbf{k} \\
\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\
\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0
\end{vmatrix}</script><blockquote>
<p><code>\displaystyle</code> 可以让行内公式有行间公式的视觉效果</p>
</blockquote>
<h3 id="git-上传源代码到私有仓库"><a href="#git-上传源代码到私有仓库" class="headerlink" title="git 上传源代码到私有仓库"></a>git 上传源代码到私有仓库</h3><p>在博客所用的 github 账号下再建立一个私有仓库，然后，在 blog 目录下相应修改 <code>.gitignore</code> 的内容，并在 blog 目录下执行下面git命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># git remote rm origin</span></span><br><span class="line">git remote add origin https://github.com/dna049/dna049Source.git  <span class="comment"># 只需添加一次</span></span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master <span class="comment"># -u 一次之后就可以直接用 git push提交了</span></span><br></pre></td></tr></table></figure>
<h3 id="一键提交源代码"><a href="#一键提交源代码" class="headerlink" title="一键提交源代码"></a>一键提交源代码</h3><p>可以正常更新后，在 blog 目录下新建一个 <code>updateSourceCode.py</code> 文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># update source code</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment">#os.system('git init')</span></span><br><span class="line">os.system(<span class="string">'git add .'</span>)</span><br><span class="line"><span class="comment">#os.system('git remote add origin https://github.com/dna049/dna049Source.git')</span></span><br><span class="line"><span class="comment"># 上面是github 下面是 Coding</span></span><br><span class="line"><span class="comment">#os.system('git remote add origin https://e.coding.net/dna049/dna049Source.git') </span></span><br><span class="line">os.system(<span class="string">'git commit -m "update"'</span>)</span><br><span class="line">os.system(<span class="string">'git push origin master'</span>)</span><br></pre></td></tr></table></figure>
<p>以后每次在 blog 目录下执行 <code>py update.py</code> 就可以了。 </p>
<p><a href="https://shuiyunxc.gitee.io/2020/03/03/download/index/" target="_blank" rel="noopener">如何快速从GitHub下载文件</a></p>
<h3 id="nmp-安装国内镜像"><a href="#nmp-安装国内镜像" class="headerlink" title="nmp 安装国内镜像:"></a>nmp 安装国内镜像:</h3><p><code>npm config set registry https://registry.npm.taobao.org</code></p>
<h4 id="pip-安装的国内镜像在后面加-也可以一劳永逸，就是麻烦了点-："><a href="#pip-安装的国内镜像在后面加-也可以一劳永逸，就是麻烦了点-：" class="headerlink" title="pip 安装的国内镜像在后面加(也可以一劳永逸，就是麻烦了点)："></a>pip 安装的国内镜像在后面加(也可以<a href="https://www.cnblogs.com/cqliu/p/11131092.html" target="_blank" rel="noopener">一劳永逸</a>，就是麻烦了点)：</h4><p><code>-i https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
<p>pip 本地安装</p>
<ul>
<li>tar.gz 文件： <code>pip install *.tar.gz</code></li>
<li>解压好的source 文件：<code>pip install -e filePath -i ...</code>，加 <code>-i</code> 是防止要安装依赖包</li>
</ul>
<h3 id="Windows-文件比较：-FC-A-py-B-py"><a href="#Windows-文件比较：-FC-A-py-B-py" class="headerlink" title="Windows 文件比较： FC A.py B.py"></a>Windows 文件比较： <code>FC A.py B.py</code></h3><h2 id="Hexo-git-教程："><a href="#Hexo-git-教程：" class="headerlink" title="Hexo + git 教程："></a>Hexo + git 教程：</h2><h3 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h3><ul>
<li><p>安装<a href="https://git-scm.com/download" target="_blank" rel="noopener">git</a></p>
</li>
<li><p>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> （选择自动安装依赖包）</p>
</li>
<li><p>nmp添加国内镜像源： <code>npm config set registry https://registry.npm.taobao.org</code></p>
</li>
<li><p>安装<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> ： <code>npm install -g hexo-cli</code></p>
</li>
</ul>
<blockquote>
<p>以下所有跟 github 相关的内容都建议<strong>早上</strong>操作</p>
</blockquote>
<h3 id="搭建hexo："><a href="#搭建hexo：" class="headerlink" title="搭建hexo："></a>搭建hexo：</h3><p>新建一个blog文件夹，进入blog目录，依次输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">nmp install</span><br><span class="line">hexo clean <span class="comment">#可选</span></span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>在浏览器输入网址： <code>localhost:4000</code> 看到 HelloWorld 说明成功了。</p>
<h3 id="部署到-github"><a href="#部署到-github" class="headerlink" title="部署到 github"></a>部署到 github</h3><p>登录 <a href="https://github.com" target="_blank" rel="noopener">github</a> ，创建 yourname/yourname.github.io 仓库， 进入该仓库 setting，下拉到 Github Page</p>
<p>设置 master branch，Custom domain（可选），Enforce HTTPS</p>
<p>git 命令行进入 blog 目录，执行下面操作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C yourmail@example.com <span class="comment">#建议不设置密码，按回车</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub <span class="comment"># 复制公钥到系统粘贴板</span></span><br></pre></td></tr></table></figure>
<p>去 github 账号的 setting 中添加 ssh key（复制到 key 就可以了）</p>
<p>检测是否成功： <code>ssh -T git@github.com</code></p>
<p>设置全局用户信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> user.name yourname</span><br><span class="line">git config --<span class="keyword">global</span> user.email  yourmail@example.com</span><br></pre></td></tr></table></figure>
<p>在 <code>_config.yml</code> （最后一行）设置：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:yourname/yourname.github.io.git</span><br></pre></td></tr></table></figure>
<p>执行：<code>npm install hexo-deployer-git --save</code></p>
<p>然后执行： <code>hexo g -d</code> 就可以去 <code>http(s)://yourname.github.io</code> 看到自己的博客了。</p>
<h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 _config.yml"></a>配置 <code>_config.yml</code></h4><p>填写 site 信息， 设置 url ， 建议 permalink 改为 ：<code>title/</code>，设置 <code># Pagination</code> 下的 <code>per_page: 0</code>。</p>
<h4 id="配置主题，配好了修改-config-yml-的-theme-为当前主题"><a href="#配置主题，配好了修改-config-yml-的-theme-为当前主题" class="headerlink" title="配置主题，配好了修改 _config.yml 的 theme 为当前主题"></a>配置主题，配好了修改 <code>_config.yml</code> 的 theme 为当前主题</h4><blockquote>
<p>2022 年 2 月把主题更新到最新版本</p>
</blockquote>
]]></content>
      <tags>
        <tag>Theme</tag>
        <tag>Hexo</tag>
        <tag>mathjax</tag>
      </tags>
  </entry>
</search>
